
I2C_EEPROM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008c08  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e44  08008d18  08008d18  00009d18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009b5c  08009b5c  0000b1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009b5c  08009b5c  0000ab5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009b64  08009b64  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009b64  08009b64  0000ab64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009b68  08009b68  0000ab68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08009b6c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000210  200001d4  08009d40  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003e4  08009d40  0000b3e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009c30  00000000  00000000  0000b1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001850  00000000  00000000  00014e2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b0  00000000  00000000  00016680  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000791  00000000  00000000  00017030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017db4  00000000  00000000  000177c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bf13  00000000  00000000  0002f575  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086595  00000000  00000000  0003b488  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c1a1d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e08  00000000  00000000  000c1a60  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000063  00000000  00000000  000c5868  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d4 	.word	0x200001d4
 800012c:	00000000 	.word	0x00000000
 8000130:	08008d00 	.word	0x08008d00

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001d8 	.word	0x200001d8
 800014c:	08008d00 	.word	0x08008d00

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_d2lz>:
 8000b68:	b538      	push	{r3, r4, r5, lr}
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	4604      	mov	r4, r0
 8000b70:	460d      	mov	r5, r1
 8000b72:	f7ff ff23 	bl	80009bc <__aeabi_dcmplt>
 8000b76:	b928      	cbnz	r0, 8000b84 <__aeabi_d2lz+0x1c>
 8000b78:	4620      	mov	r0, r4
 8000b7a:	4629      	mov	r1, r5
 8000b7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b80:	f000 b80a 	b.w	8000b98 <__aeabi_d2ulz>
 8000b84:	4620      	mov	r0, r4
 8000b86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000b8a:	f000 f805 	bl	8000b98 <__aeabi_d2ulz>
 8000b8e:	4240      	negs	r0, r0
 8000b90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b94:	bd38      	pop	{r3, r4, r5, pc}
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2ulz>:
 8000b98:	b5d0      	push	{r4, r6, r7, lr}
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000bcc <__aeabi_d2ulz+0x34>)
 8000b9e:	4606      	mov	r6, r0
 8000ba0:	460f      	mov	r7, r1
 8000ba2:	f7ff fc99 	bl	80004d8 <__aeabi_dmul>
 8000ba6:	f7ff ff6f 	bl	8000a88 <__aeabi_d2uiz>
 8000baa:	4604      	mov	r4, r0
 8000bac:	f7ff fc1a 	bl	80003e4 <__aeabi_ui2d>
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	4b07      	ldr	r3, [pc, #28]	@ (8000bd0 <__aeabi_d2ulz+0x38>)
 8000bb4:	f7ff fc90 	bl	80004d8 <__aeabi_dmul>
 8000bb8:	4602      	mov	r2, r0
 8000bba:	460b      	mov	r3, r1
 8000bbc:	4630      	mov	r0, r6
 8000bbe:	4639      	mov	r1, r7
 8000bc0:	f7ff fad2 	bl	8000168 <__aeabi_dsub>
 8000bc4:	f7ff ff60 	bl	8000a88 <__aeabi_d2uiz>
 8000bc8:	4621      	mov	r1, r4
 8000bca:	bdd0      	pop	{r4, r6, r7, pc}
 8000bcc:	3df00000 	.word	0x3df00000
 8000bd0:	41f00000 	.word	0x41f00000

08000bd4 <__io_putchar>:
#ifdef __GNUC__
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROT0TYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
	if (ch == '\n')
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2b0a      	cmp	r3, #10
 8000be0:	d106      	bne.n	8000bf0 <__io_putchar+0x1c>
		HAL_UART_Transmit(&huart2, (uint8_t*) "\r", 1, 0xFFFF);
 8000be2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000be6:	2201      	movs	r2, #1
 8000be8:	4907      	ldr	r1, [pc, #28]	@ (8000c08 <__io_putchar+0x34>)
 8000bea:	4808      	ldr	r0, [pc, #32]	@ (8000c0c <__io_putchar+0x38>)
 8000bec:	f003 fa9c 	bl	8004128 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 8000bf0:	1d39      	adds	r1, r7, #4
 8000bf2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000bf6:	2201      	movs	r2, #1
 8000bf8:	4804      	ldr	r0, [pc, #16]	@ (8000c0c <__io_putchar+0x38>)
 8000bfa:	f003 fa95 	bl	8004128 <HAL_UART_Transmit>

	return ch;
 8000bfe:	687b      	ldr	r3, [r7, #4]
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	08008d18 	.word	0x08008d18
 8000c0c:	20000244 	.word	0x20000244

08000c10 <I2C_Scan>:
/**
 * @brief  I2C 주소 스캔 함수
 * @param  None
 * @retval None
 */
void I2C_Scan(void) {
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
	printf("\n=== I2C Address Scan ===\n");
 8000c16:	482a      	ldr	r0, [pc, #168]	@ (8000cc0 <I2C_Scan+0xb0>)
 8000c18:	f004 fbf0 	bl	80053fc <puts>
	printf("Scanning I2C bus...\n");
 8000c1c:	4829      	ldr	r0, [pc, #164]	@ (8000cc4 <I2C_Scan+0xb4>)
 8000c1e:	f004 fbed 	bl	80053fc <puts>

	i2c_scan_found = 0;
 8000c22:	4b29      	ldr	r3, [pc, #164]	@ (8000cc8 <I2C_Scan+0xb8>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	701a      	strb	r2, [r3, #0]

	for (uint8_t i = 0; i < 128; i++) {
 8000c28:	2300      	movs	r3, #0
 8000c2a:	71fb      	strb	r3, [r7, #7]
 8000c2c:	e02e      	b.n	8000c8c <I2C_Scan+0x7c>
		 * DevAddress: 확인할 슬레이브 장치의 7비트 주소. (주소 값은 8비트로 변환되어 전송되므로, 데이터시트에 나온 7비트 주소를 그대로 사용하면 됩니다.)
		 * Trials: 응답이 없을 경우, 몇 번 더 시도해볼 것인지 재시도 횟수입니다.
		 * Timeout: 각 시도마다 얼마 동안 응답을 기다릴 것인지 타임아웃 시간(ms 단위)입니다.
		 *  "특정 I2C 주소를 가진 슬레이브(Slave) 장치가 응답하는지 확인"하는 함수
		 */
		if (HAL_I2C_IsDeviceReady(&hi2c1, (uint16_t) (i << 1), 3, 5)
 8000c2e:	79fb      	ldrb	r3, [r7, #7]
 8000c30:	b29b      	uxth	r3, r3
 8000c32:	005b      	lsls	r3, r3, #1
 8000c34:	b299      	uxth	r1, r3
 8000c36:	2305      	movs	r3, #5
 8000c38:	2203      	movs	r2, #3
 8000c3a:	4824      	ldr	r0, [pc, #144]	@ (8000ccc <I2C_Scan+0xbc>)
 8000c3c:	f002 f864 	bl	8002d08 <HAL_I2C_IsDeviceReady>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d11f      	bne.n	8000c86 <I2C_Scan+0x76>
				== HAL_OK) {
			// %02X 16진수 hex 대문자 하고 두자리 패딩 만약에 한자리면 0으로 두자리로 맞춰줌
			printf("Found I2C device at address: 0x%02X (7-bit: 0x%02X)\n",
 8000c46:	79fb      	ldrb	r3, [r7, #7]
 8000c48:	005b      	lsls	r3, r3, #1
 8000c4a:	79fa      	ldrb	r2, [r7, #7]
 8000c4c:	4619      	mov	r1, r3
 8000c4e:	4820      	ldr	r0, [pc, #128]	@ (8000cd0 <I2C_Scan+0xc0>)
 8000c50:	f004 fb64 	bl	800531c <iprintf>
					(i << 1), i);

			i2c_scan_found++;
 8000c54:	4b1c      	ldr	r3, [pc, #112]	@ (8000cc8 <I2C_Scan+0xb8>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	b2da      	uxtb	r2, r3
 8000c5c:	4b1a      	ldr	r3, [pc, #104]	@ (8000cc8 <I2C_Scan+0xb8>)
 8000c5e:	701a      	strb	r2, [r3, #0]

			// K24C256 주소 범위 확인 (0xA0~0xAE)
			if ((i << 1) >= 0xA0 && (i << 1) <= 0xAE) {
 8000c60:	79fb      	ldrb	r3, [r7, #7]
 8000c62:	005b      	lsls	r3, r3, #1
 8000c64:	2b9f      	cmp	r3, #159	@ 0x9f
 8000c66:	dd0e      	ble.n	8000c86 <I2C_Scan+0x76>
 8000c68:	79fb      	ldrb	r3, [r7, #7]
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	2bae      	cmp	r3, #174	@ 0xae
 8000c6e:	dc0a      	bgt.n	8000c86 <I2C_Scan+0x76>
				eeprom_address = (i << 1);
 8000c70:	79fb      	ldrb	r3, [r7, #7]
 8000c72:	005b      	lsls	r3, r3, #1
 8000c74:	b2da      	uxtb	r2, r3
 8000c76:	4b17      	ldr	r3, [pc, #92]	@ (8000cd4 <I2C_Scan+0xc4>)
 8000c78:	701a      	strb	r2, [r3, #0]
				printf("** K24C256 EEPROM detected at 0x%02X **\n",
 8000c7a:	4b16      	ldr	r3, [pc, #88]	@ (8000cd4 <I2C_Scan+0xc4>)
 8000c7c:	781b      	ldrb	r3, [r3, #0]
 8000c7e:	4619      	mov	r1, r3
 8000c80:	4815      	ldr	r0, [pc, #84]	@ (8000cd8 <I2C_Scan+0xc8>)
 8000c82:	f004 fb4b 	bl	800531c <iprintf>
	for (uint8_t i = 0; i < 128; i++) {
 8000c86:	79fb      	ldrb	r3, [r7, #7]
 8000c88:	3301      	adds	r3, #1
 8000c8a:	71fb      	strb	r3, [r7, #7]
 8000c8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	dacc      	bge.n	8000c2e <I2C_Scan+0x1e>
						eeprom_address);
			}
		}
	}

	if (i2c_scan_found == 0) {
 8000c94:	4b0c      	ldr	r3, [pc, #48]	@ (8000cc8 <I2C_Scan+0xb8>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d103      	bne.n	8000ca4 <I2C_Scan+0x94>
		printf("No I2C devices found!\n");
 8000c9c:	480f      	ldr	r0, [pc, #60]	@ (8000cdc <I2C_Scan+0xcc>)
 8000c9e:	f004 fbad 	bl	80053fc <puts>
 8000ca2:	e005      	b.n	8000cb0 <I2C_Scan+0xa0>
	} else {
		printf("Total %d I2C device(s) found.\n", i2c_scan_found);
 8000ca4:	4b08      	ldr	r3, [pc, #32]	@ (8000cc8 <I2C_Scan+0xb8>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	4619      	mov	r1, r3
 8000caa:	480d      	ldr	r0, [pc, #52]	@ (8000ce0 <I2C_Scan+0xd0>)
 8000cac:	f004 fb36 	bl	800531c <iprintf>
	}
	printf("========================\n\n");
 8000cb0:	480c      	ldr	r0, [pc, #48]	@ (8000ce4 <I2C_Scan+0xd4>)
 8000cb2:	f004 fba3 	bl	80053fc <puts>
}
 8000cb6:	bf00      	nop
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	08008d1c 	.word	0x08008d1c
 8000cc4:	08008d38 	.word	0x08008d38
 8000cc8:	2000028c 	.word	0x2000028c
 8000ccc:	200001f0 	.word	0x200001f0
 8000cd0:	08008d4c 	.word	0x08008d4c
 8000cd4:	2000028d 	.word	0x2000028d
 8000cd8:	08008d84 	.word	0x08008d84
 8000cdc:	08008db0 	.word	0x08008db0
 8000ce0:	08008dc8 	.word	0x08008dc8
 8000ce4:	08008de8 	.word	0x08008de8

08000ce8 <EEPROM_Write>:
 * @param  mem_addr: 메모리 주소
 * @param  data: 쓸 데이터 포인터
 * @param  size: 데이터 크기
 * @retval HAL_StatusTypeDef
 */
HAL_StatusTypeDef EEPROM_Write(uint16_t mem_addr, uint8_t *data, uint16_t size) {
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b088      	sub	sp, #32
 8000cec:	af04      	add	r7, sp, #16
 8000cee:	4603      	mov	r3, r0
 8000cf0:	6039      	str	r1, [r7, #0]
 8000cf2:	80fb      	strh	r3, [r7, #6]
 8000cf4:	4613      	mov	r3, r2
 8000cf6:	80bb      	strh	r3, [r7, #4]
	HAL_StatusTypeDef status = HAL_OK;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	73fb      	strb	r3, [r7, #15]
	uint16_t bytes_to_write;
	uint16_t current_addr = mem_addr;
 8000cfc:	88fb      	ldrh	r3, [r7, #6]
 8000cfe:	817b      	strh	r3, [r7, #10]
	uint16_t data_index = 0;
 8000d00:	2300      	movs	r3, #0
 8000d02:	813b      	strh	r3, [r7, #8]

	while (size > 0) {
 8000d04:	e03a      	b.n	8000d7c <EEPROM_Write+0x94>
		// 페이지 경계를 고려한 쓰기 크기 계산
		bytes_to_write = EEPROM_PAGE_SIZE - (current_addr % EEPROM_PAGE_SIZE);
 8000d06:	897b      	ldrh	r3, [r7, #10]
 8000d08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000d0c:	b29b      	uxth	r3, r3
 8000d0e:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8000d12:	81bb      	strh	r3, [r7, #12]
		if (bytes_to_write > size)
 8000d14:	89ba      	ldrh	r2, [r7, #12]
 8000d16:	88bb      	ldrh	r3, [r7, #4]
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d901      	bls.n	8000d20 <EEPROM_Write+0x38>
			bytes_to_write = size;
 8000d1c:	88bb      	ldrh	r3, [r7, #4]
 8000d1e:	81bb      	strh	r3, [r7, #12]

		// EEPROM에 쓰기
		status = HAL_I2C_Mem_Write(&hi2c1, eeprom_address, current_addr,
 8000d20:	4b1a      	ldr	r3, [pc, #104]	@ (8000d8c <EEPROM_Write+0xa4>)
 8000d22:	781b      	ldrb	r3, [r3, #0]
 8000d24:	4618      	mov	r0, r3
 8000d26:	893b      	ldrh	r3, [r7, #8]
 8000d28:	683a      	ldr	r2, [r7, #0]
 8000d2a:	4413      	add	r3, r2
 8000d2c:	8979      	ldrh	r1, [r7, #10]
 8000d2e:	f04f 32ff 	mov.w	r2, #4294967295
 8000d32:	9202      	str	r2, [sp, #8]
 8000d34:	89ba      	ldrh	r2, [r7, #12]
 8000d36:	9201      	str	r2, [sp, #4]
 8000d38:	9300      	str	r3, [sp, #0]
 8000d3a:	2310      	movs	r3, #16
 8000d3c:	460a      	mov	r2, r1
 8000d3e:	4601      	mov	r1, r0
 8000d40:	4813      	ldr	r0, [pc, #76]	@ (8000d90 <EEPROM_Write+0xa8>)
 8000d42:	f001 fc73 	bl	800262c <HAL_I2C_Mem_Write>
 8000d46:	4603      	mov	r3, r0
 8000d48:	73fb      	strb	r3, [r7, #15]
		I2C_MEMADD_SIZE_16BIT, &data[data_index], bytes_to_write,
				HAL_MAX_DELAY);

		if (status != HAL_OK) {
 8000d4a:	7bfb      	ldrb	r3, [r7, #15]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d006      	beq.n	8000d5e <EEPROM_Write+0x76>
			printf("EEPROM Write Error at address 0x%04X\n", current_addr);
 8000d50:	897b      	ldrh	r3, [r7, #10]
 8000d52:	4619      	mov	r1, r3
 8000d54:	480f      	ldr	r0, [pc, #60]	@ (8000d94 <EEPROM_Write+0xac>)
 8000d56:	f004 fae1 	bl	800531c <iprintf>
			return status;
 8000d5a:	7bfb      	ldrb	r3, [r7, #15]
 8000d5c:	e012      	b.n	8000d84 <EEPROM_Write+0x9c>
		}

		// EEPROM 쓰기 완료 대기 (Write Cycle Time)
		HAL_Delay(5);
 8000d5e:	2005      	movs	r0, #5
 8000d60:	f000 fdaa 	bl	80018b8 <HAL_Delay>

		// 다음 쓰기를 위한 변수 업데이트
		current_addr += bytes_to_write;
 8000d64:	897a      	ldrh	r2, [r7, #10]
 8000d66:	89bb      	ldrh	r3, [r7, #12]
 8000d68:	4413      	add	r3, r2
 8000d6a:	817b      	strh	r3, [r7, #10]
		data_index += bytes_to_write;
 8000d6c:	893a      	ldrh	r2, [r7, #8]
 8000d6e:	89bb      	ldrh	r3, [r7, #12]
 8000d70:	4413      	add	r3, r2
 8000d72:	813b      	strh	r3, [r7, #8]
		size -= bytes_to_write;
 8000d74:	88ba      	ldrh	r2, [r7, #4]
 8000d76:	89bb      	ldrh	r3, [r7, #12]
 8000d78:	1ad3      	subs	r3, r2, r3
 8000d7a:	80bb      	strh	r3, [r7, #4]
	while (size > 0) {
 8000d7c:	88bb      	ldrh	r3, [r7, #4]
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d1c1      	bne.n	8000d06 <EEPROM_Write+0x1e>
	}

	return status;
 8000d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d84:	4618      	mov	r0, r3
 8000d86:	3710      	adds	r7, #16
 8000d88:	46bd      	mov	sp, r7
 8000d8a:	bd80      	pop	{r7, pc}
 8000d8c:	2000028d 	.word	0x2000028d
 8000d90:	200001f0 	.word	0x200001f0
 8000d94:	08008e04 	.word	0x08008e04

08000d98 <Test_0xB0_Device>:
//    }
//    printf("-----------------------------------------------------\n\n");
//}

void Test_0xB0_Device(void)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b092      	sub	sp, #72	@ 0x48
 8000d9c:	af04      	add	r7, sp, #16
  printf("=== Testing 0xB0 Device Identity ===\n");
 8000d9e:	48be      	ldr	r0, [pc, #760]	@ (8001098 <Test_0xB0_Device+0x300>)
 8000da0:	f004 fb2c 	bl	80053fc <puts>
  printf("Checking if 0xB0 is an extended memory block...\n\n");
 8000da4:	48bd      	ldr	r0, [pc, #756]	@ (800109c <Test_0xB0_Device+0x304>)
 8000da6:	f004 fb29 	bl	80053fc <puts>

  uint8_t write_data[] = "Block1Test";
 8000daa:	4abd      	ldr	r2, [pc, #756]	@ (80010a0 <Test_0xB0_Device+0x308>)
 8000dac:	f107 0320 	add.w	r3, r7, #32
 8000db0:	ca07      	ldmia	r2, {r0, r1, r2}
 8000db2:	c303      	stmia	r3!, {r0, r1}
 8000db4:	801a      	strh	r2, [r3, #0]
 8000db6:	3302      	adds	r3, #2
 8000db8:	0c12      	lsrs	r2, r2, #16
 8000dba:	701a      	strb	r2, [r3, #0]
  uint8_t read_data[20] = {0};
 8000dbc:	f107 030c 	add.w	r3, r7, #12
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]
  uint16_t test_addr = 0x0100;
 8000dcc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000dd0:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  HAL_StatusTypeDef status;

  // 테스트 1: EEPROM처럼 동작하는지 확인
  printf("Test 1: Writing to 0xB0 at address 0x%04X...\n", test_addr);
 8000dd2:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000dd4:	4619      	mov	r1, r3
 8000dd6:	48b3      	ldr	r0, [pc, #716]	@ (80010a4 <Test_0xB0_Device+0x30c>)
 8000dd8:	f004 faa0 	bl	800531c <iprintf>
  status = HAL_I2C_Mem_Write(&hi2c1, 0xB0, test_addr,
                             I2C_MEMADD_SIZE_16BIT, write_data,
                             strlen((char*)write_data), HAL_MAX_DELAY);
 8000ddc:	f107 0320 	add.w	r3, r7, #32
 8000de0:	4618      	mov	r0, r3
 8000de2:	f7ff f9b5 	bl	8000150 <strlen>
 8000de6:	4603      	mov	r3, r0
  status = HAL_I2C_Mem_Write(&hi2c1, 0xB0, test_addr,
 8000de8:	b29b      	uxth	r3, r3
 8000dea:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8000dec:	f04f 31ff 	mov.w	r1, #4294967295
 8000df0:	9102      	str	r1, [sp, #8]
 8000df2:	9301      	str	r3, [sp, #4]
 8000df4:	f107 0320 	add.w	r3, r7, #32
 8000df8:	9300      	str	r3, [sp, #0]
 8000dfa:	2310      	movs	r3, #16
 8000dfc:	21b0      	movs	r1, #176	@ 0xb0
 8000dfe:	48aa      	ldr	r0, [pc, #680]	@ (80010a8 <Test_0xB0_Device+0x310>)
 8000e00:	f001 fc14 	bl	800262c <HAL_I2C_Mem_Write>
 8000e04:	4603      	mov	r3, r0
 8000e06:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

  if(status == HAL_OK)
 8000e0a:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d15f      	bne.n	8000ed2 <Test_0xB0_Device+0x13a>
  {
    printf("  Write to 0xB0: SUCCESS\n");
 8000e12:	48a6      	ldr	r0, [pc, #664]	@ (80010ac <Test_0xB0_Device+0x314>)
 8000e14:	f004 faf2 	bl	80053fc <puts>
    HAL_Delay(10);
 8000e18:	200a      	movs	r0, #10
 8000e1a:	f000 fd4d 	bl	80018b8 <HAL_Delay>

    // 읽기 시도
    printf("Test 2: Reading from 0xB0 at address 0x%04X...\n", test_addr);
 8000e1e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000e20:	4619      	mov	r1, r3
 8000e22:	48a3      	ldr	r0, [pc, #652]	@ (80010b0 <Test_0xB0_Device+0x318>)
 8000e24:	f004 fa7a 	bl	800531c <iprintf>
    status = HAL_I2C_Mem_Read(&hi2c1, 0xB0, test_addr,
                              I2C_MEMADD_SIZE_16BIT, read_data,
                              strlen((char*)write_data), HAL_MAX_DELAY);
 8000e28:	f107 0320 	add.w	r3, r7, #32
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	f7ff f98f 	bl	8000150 <strlen>
 8000e32:	4603      	mov	r3, r0
    status = HAL_I2C_Mem_Read(&hi2c1, 0xB0, test_addr,
 8000e34:	b29b      	uxth	r3, r3
 8000e36:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8000e38:	f04f 31ff 	mov.w	r1, #4294967295
 8000e3c:	9102      	str	r1, [sp, #8]
 8000e3e:	9301      	str	r3, [sp, #4]
 8000e40:	f107 030c 	add.w	r3, r7, #12
 8000e44:	9300      	str	r3, [sp, #0]
 8000e46:	2310      	movs	r3, #16
 8000e48:	21b0      	movs	r1, #176	@ 0xb0
 8000e4a:	4897      	ldr	r0, [pc, #604]	@ (80010a8 <Test_0xB0_Device+0x310>)
 8000e4c:	f001 fce8 	bl	8002820 <HAL_I2C_Mem_Read>
 8000e50:	4603      	mov	r3, r0
 8000e52:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

    if(status == HAL_OK)
 8000e56:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d132      	bne.n	8000ec4 <Test_0xB0_Device+0x12c>
    {
      printf("  Read from 0xB0: SUCCESS\n");
 8000e5e:	4895      	ldr	r0, [pc, #596]	@ (80010b4 <Test_0xB0_Device+0x31c>)
 8000e60:	f004 facc 	bl	80053fc <puts>
      printf("  Write Data: \"%s\"\n", write_data);
 8000e64:	f107 0320 	add.w	r3, r7, #32
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4893      	ldr	r0, [pc, #588]	@ (80010b8 <Test_0xB0_Device+0x320>)
 8000e6c:	f004 fa56 	bl	800531c <iprintf>
      printf("  Read Data:  \"%s\"\n", read_data);
 8000e70:	f107 030c 	add.w	r3, r7, #12
 8000e74:	4619      	mov	r1, r3
 8000e76:	4891      	ldr	r0, [pc, #580]	@ (80010bc <Test_0xB0_Device+0x324>)
 8000e78:	f004 fa50 	bl	800531c <iprintf>

      if(memcmp(write_data, read_data, strlen((char*)write_data)) == 0)
 8000e7c:	f107 0320 	add.w	r3, r7, #32
 8000e80:	4618      	mov	r0, r3
 8000e82:	f7ff f965 	bl	8000150 <strlen>
 8000e86:	4602      	mov	r2, r0
 8000e88:	f107 010c 	add.w	r1, r7, #12
 8000e8c:	f107 0320 	add.w	r3, r7, #32
 8000e90:	4618      	mov	r0, r3
 8000e92:	f004 fbb5 	bl	8005600 <memcmp>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d10f      	bne.n	8000ebc <Test_0xB0_Device+0x124>
      {
        printf("\n** 0xB0 IS A VALID EEPROM BLOCK! **\n");
 8000e9c:	4888      	ldr	r0, [pc, #544]	@ (80010c0 <Test_0xB0_Device+0x328>)
 8000e9e:	f004 faad 	bl	80053fc <puts>
        printf("** Your chip is likely 64KB (512Kbit), not 32KB! **\n");
 8000ea2:	4888      	ldr	r0, [pc, #544]	@ (80010c4 <Test_0xB0_Device+0x32c>)
 8000ea4:	f004 faaa 	bl	80053fc <puts>
        printf("** Block 0 (0xA0): 32KB **\n");
 8000ea8:	4887      	ldr	r0, [pc, #540]	@ (80010c8 <Test_0xB0_Device+0x330>)
 8000eaa:	f004 faa7 	bl	80053fc <puts>
        printf("** Block 1 (0xB0): 32KB **\n");
 8000eae:	4887      	ldr	r0, [pc, #540]	@ (80010cc <Test_0xB0_Device+0x334>)
 8000eb0:	f004 faa4 	bl	80053fc <puts>
        printf("** Total: 64KB available! **\n");
 8000eb4:	4886      	ldr	r0, [pc, #536]	@ (80010d0 <Test_0xB0_Device+0x338>)
 8000eb6:	f004 faa1 	bl	80053fc <puts>
 8000eba:	e07d      	b.n	8000fb8 <Test_0xB0_Device+0x220>
      }
      else
      {
        printf("\n** Data mismatch - 0xB0 behavior unclear **\n");
 8000ebc:	4885      	ldr	r0, [pc, #532]	@ (80010d4 <Test_0xB0_Device+0x33c>)
 8000ebe:	f004 fa9d 	bl	80053fc <puts>
 8000ec2:	e079      	b.n	8000fb8 <Test_0xB0_Device+0x220>
      }
    }
    else
    {
      printf("  Read from 0xB0: FAILED\n");
 8000ec4:	4884      	ldr	r0, [pc, #528]	@ (80010d8 <Test_0xB0_Device+0x340>)
 8000ec6:	f004 fa99 	bl	80053fc <puts>
      printf("** 0xB0 accepts write but not read - unusual device **\n");
 8000eca:	4884      	ldr	r0, [pc, #528]	@ (80010dc <Test_0xB0_Device+0x344>)
 8000ecc:	f004 fa96 	bl	80053fc <puts>
 8000ed0:	e072      	b.n	8000fb8 <Test_0xB0_Device+0x220>
    }
  }
  else
  {
    printf("  Write to 0xB0: FAILED\n");
 8000ed2:	4883      	ldr	r0, [pc, #524]	@ (80010e0 <Test_0xB0_Device+0x348>)
 8000ed4:	f004 fa92 	bl	80053fc <puts>

    // 테스트 3: 다른 프로토콜 시도
    printf("\nTest 3: Trying different access methods...\n");
 8000ed8:	4882      	ldr	r0, [pc, #520]	@ (80010e4 <Test_0xB0_Device+0x34c>)
 8000eda:	f004 fa8f 	bl	80053fc <puts>

    // 8비트 주소로 시도
    status = HAL_I2C_Mem_Read(&hi2c1, 0xB0, 0x00,
 8000ede:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000ee2:	9302      	str	r3, [sp, #8]
 8000ee4:	2308      	movs	r3, #8
 8000ee6:	9301      	str	r3, [sp, #4]
 8000ee8:	f107 030c 	add.w	r3, r7, #12
 8000eec:	9300      	str	r3, [sp, #0]
 8000eee:	2301      	movs	r3, #1
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	21b0      	movs	r1, #176	@ 0xb0
 8000ef4:	486c      	ldr	r0, [pc, #432]	@ (80010a8 <Test_0xB0_Device+0x310>)
 8000ef6:	f001 fc93 	bl	8002820 <HAL_I2C_Mem_Read>
 8000efa:	4603      	mov	r3, r0
 8000efc:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
                              I2C_MEMADD_SIZE_8BIT, read_data, 8, 1000);
    if(status == HAL_OK)
 8000f00:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d11e      	bne.n	8000f46 <Test_0xB0_Device+0x1ae>
    {
      printf("  8-bit address read: SUCCESS\n");
 8000f08:	4877      	ldr	r0, [pc, #476]	@ (80010e8 <Test_0xB0_Device+0x350>)
 8000f0a:	f004 fa77 	bl	80053fc <puts>
      printf("  Data: ");
 8000f0e:	4877      	ldr	r0, [pc, #476]	@ (80010ec <Test_0xB0_Device+0x354>)
 8000f10:	f004 fa04 	bl	800531c <iprintf>
      for(int i=0; i<8; i++) printf("%02X ", read_data[i]);
 8000f14:	2300      	movs	r3, #0
 8000f16:	637b      	str	r3, [r7, #52]	@ 0x34
 8000f18:	e00b      	b.n	8000f32 <Test_0xB0_Device+0x19a>
 8000f1a:	f107 020c 	add.w	r2, r7, #12
 8000f1e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f20:	4413      	add	r3, r2
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	4619      	mov	r1, r3
 8000f26:	4872      	ldr	r0, [pc, #456]	@ (80010f0 <Test_0xB0_Device+0x358>)
 8000f28:	f004 f9f8 	bl	800531c <iprintf>
 8000f2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f2e:	3301      	adds	r3, #1
 8000f30:	637b      	str	r3, [r7, #52]	@ 0x34
 8000f32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000f34:	2b07      	cmp	r3, #7
 8000f36:	ddf0      	ble.n	8000f1a <Test_0xB0_Device+0x182>
      printf("\n");
 8000f38:	200a      	movs	r0, #10
 8000f3a:	f004 fa01 	bl	8005340 <putchar>
      printf("** 0xB0 is likely an RTC, sensor, or other I2C device **\n");
 8000f3e:	486d      	ldr	r0, [pc, #436]	@ (80010f4 <Test_0xB0_Device+0x35c>)
 8000f40:	f004 fa5c 	bl	80053fc <puts>
 8000f44:	e038      	b.n	8000fb8 <Test_0xB0_Device+0x220>
    }
    else
    {
      // 단순 수신 시도
      status = HAL_I2C_Master_Receive(&hi2c1, 0xB0, read_data, 8, 1000);
 8000f46:	f107 020c 	add.w	r2, r7, #12
 8000f4a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f4e:	9300      	str	r3, [sp, #0]
 8000f50:	2308      	movs	r3, #8
 8000f52:	21b0      	movs	r1, #176	@ 0xb0
 8000f54:	4854      	ldr	r0, [pc, #336]	@ (80010a8 <Test_0xB0_Device+0x310>)
 8000f56:	f001 f8fd 	bl	8002154 <HAL_I2C_Master_Receive>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
      if(status == HAL_OK)
 8000f60:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d11e      	bne.n	8000fa6 <Test_0xB0_Device+0x20e>
      {
        printf("  Simple receive: SUCCESS\n");
 8000f68:	4863      	ldr	r0, [pc, #396]	@ (80010f8 <Test_0xB0_Device+0x360>)
 8000f6a:	f004 fa47 	bl	80053fc <puts>
        printf("  Data: ");
 8000f6e:	485f      	ldr	r0, [pc, #380]	@ (80010ec <Test_0xB0_Device+0x354>)
 8000f70:	f004 f9d4 	bl	800531c <iprintf>
        for(int i=0; i<8; i++) printf("%02X ", read_data[i]);
 8000f74:	2300      	movs	r3, #0
 8000f76:	633b      	str	r3, [r7, #48]	@ 0x30
 8000f78:	e00b      	b.n	8000f92 <Test_0xB0_Device+0x1fa>
 8000f7a:	f107 020c 	add.w	r2, r7, #12
 8000f7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f80:	4413      	add	r3, r2
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	4619      	mov	r1, r3
 8000f86:	485a      	ldr	r0, [pc, #360]	@ (80010f0 <Test_0xB0_Device+0x358>)
 8000f88:	f004 f9c8 	bl	800531c <iprintf>
 8000f8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f8e:	3301      	adds	r3, #1
 8000f90:	633b      	str	r3, [r7, #48]	@ 0x30
 8000f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000f94:	2b07      	cmp	r3, #7
 8000f96:	ddf0      	ble.n	8000f7a <Test_0xB0_Device+0x1e2>
        printf("\n");
 8000f98:	200a      	movs	r0, #10
 8000f9a:	f004 f9d1 	bl	8005340 <putchar>
        printf("** 0xB0 responds but protocol unclear **\n");
 8000f9e:	4857      	ldr	r0, [pc, #348]	@ (80010fc <Test_0xB0_Device+0x364>)
 8000fa0:	f004 fa2c 	bl	80053fc <puts>
 8000fa4:	e008      	b.n	8000fb8 <Test_0xB0_Device+0x220>
      }
      else
      {
        printf("  All access methods: FAILED\n");
 8000fa6:	4856      	ldr	r0, [pc, #344]	@ (8001100 <Test_0xB0_Device+0x368>)
 8000fa8:	f004 fa28 	bl	80053fc <puts>
        printf("** 0xB0 detected but not accessible **\n");
 8000fac:	4855      	ldr	r0, [pc, #340]	@ (8001104 <Test_0xB0_Device+0x36c>)
 8000fae:	f004 fa25 	bl	80053fc <puts>
        printf("** Possible ghost address or bus issue **\n");
 8000fb2:	4855      	ldr	r0, [pc, #340]	@ (8001108 <Test_0xB0_Device+0x370>)
 8000fb4:	f004 fa22 	bl	80053fc <puts>
      }
    }
  }

  // 크로스 체크: 0xA0와 0xB0가 같은 메모리를 공유하는지 확인
  printf("\nTest 4: Cross-check with 0xA0...\n");
 8000fb8:	4854      	ldr	r0, [pc, #336]	@ (800110c <Test_0xB0_Device+0x374>)
 8000fba:	f004 fa1f 	bl	80053fc <puts>
  memset(read_data, 0, sizeof(read_data));
 8000fbe:	f107 030c 	add.w	r3, r7, #12
 8000fc2:	2214      	movs	r2, #20
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f004 fb2a 	bl	8005620 <memset>

  // 0xA0에 특별한 데이터 쓰기
  uint8_t marker[] = "CrossCheck";
 8000fcc:	4a50      	ldr	r2, [pc, #320]	@ (8001110 <Test_0xB0_Device+0x378>)
 8000fce:	463b      	mov	r3, r7
 8000fd0:	ca07      	ldmia	r2, {r0, r1, r2}
 8000fd2:	c303      	stmia	r3!, {r0, r1}
 8000fd4:	801a      	strh	r2, [r3, #0]
 8000fd6:	3302      	adds	r3, #2
 8000fd8:	0c12      	lsrs	r2, r2, #16
 8000fda:	701a      	strb	r2, [r3, #0]
  if(EEPROM_Write(0x0200, marker, strlen((char*)marker)) == HAL_OK)
 8000fdc:	463b      	mov	r3, r7
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f7ff f8b6 	bl	8000150 <strlen>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	b29a      	uxth	r2, r3
 8000fe8:	463b      	mov	r3, r7
 8000fea:	4619      	mov	r1, r3
 8000fec:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000ff0:	f7ff fe7a 	bl	8000ce8 <EEPROM_Write>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	f040 80a4 	bne.w	8001144 <Test_0xB0_Device+0x3ac>
  {
    HAL_Delay(10);
 8000ffc:	200a      	movs	r0, #10
 8000ffe:	f000 fc5b 	bl	80018b8 <HAL_Delay>

    // 0xB0의 같은 주소에서 읽기 시도
    status = HAL_I2C_Mem_Read(&hi2c1, 0xB0, 0x0200,
                              I2C_MEMADD_SIZE_16BIT, read_data,
                              strlen((char*)marker), HAL_MAX_DELAY);
 8001002:	463b      	mov	r3, r7
 8001004:	4618      	mov	r0, r3
 8001006:	f7ff f8a3 	bl	8000150 <strlen>
 800100a:	4603      	mov	r3, r0
    status = HAL_I2C_Mem_Read(&hi2c1, 0xB0, 0x0200,
 800100c:	b29b      	uxth	r3, r3
 800100e:	f04f 32ff 	mov.w	r2, #4294967295
 8001012:	9202      	str	r2, [sp, #8]
 8001014:	9301      	str	r3, [sp, #4]
 8001016:	f107 030c 	add.w	r3, r7, #12
 800101a:	9300      	str	r3, [sp, #0]
 800101c:	2310      	movs	r3, #16
 800101e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001022:	21b0      	movs	r1, #176	@ 0xb0
 8001024:	4820      	ldr	r0, [pc, #128]	@ (80010a8 <Test_0xB0_Device+0x310>)
 8001026:	f001 fbfb 	bl	8002820 <HAL_I2C_Mem_Read>
 800102a:	4603      	mov	r3, r0
 800102c:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d

    if(status == HAL_OK)
 8001030:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 8001034:	2b00      	cmp	r3, #0
 8001036:	d17f      	bne.n	8001138 <Test_0xB0_Device+0x3a0>
    {
      printf("  0xB0 read at 0x0200: SUCCESS\n");
 8001038:	4836      	ldr	r0, [pc, #216]	@ (8001114 <Test_0xB0_Device+0x37c>)
 800103a:	f004 f9df 	bl	80053fc <puts>
      printf("  0xA0 wrote: \"%s\"\n", marker);
 800103e:	463b      	mov	r3, r7
 8001040:	4619      	mov	r1, r3
 8001042:	4835      	ldr	r0, [pc, #212]	@ (8001118 <Test_0xB0_Device+0x380>)
 8001044:	f004 f96a 	bl	800531c <iprintf>
      printf("  0xB0 read:  \"%s\"\n", read_data);
 8001048:	f107 030c 	add.w	r3, r7, #12
 800104c:	4619      	mov	r1, r3
 800104e:	4833      	ldr	r0, [pc, #204]	@ (800111c <Test_0xB0_Device+0x384>)
 8001050:	f004 f964 	bl	800531c <iprintf>

      if(memcmp(marker, read_data, strlen((char*)marker)) == 0)
 8001054:	463b      	mov	r3, r7
 8001056:	4618      	mov	r0, r3
 8001058:	f7ff f87a 	bl	8000150 <strlen>
 800105c:	4602      	mov	r2, r0
 800105e:	f107 010c 	add.w	r1, r7, #12
 8001062:	463b      	mov	r3, r7
 8001064:	4618      	mov	r0, r3
 8001066:	f004 facb 	bl	8005600 <memcmp>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d109      	bne.n	8001084 <Test_0xB0_Device+0x2ec>
      {
        printf("\n** 0xA0 and 0xB0 share SAME memory! **\n");
 8001070:	482b      	ldr	r0, [pc, #172]	@ (8001120 <Test_0xB0_Device+0x388>)
 8001072:	f004 f9c3 	bl	80053fc <puts>
        printf("** 0xB0 is an ALIAS of 0xA0 - same 32KB chip **\n");
 8001076:	482b      	ldr	r0, [pc, #172]	@ (8001124 <Test_0xB0_Device+0x38c>)
 8001078:	f004 f9c0 	bl	80053fc <puts>
        printf("** Your chip reports multiple addresses **\n");
 800107c:	482a      	ldr	r0, [pc, #168]	@ (8001128 <Test_0xB0_Device+0x390>)
 800107e:	f004 f9bd 	bl	80053fc <puts>
 8001082:	e05f      	b.n	8001144 <Test_0xB0_Device+0x3ac>
      }
      else
      {
        printf("\n** 0xA0 and 0xB0 have DIFFERENT data! **\n");
 8001084:	4829      	ldr	r0, [pc, #164]	@ (800112c <Test_0xB0_Device+0x394>)
 8001086:	f004 f9b9 	bl	80053fc <puts>
        printf("** They are INDEPENDENT memory blocks **\n");
 800108a:	4829      	ldr	r0, [pc, #164]	@ (8001130 <Test_0xB0_Device+0x398>)
 800108c:	f004 f9b6 	bl	80053fc <puts>
        printf("** Total 64KB confirmed! **\n");
 8001090:	4828      	ldr	r0, [pc, #160]	@ (8001134 <Test_0xB0_Device+0x39c>)
 8001092:	f004 f9b3 	bl	80053fc <puts>
 8001096:	e055      	b.n	8001144 <Test_0xB0_Device+0x3ac>
 8001098:	08009068 	.word	0x08009068
 800109c:	08009090 	.word	0x08009090
 80010a0:	080095fc 	.word	0x080095fc
 80010a4:	080090c4 	.word	0x080090c4
 80010a8:	200001f0 	.word	0x200001f0
 80010ac:	080090f4 	.word	0x080090f4
 80010b0:	08009110 	.word	0x08009110
 80010b4:	08009140 	.word	0x08009140
 80010b8:	0800915c 	.word	0x0800915c
 80010bc:	08009170 	.word	0x08009170
 80010c0:	08009184 	.word	0x08009184
 80010c4:	080091ac 	.word	0x080091ac
 80010c8:	080091e0 	.word	0x080091e0
 80010cc:	080091fc 	.word	0x080091fc
 80010d0:	08009218 	.word	0x08009218
 80010d4:	08009238 	.word	0x08009238
 80010d8:	08009268 	.word	0x08009268
 80010dc:	08009284 	.word	0x08009284
 80010e0:	080092bc 	.word	0x080092bc
 80010e4:	080092d4 	.word	0x080092d4
 80010e8:	08009300 	.word	0x08009300
 80010ec:	08009320 	.word	0x08009320
 80010f0:	0800932c 	.word	0x0800932c
 80010f4:	08009334 	.word	0x08009334
 80010f8:	08009370 	.word	0x08009370
 80010fc:	0800938c 	.word	0x0800938c
 8001100:	080093b8 	.word	0x080093b8
 8001104:	080093d8 	.word	0x080093d8
 8001108:	08009400 	.word	0x08009400
 800110c:	0800942c 	.word	0x0800942c
 8001110:	08009608 	.word	0x08009608
 8001114:	08009450 	.word	0x08009450
 8001118:	08009470 	.word	0x08009470
 800111c:	08009484 	.word	0x08009484
 8001120:	08009498 	.word	0x08009498
 8001124:	080094c0 	.word	0x080094c0
 8001128:	080094f0 	.word	0x080094f0
 800112c:	0800951c 	.word	0x0800951c
 8001130:	08009548 	.word	0x08009548
 8001134:	08009574 	.word	0x08009574
      }
    }
    else
    {
      printf("  0xB0 read at 0x0200: FAILED\n");
 8001138:	4806      	ldr	r0, [pc, #24]	@ (8001154 <Test_0xB0_Device+0x3bc>)
 800113a:	f004 f95f 	bl	80053fc <puts>
      printf("** Cannot determine relationship **\n");
 800113e:	4806      	ldr	r0, [pc, #24]	@ (8001158 <Test_0xB0_Device+0x3c0>)
 8001140:	f004 f95c 	bl	80053fc <puts>
    }
  }

  printf("====================================\n\n");
 8001144:	4805      	ldr	r0, [pc, #20]	@ (800115c <Test_0xB0_Device+0x3c4>)
 8001146:	f004 f959 	bl	80053fc <puts>
}
 800114a:	bf00      	nop
 800114c:	3738      	adds	r7, #56	@ 0x38
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}
 8001152:	bf00      	nop
 8001154:	08009590 	.word	0x08009590
 8001158:	080095b0 	.word	0x080095b0
 800115c:	080095d4 	.word	0x080095d4

08001160 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001166:	f000 fb45 	bl	80017f4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800116a:	f000 f853 	bl	8001214 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 800116e:	f000 f8eb 	bl	8001348 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8001172:	f000 f8bf 	bl	80012f4 <MX_USART2_UART_Init>
	MX_I2C1_Init();
 8001176:	f000 f88f 	bl	8001298 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	printf("\n\n");
 800117a:	481d      	ldr	r0, [pc, #116]	@ (80011f0 <main+0x90>)
 800117c:	f004 f93e 	bl	80053fc <puts>
	printf("========================================\n");
 8001180:	481c      	ldr	r0, [pc, #112]	@ (80011f4 <main+0x94>)
 8001182:	f004 f93b 	bl	80053fc <puts>
	printf("  STM32F103 I2C EEPROM K24C256 Test    \n");
 8001186:	481c      	ldr	r0, [pc, #112]	@ (80011f8 <main+0x98>)
 8001188:	f004 f938 	bl	80053fc <puts>
	printf("  System Clock: 64MHz                  \n");
 800118c:	481b      	ldr	r0, [pc, #108]	@ (80011fc <main+0x9c>)
 800118e:	f004 f935 	bl	80053fc <puts>
	printf("  I2C Speed: 100kHz                    \n");
 8001192:	481b      	ldr	r0, [pc, #108]	@ (8001200 <main+0xa0>)
 8001194:	f004 f932 	bl	80053fc <puts>
	printf("========================================\n");
 8001198:	4816      	ldr	r0, [pc, #88]	@ (80011f4 <main+0x94>)
 800119a:	f004 f92f 	bl	80053fc <puts>

	// I2C 주소 스캔
	I2C_Scan();
 800119e:	f7ff fd37 	bl	8000c10 <I2C_Scan>

	// EEPROM 테스트
	//EEPROM_Test();
	//Wake_And_Read_0x58_Device();
	Test_0xB0_Device();
 80011a2:	f7ff fdf9 	bl	8000d98 <Test_0xB0_Device>
	printf("Test completed. Entering main loop...\n\n");
 80011a6:	4817      	ldr	r0, [pc, #92]	@ (8001204 <main+0xa4>)
 80011a8:	f004 f928 	bl	80053fc <puts>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	uint32_t loop_count = 0;
 80011ac:	2300      	movs	r3, #0
 80011ae:	607b      	str	r3, [r7, #4]
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		// 10초마다 상태 출력
		if (loop_count % 1000 == 0) {
 80011b0:	687a      	ldr	r2, [r7, #4]
 80011b2:	4b15      	ldr	r3, [pc, #84]	@ (8001208 <main+0xa8>)
 80011b4:	fba3 1302 	umull	r1, r3, r3, r2
 80011b8:	099b      	lsrs	r3, r3, #6
 80011ba:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80011be:	fb01 f303 	mul.w	r3, r1, r3
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d10c      	bne.n	80011e2 <main+0x82>
			printf("System running... Loop count: %lu\n", loop_count / 1000);
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4a0f      	ldr	r2, [pc, #60]	@ (8001208 <main+0xa8>)
 80011cc:	fba2 2303 	umull	r2, r3, r2, r3
 80011d0:	099b      	lsrs	r3, r3, #6
 80011d2:	4619      	mov	r1, r3
 80011d4:	480d      	ldr	r0, [pc, #52]	@ (800120c <main+0xac>)
 80011d6:	f004 f8a1 	bl	800531c <iprintf>

			HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 80011da:	2120      	movs	r1, #32
 80011dc:	480c      	ldr	r0, [pc, #48]	@ (8001210 <main+0xb0>)
 80011de:	f000 fe39 	bl	8001e54 <HAL_GPIO_TogglePin>
		}

		loop_count++;
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	3301      	adds	r3, #1
 80011e6:	607b      	str	r3, [r7, #4]
		HAL_Delay(10);
 80011e8:	200a      	movs	r0, #10
 80011ea:	f000 fb65 	bl	80018b8 <HAL_Delay>
		if (loop_count % 1000 == 0) {
 80011ee:	e7df      	b.n	80011b0 <main+0x50>
 80011f0:	08009614 	.word	0x08009614
 80011f4:	08009618 	.word	0x08009618
 80011f8:	08009644 	.word	0x08009644
 80011fc:	0800966c 	.word	0x0800966c
 8001200:	08009694 	.word	0x08009694
 8001204:	080096bc 	.word	0x080096bc
 8001208:	10624dd3 	.word	0x10624dd3
 800120c:	080096e4 	.word	0x080096e4
 8001210:	40010800 	.word	0x40010800

08001214 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001214:	b580      	push	{r7, lr}
 8001216:	b090      	sub	sp, #64	@ 0x40
 8001218:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800121a:	f107 0318 	add.w	r3, r7, #24
 800121e:	2228      	movs	r2, #40	@ 0x28
 8001220:	2100      	movs	r1, #0
 8001222:	4618      	mov	r0, r3
 8001224:	f004 f9fc 	bl	8005620 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	2200      	movs	r2, #0
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	605a      	str	r2, [r3, #4]
 8001230:	609a      	str	r2, [r3, #8]
 8001232:	60da      	str	r2, [r3, #12]
 8001234:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001236:	2302      	movs	r3, #2
 8001238:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800123a:	2301      	movs	r3, #1
 800123c:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800123e:	2310      	movs	r3, #16
 8001240:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001242:	2302      	movs	r3, #2
 8001244:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001246:	2300      	movs	r3, #0
 8001248:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800124a:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 800124e:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001250:	f107 0318 	add.w	r3, r7, #24
 8001254:	4618      	mov	r0, r3
 8001256:	f002 fb07 	bl	8003868 <HAL_RCC_OscConfig>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d001      	beq.n	8001264 <SystemClock_Config+0x50>
		Error_Handler();
 8001260:	f000 f8e0 	bl	8001424 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001264:	230f      	movs	r3, #15
 8001266:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001268:	2302      	movs	r3, #2
 800126a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800126c:	2300      	movs	r3, #0
 800126e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001270:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001274:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001276:	2300      	movs	r3, #0
 8001278:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 800127a:	1d3b      	adds	r3, r7, #4
 800127c:	2102      	movs	r1, #2
 800127e:	4618      	mov	r0, r3
 8001280:	f002 fd74 	bl	8003d6c <HAL_RCC_ClockConfig>
 8001284:	4603      	mov	r3, r0
 8001286:	2b00      	cmp	r3, #0
 8001288:	d001      	beq.n	800128e <SystemClock_Config+0x7a>
		Error_Handler();
 800128a:	f000 f8cb 	bl	8001424 <Error_Handler>
	}
}
 800128e:	bf00      	nop
 8001290:	3740      	adds	r7, #64	@ 0x40
 8001292:	46bd      	mov	sp, r7
 8001294:	bd80      	pop	{r7, pc}
	...

08001298 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800129c:	4b12      	ldr	r3, [pc, #72]	@ (80012e8 <MX_I2C1_Init+0x50>)
 800129e:	4a13      	ldr	r2, [pc, #76]	@ (80012ec <MX_I2C1_Init+0x54>)
 80012a0:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80012a2:	4b11      	ldr	r3, [pc, #68]	@ (80012e8 <MX_I2C1_Init+0x50>)
 80012a4:	4a12      	ldr	r2, [pc, #72]	@ (80012f0 <MX_I2C1_Init+0x58>)
 80012a6:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012a8:	4b0f      	ldr	r3, [pc, #60]	@ (80012e8 <MX_I2C1_Init+0x50>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80012ae:	4b0e      	ldr	r3, [pc, #56]	@ (80012e8 <MX_I2C1_Init+0x50>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012b4:	4b0c      	ldr	r3, [pc, #48]	@ (80012e8 <MX_I2C1_Init+0x50>)
 80012b6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012ba:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012bc:	4b0a      	ldr	r3, [pc, #40]	@ (80012e8 <MX_I2C1_Init+0x50>)
 80012be:	2200      	movs	r2, #0
 80012c0:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 80012c2:	4b09      	ldr	r3, [pc, #36]	@ (80012e8 <MX_I2C1_Init+0x50>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012c8:	4b07      	ldr	r3, [pc, #28]	@ (80012e8 <MX_I2C1_Init+0x50>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012ce:	4b06      	ldr	r3, [pc, #24]	@ (80012e8 <MX_I2C1_Init+0x50>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 80012d4:	4804      	ldr	r0, [pc, #16]	@ (80012e8 <MX_I2C1_Init+0x50>)
 80012d6:	f000 fdf9 	bl	8001ecc <HAL_I2C_Init>
 80012da:	4603      	mov	r3, r0
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d001      	beq.n	80012e4 <MX_I2C1_Init+0x4c>
		Error_Handler();
 80012e0:	f000 f8a0 	bl	8001424 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80012e4:	bf00      	nop
 80012e6:	bd80      	pop	{r7, pc}
 80012e8:	200001f0 	.word	0x200001f0
 80012ec:	40005400 	.word	0x40005400
 80012f0:	000186a0 	.word	0x000186a0

080012f4 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80012f8:	4b11      	ldr	r3, [pc, #68]	@ (8001340 <MX_USART2_UART_Init+0x4c>)
 80012fa:	4a12      	ldr	r2, [pc, #72]	@ (8001344 <MX_USART2_UART_Init+0x50>)
 80012fc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 80012fe:	4b10      	ldr	r3, [pc, #64]	@ (8001340 <MX_USART2_UART_Init+0x4c>)
 8001300:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001304:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001306:	4b0e      	ldr	r3, [pc, #56]	@ (8001340 <MX_USART2_UART_Init+0x4c>)
 8001308:	2200      	movs	r2, #0
 800130a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800130c:	4b0c      	ldr	r3, [pc, #48]	@ (8001340 <MX_USART2_UART_Init+0x4c>)
 800130e:	2200      	movs	r2, #0
 8001310:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001312:	4b0b      	ldr	r3, [pc, #44]	@ (8001340 <MX_USART2_UART_Init+0x4c>)
 8001314:	2200      	movs	r2, #0
 8001316:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001318:	4b09      	ldr	r3, [pc, #36]	@ (8001340 <MX_USART2_UART_Init+0x4c>)
 800131a:	220c      	movs	r2, #12
 800131c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800131e:	4b08      	ldr	r3, [pc, #32]	@ (8001340 <MX_USART2_UART_Init+0x4c>)
 8001320:	2200      	movs	r2, #0
 8001322:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001324:	4b06      	ldr	r3, [pc, #24]	@ (8001340 <MX_USART2_UART_Init+0x4c>)
 8001326:	2200      	movs	r2, #0
 8001328:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800132a:	4805      	ldr	r0, [pc, #20]	@ (8001340 <MX_USART2_UART_Init+0x4c>)
 800132c:	f002 feac 	bl	8004088 <HAL_UART_Init>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8001336:	f000 f875 	bl	8001424 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000244 	.word	0x20000244
 8001344:	40004400 	.word	0x40004400

08001348 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001348:	b580      	push	{r7, lr}
 800134a:	b088      	sub	sp, #32
 800134c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 800134e:	f107 0310 	add.w	r3, r7, #16
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800135c:	4b2d      	ldr	r3, [pc, #180]	@ (8001414 <MX_GPIO_Init+0xcc>)
 800135e:	699b      	ldr	r3, [r3, #24]
 8001360:	4a2c      	ldr	r2, [pc, #176]	@ (8001414 <MX_GPIO_Init+0xcc>)
 8001362:	f043 0310 	orr.w	r3, r3, #16
 8001366:	6193      	str	r3, [r2, #24]
 8001368:	4b2a      	ldr	r3, [pc, #168]	@ (8001414 <MX_GPIO_Init+0xcc>)
 800136a:	699b      	ldr	r3, [r3, #24]
 800136c:	f003 0310 	and.w	r3, r3, #16
 8001370:	60fb      	str	r3, [r7, #12]
 8001372:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001374:	4b27      	ldr	r3, [pc, #156]	@ (8001414 <MX_GPIO_Init+0xcc>)
 8001376:	699b      	ldr	r3, [r3, #24]
 8001378:	4a26      	ldr	r2, [pc, #152]	@ (8001414 <MX_GPIO_Init+0xcc>)
 800137a:	f043 0320 	orr.w	r3, r3, #32
 800137e:	6193      	str	r3, [r2, #24]
 8001380:	4b24      	ldr	r3, [pc, #144]	@ (8001414 <MX_GPIO_Init+0xcc>)
 8001382:	699b      	ldr	r3, [r3, #24]
 8001384:	f003 0320 	and.w	r3, r3, #32
 8001388:	60bb      	str	r3, [r7, #8]
 800138a:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800138c:	4b21      	ldr	r3, [pc, #132]	@ (8001414 <MX_GPIO_Init+0xcc>)
 800138e:	699b      	ldr	r3, [r3, #24]
 8001390:	4a20      	ldr	r2, [pc, #128]	@ (8001414 <MX_GPIO_Init+0xcc>)
 8001392:	f043 0304 	orr.w	r3, r3, #4
 8001396:	6193      	str	r3, [r2, #24]
 8001398:	4b1e      	ldr	r3, [pc, #120]	@ (8001414 <MX_GPIO_Init+0xcc>)
 800139a:	699b      	ldr	r3, [r3, #24]
 800139c:	f003 0304 	and.w	r3, r3, #4
 80013a0:	607b      	str	r3, [r7, #4]
 80013a2:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80013a4:	4b1b      	ldr	r3, [pc, #108]	@ (8001414 <MX_GPIO_Init+0xcc>)
 80013a6:	699b      	ldr	r3, [r3, #24]
 80013a8:	4a1a      	ldr	r2, [pc, #104]	@ (8001414 <MX_GPIO_Init+0xcc>)
 80013aa:	f043 0308 	orr.w	r3, r3, #8
 80013ae:	6193      	str	r3, [r2, #24]
 80013b0:	4b18      	ldr	r3, [pc, #96]	@ (8001414 <MX_GPIO_Init+0xcc>)
 80013b2:	699b      	ldr	r3, [r3, #24]
 80013b4:	f003 0308 	and.w	r3, r3, #8
 80013b8:	603b      	str	r3, [r7, #0]
 80013ba:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80013bc:	2200      	movs	r2, #0
 80013be:	2120      	movs	r1, #32
 80013c0:	4815      	ldr	r0, [pc, #84]	@ (8001418 <MX_GPIO_Init+0xd0>)
 80013c2:	f000 fd2f 	bl	8001e24 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80013c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013ca:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013cc:	4b13      	ldr	r3, [pc, #76]	@ (800141c <MX_GPIO_Init+0xd4>)
 80013ce:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013d4:	f107 0310 	add.w	r3, r7, #16
 80013d8:	4619      	mov	r1, r3
 80013da:	4811      	ldr	r0, [pc, #68]	@ (8001420 <MX_GPIO_Init+0xd8>)
 80013dc:	f000 fb9e 	bl	8001b1c <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 80013e0:	2320      	movs	r3, #32
 80013e2:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e4:	2301      	movs	r3, #1
 80013e6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ec:	2302      	movs	r3, #2
 80013ee:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013f0:	f107 0310 	add.w	r3, r7, #16
 80013f4:	4619      	mov	r1, r3
 80013f6:	4808      	ldr	r0, [pc, #32]	@ (8001418 <MX_GPIO_Init+0xd0>)
 80013f8:	f000 fb90 	bl	8001b1c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80013fc:	2200      	movs	r2, #0
 80013fe:	2100      	movs	r1, #0
 8001400:	2028      	movs	r0, #40	@ 0x28
 8001402:	f000 fb54 	bl	8001aae <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001406:	2028      	movs	r0, #40	@ 0x28
 8001408:	f000 fb6d 	bl	8001ae6 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 800140c:	bf00      	nop
 800140e:	3720      	adds	r7, #32
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	40021000 	.word	0x40021000
 8001418:	40010800 	.word	0x40010800
 800141c:	10110000 	.word	0x10110000
 8001420:	40011000 	.word	0x40011000

08001424 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001428:	b672      	cpsid	i
}
 800142a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800142c:	bf00      	nop
 800142e:	e7fd      	b.n	800142c <Error_Handler+0x8>

08001430 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001430:	b480      	push	{r7}
 8001432:	b085      	sub	sp, #20
 8001434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001436:	4b15      	ldr	r3, [pc, #84]	@ (800148c <HAL_MspInit+0x5c>)
 8001438:	699b      	ldr	r3, [r3, #24]
 800143a:	4a14      	ldr	r2, [pc, #80]	@ (800148c <HAL_MspInit+0x5c>)
 800143c:	f043 0301 	orr.w	r3, r3, #1
 8001440:	6193      	str	r3, [r2, #24]
 8001442:	4b12      	ldr	r3, [pc, #72]	@ (800148c <HAL_MspInit+0x5c>)
 8001444:	699b      	ldr	r3, [r3, #24]
 8001446:	f003 0301 	and.w	r3, r3, #1
 800144a:	60bb      	str	r3, [r7, #8]
 800144c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800144e:	4b0f      	ldr	r3, [pc, #60]	@ (800148c <HAL_MspInit+0x5c>)
 8001450:	69db      	ldr	r3, [r3, #28]
 8001452:	4a0e      	ldr	r2, [pc, #56]	@ (800148c <HAL_MspInit+0x5c>)
 8001454:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001458:	61d3      	str	r3, [r2, #28]
 800145a:	4b0c      	ldr	r3, [pc, #48]	@ (800148c <HAL_MspInit+0x5c>)
 800145c:	69db      	ldr	r3, [r3, #28]
 800145e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001462:	607b      	str	r3, [r7, #4]
 8001464:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001466:	4b0a      	ldr	r3, [pc, #40]	@ (8001490 <HAL_MspInit+0x60>)
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001472:	60fb      	str	r3, [r7, #12]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800147a:	60fb      	str	r3, [r7, #12]
 800147c:	4a04      	ldr	r2, [pc, #16]	@ (8001490 <HAL_MspInit+0x60>)
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001482:	bf00      	nop
 8001484:	3714      	adds	r7, #20
 8001486:	46bd      	mov	sp, r7
 8001488:	bc80      	pop	{r7}
 800148a:	4770      	bx	lr
 800148c:	40021000 	.word	0x40021000
 8001490:	40010000 	.word	0x40010000

08001494 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b08a      	sub	sp, #40	@ 0x28
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149c:	f107 0314 	add.w	r3, r7, #20
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]
 80014a4:	605a      	str	r2, [r3, #4]
 80014a6:	609a      	str	r2, [r3, #8]
 80014a8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a1d      	ldr	r2, [pc, #116]	@ (8001524 <HAL_I2C_MspInit+0x90>)
 80014b0:	4293      	cmp	r3, r2
 80014b2:	d132      	bne.n	800151a <HAL_I2C_MspInit+0x86>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b4:	4b1c      	ldr	r3, [pc, #112]	@ (8001528 <HAL_I2C_MspInit+0x94>)
 80014b6:	699b      	ldr	r3, [r3, #24]
 80014b8:	4a1b      	ldr	r2, [pc, #108]	@ (8001528 <HAL_I2C_MspInit+0x94>)
 80014ba:	f043 0308 	orr.w	r3, r3, #8
 80014be:	6193      	str	r3, [r2, #24]
 80014c0:	4b19      	ldr	r3, [pc, #100]	@ (8001528 <HAL_I2C_MspInit+0x94>)
 80014c2:	699b      	ldr	r3, [r3, #24]
 80014c4:	f003 0308 	and.w	r3, r3, #8
 80014c8:	613b      	str	r3, [r7, #16]
 80014ca:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014cc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80014d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014d2:	2312      	movs	r3, #18
 80014d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014d6:	2303      	movs	r3, #3
 80014d8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014da:	f107 0314 	add.w	r3, r7, #20
 80014de:	4619      	mov	r1, r3
 80014e0:	4812      	ldr	r0, [pc, #72]	@ (800152c <HAL_I2C_MspInit+0x98>)
 80014e2:	f000 fb1b 	bl	8001b1c <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 80014e6:	4b12      	ldr	r3, [pc, #72]	@ (8001530 <HAL_I2C_MspInit+0x9c>)
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80014ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014ee:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80014f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80014f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80014f6:	f043 0302 	orr.w	r3, r3, #2
 80014fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80014fc:	4a0c      	ldr	r2, [pc, #48]	@ (8001530 <HAL_I2C_MspInit+0x9c>)
 80014fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001500:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001502:	4b09      	ldr	r3, [pc, #36]	@ (8001528 <HAL_I2C_MspInit+0x94>)
 8001504:	69db      	ldr	r3, [r3, #28]
 8001506:	4a08      	ldr	r2, [pc, #32]	@ (8001528 <HAL_I2C_MspInit+0x94>)
 8001508:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800150c:	61d3      	str	r3, [r2, #28]
 800150e:	4b06      	ldr	r3, [pc, #24]	@ (8001528 <HAL_I2C_MspInit+0x94>)
 8001510:	69db      	ldr	r3, [r3, #28]
 8001512:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001516:	60fb      	str	r3, [r7, #12]
 8001518:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 800151a:	bf00      	nop
 800151c:	3728      	adds	r7, #40	@ 0x28
 800151e:	46bd      	mov	sp, r7
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	40005400 	.word	0x40005400
 8001528:	40021000 	.word	0x40021000
 800152c:	40010c00 	.word	0x40010c00
 8001530:	40010000 	.word	0x40010000

08001534 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b088      	sub	sp, #32
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153c:	f107 0310 	add.w	r3, r7, #16
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	4a15      	ldr	r2, [pc, #84]	@ (80015a4 <HAL_UART_MspInit+0x70>)
 8001550:	4293      	cmp	r3, r2
 8001552:	d123      	bne.n	800159c <HAL_UART_MspInit+0x68>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001554:	4b14      	ldr	r3, [pc, #80]	@ (80015a8 <HAL_UART_MspInit+0x74>)
 8001556:	69db      	ldr	r3, [r3, #28]
 8001558:	4a13      	ldr	r2, [pc, #76]	@ (80015a8 <HAL_UART_MspInit+0x74>)
 800155a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800155e:	61d3      	str	r3, [r2, #28]
 8001560:	4b11      	ldr	r3, [pc, #68]	@ (80015a8 <HAL_UART_MspInit+0x74>)
 8001562:	69db      	ldr	r3, [r3, #28]
 8001564:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800156c:	4b0e      	ldr	r3, [pc, #56]	@ (80015a8 <HAL_UART_MspInit+0x74>)
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	4a0d      	ldr	r2, [pc, #52]	@ (80015a8 <HAL_UART_MspInit+0x74>)
 8001572:	f043 0304 	orr.w	r3, r3, #4
 8001576:	6193      	str	r3, [r2, #24]
 8001578:	4b0b      	ldr	r3, [pc, #44]	@ (80015a8 <HAL_UART_MspInit+0x74>)
 800157a:	699b      	ldr	r3, [r3, #24]
 800157c:	f003 0304 	and.w	r3, r3, #4
 8001580:	60bb      	str	r3, [r7, #8]
 8001582:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001584:	230c      	movs	r3, #12
 8001586:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001588:	2302      	movs	r3, #2
 800158a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158c:	2302      	movs	r3, #2
 800158e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001590:	f107 0310 	add.w	r3, r7, #16
 8001594:	4619      	mov	r1, r3
 8001596:	4805      	ldr	r0, [pc, #20]	@ (80015ac <HAL_UART_MspInit+0x78>)
 8001598:	f000 fac0 	bl	8001b1c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 800159c:	bf00      	nop
 800159e:	3720      	adds	r7, #32
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40004400 	.word	0x40004400
 80015a8:	40021000 	.word	0x40021000
 80015ac:	40010800 	.word	0x40010800

080015b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015b4:	bf00      	nop
 80015b6:	e7fd      	b.n	80015b4 <NMI_Handler+0x4>

080015b8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015bc:	bf00      	nop
 80015be:	e7fd      	b.n	80015bc <HardFault_Handler+0x4>

080015c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015c4:	bf00      	nop
 80015c6:	e7fd      	b.n	80015c4 <MemManage_Handler+0x4>

080015c8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015cc:	bf00      	nop
 80015ce:	e7fd      	b.n	80015cc <BusFault_Handler+0x4>

080015d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015d4:	bf00      	nop
 80015d6:	e7fd      	b.n	80015d4 <UsageFault_Handler+0x4>

080015d8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015d8:	b480      	push	{r7}
 80015da:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015dc:	bf00      	nop
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr

080015e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015e8:	bf00      	nop
 80015ea:	46bd      	mov	sp, r7
 80015ec:	bc80      	pop	{r7}
 80015ee:	4770      	bx	lr

080015f0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015f0:	b480      	push	{r7}
 80015f2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bc80      	pop	{r7}
 80015fa:	4770      	bx	lr

080015fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001600:	f000 f93e 	bl	8001880 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001604:	bf00      	nop
 8001606:	bd80      	pop	{r7, pc}

08001608 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800160c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001610:	f000 fc3a 	bl	8001e88 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001614:	bf00      	nop
 8001616:	bd80      	pop	{r7, pc}

08001618 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  return 1;
 800161c:	2301      	movs	r3, #1
}
 800161e:	4618      	mov	r0, r3
 8001620:	46bd      	mov	sp, r7
 8001622:	bc80      	pop	{r7}
 8001624:	4770      	bx	lr

08001626 <_kill>:

int _kill(int pid, int sig)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b082      	sub	sp, #8
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
 800162e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001630:	f004 f848 	bl	80056c4 <__errno>
 8001634:	4603      	mov	r3, r0
 8001636:	2216      	movs	r2, #22
 8001638:	601a      	str	r2, [r3, #0]
  return -1;
 800163a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800163e:	4618      	mov	r0, r3
 8001640:	3708      	adds	r7, #8
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <_exit>:

void _exit (int status)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b082      	sub	sp, #8
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800164e:	f04f 31ff 	mov.w	r1, #4294967295
 8001652:	6878      	ldr	r0, [r7, #4]
 8001654:	f7ff ffe7 	bl	8001626 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001658:	bf00      	nop
 800165a:	e7fd      	b.n	8001658 <_exit+0x12>

0800165c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b086      	sub	sp, #24
 8001660:	af00      	add	r7, sp, #0
 8001662:	60f8      	str	r0, [r7, #12]
 8001664:	60b9      	str	r1, [r7, #8]
 8001666:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001668:	2300      	movs	r3, #0
 800166a:	617b      	str	r3, [r7, #20]
 800166c:	e00a      	b.n	8001684 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800166e:	f3af 8000 	nop.w
 8001672:	4601      	mov	r1, r0
 8001674:	68bb      	ldr	r3, [r7, #8]
 8001676:	1c5a      	adds	r2, r3, #1
 8001678:	60ba      	str	r2, [r7, #8]
 800167a:	b2ca      	uxtb	r2, r1
 800167c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800167e:	697b      	ldr	r3, [r7, #20]
 8001680:	3301      	adds	r3, #1
 8001682:	617b      	str	r3, [r7, #20]
 8001684:	697a      	ldr	r2, [r7, #20]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	429a      	cmp	r2, r3
 800168a:	dbf0      	blt.n	800166e <_read+0x12>
  }

  return len;
 800168c:	687b      	ldr	r3, [r7, #4]
}
 800168e:	4618      	mov	r0, r3
 8001690:	3718      	adds	r7, #24
 8001692:	46bd      	mov	sp, r7
 8001694:	bd80      	pop	{r7, pc}

08001696 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001696:	b580      	push	{r7, lr}
 8001698:	b086      	sub	sp, #24
 800169a:	af00      	add	r7, sp, #0
 800169c:	60f8      	str	r0, [r7, #12]
 800169e:	60b9      	str	r1, [r7, #8]
 80016a0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016a2:	2300      	movs	r3, #0
 80016a4:	617b      	str	r3, [r7, #20]
 80016a6:	e009      	b.n	80016bc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016a8:	68bb      	ldr	r3, [r7, #8]
 80016aa:	1c5a      	adds	r2, r3, #1
 80016ac:	60ba      	str	r2, [r7, #8]
 80016ae:	781b      	ldrb	r3, [r3, #0]
 80016b0:	4618      	mov	r0, r3
 80016b2:	f7ff fa8f 	bl	8000bd4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	3301      	adds	r3, #1
 80016ba:	617b      	str	r3, [r7, #20]
 80016bc:	697a      	ldr	r2, [r7, #20]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	429a      	cmp	r2, r3
 80016c2:	dbf1      	blt.n	80016a8 <_write+0x12>
  }
  return len;
 80016c4:	687b      	ldr	r3, [r7, #4]
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3718      	adds	r7, #24
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}

080016ce <_close>:

int _close(int file)
{
 80016ce:	b480      	push	{r7}
 80016d0:	b083      	sub	sp, #12
 80016d2:	af00      	add	r7, sp, #0
 80016d4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016da:	4618      	mov	r0, r3
 80016dc:	370c      	adds	r7, #12
 80016de:	46bd      	mov	sp, r7
 80016e0:	bc80      	pop	{r7}
 80016e2:	4770      	bx	lr

080016e4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b083      	sub	sp, #12
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
 80016ec:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80016f4:	605a      	str	r2, [r3, #4]
  return 0;
 80016f6:	2300      	movs	r3, #0
}
 80016f8:	4618      	mov	r0, r3
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bc80      	pop	{r7}
 8001700:	4770      	bx	lr

08001702 <_isatty>:

int _isatty(int file)
{
 8001702:	b480      	push	{r7}
 8001704:	b083      	sub	sp, #12
 8001706:	af00      	add	r7, sp, #0
 8001708:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800170a:	2301      	movs	r3, #1
}
 800170c:	4618      	mov	r0, r3
 800170e:	370c      	adds	r7, #12
 8001710:	46bd      	mov	sp, r7
 8001712:	bc80      	pop	{r7}
 8001714:	4770      	bx	lr

08001716 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001716:	b480      	push	{r7}
 8001718:	b085      	sub	sp, #20
 800171a:	af00      	add	r7, sp, #0
 800171c:	60f8      	str	r0, [r7, #12]
 800171e:	60b9      	str	r1, [r7, #8]
 8001720:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001722:	2300      	movs	r3, #0
}
 8001724:	4618      	mov	r0, r3
 8001726:	3714      	adds	r7, #20
 8001728:	46bd      	mov	sp, r7
 800172a:	bc80      	pop	{r7}
 800172c:	4770      	bx	lr
	...

08001730 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b086      	sub	sp, #24
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001738:	4a14      	ldr	r2, [pc, #80]	@ (800178c <_sbrk+0x5c>)
 800173a:	4b15      	ldr	r3, [pc, #84]	@ (8001790 <_sbrk+0x60>)
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001740:	697b      	ldr	r3, [r7, #20]
 8001742:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001744:	4b13      	ldr	r3, [pc, #76]	@ (8001794 <_sbrk+0x64>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d102      	bne.n	8001752 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800174c:	4b11      	ldr	r3, [pc, #68]	@ (8001794 <_sbrk+0x64>)
 800174e:	4a12      	ldr	r2, [pc, #72]	@ (8001798 <_sbrk+0x68>)
 8001750:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001752:	4b10      	ldr	r3, [pc, #64]	@ (8001794 <_sbrk+0x64>)
 8001754:	681a      	ldr	r2, [r3, #0]
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	4413      	add	r3, r2
 800175a:	693a      	ldr	r2, [r7, #16]
 800175c:	429a      	cmp	r2, r3
 800175e:	d207      	bcs.n	8001770 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001760:	f003 ffb0 	bl	80056c4 <__errno>
 8001764:	4603      	mov	r3, r0
 8001766:	220c      	movs	r2, #12
 8001768:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800176a:	f04f 33ff 	mov.w	r3, #4294967295
 800176e:	e009      	b.n	8001784 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001770:	4b08      	ldr	r3, [pc, #32]	@ (8001794 <_sbrk+0x64>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001776:	4b07      	ldr	r3, [pc, #28]	@ (8001794 <_sbrk+0x64>)
 8001778:	681a      	ldr	r2, [r3, #0]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	4413      	add	r3, r2
 800177e:	4a05      	ldr	r2, [pc, #20]	@ (8001794 <_sbrk+0x64>)
 8001780:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001782:	68fb      	ldr	r3, [r7, #12]
}
 8001784:	4618      	mov	r0, r3
 8001786:	3718      	adds	r7, #24
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	20005000 	.word	0x20005000
 8001790:	00000400 	.word	0x00000400
 8001794:	20000290 	.word	0x20000290
 8001798:	200003e8 	.word	0x200003e8

0800179c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800179c:	b480      	push	{r7}
 800179e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017a0:	bf00      	nop
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bc80      	pop	{r7}
 80017a6:	4770      	bx	lr

080017a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80017a8:	f7ff fff8 	bl	800179c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017ac:	480b      	ldr	r0, [pc, #44]	@ (80017dc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80017ae:	490c      	ldr	r1, [pc, #48]	@ (80017e0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80017b0:	4a0c      	ldr	r2, [pc, #48]	@ (80017e4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80017b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017b4:	e002      	b.n	80017bc <LoopCopyDataInit>

080017b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017ba:	3304      	adds	r3, #4

080017bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017c0:	d3f9      	bcc.n	80017b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017c2:	4a09      	ldr	r2, [pc, #36]	@ (80017e8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80017c4:	4c09      	ldr	r4, [pc, #36]	@ (80017ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017c8:	e001      	b.n	80017ce <LoopFillZerobss>

080017ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017cc:	3204      	adds	r2, #4

080017ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017d0:	d3fb      	bcc.n	80017ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80017d2:	f003 ff7d 	bl	80056d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017d6:	f7ff fcc3 	bl	8001160 <main>
  bx lr
 80017da:	4770      	bx	lr
  ldr r0, =_sdata
 80017dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017e0:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80017e4:	08009b6c 	.word	0x08009b6c
  ldr r2, =_sbss
 80017e8:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80017ec:	200003e4 	.word	0x200003e4

080017f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80017f0:	e7fe      	b.n	80017f0 <ADC1_2_IRQHandler>
	...

080017f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80017f8:	4b08      	ldr	r3, [pc, #32]	@ (800181c <HAL_Init+0x28>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	4a07      	ldr	r2, [pc, #28]	@ (800181c <HAL_Init+0x28>)
 80017fe:	f043 0310 	orr.w	r3, r3, #16
 8001802:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001804:	2003      	movs	r0, #3
 8001806:	f000 f947 	bl	8001a98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800180a:	2000      	movs	r0, #0
 800180c:	f000 f808 	bl	8001820 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001810:	f7ff fe0e 	bl	8001430 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001814:	2300      	movs	r3, #0
}
 8001816:	4618      	mov	r0, r3
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	40022000 	.word	0x40022000

08001820 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001828:	4b12      	ldr	r3, [pc, #72]	@ (8001874 <HAL_InitTick+0x54>)
 800182a:	681a      	ldr	r2, [r3, #0]
 800182c:	4b12      	ldr	r3, [pc, #72]	@ (8001878 <HAL_InitTick+0x58>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	4619      	mov	r1, r3
 8001832:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001836:	fbb3 f3f1 	udiv	r3, r3, r1
 800183a:	fbb2 f3f3 	udiv	r3, r2, r3
 800183e:	4618      	mov	r0, r3
 8001840:	f000 f95f 	bl	8001b02 <HAL_SYSTICK_Config>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	d001      	beq.n	800184e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e00e      	b.n	800186c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2b0f      	cmp	r3, #15
 8001852:	d80a      	bhi.n	800186a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001854:	2200      	movs	r2, #0
 8001856:	6879      	ldr	r1, [r7, #4]
 8001858:	f04f 30ff 	mov.w	r0, #4294967295
 800185c:	f000 f927 	bl	8001aae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001860:	4a06      	ldr	r2, [pc, #24]	@ (800187c <HAL_InitTick+0x5c>)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001866:	2300      	movs	r3, #0
 8001868:	e000      	b.n	800186c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800186a:	2301      	movs	r3, #1
}
 800186c:	4618      	mov	r0, r3
 800186e:	3708      	adds	r7, #8
 8001870:	46bd      	mov	sp, r7
 8001872:	bd80      	pop	{r7, pc}
 8001874:	20000000 	.word	0x20000000
 8001878:	20000008 	.word	0x20000008
 800187c:	20000004 	.word	0x20000004

08001880 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001884:	4b05      	ldr	r3, [pc, #20]	@ (800189c <HAL_IncTick+0x1c>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	461a      	mov	r2, r3
 800188a:	4b05      	ldr	r3, [pc, #20]	@ (80018a0 <HAL_IncTick+0x20>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4413      	add	r3, r2
 8001890:	4a03      	ldr	r2, [pc, #12]	@ (80018a0 <HAL_IncTick+0x20>)
 8001892:	6013      	str	r3, [r2, #0]
}
 8001894:	bf00      	nop
 8001896:	46bd      	mov	sp, r7
 8001898:	bc80      	pop	{r7}
 800189a:	4770      	bx	lr
 800189c:	20000008 	.word	0x20000008
 80018a0:	20000294 	.word	0x20000294

080018a4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018a4:	b480      	push	{r7}
 80018a6:	af00      	add	r7, sp, #0
  return uwTick;
 80018a8:	4b02      	ldr	r3, [pc, #8]	@ (80018b4 <HAL_GetTick+0x10>)
 80018aa:	681b      	ldr	r3, [r3, #0]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr
 80018b4:	20000294 	.word	0x20000294

080018b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b084      	sub	sp, #16
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018c0:	f7ff fff0 	bl	80018a4 <HAL_GetTick>
 80018c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018d0:	d005      	beq.n	80018de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018d2:	4b0a      	ldr	r3, [pc, #40]	@ (80018fc <HAL_Delay+0x44>)
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	461a      	mov	r2, r3
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	4413      	add	r3, r2
 80018dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018de:	bf00      	nop
 80018e0:	f7ff ffe0 	bl	80018a4 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	1ad3      	subs	r3, r2, r3
 80018ea:	68fa      	ldr	r2, [r7, #12]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d8f7      	bhi.n	80018e0 <HAL_Delay+0x28>
  {
  }
}
 80018f0:	bf00      	nop
 80018f2:	bf00      	nop
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20000008 	.word	0x20000008

08001900 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	f003 0307 	and.w	r3, r3, #7
 800190e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001910:	4b0c      	ldr	r3, [pc, #48]	@ (8001944 <__NVIC_SetPriorityGrouping+0x44>)
 8001912:	68db      	ldr	r3, [r3, #12]
 8001914:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001916:	68ba      	ldr	r2, [r7, #8]
 8001918:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800191c:	4013      	ands	r3, r2
 800191e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001928:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800192c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001930:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001932:	4a04      	ldr	r2, [pc, #16]	@ (8001944 <__NVIC_SetPriorityGrouping+0x44>)
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	60d3      	str	r3, [r2, #12]
}
 8001938:	bf00      	nop
 800193a:	3714      	adds	r7, #20
 800193c:	46bd      	mov	sp, r7
 800193e:	bc80      	pop	{r7}
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	e000ed00 	.word	0xe000ed00

08001948 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001948:	b480      	push	{r7}
 800194a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800194c:	4b04      	ldr	r3, [pc, #16]	@ (8001960 <__NVIC_GetPriorityGrouping+0x18>)
 800194e:	68db      	ldr	r3, [r3, #12]
 8001950:	0a1b      	lsrs	r3, r3, #8
 8001952:	f003 0307 	and.w	r3, r3, #7
}
 8001956:	4618      	mov	r0, r3
 8001958:	46bd      	mov	sp, r7
 800195a:	bc80      	pop	{r7}
 800195c:	4770      	bx	lr
 800195e:	bf00      	nop
 8001960:	e000ed00 	.word	0xe000ed00

08001964 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001964:	b480      	push	{r7}
 8001966:	b083      	sub	sp, #12
 8001968:	af00      	add	r7, sp, #0
 800196a:	4603      	mov	r3, r0
 800196c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800196e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001972:	2b00      	cmp	r3, #0
 8001974:	db0b      	blt.n	800198e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001976:	79fb      	ldrb	r3, [r7, #7]
 8001978:	f003 021f 	and.w	r2, r3, #31
 800197c:	4906      	ldr	r1, [pc, #24]	@ (8001998 <__NVIC_EnableIRQ+0x34>)
 800197e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001982:	095b      	lsrs	r3, r3, #5
 8001984:	2001      	movs	r0, #1
 8001986:	fa00 f202 	lsl.w	r2, r0, r2
 800198a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800198e:	bf00      	nop
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	bc80      	pop	{r7}
 8001996:	4770      	bx	lr
 8001998:	e000e100 	.word	0xe000e100

0800199c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800199c:	b480      	push	{r7}
 800199e:	b083      	sub	sp, #12
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	6039      	str	r1, [r7, #0]
 80019a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	db0a      	blt.n	80019c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	b2da      	uxtb	r2, r3
 80019b4:	490c      	ldr	r1, [pc, #48]	@ (80019e8 <__NVIC_SetPriority+0x4c>)
 80019b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ba:	0112      	lsls	r2, r2, #4
 80019bc:	b2d2      	uxtb	r2, r2
 80019be:	440b      	add	r3, r1
 80019c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019c4:	e00a      	b.n	80019dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	b2da      	uxtb	r2, r3
 80019ca:	4908      	ldr	r1, [pc, #32]	@ (80019ec <__NVIC_SetPriority+0x50>)
 80019cc:	79fb      	ldrb	r3, [r7, #7]
 80019ce:	f003 030f 	and.w	r3, r3, #15
 80019d2:	3b04      	subs	r3, #4
 80019d4:	0112      	lsls	r2, r2, #4
 80019d6:	b2d2      	uxtb	r2, r2
 80019d8:	440b      	add	r3, r1
 80019da:	761a      	strb	r2, [r3, #24]
}
 80019dc:	bf00      	nop
 80019de:	370c      	adds	r7, #12
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bc80      	pop	{r7}
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	e000e100 	.word	0xe000e100
 80019ec:	e000ed00 	.word	0xe000ed00

080019f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b089      	sub	sp, #36	@ 0x24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	60f8      	str	r0, [r7, #12]
 80019f8:	60b9      	str	r1, [r7, #8]
 80019fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a04:	69fb      	ldr	r3, [r7, #28]
 8001a06:	f1c3 0307 	rsb	r3, r3, #7
 8001a0a:	2b04      	cmp	r3, #4
 8001a0c:	bf28      	it	cs
 8001a0e:	2304      	movcs	r3, #4
 8001a10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	3304      	adds	r3, #4
 8001a16:	2b06      	cmp	r3, #6
 8001a18:	d902      	bls.n	8001a20 <NVIC_EncodePriority+0x30>
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	3b03      	subs	r3, #3
 8001a1e:	e000      	b.n	8001a22 <NVIC_EncodePriority+0x32>
 8001a20:	2300      	movs	r3, #0
 8001a22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a24:	f04f 32ff 	mov.w	r2, #4294967295
 8001a28:	69bb      	ldr	r3, [r7, #24]
 8001a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2e:	43da      	mvns	r2, r3
 8001a30:	68bb      	ldr	r3, [r7, #8]
 8001a32:	401a      	ands	r2, r3
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a38:	f04f 31ff 	mov.w	r1, #4294967295
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a42:	43d9      	mvns	r1, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a48:	4313      	orrs	r3, r2
         );
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3724      	adds	r7, #36	@ 0x24
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bc80      	pop	{r7}
 8001a52:	4770      	bx	lr

08001a54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b082      	sub	sp, #8
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a64:	d301      	bcc.n	8001a6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a66:	2301      	movs	r3, #1
 8001a68:	e00f      	b.n	8001a8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a6a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a94 <SysTick_Config+0x40>)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a72:	210f      	movs	r1, #15
 8001a74:	f04f 30ff 	mov.w	r0, #4294967295
 8001a78:	f7ff ff90 	bl	800199c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a7c:	4b05      	ldr	r3, [pc, #20]	@ (8001a94 <SysTick_Config+0x40>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a82:	4b04      	ldr	r3, [pc, #16]	@ (8001a94 <SysTick_Config+0x40>)
 8001a84:	2207      	movs	r2, #7
 8001a86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a88:	2300      	movs	r3, #0
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	3708      	adds	r7, #8
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bd80      	pop	{r7, pc}
 8001a92:	bf00      	nop
 8001a94:	e000e010 	.word	0xe000e010

08001a98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a98:	b580      	push	{r7, lr}
 8001a9a:	b082      	sub	sp, #8
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f7ff ff2d 	bl	8001900 <__NVIC_SetPriorityGrouping>
}
 8001aa6:	bf00      	nop
 8001aa8:	3708      	adds	r7, #8
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b086      	sub	sp, #24
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	60b9      	str	r1, [r7, #8]
 8001ab8:	607a      	str	r2, [r7, #4]
 8001aba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001abc:	2300      	movs	r3, #0
 8001abe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ac0:	f7ff ff42 	bl	8001948 <__NVIC_GetPriorityGrouping>
 8001ac4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ac6:	687a      	ldr	r2, [r7, #4]
 8001ac8:	68b9      	ldr	r1, [r7, #8]
 8001aca:	6978      	ldr	r0, [r7, #20]
 8001acc:	f7ff ff90 	bl	80019f0 <NVIC_EncodePriority>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ad6:	4611      	mov	r1, r2
 8001ad8:	4618      	mov	r0, r3
 8001ada:	f7ff ff5f 	bl	800199c <__NVIC_SetPriority>
}
 8001ade:	bf00      	nop
 8001ae0:	3718      	adds	r7, #24
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}

08001ae6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ae6:	b580      	push	{r7, lr}
 8001ae8:	b082      	sub	sp, #8
 8001aea:	af00      	add	r7, sp, #0
 8001aec:	4603      	mov	r3, r0
 8001aee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001af0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff ff35 	bl	8001964 <__NVIC_EnableIRQ>
}
 8001afa:	bf00      	nop
 8001afc:	3708      	adds	r7, #8
 8001afe:	46bd      	mov	sp, r7
 8001b00:	bd80      	pop	{r7, pc}

08001b02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b02:	b580      	push	{r7, lr}
 8001b04:	b082      	sub	sp, #8
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b0a:	6878      	ldr	r0, [r7, #4]
 8001b0c:	f7ff ffa2 	bl	8001a54 <SysTick_Config>
 8001b10:	4603      	mov	r3, r0
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
	...

08001b1c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b1c:	b480      	push	{r7}
 8001b1e:	b08b      	sub	sp, #44	@ 0x2c
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
 8001b24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b26:	2300      	movs	r3, #0
 8001b28:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b2e:	e169      	b.n	8001e04 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b30:	2201      	movs	r2, #1
 8001b32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	69fa      	ldr	r2, [r7, #28]
 8001b40:	4013      	ands	r3, r2
 8001b42:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	f040 8158 	bne.w	8001dfe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	4a9a      	ldr	r2, [pc, #616]	@ (8001dbc <HAL_GPIO_Init+0x2a0>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d05e      	beq.n	8001c16 <HAL_GPIO_Init+0xfa>
 8001b58:	4a98      	ldr	r2, [pc, #608]	@ (8001dbc <HAL_GPIO_Init+0x2a0>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d875      	bhi.n	8001c4a <HAL_GPIO_Init+0x12e>
 8001b5e:	4a98      	ldr	r2, [pc, #608]	@ (8001dc0 <HAL_GPIO_Init+0x2a4>)
 8001b60:	4293      	cmp	r3, r2
 8001b62:	d058      	beq.n	8001c16 <HAL_GPIO_Init+0xfa>
 8001b64:	4a96      	ldr	r2, [pc, #600]	@ (8001dc0 <HAL_GPIO_Init+0x2a4>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	d86f      	bhi.n	8001c4a <HAL_GPIO_Init+0x12e>
 8001b6a:	4a96      	ldr	r2, [pc, #600]	@ (8001dc4 <HAL_GPIO_Init+0x2a8>)
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d052      	beq.n	8001c16 <HAL_GPIO_Init+0xfa>
 8001b70:	4a94      	ldr	r2, [pc, #592]	@ (8001dc4 <HAL_GPIO_Init+0x2a8>)
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d869      	bhi.n	8001c4a <HAL_GPIO_Init+0x12e>
 8001b76:	4a94      	ldr	r2, [pc, #592]	@ (8001dc8 <HAL_GPIO_Init+0x2ac>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d04c      	beq.n	8001c16 <HAL_GPIO_Init+0xfa>
 8001b7c:	4a92      	ldr	r2, [pc, #584]	@ (8001dc8 <HAL_GPIO_Init+0x2ac>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d863      	bhi.n	8001c4a <HAL_GPIO_Init+0x12e>
 8001b82:	4a92      	ldr	r2, [pc, #584]	@ (8001dcc <HAL_GPIO_Init+0x2b0>)
 8001b84:	4293      	cmp	r3, r2
 8001b86:	d046      	beq.n	8001c16 <HAL_GPIO_Init+0xfa>
 8001b88:	4a90      	ldr	r2, [pc, #576]	@ (8001dcc <HAL_GPIO_Init+0x2b0>)
 8001b8a:	4293      	cmp	r3, r2
 8001b8c:	d85d      	bhi.n	8001c4a <HAL_GPIO_Init+0x12e>
 8001b8e:	2b12      	cmp	r3, #18
 8001b90:	d82a      	bhi.n	8001be8 <HAL_GPIO_Init+0xcc>
 8001b92:	2b12      	cmp	r3, #18
 8001b94:	d859      	bhi.n	8001c4a <HAL_GPIO_Init+0x12e>
 8001b96:	a201      	add	r2, pc, #4	@ (adr r2, 8001b9c <HAL_GPIO_Init+0x80>)
 8001b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b9c:	08001c17 	.word	0x08001c17
 8001ba0:	08001bf1 	.word	0x08001bf1
 8001ba4:	08001c03 	.word	0x08001c03
 8001ba8:	08001c45 	.word	0x08001c45
 8001bac:	08001c4b 	.word	0x08001c4b
 8001bb0:	08001c4b 	.word	0x08001c4b
 8001bb4:	08001c4b 	.word	0x08001c4b
 8001bb8:	08001c4b 	.word	0x08001c4b
 8001bbc:	08001c4b 	.word	0x08001c4b
 8001bc0:	08001c4b 	.word	0x08001c4b
 8001bc4:	08001c4b 	.word	0x08001c4b
 8001bc8:	08001c4b 	.word	0x08001c4b
 8001bcc:	08001c4b 	.word	0x08001c4b
 8001bd0:	08001c4b 	.word	0x08001c4b
 8001bd4:	08001c4b 	.word	0x08001c4b
 8001bd8:	08001c4b 	.word	0x08001c4b
 8001bdc:	08001c4b 	.word	0x08001c4b
 8001be0:	08001bf9 	.word	0x08001bf9
 8001be4:	08001c0d 	.word	0x08001c0d
 8001be8:	4a79      	ldr	r2, [pc, #484]	@ (8001dd0 <HAL_GPIO_Init+0x2b4>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d013      	beq.n	8001c16 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001bee:	e02c      	b.n	8001c4a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	623b      	str	r3, [r7, #32]
          break;
 8001bf6:	e029      	b.n	8001c4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	3304      	adds	r3, #4
 8001bfe:	623b      	str	r3, [r7, #32]
          break;
 8001c00:	e024      	b.n	8001c4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	68db      	ldr	r3, [r3, #12]
 8001c06:	3308      	adds	r3, #8
 8001c08:	623b      	str	r3, [r7, #32]
          break;
 8001c0a:	e01f      	b.n	8001c4c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	68db      	ldr	r3, [r3, #12]
 8001c10:	330c      	adds	r3, #12
 8001c12:	623b      	str	r3, [r7, #32]
          break;
 8001c14:	e01a      	b.n	8001c4c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c16:	683b      	ldr	r3, [r7, #0]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d102      	bne.n	8001c24 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c1e:	2304      	movs	r3, #4
 8001c20:	623b      	str	r3, [r7, #32]
          break;
 8001c22:	e013      	b.n	8001c4c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d105      	bne.n	8001c38 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c2c:	2308      	movs	r3, #8
 8001c2e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	69fa      	ldr	r2, [r7, #28]
 8001c34:	611a      	str	r2, [r3, #16]
          break;
 8001c36:	e009      	b.n	8001c4c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c38:	2308      	movs	r3, #8
 8001c3a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	69fa      	ldr	r2, [r7, #28]
 8001c40:	615a      	str	r2, [r3, #20]
          break;
 8001c42:	e003      	b.n	8001c4c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c44:	2300      	movs	r3, #0
 8001c46:	623b      	str	r3, [r7, #32]
          break;
 8001c48:	e000      	b.n	8001c4c <HAL_GPIO_Init+0x130>
          break;
 8001c4a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c4c:	69bb      	ldr	r3, [r7, #24]
 8001c4e:	2bff      	cmp	r3, #255	@ 0xff
 8001c50:	d801      	bhi.n	8001c56 <HAL_GPIO_Init+0x13a>
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	e001      	b.n	8001c5a <HAL_GPIO_Init+0x13e>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	3304      	adds	r3, #4
 8001c5a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	2bff      	cmp	r3, #255	@ 0xff
 8001c60:	d802      	bhi.n	8001c68 <HAL_GPIO_Init+0x14c>
 8001c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c64:	009b      	lsls	r3, r3, #2
 8001c66:	e002      	b.n	8001c6e <HAL_GPIO_Init+0x152>
 8001c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c6a:	3b08      	subs	r3, #8
 8001c6c:	009b      	lsls	r3, r3, #2
 8001c6e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	210f      	movs	r1, #15
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	fa01 f303 	lsl.w	r3, r1, r3
 8001c7c:	43db      	mvns	r3, r3
 8001c7e:	401a      	ands	r2, r3
 8001c80:	6a39      	ldr	r1, [r7, #32]
 8001c82:	693b      	ldr	r3, [r7, #16]
 8001c84:	fa01 f303 	lsl.w	r3, r1, r3
 8001c88:	431a      	orrs	r2, r3
 8001c8a:	697b      	ldr	r3, [r7, #20]
 8001c8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	f000 80b1 	beq.w	8001dfe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c9c:	4b4d      	ldr	r3, [pc, #308]	@ (8001dd4 <HAL_GPIO_Init+0x2b8>)
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	4a4c      	ldr	r2, [pc, #304]	@ (8001dd4 <HAL_GPIO_Init+0x2b8>)
 8001ca2:	f043 0301 	orr.w	r3, r3, #1
 8001ca6:	6193      	str	r3, [r2, #24]
 8001ca8:	4b4a      	ldr	r3, [pc, #296]	@ (8001dd4 <HAL_GPIO_Init+0x2b8>)
 8001caa:	699b      	ldr	r3, [r3, #24]
 8001cac:	f003 0301 	and.w	r3, r3, #1
 8001cb0:	60bb      	str	r3, [r7, #8]
 8001cb2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001cb4:	4a48      	ldr	r2, [pc, #288]	@ (8001dd8 <HAL_GPIO_Init+0x2bc>)
 8001cb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb8:	089b      	lsrs	r3, r3, #2
 8001cba:	3302      	adds	r3, #2
 8001cbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cc0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cc4:	f003 0303 	and.w	r3, r3, #3
 8001cc8:	009b      	lsls	r3, r3, #2
 8001cca:	220f      	movs	r2, #15
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	43db      	mvns	r3, r3
 8001cd2:	68fa      	ldr	r2, [r7, #12]
 8001cd4:	4013      	ands	r3, r2
 8001cd6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	4a40      	ldr	r2, [pc, #256]	@ (8001ddc <HAL_GPIO_Init+0x2c0>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d013      	beq.n	8001d08 <HAL_GPIO_Init+0x1ec>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	4a3f      	ldr	r2, [pc, #252]	@ (8001de0 <HAL_GPIO_Init+0x2c4>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d00d      	beq.n	8001d04 <HAL_GPIO_Init+0x1e8>
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	4a3e      	ldr	r2, [pc, #248]	@ (8001de4 <HAL_GPIO_Init+0x2c8>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d007      	beq.n	8001d00 <HAL_GPIO_Init+0x1e4>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	4a3d      	ldr	r2, [pc, #244]	@ (8001de8 <HAL_GPIO_Init+0x2cc>)
 8001cf4:	4293      	cmp	r3, r2
 8001cf6:	d101      	bne.n	8001cfc <HAL_GPIO_Init+0x1e0>
 8001cf8:	2303      	movs	r3, #3
 8001cfa:	e006      	b.n	8001d0a <HAL_GPIO_Init+0x1ee>
 8001cfc:	2304      	movs	r3, #4
 8001cfe:	e004      	b.n	8001d0a <HAL_GPIO_Init+0x1ee>
 8001d00:	2302      	movs	r3, #2
 8001d02:	e002      	b.n	8001d0a <HAL_GPIO_Init+0x1ee>
 8001d04:	2301      	movs	r3, #1
 8001d06:	e000      	b.n	8001d0a <HAL_GPIO_Init+0x1ee>
 8001d08:	2300      	movs	r3, #0
 8001d0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d0c:	f002 0203 	and.w	r2, r2, #3
 8001d10:	0092      	lsls	r2, r2, #2
 8001d12:	4093      	lsls	r3, r2
 8001d14:	68fa      	ldr	r2, [r7, #12]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d1a:	492f      	ldr	r1, [pc, #188]	@ (8001dd8 <HAL_GPIO_Init+0x2bc>)
 8001d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d1e:	089b      	lsrs	r3, r3, #2
 8001d20:	3302      	adds	r3, #2
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	685b      	ldr	r3, [r3, #4]
 8001d2c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d006      	beq.n	8001d42 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d34:	4b2d      	ldr	r3, [pc, #180]	@ (8001dec <HAL_GPIO_Init+0x2d0>)
 8001d36:	689a      	ldr	r2, [r3, #8]
 8001d38:	492c      	ldr	r1, [pc, #176]	@ (8001dec <HAL_GPIO_Init+0x2d0>)
 8001d3a:	69bb      	ldr	r3, [r7, #24]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	608b      	str	r3, [r1, #8]
 8001d40:	e006      	b.n	8001d50 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d42:	4b2a      	ldr	r3, [pc, #168]	@ (8001dec <HAL_GPIO_Init+0x2d0>)
 8001d44:	689a      	ldr	r2, [r3, #8]
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	43db      	mvns	r3, r3
 8001d4a:	4928      	ldr	r1, [pc, #160]	@ (8001dec <HAL_GPIO_Init+0x2d0>)
 8001d4c:	4013      	ands	r3, r2
 8001d4e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d006      	beq.n	8001d6a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d5c:	4b23      	ldr	r3, [pc, #140]	@ (8001dec <HAL_GPIO_Init+0x2d0>)
 8001d5e:	68da      	ldr	r2, [r3, #12]
 8001d60:	4922      	ldr	r1, [pc, #136]	@ (8001dec <HAL_GPIO_Init+0x2d0>)
 8001d62:	69bb      	ldr	r3, [r7, #24]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	60cb      	str	r3, [r1, #12]
 8001d68:	e006      	b.n	8001d78 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d6a:	4b20      	ldr	r3, [pc, #128]	@ (8001dec <HAL_GPIO_Init+0x2d0>)
 8001d6c:	68da      	ldr	r2, [r3, #12]
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	43db      	mvns	r3, r3
 8001d72:	491e      	ldr	r1, [pc, #120]	@ (8001dec <HAL_GPIO_Init+0x2d0>)
 8001d74:	4013      	ands	r3, r2
 8001d76:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d78:	683b      	ldr	r3, [r7, #0]
 8001d7a:	685b      	ldr	r3, [r3, #4]
 8001d7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d006      	beq.n	8001d92 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d84:	4b19      	ldr	r3, [pc, #100]	@ (8001dec <HAL_GPIO_Init+0x2d0>)
 8001d86:	685a      	ldr	r2, [r3, #4]
 8001d88:	4918      	ldr	r1, [pc, #96]	@ (8001dec <HAL_GPIO_Init+0x2d0>)
 8001d8a:	69bb      	ldr	r3, [r7, #24]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	604b      	str	r3, [r1, #4]
 8001d90:	e006      	b.n	8001da0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d92:	4b16      	ldr	r3, [pc, #88]	@ (8001dec <HAL_GPIO_Init+0x2d0>)
 8001d94:	685a      	ldr	r2, [r3, #4]
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	43db      	mvns	r3, r3
 8001d9a:	4914      	ldr	r1, [pc, #80]	@ (8001dec <HAL_GPIO_Init+0x2d0>)
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d021      	beq.n	8001df0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001dac:	4b0f      	ldr	r3, [pc, #60]	@ (8001dec <HAL_GPIO_Init+0x2d0>)
 8001dae:	681a      	ldr	r2, [r3, #0]
 8001db0:	490e      	ldr	r1, [pc, #56]	@ (8001dec <HAL_GPIO_Init+0x2d0>)
 8001db2:	69bb      	ldr	r3, [r7, #24]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	600b      	str	r3, [r1, #0]
 8001db8:	e021      	b.n	8001dfe <HAL_GPIO_Init+0x2e2>
 8001dba:	bf00      	nop
 8001dbc:	10320000 	.word	0x10320000
 8001dc0:	10310000 	.word	0x10310000
 8001dc4:	10220000 	.word	0x10220000
 8001dc8:	10210000 	.word	0x10210000
 8001dcc:	10120000 	.word	0x10120000
 8001dd0:	10110000 	.word	0x10110000
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	40010000 	.word	0x40010000
 8001ddc:	40010800 	.word	0x40010800
 8001de0:	40010c00 	.word	0x40010c00
 8001de4:	40011000 	.word	0x40011000
 8001de8:	40011400 	.word	0x40011400
 8001dec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001df0:	4b0b      	ldr	r3, [pc, #44]	@ (8001e20 <HAL_GPIO_Init+0x304>)
 8001df2:	681a      	ldr	r2, [r3, #0]
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	43db      	mvns	r3, r3
 8001df8:	4909      	ldr	r1, [pc, #36]	@ (8001e20 <HAL_GPIO_Init+0x304>)
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001dfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e00:	3301      	adds	r3, #1
 8001e02:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	681a      	ldr	r2, [r3, #0]
 8001e08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e0a:	fa22 f303 	lsr.w	r3, r2, r3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f47f ae8e 	bne.w	8001b30 <HAL_GPIO_Init+0x14>
  }
}
 8001e14:	bf00      	nop
 8001e16:	bf00      	nop
 8001e18:	372c      	adds	r7, #44	@ 0x2c
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bc80      	pop	{r7}
 8001e1e:	4770      	bx	lr
 8001e20:	40010400 	.word	0x40010400

08001e24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b083      	sub	sp, #12
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	807b      	strh	r3, [r7, #2]
 8001e30:	4613      	mov	r3, r2
 8001e32:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e34:	787b      	ldrb	r3, [r7, #1]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e3a:	887a      	ldrh	r2, [r7, #2]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e40:	e003      	b.n	8001e4a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e42:	887b      	ldrh	r3, [r7, #2]
 8001e44:	041a      	lsls	r2, r3, #16
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	611a      	str	r2, [r3, #16]
}
 8001e4a:	bf00      	nop
 8001e4c:	370c      	adds	r7, #12
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	bc80      	pop	{r7}
 8001e52:	4770      	bx	lr

08001e54 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b085      	sub	sp, #20
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
 8001e5c:	460b      	mov	r3, r1
 8001e5e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	68db      	ldr	r3, [r3, #12]
 8001e64:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e66:	887a      	ldrh	r2, [r7, #2]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	041a      	lsls	r2, r3, #16
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	43d9      	mvns	r1, r3
 8001e72:	887b      	ldrh	r3, [r7, #2]
 8001e74:	400b      	ands	r3, r1
 8001e76:	431a      	orrs	r2, r3
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	611a      	str	r2, [r3, #16]
}
 8001e7c:	bf00      	nop
 8001e7e:	3714      	adds	r7, #20
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bc80      	pop	{r7}
 8001e84:	4770      	bx	lr
	...

08001e88 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b082      	sub	sp, #8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	4603      	mov	r3, r0
 8001e90:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001e92:	4b08      	ldr	r3, [pc, #32]	@ (8001eb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001e94:	695a      	ldr	r2, [r3, #20]
 8001e96:	88fb      	ldrh	r3, [r7, #6]
 8001e98:	4013      	ands	r3, r2
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d006      	beq.n	8001eac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e9e:	4a05      	ldr	r2, [pc, #20]	@ (8001eb4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ea0:	88fb      	ldrh	r3, [r7, #6]
 8001ea2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ea4:	88fb      	ldrh	r3, [r7, #6]
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f000 f806 	bl	8001eb8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001eac:	bf00      	nop
 8001eae:	3708      	adds	r7, #8
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	bd80      	pop	{r7, pc}
 8001eb4:	40010400 	.word	0x40010400

08001eb8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	4603      	mov	r3, r0
 8001ec0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001ec2:	bf00      	nop
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bc80      	pop	{r7}
 8001eca:	4770      	bx	lr

08001ecc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b084      	sub	sp, #16
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d101      	bne.n	8001ede <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e12b      	b.n	8002136 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d106      	bne.n	8001ef8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ef2:	6878      	ldr	r0, [r7, #4]
 8001ef4:	f7ff face 	bl	8001494 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	2224      	movs	r2, #36	@ 0x24
 8001efc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f022 0201 	bic.w	r2, r2, #1
 8001f0e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	681a      	ldr	r2, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f1e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f2e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f30:	f002 f864 	bl	8003ffc <HAL_RCC_GetPCLK1Freq>
 8001f34:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	4a81      	ldr	r2, [pc, #516]	@ (8002140 <HAL_I2C_Init+0x274>)
 8001f3c:	4293      	cmp	r3, r2
 8001f3e:	d807      	bhi.n	8001f50 <HAL_I2C_Init+0x84>
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	4a80      	ldr	r2, [pc, #512]	@ (8002144 <HAL_I2C_Init+0x278>)
 8001f44:	4293      	cmp	r3, r2
 8001f46:	bf94      	ite	ls
 8001f48:	2301      	movls	r3, #1
 8001f4a:	2300      	movhi	r3, #0
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	e006      	b.n	8001f5e <HAL_I2C_Init+0x92>
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	4a7d      	ldr	r2, [pc, #500]	@ (8002148 <HAL_I2C_Init+0x27c>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	bf94      	ite	ls
 8001f58:	2301      	movls	r3, #1
 8001f5a:	2300      	movhi	r3, #0
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e0e7      	b.n	8002136 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	4a78      	ldr	r2, [pc, #480]	@ (800214c <HAL_I2C_Init+0x280>)
 8001f6a:	fba2 2303 	umull	r2, r3, r2, r3
 8001f6e:	0c9b      	lsrs	r3, r3, #18
 8001f70:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	68ba      	ldr	r2, [r7, #8]
 8001f82:	430a      	orrs	r2, r1
 8001f84:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	6a1b      	ldr	r3, [r3, #32]
 8001f8c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	4a6a      	ldr	r2, [pc, #424]	@ (8002140 <HAL_I2C_Init+0x274>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d802      	bhi.n	8001fa0 <HAL_I2C_Init+0xd4>
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	3301      	adds	r3, #1
 8001f9e:	e009      	b.n	8001fb4 <HAL_I2C_Init+0xe8>
 8001fa0:	68bb      	ldr	r3, [r7, #8]
 8001fa2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8001fa6:	fb02 f303 	mul.w	r3, r2, r3
 8001faa:	4a69      	ldr	r2, [pc, #420]	@ (8002150 <HAL_I2C_Init+0x284>)
 8001fac:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb0:	099b      	lsrs	r3, r3, #6
 8001fb2:	3301      	adds	r3, #1
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	6812      	ldr	r2, [r2, #0]
 8001fb8:	430b      	orrs	r3, r1
 8001fba:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	69db      	ldr	r3, [r3, #28]
 8001fc2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8001fc6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	495c      	ldr	r1, [pc, #368]	@ (8002140 <HAL_I2C_Init+0x274>)
 8001fd0:	428b      	cmp	r3, r1
 8001fd2:	d819      	bhi.n	8002008 <HAL_I2C_Init+0x13c>
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	1e59      	subs	r1, r3, #1
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	005b      	lsls	r3, r3, #1
 8001fde:	fbb1 f3f3 	udiv	r3, r1, r3
 8001fe2:	1c59      	adds	r1, r3, #1
 8001fe4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8001fe8:	400b      	ands	r3, r1
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d00a      	beq.n	8002004 <HAL_I2C_Init+0x138>
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	1e59      	subs	r1, r3, #1
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	005b      	lsls	r3, r3, #1
 8001ff8:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ffc:	3301      	adds	r3, #1
 8001ffe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002002:	e051      	b.n	80020a8 <HAL_I2C_Init+0x1dc>
 8002004:	2304      	movs	r3, #4
 8002006:	e04f      	b.n	80020a8 <HAL_I2C_Init+0x1dc>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d111      	bne.n	8002034 <HAL_I2C_Init+0x168>
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	1e58      	subs	r0, r3, #1
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6859      	ldr	r1, [r3, #4]
 8002018:	460b      	mov	r3, r1
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	440b      	add	r3, r1
 800201e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002022:	3301      	adds	r3, #1
 8002024:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002028:	2b00      	cmp	r3, #0
 800202a:	bf0c      	ite	eq
 800202c:	2301      	moveq	r3, #1
 800202e:	2300      	movne	r3, #0
 8002030:	b2db      	uxtb	r3, r3
 8002032:	e012      	b.n	800205a <HAL_I2C_Init+0x18e>
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	1e58      	subs	r0, r3, #1
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6859      	ldr	r1, [r3, #4]
 800203c:	460b      	mov	r3, r1
 800203e:	009b      	lsls	r3, r3, #2
 8002040:	440b      	add	r3, r1
 8002042:	0099      	lsls	r1, r3, #2
 8002044:	440b      	add	r3, r1
 8002046:	fbb0 f3f3 	udiv	r3, r0, r3
 800204a:	3301      	adds	r3, #1
 800204c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002050:	2b00      	cmp	r3, #0
 8002052:	bf0c      	ite	eq
 8002054:	2301      	moveq	r3, #1
 8002056:	2300      	movne	r3, #0
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b00      	cmp	r3, #0
 800205c:	d001      	beq.n	8002062 <HAL_I2C_Init+0x196>
 800205e:	2301      	movs	r3, #1
 8002060:	e022      	b.n	80020a8 <HAL_I2C_Init+0x1dc>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	2b00      	cmp	r3, #0
 8002068:	d10e      	bne.n	8002088 <HAL_I2C_Init+0x1bc>
 800206a:	68fb      	ldr	r3, [r7, #12]
 800206c:	1e58      	subs	r0, r3, #1
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6859      	ldr	r1, [r3, #4]
 8002072:	460b      	mov	r3, r1
 8002074:	005b      	lsls	r3, r3, #1
 8002076:	440b      	add	r3, r1
 8002078:	fbb0 f3f3 	udiv	r3, r0, r3
 800207c:	3301      	adds	r3, #1
 800207e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002082:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002086:	e00f      	b.n	80020a8 <HAL_I2C_Init+0x1dc>
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	1e58      	subs	r0, r3, #1
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6859      	ldr	r1, [r3, #4]
 8002090:	460b      	mov	r3, r1
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	440b      	add	r3, r1
 8002096:	0099      	lsls	r1, r3, #2
 8002098:	440b      	add	r3, r1
 800209a:	fbb0 f3f3 	udiv	r3, r0, r3
 800209e:	3301      	adds	r3, #1
 80020a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020a4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80020a8:	6879      	ldr	r1, [r7, #4]
 80020aa:	6809      	ldr	r1, [r1, #0]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	69da      	ldr	r2, [r3, #28]
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6a1b      	ldr	r3, [r3, #32]
 80020c2:	431a      	orrs	r2, r3
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	430a      	orrs	r2, r1
 80020ca:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	689b      	ldr	r3, [r3, #8]
 80020d2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80020d6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80020da:	687a      	ldr	r2, [r7, #4]
 80020dc:	6911      	ldr	r1, [r2, #16]
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	68d2      	ldr	r2, [r2, #12]
 80020e2:	4311      	orrs	r1, r2
 80020e4:	687a      	ldr	r2, [r7, #4]
 80020e6:	6812      	ldr	r2, [r2, #0]
 80020e8:	430b      	orrs	r3, r1
 80020ea:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	695a      	ldr	r2, [r3, #20]
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	699b      	ldr	r3, [r3, #24]
 80020fe:	431a      	orrs	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	430a      	orrs	r2, r1
 8002106:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f042 0201 	orr.w	r2, r2, #1
 8002116:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	2200      	movs	r2, #0
 800211c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2220      	movs	r2, #32
 8002122:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	2200      	movs	r2, #0
 800212a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	2200      	movs	r2, #0
 8002130:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	000186a0 	.word	0x000186a0
 8002144:	001e847f 	.word	0x001e847f
 8002148:	003d08ff 	.word	0x003d08ff
 800214c:	431bde83 	.word	0x431bde83
 8002150:	10624dd3 	.word	0x10624dd3

08002154 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b08c      	sub	sp, #48	@ 0x30
 8002158:	af02      	add	r7, sp, #8
 800215a:	60f8      	str	r0, [r7, #12]
 800215c:	607a      	str	r2, [r7, #4]
 800215e:	461a      	mov	r2, r3
 8002160:	460b      	mov	r3, r1
 8002162:	817b      	strh	r3, [r7, #10]
 8002164:	4613      	mov	r3, r2
 8002166:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8002168:	2300      	movs	r3, #0
 800216a:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800216c:	f7ff fb9a 	bl	80018a4 <HAL_GetTick>
 8002170:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b20      	cmp	r3, #32
 800217c:	f040 824b 	bne.w	8002616 <HAL_I2C_Master_Receive+0x4c2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002182:	9300      	str	r3, [sp, #0]
 8002184:	2319      	movs	r3, #25
 8002186:	2201      	movs	r2, #1
 8002188:	497f      	ldr	r1, [pc, #508]	@ (8002388 <HAL_I2C_Master_Receive+0x234>)
 800218a:	68f8      	ldr	r0, [r7, #12]
 800218c:	f001 f936 	bl	80033fc <I2C_WaitOnFlagUntilTimeout>
 8002190:	4603      	mov	r3, r0
 8002192:	2b00      	cmp	r3, #0
 8002194:	d001      	beq.n	800219a <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8002196:	2302      	movs	r3, #2
 8002198:	e23e      	b.n	8002618 <HAL_I2C_Master_Receive+0x4c4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80021a0:	2b01      	cmp	r3, #1
 80021a2:	d101      	bne.n	80021a8 <HAL_I2C_Master_Receive+0x54>
 80021a4:	2302      	movs	r3, #2
 80021a6:	e237      	b.n	8002618 <HAL_I2C_Master_Receive+0x4c4>
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2201      	movs	r2, #1
 80021ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d007      	beq.n	80021ce <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681a      	ldr	r2, [r3, #0]
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f042 0201 	orr.w	r2, r2, #1
 80021cc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	68fb      	ldr	r3, [r7, #12]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80021dc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80021de:	68fb      	ldr	r3, [r7, #12]
 80021e0:	2222      	movs	r2, #34	@ 0x22
 80021e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	2210      	movs	r2, #16
 80021ea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	2200      	movs	r2, #0
 80021f2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	687a      	ldr	r2, [r7, #4]
 80021f8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	893a      	ldrh	r2, [r7, #8]
 80021fe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002204:	b29a      	uxth	r2, r3
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	4a5f      	ldr	r2, [pc, #380]	@ (800238c <HAL_I2C_Master_Receive+0x238>)
 800220e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002210:	8979      	ldrh	r1, [r7, #10]
 8002212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002214:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002216:	68f8      	ldr	r0, [r7, #12]
 8002218:	f000 fea4 	bl	8002f64 <I2C_MasterRequestRead>
 800221c:	4603      	mov	r3, r0
 800221e:	2b00      	cmp	r3, #0
 8002220:	d001      	beq.n	8002226 <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e1f8      	b.n	8002618 <HAL_I2C_Master_Receive+0x4c4>
    }

    if (hi2c->XferSize == 0U)
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800222a:	2b00      	cmp	r3, #0
 800222c:	d113      	bne.n	8002256 <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800222e:	2300      	movs	r3, #0
 8002230:	61fb      	str	r3, [r7, #28]
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	695b      	ldr	r3, [r3, #20]
 8002238:	61fb      	str	r3, [r7, #28]
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	699b      	ldr	r3, [r3, #24]
 8002240:	61fb      	str	r3, [r7, #28]
 8002242:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	e1cc      	b.n	80025f0 <HAL_I2C_Master_Receive+0x49c>
    }
    else if (hi2c->XferSize == 1U)
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800225a:	2b01      	cmp	r3, #1
 800225c:	d11e      	bne.n	800229c <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	681a      	ldr	r2, [r3, #0]
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800226c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800226e:	b672      	cpsid	i
}
 8002270:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002272:	2300      	movs	r3, #0
 8002274:	61bb      	str	r3, [r7, #24]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	695b      	ldr	r3, [r3, #20]
 800227c:	61bb      	str	r3, [r7, #24]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	699b      	ldr	r3, [r3, #24]
 8002284:	61bb      	str	r3, [r7, #24]
 8002286:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681a      	ldr	r2, [r3, #0]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002296:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002298:	b662      	cpsie	i
}
 800229a:	e035      	b.n	8002308 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d11e      	bne.n	80022e2 <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80022b2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 80022b4:	b672      	cpsid	i
}
 80022b6:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022b8:	2300      	movs	r3, #0
 80022ba:	617b      	str	r3, [r7, #20]
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	695b      	ldr	r3, [r3, #20]
 80022c2:	617b      	str	r3, [r7, #20]
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	699b      	ldr	r3, [r3, #24]
 80022ca:	617b      	str	r3, [r7, #20]
 80022cc:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	681a      	ldr	r2, [r3, #0]
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022dc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80022de:	b662      	cpsie	i
}
 80022e0:	e012      	b.n	8002308 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681a      	ldr	r2, [r3, #0]
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80022f0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022f2:	2300      	movs	r3, #0
 80022f4:	613b      	str	r3, [r7, #16]
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	695b      	ldr	r3, [r3, #20]
 80022fc:	613b      	str	r3, [r7, #16]
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	699b      	ldr	r3, [r3, #24]
 8002304:	613b      	str	r3, [r7, #16]
 8002306:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8002308:	e172      	b.n	80025f0 <HAL_I2C_Master_Receive+0x49c>
    {
      if (hi2c->XferSize <= 3U)
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800230e:	2b03      	cmp	r3, #3
 8002310:	f200 811f 	bhi.w	8002552 <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002318:	2b01      	cmp	r3, #1
 800231a:	d123      	bne.n	8002364 <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800231c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800231e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002320:	68f8      	ldr	r0, [r7, #12]
 8002322:	f001 fa15 	bl	8003750 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	e173      	b.n	8002618 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	691a      	ldr	r2, [r3, #16]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800233a:	b2d2      	uxtb	r2, r2
 800233c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002342:	1c5a      	adds	r2, r3, #1
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800234c:	3b01      	subs	r3, #1
 800234e:	b29a      	uxth	r2, r3
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002358:	b29b      	uxth	r3, r3
 800235a:	3b01      	subs	r3, #1
 800235c:	b29a      	uxth	r2, r3
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002362:	e145      	b.n	80025f0 <HAL_I2C_Master_Receive+0x49c>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002368:	2b02      	cmp	r3, #2
 800236a:	d152      	bne.n	8002412 <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800236c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800236e:	9300      	str	r3, [sp, #0]
 8002370:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002372:	2200      	movs	r2, #0
 8002374:	4906      	ldr	r1, [pc, #24]	@ (8002390 <HAL_I2C_Master_Receive+0x23c>)
 8002376:	68f8      	ldr	r0, [r7, #12]
 8002378:	f001 f840 	bl	80033fc <I2C_WaitOnFlagUntilTimeout>
 800237c:	4603      	mov	r3, r0
 800237e:	2b00      	cmp	r3, #0
 8002380:	d008      	beq.n	8002394 <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e148      	b.n	8002618 <HAL_I2C_Master_Receive+0x4c4>
 8002386:	bf00      	nop
 8002388:	00100002 	.word	0x00100002
 800238c:	ffff0000 	.word	0xffff0000
 8002390:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002394:	b672      	cpsid	i
}
 8002396:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	681a      	ldr	r2, [r3, #0]
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80023a6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	691a      	ldr	r2, [r3, #16]
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023b2:	b2d2      	uxtb	r2, r2
 80023b4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ba:	1c5a      	adds	r2, r3, #1
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023c4:	3b01      	subs	r3, #1
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	68fb      	ldr	r3, [r7, #12]
 80023ca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	3b01      	subs	r3, #1
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 80023da:	b662      	cpsie	i
}
 80023dc:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	691a      	ldr	r2, [r3, #16]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023e8:	b2d2      	uxtb	r2, r2
 80023ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023f0:	1c5a      	adds	r2, r3, #1
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80023fa:	3b01      	subs	r3, #1
 80023fc:	b29a      	uxth	r2, r3
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002406:	b29b      	uxth	r3, r3
 8002408:	3b01      	subs	r3, #1
 800240a:	b29a      	uxth	r2, r3
 800240c:	68fb      	ldr	r3, [r7, #12]
 800240e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002410:	e0ee      	b.n	80025f0 <HAL_I2C_Master_Receive+0x49c>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002412:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002414:	9300      	str	r3, [sp, #0]
 8002416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002418:	2200      	movs	r2, #0
 800241a:	4981      	ldr	r1, [pc, #516]	@ (8002620 <HAL_I2C_Master_Receive+0x4cc>)
 800241c:	68f8      	ldr	r0, [r7, #12]
 800241e:	f000 ffed 	bl	80033fc <I2C_WaitOnFlagUntilTimeout>
 8002422:	4603      	mov	r3, r0
 8002424:	2b00      	cmp	r3, #0
 8002426:	d001      	beq.n	800242c <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e0f5      	b.n	8002618 <HAL_I2C_Master_Receive+0x4c4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	681a      	ldr	r2, [r3, #0]
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800243a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800243c:	b672      	cpsid	i
}
 800243e:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	691a      	ldr	r2, [r3, #16]
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800244a:	b2d2      	uxtb	r2, r2
 800244c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002452:	1c5a      	adds	r2, r3, #1
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800245c:	3b01      	subs	r3, #1
 800245e:	b29a      	uxth	r2, r3
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002468:	b29b      	uxth	r3, r3
 800246a:	3b01      	subs	r3, #1
 800246c:	b29a      	uxth	r2, r3
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002472:	4b6c      	ldr	r3, [pc, #432]	@ (8002624 <HAL_I2C_Master_Receive+0x4d0>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	08db      	lsrs	r3, r3, #3
 8002478:	4a6b      	ldr	r2, [pc, #428]	@ (8002628 <HAL_I2C_Master_Receive+0x4d4>)
 800247a:	fba2 2303 	umull	r2, r3, r2, r3
 800247e:	0a1a      	lsrs	r2, r3, #8
 8002480:	4613      	mov	r3, r2
 8002482:	009b      	lsls	r3, r3, #2
 8002484:	4413      	add	r3, r2
 8002486:	00da      	lsls	r2, r3, #3
 8002488:	1ad3      	subs	r3, r2, r3
 800248a:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 800248c:	6a3b      	ldr	r3, [r7, #32]
 800248e:	3b01      	subs	r3, #1
 8002490:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002492:	6a3b      	ldr	r3, [r7, #32]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d118      	bne.n	80024ca <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	2200      	movs	r2, #0
 800249c:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	2220      	movs	r2, #32
 80024a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	2200      	movs	r2, #0
 80024aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b2:	f043 0220 	orr.w	r2, r3, #32
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 80024ba:	b662      	cpsie	i
}
 80024bc:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e0a6      	b.n	8002618 <HAL_I2C_Master_Receive+0x4c4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	695b      	ldr	r3, [r3, #20]
 80024d0:	f003 0304 	and.w	r3, r3, #4
 80024d4:	2b04      	cmp	r3, #4
 80024d6:	d1d9      	bne.n	800248c <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80024e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	691a      	ldr	r2, [r3, #16]
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024f2:	b2d2      	uxtb	r2, r2
 80024f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024fa:	1c5a      	adds	r2, r3, #1
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002504:	3b01      	subs	r3, #1
 8002506:	b29a      	uxth	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002510:	b29b      	uxth	r3, r3
 8002512:	3b01      	subs	r3, #1
 8002514:	b29a      	uxth	r2, r3
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 800251a:	b662      	cpsie	i
}
 800251c:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	691a      	ldr	r2, [r3, #16]
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002528:	b2d2      	uxtb	r2, r2
 800252a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002530:	1c5a      	adds	r2, r3, #1
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800253a:	3b01      	subs	r3, #1
 800253c:	b29a      	uxth	r2, r3
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002546:	b29b      	uxth	r3, r3
 8002548:	3b01      	subs	r3, #1
 800254a:	b29a      	uxth	r2, r3
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002550:	e04e      	b.n	80025f0 <HAL_I2C_Master_Receive+0x49c>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002552:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002554:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002556:	68f8      	ldr	r0, [r7, #12]
 8002558:	f001 f8fa 	bl	8003750 <I2C_WaitOnRXNEFlagUntilTimeout>
 800255c:	4603      	mov	r3, r0
 800255e:	2b00      	cmp	r3, #0
 8002560:	d001      	beq.n	8002566 <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	e058      	b.n	8002618 <HAL_I2C_Master_Receive+0x4c4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	691a      	ldr	r2, [r3, #16]
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002570:	b2d2      	uxtb	r2, r2
 8002572:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002578:	1c5a      	adds	r2, r3, #1
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002582:	3b01      	subs	r3, #1
 8002584:	b29a      	uxth	r2, r3
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800258e:	b29b      	uxth	r3, r3
 8002590:	3b01      	subs	r3, #1
 8002592:	b29a      	uxth	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	f003 0304 	and.w	r3, r3, #4
 80025a2:	2b04      	cmp	r3, #4
 80025a4:	d124      	bne.n	80025f0 <HAL_I2C_Master_Receive+0x49c>
        {

          if (hi2c->XferSize == 3U)
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025aa:	2b03      	cmp	r3, #3
 80025ac:	d107      	bne.n	80025be <HAL_I2C_Master_Receive+0x46a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	681a      	ldr	r2, [r3, #0]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80025bc:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	691a      	ldr	r2, [r3, #16]
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025c8:	b2d2      	uxtb	r2, r2
 80025ca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d0:	1c5a      	adds	r2, r3, #1
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025da:	3b01      	subs	r3, #1
 80025dc:	b29a      	uxth	r2, r3
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80025e6:	b29b      	uxth	r3, r3
 80025e8:	3b01      	subs	r3, #1
 80025ea:	b29a      	uxth	r2, r3
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	f47f ae88 	bne.w	800230a <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	2220      	movs	r2, #32
 80025fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2200      	movs	r2, #0
 8002606:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002612:	2300      	movs	r3, #0
 8002614:	e000      	b.n	8002618 <HAL_I2C_Master_Receive+0x4c4>
  }
  else
  {
    return HAL_BUSY;
 8002616:	2302      	movs	r3, #2
  }
}
 8002618:	4618      	mov	r0, r3
 800261a:	3728      	adds	r7, #40	@ 0x28
 800261c:	46bd      	mov	sp, r7
 800261e:	bd80      	pop	{r7, pc}
 8002620:	00010004 	.word	0x00010004
 8002624:	20000000 	.word	0x20000000
 8002628:	14f8b589 	.word	0x14f8b589

0800262c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b088      	sub	sp, #32
 8002630:	af02      	add	r7, sp, #8
 8002632:	60f8      	str	r0, [r7, #12]
 8002634:	4608      	mov	r0, r1
 8002636:	4611      	mov	r1, r2
 8002638:	461a      	mov	r2, r3
 800263a:	4603      	mov	r3, r0
 800263c:	817b      	strh	r3, [r7, #10]
 800263e:	460b      	mov	r3, r1
 8002640:	813b      	strh	r3, [r7, #8]
 8002642:	4613      	mov	r3, r2
 8002644:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002646:	f7ff f92d 	bl	80018a4 <HAL_GetTick>
 800264a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002652:	b2db      	uxtb	r3, r3
 8002654:	2b20      	cmp	r3, #32
 8002656:	f040 80d9 	bne.w	800280c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	9300      	str	r3, [sp, #0]
 800265e:	2319      	movs	r3, #25
 8002660:	2201      	movs	r2, #1
 8002662:	496d      	ldr	r1, [pc, #436]	@ (8002818 <HAL_I2C_Mem_Write+0x1ec>)
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f000 fec9 	bl	80033fc <I2C_WaitOnFlagUntilTimeout>
 800266a:	4603      	mov	r3, r0
 800266c:	2b00      	cmp	r3, #0
 800266e:	d001      	beq.n	8002674 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002670:	2302      	movs	r3, #2
 8002672:	e0cc      	b.n	800280e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800267a:	2b01      	cmp	r3, #1
 800267c:	d101      	bne.n	8002682 <HAL_I2C_Mem_Write+0x56>
 800267e:	2302      	movs	r3, #2
 8002680:	e0c5      	b.n	800280e <HAL_I2C_Mem_Write+0x1e2>
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	2b01      	cmp	r3, #1
 8002696:	d007      	beq.n	80026a8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f042 0201 	orr.w	r2, r2, #1
 80026a6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80026b6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	2221      	movs	r2, #33	@ 0x21
 80026bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	2240      	movs	r2, #64	@ 0x40
 80026c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	2200      	movs	r2, #0
 80026cc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	6a3a      	ldr	r2, [r7, #32]
 80026d2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80026d8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80026de:	b29a      	uxth	r2, r3
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	4a4d      	ldr	r2, [pc, #308]	@ (800281c <HAL_I2C_Mem_Write+0x1f0>)
 80026e8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80026ea:	88f8      	ldrh	r0, [r7, #6]
 80026ec:	893a      	ldrh	r2, [r7, #8]
 80026ee:	8979      	ldrh	r1, [r7, #10]
 80026f0:	697b      	ldr	r3, [r7, #20]
 80026f2:	9301      	str	r3, [sp, #4]
 80026f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80026f6:	9300      	str	r3, [sp, #0]
 80026f8:	4603      	mov	r3, r0
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	f000 fd00 	bl	8003100 <I2C_RequestMemoryWrite>
 8002700:	4603      	mov	r3, r0
 8002702:	2b00      	cmp	r3, #0
 8002704:	d052      	beq.n	80027ac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	e081      	b.n	800280e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800270a:	697a      	ldr	r2, [r7, #20]
 800270c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800270e:	68f8      	ldr	r0, [r7, #12]
 8002710:	f000 ff8e 	bl	8003630 <I2C_WaitOnTXEFlagUntilTimeout>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00d      	beq.n	8002736 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271e:	2b04      	cmp	r3, #4
 8002720:	d107      	bne.n	8002732 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681a      	ldr	r2, [r3, #0]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002730:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e06b      	b.n	800280e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800273a:	781a      	ldrb	r2, [r3, #0]
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002746:	1c5a      	adds	r2, r3, #1
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002750:	3b01      	subs	r3, #1
 8002752:	b29a      	uxth	r2, r3
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8002758:	68fb      	ldr	r3, [r7, #12]
 800275a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800275c:	b29b      	uxth	r3, r3
 800275e:	3b01      	subs	r3, #1
 8002760:	b29a      	uxth	r2, r3
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	695b      	ldr	r3, [r3, #20]
 800276c:	f003 0304 	and.w	r3, r3, #4
 8002770:	2b04      	cmp	r3, #4
 8002772:	d11b      	bne.n	80027ac <HAL_I2C_Mem_Write+0x180>
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002778:	2b00      	cmp	r3, #0
 800277a:	d017      	beq.n	80027ac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002780:	781a      	ldrb	r2, [r3, #0]
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800278c:	1c5a      	adds	r2, r3, #1
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002796:	3b01      	subs	r3, #1
 8002798:	b29a      	uxth	r2, r3
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800279e:	68fb      	ldr	r3, [r7, #12]
 80027a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80027a2:	b29b      	uxth	r3, r3
 80027a4:	3b01      	subs	r3, #1
 80027a6:	b29a      	uxth	r2, r3
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d1aa      	bne.n	800270a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027b4:	697a      	ldr	r2, [r7, #20]
 80027b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80027b8:	68f8      	ldr	r0, [r7, #12]
 80027ba:	f000 ff81 	bl	80036c0 <I2C_WaitOnBTFFlagUntilTimeout>
 80027be:	4603      	mov	r3, r0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d00d      	beq.n	80027e0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027c8:	2b04      	cmp	r3, #4
 80027ca:	d107      	bne.n	80027dc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	681a      	ldr	r2, [r3, #0]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027da:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80027dc:	2301      	movs	r3, #1
 80027de:	e016      	b.n	800280e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027e0:	68fb      	ldr	r3, [r7, #12]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80027ee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2220      	movs	r2, #32
 80027f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	2200      	movs	r2, #0
 80027fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	2200      	movs	r2, #0
 8002804:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002808:	2300      	movs	r3, #0
 800280a:	e000      	b.n	800280e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 800280c:	2302      	movs	r3, #2
  }
}
 800280e:	4618      	mov	r0, r3
 8002810:	3718      	adds	r7, #24
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
 8002816:	bf00      	nop
 8002818:	00100002 	.word	0x00100002
 800281c:	ffff0000 	.word	0xffff0000

08002820 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b08c      	sub	sp, #48	@ 0x30
 8002824:	af02      	add	r7, sp, #8
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	4608      	mov	r0, r1
 800282a:	4611      	mov	r1, r2
 800282c:	461a      	mov	r2, r3
 800282e:	4603      	mov	r3, r0
 8002830:	817b      	strh	r3, [r7, #10]
 8002832:	460b      	mov	r3, r1
 8002834:	813b      	strh	r3, [r7, #8]
 8002836:	4613      	mov	r3, r2
 8002838:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t count = 0U;
 800283a:	2300      	movs	r3, #0
 800283c:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800283e:	f7ff f831 	bl	80018a4 <HAL_GetTick>
 8002842:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800284a:	b2db      	uxtb	r3, r3
 800284c:	2b20      	cmp	r3, #32
 800284e:	f040 8250 	bne.w	8002cf2 <HAL_I2C_Mem_Read+0x4d2>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002854:	9300      	str	r3, [sp, #0]
 8002856:	2319      	movs	r3, #25
 8002858:	2201      	movs	r2, #1
 800285a:	4982      	ldr	r1, [pc, #520]	@ (8002a64 <HAL_I2C_Mem_Read+0x244>)
 800285c:	68f8      	ldr	r0, [r7, #12]
 800285e:	f000 fdcd 	bl	80033fc <I2C_WaitOnFlagUntilTimeout>
 8002862:	4603      	mov	r3, r0
 8002864:	2b00      	cmp	r3, #0
 8002866:	d001      	beq.n	800286c <HAL_I2C_Mem_Read+0x4c>
    {
      return HAL_BUSY;
 8002868:	2302      	movs	r3, #2
 800286a:	e243      	b.n	8002cf4 <HAL_I2C_Mem_Read+0x4d4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002872:	2b01      	cmp	r3, #1
 8002874:	d101      	bne.n	800287a <HAL_I2C_Mem_Read+0x5a>
 8002876:	2302      	movs	r3, #2
 8002878:	e23c      	b.n	8002cf4 <HAL_I2C_Mem_Read+0x4d4>
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2201      	movs	r2, #1
 800287e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f003 0301 	and.w	r3, r3, #1
 800288c:	2b01      	cmp	r3, #1
 800288e:	d007      	beq.n	80028a0 <HAL_I2C_Mem_Read+0x80>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f042 0201 	orr.w	r2, r2, #1
 800289e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028ae:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2222      	movs	r2, #34	@ 0x22
 80028b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2240      	movs	r2, #64	@ 0x40
 80028bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	2200      	movs	r2, #0
 80028c4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80028ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 80028d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80028d6:	b29a      	uxth	r2, r3
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	4a62      	ldr	r2, [pc, #392]	@ (8002a68 <HAL_I2C_Mem_Read+0x248>)
 80028e0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028e2:	88f8      	ldrh	r0, [r7, #6]
 80028e4:	893a      	ldrh	r2, [r7, #8]
 80028e6:	8979      	ldrh	r1, [r7, #10]
 80028e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ea:	9301      	str	r3, [sp, #4]
 80028ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80028ee:	9300      	str	r3, [sp, #0]
 80028f0:	4603      	mov	r3, r0
 80028f2:	68f8      	ldr	r0, [r7, #12]
 80028f4:	f000 fc9a 	bl	800322c <I2C_RequestMemoryRead>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d001      	beq.n	8002902 <HAL_I2C_Mem_Read+0xe2>
    {
      return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e1f8      	b.n	8002cf4 <HAL_I2C_Mem_Read+0x4d4>
    }

    if (hi2c->XferSize == 0U)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002906:	2b00      	cmp	r3, #0
 8002908:	d113      	bne.n	8002932 <HAL_I2C_Mem_Read+0x112>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800290a:	2300      	movs	r3, #0
 800290c:	61fb      	str	r3, [r7, #28]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	695b      	ldr	r3, [r3, #20]
 8002914:	61fb      	str	r3, [r7, #28]
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	699b      	ldr	r3, [r3, #24]
 800291c:	61fb      	str	r3, [r7, #28]
 800291e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	e1cc      	b.n	8002ccc <HAL_I2C_Mem_Read+0x4ac>
    }
    else if (hi2c->XferSize == 1U)
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002936:	2b01      	cmp	r3, #1
 8002938:	d11e      	bne.n	8002978 <HAL_I2C_Mem_Read+0x158>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002948:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 800294a:	b672      	cpsid	i
}
 800294c:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800294e:	2300      	movs	r3, #0
 8002950:	61bb      	str	r3, [r7, #24]
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	695b      	ldr	r3, [r3, #20]
 8002958:	61bb      	str	r3, [r7, #24]
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	699b      	ldr	r3, [r3, #24]
 8002960:	61bb      	str	r3, [r7, #24]
 8002962:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681a      	ldr	r2, [r3, #0]
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002972:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8002974:	b662      	cpsie	i
}
 8002976:	e035      	b.n	80029e4 <HAL_I2C_Mem_Read+0x1c4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800297c:	2b02      	cmp	r3, #2
 800297e:	d11e      	bne.n	80029be <HAL_I2C_Mem_Read+0x19e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	681a      	ldr	r2, [r3, #0]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800298e:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002990:	b672      	cpsid	i
}
 8002992:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
         software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002994:	2300      	movs	r3, #0
 8002996:	617b      	str	r3, [r7, #20]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	695b      	ldr	r3, [r3, #20]
 800299e:	617b      	str	r3, [r7, #20]
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	699b      	ldr	r3, [r3, #24]
 80029a6:	617b      	str	r3, [r7, #20]
 80029a8:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80029b8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 80029ba:	b662      	cpsie	i
}
 80029bc:	e012      	b.n	80029e4 <HAL_I2C_Mem_Read+0x1c4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	681a      	ldr	r2, [r3, #0]
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80029cc:	601a      	str	r2, [r3, #0]
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80029ce:	2300      	movs	r3, #0
 80029d0:	613b      	str	r3, [r7, #16]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	695b      	ldr	r3, [r3, #20]
 80029d8:	613b      	str	r3, [r7, #16]
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	613b      	str	r3, [r7, #16]
 80029e2:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 80029e4:	e172      	b.n	8002ccc <HAL_I2C_Mem_Read+0x4ac>
    {
      if (hi2c->XferSize <= 3U)
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029ea:	2b03      	cmp	r3, #3
 80029ec:	f200 811f 	bhi.w	8002c2e <HAL_I2C_Mem_Read+0x40e>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d123      	bne.n	8002a40 <HAL_I2C_Mem_Read+0x220>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029fa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80029fc:	68f8      	ldr	r0, [r7, #12]
 80029fe:	f000 fea7 	bl	8003750 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002a02:	4603      	mov	r3, r0
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d001      	beq.n	8002a0c <HAL_I2C_Mem_Read+0x1ec>
          {
            return HAL_ERROR;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	e173      	b.n	8002cf4 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	691a      	ldr	r2, [r3, #16]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a16:	b2d2      	uxtb	r2, r2
 8002a18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a1e:	1c5a      	adds	r2, r3, #1
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a28:	3b01      	subs	r3, #1
 8002a2a:	b29a      	uxth	r2, r3
 8002a2c:	68fb      	ldr	r3, [r7, #12]
 8002a2e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	3b01      	subs	r3, #1
 8002a38:	b29a      	uxth	r2, r3
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002a3e:	e145      	b.n	8002ccc <HAL_I2C_Mem_Read+0x4ac>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a44:	2b02      	cmp	r3, #2
 8002a46:	d152      	bne.n	8002aee <HAL_I2C_Mem_Read+0x2ce>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002a48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a4a:	9300      	str	r3, [sp, #0]
 8002a4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002a4e:	2200      	movs	r2, #0
 8002a50:	4906      	ldr	r1, [pc, #24]	@ (8002a6c <HAL_I2C_Mem_Read+0x24c>)
 8002a52:	68f8      	ldr	r0, [r7, #12]
 8002a54:	f000 fcd2 	bl	80033fc <I2C_WaitOnFlagUntilTimeout>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d008      	beq.n	8002a70 <HAL_I2C_Mem_Read+0x250>
          {
            return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e148      	b.n	8002cf4 <HAL_I2C_Mem_Read+0x4d4>
 8002a62:	bf00      	nop
 8002a64:	00100002 	.word	0x00100002
 8002a68:	ffff0000 	.word	0xffff0000
 8002a6c:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8002a70:	b672      	cpsid	i
}
 8002a72:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a82:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	691a      	ldr	r2, [r3, #16]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a8e:	b2d2      	uxtb	r2, r2
 8002a90:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a96:	1c5a      	adds	r2, r3, #1
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	3b01      	subs	r3, #1
 8002ab0:	b29a      	uxth	r2, r3
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002ab6:	b662      	cpsie	i
}
 8002ab8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	691a      	ldr	r2, [r3, #16]
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac4:	b2d2      	uxtb	r2, r2
 8002ac6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002acc:	1c5a      	adds	r2, r3, #1
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ad6:	3b01      	subs	r3, #1
 8002ad8:	b29a      	uxth	r2, r3
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	b29a      	uxth	r2, r3
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002aec:	e0ee      	b.n	8002ccc <HAL_I2C_Mem_Read+0x4ac>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002aee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002af0:	9300      	str	r3, [sp, #0]
 8002af2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002af4:	2200      	movs	r2, #0
 8002af6:	4981      	ldr	r1, [pc, #516]	@ (8002cfc <HAL_I2C_Mem_Read+0x4dc>)
 8002af8:	68f8      	ldr	r0, [r7, #12]
 8002afa:	f000 fc7f 	bl	80033fc <I2C_WaitOnFlagUntilTimeout>
 8002afe:	4603      	mov	r3, r0
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d001      	beq.n	8002b08 <HAL_I2C_Mem_Read+0x2e8>
          {
            return HAL_ERROR;
 8002b04:	2301      	movs	r3, #1
 8002b06:	e0f5      	b.n	8002cf4 <HAL_I2C_Mem_Read+0x4d4>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	681a      	ldr	r2, [r3, #0]
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b16:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8002b18:	b672      	cpsid	i
}
 8002b1a:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	691a      	ldr	r2, [r3, #16]
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b26:	b2d2      	uxtb	r2, r2
 8002b28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b2e:	1c5a      	adds	r2, r3, #1
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b44:	b29b      	uxth	r3, r3
 8002b46:	3b01      	subs	r3, #1
 8002b48:	b29a      	uxth	r2, r3
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8002b4e:	4b6c      	ldr	r3, [pc, #432]	@ (8002d00 <HAL_I2C_Mem_Read+0x4e0>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	08db      	lsrs	r3, r3, #3
 8002b54:	4a6b      	ldr	r2, [pc, #428]	@ (8002d04 <HAL_I2C_Mem_Read+0x4e4>)
 8002b56:	fba2 2303 	umull	r2, r3, r2, r3
 8002b5a:	0a1a      	lsrs	r2, r3, #8
 8002b5c:	4613      	mov	r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	4413      	add	r3, r2
 8002b62:	00da      	lsls	r2, r3, #3
 8002b64:	1ad3      	subs	r3, r2, r3
 8002b66:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8002b68:	6a3b      	ldr	r3, [r7, #32]
 8002b6a:	3b01      	subs	r3, #1
 8002b6c:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8002b6e:	6a3b      	ldr	r3, [r7, #32]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d118      	bne.n	8002ba6 <HAL_I2C_Mem_Read+0x386>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	2200      	movs	r2, #0
 8002b78:	631a      	str	r2, [r3, #48]	@ 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2220      	movs	r2, #32
 8002b7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	2200      	movs	r2, #0
 8002b86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b8e:	f043 0220 	orr.w	r2, r3, #32
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	641a      	str	r2, [r3, #64]	@ 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8002b96:	b662      	cpsie	i
}
 8002b98:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

              return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e0a6      	b.n	8002cf4 <HAL_I2C_Mem_Read+0x4d4>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	695b      	ldr	r3, [r3, #20]
 8002bac:	f003 0304 	and.w	r3, r3, #4
 8002bb0:	2b04      	cmp	r3, #4
 8002bb2:	d1d9      	bne.n	8002b68 <HAL_I2C_Mem_Read+0x348>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681a      	ldr	r2, [r3, #0]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002bc2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	691a      	ldr	r2, [r3, #16]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bce:	b2d2      	uxtb	r2, r2
 8002bd0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bd6:	1c5a      	adds	r2, r3, #1
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002be0:	3b01      	subs	r3, #1
 8002be2:	b29a      	uxth	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	b29a      	uxth	r2, r3
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8002bf6:	b662      	cpsie	i
}
 8002bf8:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	691a      	ldr	r2, [r3, #16]
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c04:	b2d2      	uxtb	r2, r2
 8002c06:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c0c:	1c5a      	adds	r2, r3, #1
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c16:	3b01      	subs	r3, #1
 8002c18:	b29a      	uxth	r2, r3
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c22:	b29b      	uxth	r3, r3
 8002c24:	3b01      	subs	r3, #1
 8002c26:	b29a      	uxth	r2, r3
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002c2c:	e04e      	b.n	8002ccc <HAL_I2C_Mem_Read+0x4ac>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c30:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002c32:	68f8      	ldr	r0, [r7, #12]
 8002c34:	f000 fd8c 	bl	8003750 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d001      	beq.n	8002c42 <HAL_I2C_Mem_Read+0x422>
        {
          return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e058      	b.n	8002cf4 <HAL_I2C_Mem_Read+0x4d4>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	691a      	ldr	r2, [r3, #16]
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c4c:	b2d2      	uxtb	r2, r2
 8002c4e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c54:	1c5a      	adds	r2, r3, #1
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c5e:	3b01      	subs	r3, #1
 8002c60:	b29a      	uxth	r2, r3
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	3b01      	subs	r3, #1
 8002c6e:	b29a      	uxth	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	695b      	ldr	r3, [r3, #20]
 8002c7a:	f003 0304 	and.w	r3, r3, #4
 8002c7e:	2b04      	cmp	r3, #4
 8002c80:	d124      	bne.n	8002ccc <HAL_I2C_Mem_Read+0x4ac>
        {
          if (hi2c->XferSize == 3U)
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c86:	2b03      	cmp	r3, #3
 8002c88:	d107      	bne.n	8002c9a <HAL_I2C_Mem_Read+0x47a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	681a      	ldr	r2, [r3, #0]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002c98:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	691a      	ldr	r2, [r3, #16]
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ca4:	b2d2      	uxtb	r2, r2
 8002ca6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cac:	1c5a      	adds	r2, r3, #1
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cb2:	68fb      	ldr	r3, [r7, #12]
 8002cb4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	b29a      	uxth	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cc2:	b29b      	uxth	r3, r3
 8002cc4:	3b01      	subs	r3, #1
 8002cc6:	b29a      	uxth	r2, r3
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cd0:	2b00      	cmp	r3, #0
 8002cd2:	f47f ae88 	bne.w	80029e6 <HAL_I2C_Mem_Read+0x1c6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2220      	movs	r2, #32
 8002cda:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	e000      	b.n	8002cf4 <HAL_I2C_Mem_Read+0x4d4>
  }
  else
  {
    return HAL_BUSY;
 8002cf2:	2302      	movs	r3, #2
  }
}
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	3728      	adds	r7, #40	@ 0x28
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	00010004 	.word	0x00010004
 8002d00:	20000000 	.word	0x20000000
 8002d04:	14f8b589 	.word	0x14f8b589

08002d08 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b08a      	sub	sp, #40	@ 0x28
 8002d0c:	af02      	add	r7, sp, #8
 8002d0e:	60f8      	str	r0, [r7, #12]
 8002d10:	607a      	str	r2, [r7, #4]
 8002d12:	603b      	str	r3, [r7, #0]
 8002d14:	460b      	mov	r3, r1
 8002d16:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8002d18:	f7fe fdc4 	bl	80018a4 <HAL_GetTick>
 8002d1c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8002d1e:	2300      	movs	r3, #0
 8002d20:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d28:	b2db      	uxtb	r3, r3
 8002d2a:	2b20      	cmp	r3, #32
 8002d2c:	f040 8111 	bne.w	8002f52 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	9300      	str	r3, [sp, #0]
 8002d34:	2319      	movs	r3, #25
 8002d36:	2201      	movs	r2, #1
 8002d38:	4988      	ldr	r1, [pc, #544]	@ (8002f5c <HAL_I2C_IsDeviceReady+0x254>)
 8002d3a:	68f8      	ldr	r0, [r7, #12]
 8002d3c:	f000 fb5e 	bl	80033fc <I2C_WaitOnFlagUntilTimeout>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d001      	beq.n	8002d4a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8002d46:	2302      	movs	r3, #2
 8002d48:	e104      	b.n	8002f54 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d50:	2b01      	cmp	r3, #1
 8002d52:	d101      	bne.n	8002d58 <HAL_I2C_IsDeviceReady+0x50>
 8002d54:	2302      	movs	r3, #2
 8002d56:	e0fd      	b.n	8002f54 <HAL_I2C_IsDeviceReady+0x24c>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 0301 	and.w	r3, r3, #1
 8002d6a:	2b01      	cmp	r3, #1
 8002d6c:	d007      	beq.n	8002d7e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f042 0201 	orr.w	r2, r2, #1
 8002d7c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	681a      	ldr	r2, [r3, #0]
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002d8c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2224      	movs	r2, #36	@ 0x24
 8002d92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	2200      	movs	r2, #0
 8002d9a:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	4a70      	ldr	r2, [pc, #448]	@ (8002f60 <HAL_I2C_IsDeviceReady+0x258>)
 8002da0:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	681a      	ldr	r2, [r3, #0]
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002db0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	9300      	str	r3, [sp, #0]
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	2200      	movs	r2, #0
 8002dba:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002dbe:	68f8      	ldr	r0, [r7, #12]
 8002dc0:	f000 fb1c 	bl	80033fc <I2C_WaitOnFlagUntilTimeout>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d00d      	beq.n	8002de6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dd4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002dd8:	d103      	bne.n	8002de2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002de0:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8002de2:	2303      	movs	r3, #3
 8002de4:	e0b6      	b.n	8002f54 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002de6:	897b      	ldrh	r3, [r7, #10]
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	461a      	mov	r2, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8002df4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8002df6:	f7fe fd55 	bl	80018a4 <HAL_GetTick>
 8002dfa:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	695b      	ldr	r3, [r3, #20]
 8002e02:	f003 0302 	and.w	r3, r3, #2
 8002e06:	2b02      	cmp	r3, #2
 8002e08:	bf0c      	ite	eq
 8002e0a:	2301      	moveq	r3, #1
 8002e0c:	2300      	movne	r3, #0
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	695b      	ldr	r3, [r3, #20]
 8002e18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e20:	bf0c      	ite	eq
 8002e22:	2301      	moveq	r3, #1
 8002e24:	2300      	movne	r3, #0
 8002e26:	b2db      	uxtb	r3, r3
 8002e28:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002e2a:	e025      	b.n	8002e78 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002e2c:	f7fe fd3a 	bl	80018a4 <HAL_GetTick>
 8002e30:	4602      	mov	r2, r0
 8002e32:	69fb      	ldr	r3, [r7, #28]
 8002e34:	1ad3      	subs	r3, r2, r3
 8002e36:	683a      	ldr	r2, [r7, #0]
 8002e38:	429a      	cmp	r2, r3
 8002e3a:	d302      	bcc.n	8002e42 <HAL_I2C_IsDeviceReady+0x13a>
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d103      	bne.n	8002e4a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	22a0      	movs	r2, #160	@ 0xa0
 8002e46:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	695b      	ldr	r3, [r3, #20]
 8002e50:	f003 0302 	and.w	r3, r3, #2
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	bf0c      	ite	eq
 8002e58:	2301      	moveq	r3, #1
 8002e5a:	2300      	movne	r3, #0
 8002e5c:	b2db      	uxtb	r3, r3
 8002e5e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	695b      	ldr	r3, [r3, #20]
 8002e66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002e6e:	bf0c      	ite	eq
 8002e70:	2301      	moveq	r3, #1
 8002e72:	2300      	movne	r3, #0
 8002e74:	b2db      	uxtb	r3, r3
 8002e76:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e7e:	b2db      	uxtb	r3, r3
 8002e80:	2ba0      	cmp	r3, #160	@ 0xa0
 8002e82:	d005      	beq.n	8002e90 <HAL_I2C_IsDeviceReady+0x188>
 8002e84:	7dfb      	ldrb	r3, [r7, #23]
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d102      	bne.n	8002e90 <HAL_I2C_IsDeviceReady+0x188>
 8002e8a:	7dbb      	ldrb	r3, [r7, #22]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d0cd      	beq.n	8002e2c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2220      	movs	r2, #32
 8002e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b02      	cmp	r3, #2
 8002ea4:	d129      	bne.n	8002efa <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	681a      	ldr	r2, [r3, #0]
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002eb4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	613b      	str	r3, [r7, #16]
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	695b      	ldr	r3, [r3, #20]
 8002ec0:	613b      	str	r3, [r7, #16]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	613b      	str	r3, [r7, #16]
 8002eca:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002ecc:	69fb      	ldr	r3, [r7, #28]
 8002ece:	9300      	str	r3, [sp, #0]
 8002ed0:	2319      	movs	r3, #25
 8002ed2:	2201      	movs	r2, #1
 8002ed4:	4921      	ldr	r1, [pc, #132]	@ (8002f5c <HAL_I2C_IsDeviceReady+0x254>)
 8002ed6:	68f8      	ldr	r0, [r7, #12]
 8002ed8:	f000 fa90 	bl	80033fc <I2C_WaitOnFlagUntilTimeout>
 8002edc:	4603      	mov	r3, r0
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d001      	beq.n	8002ee6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e036      	b.n	8002f54 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	2220      	movs	r2, #32
 8002eea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	e02c      	b.n	8002f54 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002f08:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8002f12:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f14:	69fb      	ldr	r3, [r7, #28]
 8002f16:	9300      	str	r3, [sp, #0]
 8002f18:	2319      	movs	r3, #25
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	490f      	ldr	r1, [pc, #60]	@ (8002f5c <HAL_I2C_IsDeviceReady+0x254>)
 8002f1e:	68f8      	ldr	r0, [r7, #12]
 8002f20:	f000 fa6c 	bl	80033fc <I2C_WaitOnFlagUntilTimeout>
 8002f24:	4603      	mov	r3, r0
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d001      	beq.n	8002f2e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	e012      	b.n	8002f54 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	3301      	adds	r3, #1
 8002f32:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8002f34:	69ba      	ldr	r2, [r7, #24]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	f4ff af32 	bcc.w	8002da2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2220      	movs	r2, #32
 8002f42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e000      	b.n	8002f54 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8002f52:	2302      	movs	r3, #2
  }
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3720      	adds	r7, #32
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	bd80      	pop	{r7, pc}
 8002f5c:	00100002 	.word	0x00100002
 8002f60:	ffff0000 	.word	0xffff0000

08002f64 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b088      	sub	sp, #32
 8002f68:	af02      	add	r7, sp, #8
 8002f6a:	60f8      	str	r0, [r7, #12]
 8002f6c:	607a      	str	r2, [r7, #4]
 8002f6e:	603b      	str	r3, [r7, #0]
 8002f70:	460b      	mov	r3, r1
 8002f72:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f78:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002f88:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002f8a:	697b      	ldr	r3, [r7, #20]
 8002f8c:	2b08      	cmp	r3, #8
 8002f8e:	d006      	beq.n	8002f9e <I2C_MasterRequestRead+0x3a>
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d003      	beq.n	8002f9e <I2C_MasterRequestRead+0x3a>
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8002f9c:	d108      	bne.n	8002fb0 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	681a      	ldr	r2, [r3, #0]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fac:	601a      	str	r2, [r3, #0]
 8002fae:	e00b      	b.n	8002fc8 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fb4:	2b11      	cmp	r3, #17
 8002fb6:	d107      	bne.n	8002fc8 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	681a      	ldr	r2, [r3, #0]
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002fc6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002fc8:	683b      	ldr	r3, [r7, #0]
 8002fca:	9300      	str	r3, [sp, #0]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8002fd4:	68f8      	ldr	r0, [r7, #12]
 8002fd6:	f000 fa11 	bl	80033fc <I2C_WaitOnFlagUntilTimeout>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d00d      	beq.n	8002ffc <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002fea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002fee:	d103      	bne.n	8002ff8 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ff6:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8002ff8:	2303      	movs	r3, #3
 8002ffa:	e079      	b.n	80030f0 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	691b      	ldr	r3, [r3, #16]
 8003000:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003004:	d108      	bne.n	8003018 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003006:	897b      	ldrh	r3, [r7, #10]
 8003008:	b2db      	uxtb	r3, r3
 800300a:	f043 0301 	orr.w	r3, r3, #1
 800300e:	b2da      	uxtb	r2, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	611a      	str	r2, [r3, #16]
 8003016:	e05f      	b.n	80030d8 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003018:	897b      	ldrh	r3, [r7, #10]
 800301a:	11db      	asrs	r3, r3, #7
 800301c:	b2db      	uxtb	r3, r3
 800301e:	f003 0306 	and.w	r3, r3, #6
 8003022:	b2db      	uxtb	r3, r3
 8003024:	f063 030f 	orn	r3, r3, #15
 8003028:	b2da      	uxtb	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	687a      	ldr	r2, [r7, #4]
 8003034:	4930      	ldr	r1, [pc, #192]	@ (80030f8 <I2C_MasterRequestRead+0x194>)
 8003036:	68f8      	ldr	r0, [r7, #12]
 8003038:	f000 fa5a 	bl	80034f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e054      	b.n	80030f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003046:	897b      	ldrh	r3, [r7, #10]
 8003048:	b2da      	uxtb	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	687a      	ldr	r2, [r7, #4]
 8003054:	4929      	ldr	r1, [pc, #164]	@ (80030fc <I2C_MasterRequestRead+0x198>)
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f000 fa4a 	bl	80034f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800305c:	4603      	mov	r3, r0
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8003062:	2301      	movs	r3, #1
 8003064:	e044      	b.n	80030f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003066:	2300      	movs	r3, #0
 8003068:	613b      	str	r3, [r7, #16]
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	613b      	str	r3, [r7, #16]
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	699b      	ldr	r3, [r3, #24]
 8003078:	613b      	str	r3, [r7, #16]
 800307a:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	681a      	ldr	r2, [r3, #0]
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800308a:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	9300      	str	r3, [sp, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2200      	movs	r2, #0
 8003094:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003098:	68f8      	ldr	r0, [r7, #12]
 800309a:	f000 f9af 	bl	80033fc <I2C_WaitOnFlagUntilTimeout>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d00d      	beq.n	80030c0 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80030b2:	d103      	bne.n	80030bc <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80030ba:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80030bc:	2303      	movs	r3, #3
 80030be:	e017      	b.n	80030f0 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80030c0:	897b      	ldrh	r3, [r7, #10]
 80030c2:	11db      	asrs	r3, r3, #7
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	f003 0306 	and.w	r3, r3, #6
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	f063 030e 	orn	r3, r3, #14
 80030d0:	b2da      	uxtb	r2, r3
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	687a      	ldr	r2, [r7, #4]
 80030dc:	4907      	ldr	r1, [pc, #28]	@ (80030fc <I2C_MasterRequestRead+0x198>)
 80030de:	68f8      	ldr	r0, [r7, #12]
 80030e0:	f000 fa06 	bl	80034f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80030e4:	4603      	mov	r3, r0
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d001      	beq.n	80030ee <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e000      	b.n	80030f0 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80030ee:	2300      	movs	r3, #0
}
 80030f0:	4618      	mov	r0, r3
 80030f2:	3718      	adds	r7, #24
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd80      	pop	{r7, pc}
 80030f8:	00010008 	.word	0x00010008
 80030fc:	00010002 	.word	0x00010002

08003100 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b088      	sub	sp, #32
 8003104:	af02      	add	r7, sp, #8
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	4608      	mov	r0, r1
 800310a:	4611      	mov	r1, r2
 800310c:	461a      	mov	r2, r3
 800310e:	4603      	mov	r3, r0
 8003110:	817b      	strh	r3, [r7, #10]
 8003112:	460b      	mov	r3, r1
 8003114:	813b      	strh	r3, [r7, #8]
 8003116:	4613      	mov	r3, r2
 8003118:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003128:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800312a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800312c:	9300      	str	r3, [sp, #0]
 800312e:	6a3b      	ldr	r3, [r7, #32]
 8003130:	2200      	movs	r2, #0
 8003132:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003136:	68f8      	ldr	r0, [r7, #12]
 8003138:	f000 f960 	bl	80033fc <I2C_WaitOnFlagUntilTimeout>
 800313c:	4603      	mov	r3, r0
 800313e:	2b00      	cmp	r3, #0
 8003140:	d00d      	beq.n	800315e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800314c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003150:	d103      	bne.n	800315a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003158:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800315a:	2303      	movs	r3, #3
 800315c:	e05f      	b.n	800321e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800315e:	897b      	ldrh	r3, [r7, #10]
 8003160:	b2db      	uxtb	r3, r3
 8003162:	461a      	mov	r2, r3
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800316c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800316e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003170:	6a3a      	ldr	r2, [r7, #32]
 8003172:	492d      	ldr	r1, [pc, #180]	@ (8003228 <I2C_RequestMemoryWrite+0x128>)
 8003174:	68f8      	ldr	r0, [r7, #12]
 8003176:	f000 f9bb 	bl	80034f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800317a:	4603      	mov	r3, r0
 800317c:	2b00      	cmp	r3, #0
 800317e:	d001      	beq.n	8003184 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003180:	2301      	movs	r3, #1
 8003182:	e04c      	b.n	800321e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003184:	2300      	movs	r3, #0
 8003186:	617b      	str	r3, [r7, #20]
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	617b      	str	r3, [r7, #20]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	699b      	ldr	r3, [r3, #24]
 8003196:	617b      	str	r3, [r7, #20]
 8003198:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800319a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800319c:	6a39      	ldr	r1, [r7, #32]
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f000 fa46 	bl	8003630 <I2C_WaitOnTXEFlagUntilTimeout>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d00d      	beq.n	80031c6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ae:	2b04      	cmp	r3, #4
 80031b0:	d107      	bne.n	80031c2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	681a      	ldr	r2, [r3, #0]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031c0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e02b      	b.n	800321e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80031c6:	88fb      	ldrh	r3, [r7, #6]
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d105      	bne.n	80031d8 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80031cc:	893b      	ldrh	r3, [r7, #8]
 80031ce:	b2da      	uxtb	r2, r3
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	611a      	str	r2, [r3, #16]
 80031d6:	e021      	b.n	800321c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80031d8:	893b      	ldrh	r3, [r7, #8]
 80031da:	0a1b      	lsrs	r3, r3, #8
 80031dc:	b29b      	uxth	r3, r3
 80031de:	b2da      	uxtb	r2, r3
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80031e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031e8:	6a39      	ldr	r1, [r7, #32]
 80031ea:	68f8      	ldr	r0, [r7, #12]
 80031ec:	f000 fa20 	bl	8003630 <I2C_WaitOnTXEFlagUntilTimeout>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d00d      	beq.n	8003212 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031fa:	2b04      	cmp	r3, #4
 80031fc:	d107      	bne.n	800320e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800320c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800320e:	2301      	movs	r3, #1
 8003210:	e005      	b.n	800321e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003212:	893b      	ldrh	r3, [r7, #8]
 8003214:	b2da      	uxtb	r2, r3
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800321c:	2300      	movs	r3, #0
}
 800321e:	4618      	mov	r0, r3
 8003220:	3718      	adds	r7, #24
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	00010002 	.word	0x00010002

0800322c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b088      	sub	sp, #32
 8003230:	af02      	add	r7, sp, #8
 8003232:	60f8      	str	r0, [r7, #12]
 8003234:	4608      	mov	r0, r1
 8003236:	4611      	mov	r1, r2
 8003238:	461a      	mov	r2, r3
 800323a:	4603      	mov	r3, r0
 800323c:	817b      	strh	r3, [r7, #10]
 800323e:	460b      	mov	r3, r1
 8003240:	813b      	strh	r3, [r7, #8]
 8003242:	4613      	mov	r3, r2
 8003244:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	681a      	ldr	r2, [r3, #0]
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003254:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003264:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003268:	9300      	str	r3, [sp, #0]
 800326a:	6a3b      	ldr	r3, [r7, #32]
 800326c:	2200      	movs	r2, #0
 800326e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003272:	68f8      	ldr	r0, [r7, #12]
 8003274:	f000 f8c2 	bl	80033fc <I2C_WaitOnFlagUntilTimeout>
 8003278:	4603      	mov	r3, r0
 800327a:	2b00      	cmp	r3, #0
 800327c:	d00d      	beq.n	800329a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003288:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800328c:	d103      	bne.n	8003296 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003294:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003296:	2303      	movs	r3, #3
 8003298:	e0aa      	b.n	80033f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800329a:	897b      	ldrh	r3, [r7, #10]
 800329c:	b2db      	uxtb	r3, r3
 800329e:	461a      	mov	r2, r3
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80032a8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80032aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ac:	6a3a      	ldr	r2, [r7, #32]
 80032ae:	4952      	ldr	r1, [pc, #328]	@ (80033f8 <I2C_RequestMemoryRead+0x1cc>)
 80032b0:	68f8      	ldr	r0, [r7, #12]
 80032b2:	f000 f91d 	bl	80034f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80032b6:	4603      	mov	r3, r0
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d001      	beq.n	80032c0 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e097      	b.n	80033f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032c0:	2300      	movs	r3, #0
 80032c2:	617b      	str	r3, [r7, #20]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	695b      	ldr	r3, [r3, #20]
 80032ca:	617b      	str	r3, [r7, #20]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	699b      	ldr	r3, [r3, #24]
 80032d2:	617b      	str	r3, [r7, #20]
 80032d4:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80032d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80032d8:	6a39      	ldr	r1, [r7, #32]
 80032da:	68f8      	ldr	r0, [r7, #12]
 80032dc:	f000 f9a8 	bl	8003630 <I2C_WaitOnTXEFlagUntilTimeout>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d00d      	beq.n	8003302 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032e6:	68fb      	ldr	r3, [r7, #12]
 80032e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032ea:	2b04      	cmp	r3, #4
 80032ec:	d107      	bne.n	80032fe <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	681a      	ldr	r2, [r3, #0]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80032fc:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	e076      	b.n	80033f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003302:	88fb      	ldrh	r3, [r7, #6]
 8003304:	2b01      	cmp	r3, #1
 8003306:	d105      	bne.n	8003314 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003308:	893b      	ldrh	r3, [r7, #8]
 800330a:	b2da      	uxtb	r2, r3
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	611a      	str	r2, [r3, #16]
 8003312:	e021      	b.n	8003358 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003314:	893b      	ldrh	r3, [r7, #8]
 8003316:	0a1b      	lsrs	r3, r3, #8
 8003318:	b29b      	uxth	r3, r3
 800331a:	b2da      	uxtb	r2, r3
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003322:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003324:	6a39      	ldr	r1, [r7, #32]
 8003326:	68f8      	ldr	r0, [r7, #12]
 8003328:	f000 f982 	bl	8003630 <I2C_WaitOnTXEFlagUntilTimeout>
 800332c:	4603      	mov	r3, r0
 800332e:	2b00      	cmp	r3, #0
 8003330:	d00d      	beq.n	800334e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003336:	2b04      	cmp	r3, #4
 8003338:	d107      	bne.n	800334a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	681a      	ldr	r2, [r3, #0]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003348:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800334a:	2301      	movs	r3, #1
 800334c:	e050      	b.n	80033f0 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800334e:	893b      	ldrh	r3, [r7, #8]
 8003350:	b2da      	uxtb	r2, r3
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003358:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800335a:	6a39      	ldr	r1, [r7, #32]
 800335c:	68f8      	ldr	r0, [r7, #12]
 800335e:	f000 f967 	bl	8003630 <I2C_WaitOnTXEFlagUntilTimeout>
 8003362:	4603      	mov	r3, r0
 8003364:	2b00      	cmp	r3, #0
 8003366:	d00d      	beq.n	8003384 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800336c:	2b04      	cmp	r3, #4
 800336e:	d107      	bne.n	8003380 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800337e:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e035      	b.n	80033f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	681a      	ldr	r2, [r3, #0]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003392:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003394:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003396:	9300      	str	r3, [sp, #0]
 8003398:	6a3b      	ldr	r3, [r7, #32]
 800339a:	2200      	movs	r2, #0
 800339c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80033a0:	68f8      	ldr	r0, [r7, #12]
 80033a2:	f000 f82b 	bl	80033fc <I2C_WaitOnFlagUntilTimeout>
 80033a6:	4603      	mov	r3, r0
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00d      	beq.n	80033c8 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033ba:	d103      	bne.n	80033c4 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80033c2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e013      	b.n	80033f0 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80033c8:	897b      	ldrh	r3, [r7, #10]
 80033ca:	b2db      	uxtb	r3, r3
 80033cc:	f043 0301 	orr.w	r3, r3, #1
 80033d0:	b2da      	uxtb	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80033d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033da:	6a3a      	ldr	r2, [r7, #32]
 80033dc:	4906      	ldr	r1, [pc, #24]	@ (80033f8 <I2C_RequestMemoryRead+0x1cc>)
 80033de:	68f8      	ldr	r0, [r7, #12]
 80033e0:	f000 f886 	bl	80034f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80033e4:	4603      	mov	r3, r0
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d001      	beq.n	80033ee <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e000      	b.n	80033f0 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 80033ee:	2300      	movs	r3, #0
}
 80033f0:	4618      	mov	r0, r3
 80033f2:	3718      	adds	r7, #24
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	00010002 	.word	0x00010002

080033fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	603b      	str	r3, [r7, #0]
 8003408:	4613      	mov	r3, r2
 800340a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800340c:	e048      	b.n	80034a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003414:	d044      	beq.n	80034a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003416:	f7fe fa45 	bl	80018a4 <HAL_GetTick>
 800341a:	4602      	mov	r2, r0
 800341c:	69bb      	ldr	r3, [r7, #24]
 800341e:	1ad3      	subs	r3, r2, r3
 8003420:	683a      	ldr	r2, [r7, #0]
 8003422:	429a      	cmp	r2, r3
 8003424:	d302      	bcc.n	800342c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	2b00      	cmp	r3, #0
 800342a:	d139      	bne.n	80034a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	0c1b      	lsrs	r3, r3, #16
 8003430:	b2db      	uxtb	r3, r3
 8003432:	2b01      	cmp	r3, #1
 8003434:	d10d      	bne.n	8003452 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	695b      	ldr	r3, [r3, #20]
 800343c:	43da      	mvns	r2, r3
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	4013      	ands	r3, r2
 8003442:	b29b      	uxth	r3, r3
 8003444:	2b00      	cmp	r3, #0
 8003446:	bf0c      	ite	eq
 8003448:	2301      	moveq	r3, #1
 800344a:	2300      	movne	r3, #0
 800344c:	b2db      	uxtb	r3, r3
 800344e:	461a      	mov	r2, r3
 8003450:	e00c      	b.n	800346c <I2C_WaitOnFlagUntilTimeout+0x70>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	43da      	mvns	r2, r3
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	4013      	ands	r3, r2
 800345e:	b29b      	uxth	r3, r3
 8003460:	2b00      	cmp	r3, #0
 8003462:	bf0c      	ite	eq
 8003464:	2301      	moveq	r3, #1
 8003466:	2300      	movne	r3, #0
 8003468:	b2db      	uxtb	r3, r3
 800346a:	461a      	mov	r2, r3
 800346c:	79fb      	ldrb	r3, [r7, #7]
 800346e:	429a      	cmp	r2, r3
 8003470:	d116      	bne.n	80034a0 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	2200      	movs	r2, #0
 8003476:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2220      	movs	r2, #32
 800347c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800348c:	f043 0220 	orr.w	r2, r3, #32
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	2200      	movs	r2, #0
 8003498:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e023      	b.n	80034e8 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80034a0:	68bb      	ldr	r3, [r7, #8]
 80034a2:	0c1b      	lsrs	r3, r3, #16
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d10d      	bne.n	80034c6 <I2C_WaitOnFlagUntilTimeout+0xca>
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	695b      	ldr	r3, [r3, #20]
 80034b0:	43da      	mvns	r2, r3
 80034b2:	68bb      	ldr	r3, [r7, #8]
 80034b4:	4013      	ands	r3, r2
 80034b6:	b29b      	uxth	r3, r3
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	bf0c      	ite	eq
 80034bc:	2301      	moveq	r3, #1
 80034be:	2300      	movne	r3, #0
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	461a      	mov	r2, r3
 80034c4:	e00c      	b.n	80034e0 <I2C_WaitOnFlagUntilTimeout+0xe4>
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	699b      	ldr	r3, [r3, #24]
 80034cc:	43da      	mvns	r2, r3
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	4013      	ands	r3, r2
 80034d2:	b29b      	uxth	r3, r3
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	bf0c      	ite	eq
 80034d8:	2301      	moveq	r3, #1
 80034da:	2300      	movne	r3, #0
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	461a      	mov	r2, r3
 80034e0:	79fb      	ldrb	r3, [r7, #7]
 80034e2:	429a      	cmp	r2, r3
 80034e4:	d093      	beq.n	800340e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3710      	adds	r7, #16
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
 80034fc:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80034fe:	e071      	b.n	80035e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800350a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800350e:	d123      	bne.n	8003558 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800351e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003528:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2200      	movs	r2, #0
 800352e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2220      	movs	r2, #32
 8003534:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003544:	f043 0204 	orr.w	r2, r3, #4
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e067      	b.n	8003628 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800355e:	d041      	beq.n	80035e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003560:	f7fe f9a0 	bl	80018a4 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	687a      	ldr	r2, [r7, #4]
 800356c:	429a      	cmp	r2, r3
 800356e:	d302      	bcc.n	8003576 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2b00      	cmp	r3, #0
 8003574:	d136      	bne.n	80035e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003576:	68bb      	ldr	r3, [r7, #8]
 8003578:	0c1b      	lsrs	r3, r3, #16
 800357a:	b2db      	uxtb	r3, r3
 800357c:	2b01      	cmp	r3, #1
 800357e:	d10c      	bne.n	800359a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	43da      	mvns	r2, r3
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	4013      	ands	r3, r2
 800358c:	b29b      	uxth	r3, r3
 800358e:	2b00      	cmp	r3, #0
 8003590:	bf14      	ite	ne
 8003592:	2301      	movne	r3, #1
 8003594:	2300      	moveq	r3, #0
 8003596:	b2db      	uxtb	r3, r3
 8003598:	e00b      	b.n	80035b2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	699b      	ldr	r3, [r3, #24]
 80035a0:	43da      	mvns	r2, r3
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	4013      	ands	r3, r2
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	bf14      	ite	ne
 80035ac:	2301      	movne	r3, #1
 80035ae:	2300      	moveq	r3, #0
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d016      	beq.n	80035e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2200      	movs	r2, #0
 80035ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2220      	movs	r2, #32
 80035c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2200      	movs	r2, #0
 80035c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035d0:	f043 0220 	orr.w	r2, r3, #32
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e021      	b.n	8003628 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	0c1b      	lsrs	r3, r3, #16
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d10c      	bne.n	8003608 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	695b      	ldr	r3, [r3, #20]
 80035f4:	43da      	mvns	r2, r3
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	4013      	ands	r3, r2
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	bf14      	ite	ne
 8003600:	2301      	movne	r3, #1
 8003602:	2300      	moveq	r3, #0
 8003604:	b2db      	uxtb	r3, r3
 8003606:	e00b      	b.n	8003620 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	699b      	ldr	r3, [r3, #24]
 800360e:	43da      	mvns	r2, r3
 8003610:	68bb      	ldr	r3, [r7, #8]
 8003612:	4013      	ands	r3, r2
 8003614:	b29b      	uxth	r3, r3
 8003616:	2b00      	cmp	r3, #0
 8003618:	bf14      	ite	ne
 800361a:	2301      	movne	r3, #1
 800361c:	2300      	moveq	r3, #0
 800361e:	b2db      	uxtb	r3, r3
 8003620:	2b00      	cmp	r3, #0
 8003622:	f47f af6d 	bne.w	8003500 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003626:	2300      	movs	r3, #0
}
 8003628:	4618      	mov	r0, r3
 800362a:	3710      	adds	r7, #16
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b084      	sub	sp, #16
 8003634:	af00      	add	r7, sp, #0
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	60b9      	str	r1, [r7, #8]
 800363a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800363c:	e034      	b.n	80036a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800363e:	68f8      	ldr	r0, [r7, #12]
 8003640:	f000 f8e3 	bl	800380a <I2C_IsAcknowledgeFailed>
 8003644:	4603      	mov	r3, r0
 8003646:	2b00      	cmp	r3, #0
 8003648:	d001      	beq.n	800364e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e034      	b.n	80036b8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003654:	d028      	beq.n	80036a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003656:	f7fe f925 	bl	80018a4 <HAL_GetTick>
 800365a:	4602      	mov	r2, r0
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	1ad3      	subs	r3, r2, r3
 8003660:	68ba      	ldr	r2, [r7, #8]
 8003662:	429a      	cmp	r2, r3
 8003664:	d302      	bcc.n	800366c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003666:	68bb      	ldr	r3, [r7, #8]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d11d      	bne.n	80036a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003676:	2b80      	cmp	r3, #128	@ 0x80
 8003678:	d016      	beq.n	80036a8 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2200      	movs	r2, #0
 800367e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2220      	movs	r2, #32
 8003684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003694:	f043 0220 	orr.w	r2, r3, #32
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2200      	movs	r2, #0
 80036a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80036a4:	2301      	movs	r3, #1
 80036a6:	e007      	b.n	80036b8 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	695b      	ldr	r3, [r3, #20]
 80036ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036b2:	2b80      	cmp	r3, #128	@ 0x80
 80036b4:	d1c3      	bne.n	800363e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80036b6:	2300      	movs	r3, #0
}
 80036b8:	4618      	mov	r0, r3
 80036ba:	3710      	adds	r7, #16
 80036bc:	46bd      	mov	sp, r7
 80036be:	bd80      	pop	{r7, pc}

080036c0 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80036cc:	e034      	b.n	8003738 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80036ce:	68f8      	ldr	r0, [r7, #12]
 80036d0:	f000 f89b 	bl	800380a <I2C_IsAcknowledgeFailed>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d001      	beq.n	80036de <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80036da:	2301      	movs	r3, #1
 80036dc:	e034      	b.n	8003748 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036e4:	d028      	beq.n	8003738 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80036e6:	f7fe f8dd 	bl	80018a4 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	68ba      	ldr	r2, [r7, #8]
 80036f2:	429a      	cmp	r2, r3
 80036f4:	d302      	bcc.n	80036fc <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80036f6:	68bb      	ldr	r3, [r7, #8]
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d11d      	bne.n	8003738 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	695b      	ldr	r3, [r3, #20]
 8003702:	f003 0304 	and.w	r3, r3, #4
 8003706:	2b04      	cmp	r3, #4
 8003708:	d016      	beq.n	8003738 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2220      	movs	r2, #32
 8003714:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	2200      	movs	r2, #0
 800371c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003724:	f043 0220 	orr.w	r2, r3, #32
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2200      	movs	r2, #0
 8003730:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e007      	b.n	8003748 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	f003 0304 	and.w	r3, r3, #4
 8003742:	2b04      	cmp	r3, #4
 8003744:	d1c3      	bne.n	80036ce <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003746:	2300      	movs	r3, #0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003750:	b580      	push	{r7, lr}
 8003752:	b084      	sub	sp, #16
 8003754:	af00      	add	r7, sp, #0
 8003756:	60f8      	str	r0, [r7, #12]
 8003758:	60b9      	str	r1, [r7, #8]
 800375a:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800375c:	e049      	b.n	80037f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	695b      	ldr	r3, [r3, #20]
 8003764:	f003 0310 	and.w	r3, r3, #16
 8003768:	2b10      	cmp	r3, #16
 800376a:	d119      	bne.n	80037a0 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f06f 0210 	mvn.w	r2, #16
 8003774:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	2200      	movs	r2, #0
 800377a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	2220      	movs	r2, #32
 8003780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	2200      	movs	r2, #0
 8003788:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	2200      	movs	r2, #0
 8003798:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800379c:	2301      	movs	r3, #1
 800379e:	e030      	b.n	8003802 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80037a0:	f7fe f880 	bl	80018a4 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	68ba      	ldr	r2, [r7, #8]
 80037ac:	429a      	cmp	r2, r3
 80037ae:	d302      	bcc.n	80037b6 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d11d      	bne.n	80037f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	695b      	ldr	r3, [r3, #20]
 80037bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037c0:	2b40      	cmp	r3, #64	@ 0x40
 80037c2:	d016      	beq.n	80037f2 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2220      	movs	r2, #32
 80037ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	2200      	movs	r2, #0
 80037d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037de:	f043 0220 	orr.w	r2, r3, #32
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e007      	b.n	8003802 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	695b      	ldr	r3, [r3, #20]
 80037f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037fc:	2b40      	cmp	r3, #64	@ 0x40
 80037fe:	d1ae      	bne.n	800375e <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003800:	2300      	movs	r3, #0
}
 8003802:	4618      	mov	r0, r3
 8003804:	3710      	adds	r7, #16
 8003806:	46bd      	mov	sp, r7
 8003808:	bd80      	pop	{r7, pc}

0800380a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800380a:	b480      	push	{r7}
 800380c:	b083      	sub	sp, #12
 800380e:	af00      	add	r7, sp, #0
 8003810:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	695b      	ldr	r3, [r3, #20]
 8003818:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800381c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003820:	d11b      	bne.n	800385a <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800382a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2200      	movs	r2, #0
 8003830:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2220      	movs	r2, #32
 8003836:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2200      	movs	r2, #0
 800383e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003846:	f043 0204 	orr.w	r2, r3, #4
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e000      	b.n	800385c <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800385a:	2300      	movs	r3, #0
}
 800385c:	4618      	mov	r0, r3
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	bc80      	pop	{r7}
 8003864:	4770      	bx	lr
	...

08003868 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	b086      	sub	sp, #24
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d101      	bne.n	800387a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e272      	b.n	8003d60 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f003 0301 	and.w	r3, r3, #1
 8003882:	2b00      	cmp	r3, #0
 8003884:	f000 8087 	beq.w	8003996 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003888:	4b92      	ldr	r3, [pc, #584]	@ (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	f003 030c 	and.w	r3, r3, #12
 8003890:	2b04      	cmp	r3, #4
 8003892:	d00c      	beq.n	80038ae <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003894:	4b8f      	ldr	r3, [pc, #572]	@ (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 8003896:	685b      	ldr	r3, [r3, #4]
 8003898:	f003 030c 	and.w	r3, r3, #12
 800389c:	2b08      	cmp	r3, #8
 800389e:	d112      	bne.n	80038c6 <HAL_RCC_OscConfig+0x5e>
 80038a0:	4b8c      	ldr	r3, [pc, #560]	@ (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80038a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038ac:	d10b      	bne.n	80038c6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80038ae:	4b89      	ldr	r3, [pc, #548]	@ (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d06c      	beq.n	8003994 <HAL_RCC_OscConfig+0x12c>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d168      	bne.n	8003994 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e24c      	b.n	8003d60 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80038ce:	d106      	bne.n	80038de <HAL_RCC_OscConfig+0x76>
 80038d0:	4b80      	ldr	r3, [pc, #512]	@ (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a7f      	ldr	r2, [pc, #508]	@ (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 80038d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80038da:	6013      	str	r3, [r2, #0]
 80038dc:	e02e      	b.n	800393c <HAL_RCC_OscConfig+0xd4>
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	685b      	ldr	r3, [r3, #4]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d10c      	bne.n	8003900 <HAL_RCC_OscConfig+0x98>
 80038e6:	4b7b      	ldr	r3, [pc, #492]	@ (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4a7a      	ldr	r2, [pc, #488]	@ (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 80038ec:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80038f0:	6013      	str	r3, [r2, #0]
 80038f2:	4b78      	ldr	r3, [pc, #480]	@ (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a77      	ldr	r2, [pc, #476]	@ (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 80038f8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80038fc:	6013      	str	r3, [r2, #0]
 80038fe:	e01d      	b.n	800393c <HAL_RCC_OscConfig+0xd4>
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	685b      	ldr	r3, [r3, #4]
 8003904:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003908:	d10c      	bne.n	8003924 <HAL_RCC_OscConfig+0xbc>
 800390a:	4b72      	ldr	r3, [pc, #456]	@ (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a71      	ldr	r2, [pc, #452]	@ (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 8003910:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003914:	6013      	str	r3, [r2, #0]
 8003916:	4b6f      	ldr	r3, [pc, #444]	@ (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	4a6e      	ldr	r2, [pc, #440]	@ (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 800391c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003920:	6013      	str	r3, [r2, #0]
 8003922:	e00b      	b.n	800393c <HAL_RCC_OscConfig+0xd4>
 8003924:	4b6b      	ldr	r3, [pc, #428]	@ (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a6a      	ldr	r2, [pc, #424]	@ (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 800392a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800392e:	6013      	str	r3, [r2, #0]
 8003930:	4b68      	ldr	r3, [pc, #416]	@ (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a67      	ldr	r2, [pc, #412]	@ (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 8003936:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800393a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	685b      	ldr	r3, [r3, #4]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d013      	beq.n	800396c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003944:	f7fd ffae 	bl	80018a4 <HAL_GetTick>
 8003948:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800394a:	e008      	b.n	800395e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800394c:	f7fd ffaa 	bl	80018a4 <HAL_GetTick>
 8003950:	4602      	mov	r2, r0
 8003952:	693b      	ldr	r3, [r7, #16]
 8003954:	1ad3      	subs	r3, r2, r3
 8003956:	2b64      	cmp	r3, #100	@ 0x64
 8003958:	d901      	bls.n	800395e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800395a:	2303      	movs	r3, #3
 800395c:	e200      	b.n	8003d60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800395e:	4b5d      	ldr	r3, [pc, #372]	@ (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d0f0      	beq.n	800394c <HAL_RCC_OscConfig+0xe4>
 800396a:	e014      	b.n	8003996 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800396c:	f7fd ff9a 	bl	80018a4 <HAL_GetTick>
 8003970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003972:	e008      	b.n	8003986 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003974:	f7fd ff96 	bl	80018a4 <HAL_GetTick>
 8003978:	4602      	mov	r2, r0
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	1ad3      	subs	r3, r2, r3
 800397e:	2b64      	cmp	r3, #100	@ 0x64
 8003980:	d901      	bls.n	8003986 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003982:	2303      	movs	r3, #3
 8003984:	e1ec      	b.n	8003d60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003986:	4b53      	ldr	r3, [pc, #332]	@ (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800398e:	2b00      	cmp	r3, #0
 8003990:	d1f0      	bne.n	8003974 <HAL_RCC_OscConfig+0x10c>
 8003992:	e000      	b.n	8003996 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003994:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d063      	beq.n	8003a6a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80039a2:	4b4c      	ldr	r3, [pc, #304]	@ (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	f003 030c 	and.w	r3, r3, #12
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d00b      	beq.n	80039c6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80039ae:	4b49      	ldr	r3, [pc, #292]	@ (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f003 030c 	and.w	r3, r3, #12
 80039b6:	2b08      	cmp	r3, #8
 80039b8:	d11c      	bne.n	80039f4 <HAL_RCC_OscConfig+0x18c>
 80039ba:	4b46      	ldr	r3, [pc, #280]	@ (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d116      	bne.n	80039f4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039c6:	4b43      	ldr	r3, [pc, #268]	@ (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f003 0302 	and.w	r3, r3, #2
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d005      	beq.n	80039de <HAL_RCC_OscConfig+0x176>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	691b      	ldr	r3, [r3, #16]
 80039d6:	2b01      	cmp	r3, #1
 80039d8:	d001      	beq.n	80039de <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e1c0      	b.n	8003d60 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80039de:	4b3d      	ldr	r3, [pc, #244]	@ (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	695b      	ldr	r3, [r3, #20]
 80039ea:	00db      	lsls	r3, r3, #3
 80039ec:	4939      	ldr	r1, [pc, #228]	@ (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 80039ee:	4313      	orrs	r3, r2
 80039f0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80039f2:	e03a      	b.n	8003a6a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	691b      	ldr	r3, [r3, #16]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d020      	beq.n	8003a3e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80039fc:	4b36      	ldr	r3, [pc, #216]	@ (8003ad8 <HAL_RCC_OscConfig+0x270>)
 80039fe:	2201      	movs	r2, #1
 8003a00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a02:	f7fd ff4f 	bl	80018a4 <HAL_GetTick>
 8003a06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a08:	e008      	b.n	8003a1c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a0a:	f7fd ff4b 	bl	80018a4 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	693b      	ldr	r3, [r7, #16]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d901      	bls.n	8003a1c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003a18:	2303      	movs	r3, #3
 8003a1a:	e1a1      	b.n	8003d60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003a1c:	4b2d      	ldr	r3, [pc, #180]	@ (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d0f0      	beq.n	8003a0a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003a28:	4b2a      	ldr	r3, [pc, #168]	@ (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	695b      	ldr	r3, [r3, #20]
 8003a34:	00db      	lsls	r3, r3, #3
 8003a36:	4927      	ldr	r1, [pc, #156]	@ (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	600b      	str	r3, [r1, #0]
 8003a3c:	e015      	b.n	8003a6a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003a3e:	4b26      	ldr	r3, [pc, #152]	@ (8003ad8 <HAL_RCC_OscConfig+0x270>)
 8003a40:	2200      	movs	r2, #0
 8003a42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a44:	f7fd ff2e 	bl	80018a4 <HAL_GetTick>
 8003a48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a4a:	e008      	b.n	8003a5e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003a4c:	f7fd ff2a 	bl	80018a4 <HAL_GetTick>
 8003a50:	4602      	mov	r2, r0
 8003a52:	693b      	ldr	r3, [r7, #16]
 8003a54:	1ad3      	subs	r3, r2, r3
 8003a56:	2b02      	cmp	r3, #2
 8003a58:	d901      	bls.n	8003a5e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003a5a:	2303      	movs	r3, #3
 8003a5c:	e180      	b.n	8003d60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003a5e:	4b1d      	ldr	r3, [pc, #116]	@ (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d1f0      	bne.n	8003a4c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0308 	and.w	r3, r3, #8
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d03a      	beq.n	8003aec <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	699b      	ldr	r3, [r3, #24]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d019      	beq.n	8003ab2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003a7e:	4b17      	ldr	r3, [pc, #92]	@ (8003adc <HAL_RCC_OscConfig+0x274>)
 8003a80:	2201      	movs	r2, #1
 8003a82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a84:	f7fd ff0e 	bl	80018a4 <HAL_GetTick>
 8003a88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a8a:	e008      	b.n	8003a9e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003a8c:	f7fd ff0a 	bl	80018a4 <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	2b02      	cmp	r3, #2
 8003a98:	d901      	bls.n	8003a9e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003a9a:	2303      	movs	r3, #3
 8003a9c:	e160      	b.n	8003d60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003a9e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ad4 <HAL_RCC_OscConfig+0x26c>)
 8003aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa2:	f003 0302 	and.w	r3, r3, #2
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d0f0      	beq.n	8003a8c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003aaa:	2001      	movs	r0, #1
 8003aac:	f000 face 	bl	800404c <RCC_Delay>
 8003ab0:	e01c      	b.n	8003aec <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ab2:	4b0a      	ldr	r3, [pc, #40]	@ (8003adc <HAL_RCC_OscConfig+0x274>)
 8003ab4:	2200      	movs	r2, #0
 8003ab6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003ab8:	f7fd fef4 	bl	80018a4 <HAL_GetTick>
 8003abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003abe:	e00f      	b.n	8003ae0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003ac0:	f7fd fef0 	bl	80018a4 <HAL_GetTick>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	693b      	ldr	r3, [r7, #16]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b02      	cmp	r3, #2
 8003acc:	d908      	bls.n	8003ae0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003ace:	2303      	movs	r3, #3
 8003ad0:	e146      	b.n	8003d60 <HAL_RCC_OscConfig+0x4f8>
 8003ad2:	bf00      	nop
 8003ad4:	40021000 	.word	0x40021000
 8003ad8:	42420000 	.word	0x42420000
 8003adc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ae0:	4b92      	ldr	r3, [pc, #584]	@ (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003ae2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ae4:	f003 0302 	and.w	r3, r3, #2
 8003ae8:	2b00      	cmp	r3, #0
 8003aea:	d1e9      	bne.n	8003ac0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0304 	and.w	r3, r3, #4
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	f000 80a6 	beq.w	8003c46 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003afa:	2300      	movs	r3, #0
 8003afc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003afe:	4b8b      	ldr	r3, [pc, #556]	@ (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003b00:	69db      	ldr	r3, [r3, #28]
 8003b02:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d10d      	bne.n	8003b26 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b0a:	4b88      	ldr	r3, [pc, #544]	@ (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003b0c:	69db      	ldr	r3, [r3, #28]
 8003b0e:	4a87      	ldr	r2, [pc, #540]	@ (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003b10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003b14:	61d3      	str	r3, [r2, #28]
 8003b16:	4b85      	ldr	r3, [pc, #532]	@ (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003b18:	69db      	ldr	r3, [r3, #28]
 8003b1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003b1e:	60bb      	str	r3, [r7, #8]
 8003b20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003b22:	2301      	movs	r3, #1
 8003b24:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b26:	4b82      	ldr	r3, [pc, #520]	@ (8003d30 <HAL_RCC_OscConfig+0x4c8>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d118      	bne.n	8003b64 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003b32:	4b7f      	ldr	r3, [pc, #508]	@ (8003d30 <HAL_RCC_OscConfig+0x4c8>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a7e      	ldr	r2, [pc, #504]	@ (8003d30 <HAL_RCC_OscConfig+0x4c8>)
 8003b38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003b3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003b3e:	f7fd feb1 	bl	80018a4 <HAL_GetTick>
 8003b42:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b44:	e008      	b.n	8003b58 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003b46:	f7fd fead 	bl	80018a4 <HAL_GetTick>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	1ad3      	subs	r3, r2, r3
 8003b50:	2b64      	cmp	r3, #100	@ 0x64
 8003b52:	d901      	bls.n	8003b58 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003b54:	2303      	movs	r3, #3
 8003b56:	e103      	b.n	8003d60 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003b58:	4b75      	ldr	r3, [pc, #468]	@ (8003d30 <HAL_RCC_OscConfig+0x4c8>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d0f0      	beq.n	8003b46 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d106      	bne.n	8003b7a <HAL_RCC_OscConfig+0x312>
 8003b6c:	4b6f      	ldr	r3, [pc, #444]	@ (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003b6e:	6a1b      	ldr	r3, [r3, #32]
 8003b70:	4a6e      	ldr	r2, [pc, #440]	@ (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003b72:	f043 0301 	orr.w	r3, r3, #1
 8003b76:	6213      	str	r3, [r2, #32]
 8003b78:	e02d      	b.n	8003bd6 <HAL_RCC_OscConfig+0x36e>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	68db      	ldr	r3, [r3, #12]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d10c      	bne.n	8003b9c <HAL_RCC_OscConfig+0x334>
 8003b82:	4b6a      	ldr	r3, [pc, #424]	@ (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	4a69      	ldr	r2, [pc, #420]	@ (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003b88:	f023 0301 	bic.w	r3, r3, #1
 8003b8c:	6213      	str	r3, [r2, #32]
 8003b8e:	4b67      	ldr	r3, [pc, #412]	@ (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	4a66      	ldr	r2, [pc, #408]	@ (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003b94:	f023 0304 	bic.w	r3, r3, #4
 8003b98:	6213      	str	r3, [r2, #32]
 8003b9a:	e01c      	b.n	8003bd6 <HAL_RCC_OscConfig+0x36e>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	2b05      	cmp	r3, #5
 8003ba2:	d10c      	bne.n	8003bbe <HAL_RCC_OscConfig+0x356>
 8003ba4:	4b61      	ldr	r3, [pc, #388]	@ (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003ba6:	6a1b      	ldr	r3, [r3, #32]
 8003ba8:	4a60      	ldr	r2, [pc, #384]	@ (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003baa:	f043 0304 	orr.w	r3, r3, #4
 8003bae:	6213      	str	r3, [r2, #32]
 8003bb0:	4b5e      	ldr	r3, [pc, #376]	@ (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003bb2:	6a1b      	ldr	r3, [r3, #32]
 8003bb4:	4a5d      	ldr	r2, [pc, #372]	@ (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003bb6:	f043 0301 	orr.w	r3, r3, #1
 8003bba:	6213      	str	r3, [r2, #32]
 8003bbc:	e00b      	b.n	8003bd6 <HAL_RCC_OscConfig+0x36e>
 8003bbe:	4b5b      	ldr	r3, [pc, #364]	@ (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003bc0:	6a1b      	ldr	r3, [r3, #32]
 8003bc2:	4a5a      	ldr	r2, [pc, #360]	@ (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003bc4:	f023 0301 	bic.w	r3, r3, #1
 8003bc8:	6213      	str	r3, [r2, #32]
 8003bca:	4b58      	ldr	r3, [pc, #352]	@ (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003bcc:	6a1b      	ldr	r3, [r3, #32]
 8003bce:	4a57      	ldr	r2, [pc, #348]	@ (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003bd0:	f023 0304 	bic.w	r3, r3, #4
 8003bd4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d015      	beq.n	8003c0a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bde:	f7fd fe61 	bl	80018a4 <HAL_GetTick>
 8003be2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003be4:	e00a      	b.n	8003bfc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003be6:	f7fd fe5d 	bl	80018a4 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003bf4:	4293      	cmp	r3, r2
 8003bf6:	d901      	bls.n	8003bfc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003bf8:	2303      	movs	r3, #3
 8003bfa:	e0b1      	b.n	8003d60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003bfc:	4b4b      	ldr	r3, [pc, #300]	@ (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003bfe:	6a1b      	ldr	r3, [r3, #32]
 8003c00:	f003 0302 	and.w	r3, r3, #2
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d0ee      	beq.n	8003be6 <HAL_RCC_OscConfig+0x37e>
 8003c08:	e014      	b.n	8003c34 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c0a:	f7fd fe4b 	bl	80018a4 <HAL_GetTick>
 8003c0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c10:	e00a      	b.n	8003c28 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c12:	f7fd fe47 	bl	80018a4 <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	693b      	ldr	r3, [r7, #16]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d901      	bls.n	8003c28 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003c24:	2303      	movs	r3, #3
 8003c26:	e09b      	b.n	8003d60 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c28:	4b40      	ldr	r3, [pc, #256]	@ (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003c2a:	6a1b      	ldr	r3, [r3, #32]
 8003c2c:	f003 0302 	and.w	r3, r3, #2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d1ee      	bne.n	8003c12 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003c34:	7dfb      	ldrb	r3, [r7, #23]
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d105      	bne.n	8003c46 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003c3a:	4b3c      	ldr	r3, [pc, #240]	@ (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003c3c:	69db      	ldr	r3, [r3, #28]
 8003c3e:	4a3b      	ldr	r2, [pc, #236]	@ (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003c40:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003c44:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	69db      	ldr	r3, [r3, #28]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	f000 8087 	beq.w	8003d5e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003c50:	4b36      	ldr	r3, [pc, #216]	@ (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	f003 030c 	and.w	r3, r3, #12
 8003c58:	2b08      	cmp	r3, #8
 8003c5a:	d061      	beq.n	8003d20 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	69db      	ldr	r3, [r3, #28]
 8003c60:	2b02      	cmp	r3, #2
 8003c62:	d146      	bne.n	8003cf2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003c64:	4b33      	ldr	r3, [pc, #204]	@ (8003d34 <HAL_RCC_OscConfig+0x4cc>)
 8003c66:	2200      	movs	r2, #0
 8003c68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c6a:	f7fd fe1b 	bl	80018a4 <HAL_GetTick>
 8003c6e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c70:	e008      	b.n	8003c84 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003c72:	f7fd fe17 	bl	80018a4 <HAL_GetTick>
 8003c76:	4602      	mov	r2, r0
 8003c78:	693b      	ldr	r3, [r7, #16]
 8003c7a:	1ad3      	subs	r3, r2, r3
 8003c7c:	2b02      	cmp	r3, #2
 8003c7e:	d901      	bls.n	8003c84 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003c80:	2303      	movs	r3, #3
 8003c82:	e06d      	b.n	8003d60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c84:	4b29      	ldr	r3, [pc, #164]	@ (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d1f0      	bne.n	8003c72 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	6a1b      	ldr	r3, [r3, #32]
 8003c94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c98:	d108      	bne.n	8003cac <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003c9a:	4b24      	ldr	r3, [pc, #144]	@ (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003c9c:	685b      	ldr	r3, [r3, #4]
 8003c9e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	689b      	ldr	r3, [r3, #8]
 8003ca6:	4921      	ldr	r1, [pc, #132]	@ (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cac:	4b1f      	ldr	r3, [pc, #124]	@ (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	6a19      	ldr	r1, [r3, #32]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cbc:	430b      	orrs	r3, r1
 8003cbe:	491b      	ldr	r1, [pc, #108]	@ (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003cc4:	4b1b      	ldr	r3, [pc, #108]	@ (8003d34 <HAL_RCC_OscConfig+0x4cc>)
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cca:	f7fd fdeb 	bl	80018a4 <HAL_GetTick>
 8003cce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003cd0:	e008      	b.n	8003ce4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003cd2:	f7fd fde7 	bl	80018a4 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	2b02      	cmp	r3, #2
 8003cde:	d901      	bls.n	8003ce4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	e03d      	b.n	8003d60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003ce4:	4b11      	ldr	r3, [pc, #68]	@ (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d0f0      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x46a>
 8003cf0:	e035      	b.n	8003d5e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003cf2:	4b10      	ldr	r3, [pc, #64]	@ (8003d34 <HAL_RCC_OscConfig+0x4cc>)
 8003cf4:	2200      	movs	r2, #0
 8003cf6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cf8:	f7fd fdd4 	bl	80018a4 <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003cfe:	e008      	b.n	8003d12 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003d00:	f7fd fdd0 	bl	80018a4 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d901      	bls.n	8003d12 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003d0e:	2303      	movs	r3, #3
 8003d10:	e026      	b.n	8003d60 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003d12:	4b06      	ldr	r3, [pc, #24]	@ (8003d2c <HAL_RCC_OscConfig+0x4c4>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1f0      	bne.n	8003d00 <HAL_RCC_OscConfig+0x498>
 8003d1e:	e01e      	b.n	8003d5e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	69db      	ldr	r3, [r3, #28]
 8003d24:	2b01      	cmp	r3, #1
 8003d26:	d107      	bne.n	8003d38 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003d28:	2301      	movs	r3, #1
 8003d2a:	e019      	b.n	8003d60 <HAL_RCC_OscConfig+0x4f8>
 8003d2c:	40021000 	.word	0x40021000
 8003d30:	40007000 	.word	0x40007000
 8003d34:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003d38:	4b0b      	ldr	r3, [pc, #44]	@ (8003d68 <HAL_RCC_OscConfig+0x500>)
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a1b      	ldr	r3, [r3, #32]
 8003d48:	429a      	cmp	r2, r3
 8003d4a:	d106      	bne.n	8003d5a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d56:	429a      	cmp	r2, r3
 8003d58:	d001      	beq.n	8003d5e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e000      	b.n	8003d60 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	4618      	mov	r0, r3
 8003d62:	3718      	adds	r7, #24
 8003d64:	46bd      	mov	sp, r7
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	40021000 	.word	0x40021000

08003d6c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
 8003d74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d101      	bne.n	8003d80 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e0d0      	b.n	8003f22 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003d80:	4b6a      	ldr	r3, [pc, #424]	@ (8003f2c <HAL_RCC_ClockConfig+0x1c0>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f003 0307 	and.w	r3, r3, #7
 8003d88:	683a      	ldr	r2, [r7, #0]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d910      	bls.n	8003db0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003d8e:	4b67      	ldr	r3, [pc, #412]	@ (8003f2c <HAL_RCC_ClockConfig+0x1c0>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	f023 0207 	bic.w	r2, r3, #7
 8003d96:	4965      	ldr	r1, [pc, #404]	@ (8003f2c <HAL_RCC_ClockConfig+0x1c0>)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003d9e:	4b63      	ldr	r3, [pc, #396]	@ (8003f2c <HAL_RCC_ClockConfig+0x1c0>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 0307 	and.w	r3, r3, #7
 8003da6:	683a      	ldr	r2, [r7, #0]
 8003da8:	429a      	cmp	r2, r3
 8003daa:	d001      	beq.n	8003db0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003dac:	2301      	movs	r3, #1
 8003dae:	e0b8      	b.n	8003f22 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	f003 0302 	and.w	r3, r3, #2
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d020      	beq.n	8003dfe <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f003 0304 	and.w	r3, r3, #4
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d005      	beq.n	8003dd4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003dc8:	4b59      	ldr	r3, [pc, #356]	@ (8003f30 <HAL_RCC_ClockConfig+0x1c4>)
 8003dca:	685b      	ldr	r3, [r3, #4]
 8003dcc:	4a58      	ldr	r2, [pc, #352]	@ (8003f30 <HAL_RCC_ClockConfig+0x1c4>)
 8003dce:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003dd2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0308 	and.w	r3, r3, #8
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d005      	beq.n	8003dec <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003de0:	4b53      	ldr	r3, [pc, #332]	@ (8003f30 <HAL_RCC_ClockConfig+0x1c4>)
 8003de2:	685b      	ldr	r3, [r3, #4]
 8003de4:	4a52      	ldr	r2, [pc, #328]	@ (8003f30 <HAL_RCC_ClockConfig+0x1c4>)
 8003de6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003dea:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003dec:	4b50      	ldr	r3, [pc, #320]	@ (8003f30 <HAL_RCC_ClockConfig+0x1c4>)
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	494d      	ldr	r1, [pc, #308]	@ (8003f30 <HAL_RCC_ClockConfig+0x1c4>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0301 	and.w	r3, r3, #1
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d040      	beq.n	8003e8c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d107      	bne.n	8003e22 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003e12:	4b47      	ldr	r3, [pc, #284]	@ (8003f30 <HAL_RCC_ClockConfig+0x1c4>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d115      	bne.n	8003e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e07f      	b.n	8003f22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	685b      	ldr	r3, [r3, #4]
 8003e26:	2b02      	cmp	r3, #2
 8003e28:	d107      	bne.n	8003e3a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e2a:	4b41      	ldr	r3, [pc, #260]	@ (8003f30 <HAL_RCC_ClockConfig+0x1c4>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d109      	bne.n	8003e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e073      	b.n	8003f22 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e3a:	4b3d      	ldr	r3, [pc, #244]	@ (8003f30 <HAL_RCC_ClockConfig+0x1c4>)
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	f003 0302 	and.w	r3, r3, #2
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d101      	bne.n	8003e4a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003e46:	2301      	movs	r3, #1
 8003e48:	e06b      	b.n	8003f22 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003e4a:	4b39      	ldr	r3, [pc, #228]	@ (8003f30 <HAL_RCC_ClockConfig+0x1c4>)
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f023 0203 	bic.w	r2, r3, #3
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	685b      	ldr	r3, [r3, #4]
 8003e56:	4936      	ldr	r1, [pc, #216]	@ (8003f30 <HAL_RCC_ClockConfig+0x1c4>)
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003e5c:	f7fd fd22 	bl	80018a4 <HAL_GetTick>
 8003e60:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e62:	e00a      	b.n	8003e7a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003e64:	f7fd fd1e 	bl	80018a4 <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d901      	bls.n	8003e7a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e053      	b.n	8003f22 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003e7a:	4b2d      	ldr	r3, [pc, #180]	@ (8003f30 <HAL_RCC_ClockConfig+0x1c4>)
 8003e7c:	685b      	ldr	r3, [r3, #4]
 8003e7e:	f003 020c 	and.w	r2, r3, #12
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	685b      	ldr	r3, [r3, #4]
 8003e86:	009b      	lsls	r3, r3, #2
 8003e88:	429a      	cmp	r2, r3
 8003e8a:	d1eb      	bne.n	8003e64 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003e8c:	4b27      	ldr	r3, [pc, #156]	@ (8003f2c <HAL_RCC_ClockConfig+0x1c0>)
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	f003 0307 	and.w	r3, r3, #7
 8003e94:	683a      	ldr	r2, [r7, #0]
 8003e96:	429a      	cmp	r2, r3
 8003e98:	d210      	bcs.n	8003ebc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003e9a:	4b24      	ldr	r3, [pc, #144]	@ (8003f2c <HAL_RCC_ClockConfig+0x1c0>)
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f023 0207 	bic.w	r2, r3, #7
 8003ea2:	4922      	ldr	r1, [pc, #136]	@ (8003f2c <HAL_RCC_ClockConfig+0x1c0>)
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eaa:	4b20      	ldr	r3, [pc, #128]	@ (8003f2c <HAL_RCC_ClockConfig+0x1c0>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f003 0307 	and.w	r3, r3, #7
 8003eb2:	683a      	ldr	r2, [r7, #0]
 8003eb4:	429a      	cmp	r2, r3
 8003eb6:	d001      	beq.n	8003ebc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e032      	b.n	8003f22 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f003 0304 	and.w	r3, r3, #4
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d008      	beq.n	8003eda <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ec8:	4b19      	ldr	r3, [pc, #100]	@ (8003f30 <HAL_RCC_ClockConfig+0x1c4>)
 8003eca:	685b      	ldr	r3, [r3, #4]
 8003ecc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	4916      	ldr	r1, [pc, #88]	@ (8003f30 <HAL_RCC_ClockConfig+0x1c4>)
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	f003 0308 	and.w	r3, r3, #8
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d009      	beq.n	8003efa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003ee6:	4b12      	ldr	r3, [pc, #72]	@ (8003f30 <HAL_RCC_ClockConfig+0x1c4>)
 8003ee8:	685b      	ldr	r3, [r3, #4]
 8003eea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	691b      	ldr	r3, [r3, #16]
 8003ef2:	00db      	lsls	r3, r3, #3
 8003ef4:	490e      	ldr	r1, [pc, #56]	@ (8003f30 <HAL_RCC_ClockConfig+0x1c4>)
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003efa:	f000 f821 	bl	8003f40 <HAL_RCC_GetSysClockFreq>
 8003efe:	4602      	mov	r2, r0
 8003f00:	4b0b      	ldr	r3, [pc, #44]	@ (8003f30 <HAL_RCC_ClockConfig+0x1c4>)
 8003f02:	685b      	ldr	r3, [r3, #4]
 8003f04:	091b      	lsrs	r3, r3, #4
 8003f06:	f003 030f 	and.w	r3, r3, #15
 8003f0a:	490a      	ldr	r1, [pc, #40]	@ (8003f34 <HAL_RCC_ClockConfig+0x1c8>)
 8003f0c:	5ccb      	ldrb	r3, [r1, r3]
 8003f0e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f12:	4a09      	ldr	r2, [pc, #36]	@ (8003f38 <HAL_RCC_ClockConfig+0x1cc>)
 8003f14:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003f16:	4b09      	ldr	r3, [pc, #36]	@ (8003f3c <HAL_RCC_ClockConfig+0x1d0>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	f7fd fc80 	bl	8001820 <HAL_InitTick>

  return HAL_OK;
 8003f20:	2300      	movs	r3, #0
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3710      	adds	r7, #16
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
 8003f2a:	bf00      	nop
 8003f2c:	40022000 	.word	0x40022000
 8003f30:	40021000 	.word	0x40021000
 8003f34:	08009708 	.word	0x08009708
 8003f38:	20000000 	.word	0x20000000
 8003f3c:	20000004 	.word	0x20000004

08003f40 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b087      	sub	sp, #28
 8003f44:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003f46:	2300      	movs	r3, #0
 8003f48:	60fb      	str	r3, [r7, #12]
 8003f4a:	2300      	movs	r3, #0
 8003f4c:	60bb      	str	r3, [r7, #8]
 8003f4e:	2300      	movs	r3, #0
 8003f50:	617b      	str	r3, [r7, #20]
 8003f52:	2300      	movs	r3, #0
 8003f54:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003f56:	2300      	movs	r3, #0
 8003f58:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003f5a:	4b1e      	ldr	r3, [pc, #120]	@ (8003fd4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	f003 030c 	and.w	r3, r3, #12
 8003f66:	2b04      	cmp	r3, #4
 8003f68:	d002      	beq.n	8003f70 <HAL_RCC_GetSysClockFreq+0x30>
 8003f6a:	2b08      	cmp	r3, #8
 8003f6c:	d003      	beq.n	8003f76 <HAL_RCC_GetSysClockFreq+0x36>
 8003f6e:	e027      	b.n	8003fc0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003f70:	4b19      	ldr	r3, [pc, #100]	@ (8003fd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003f72:	613b      	str	r3, [r7, #16]
      break;
 8003f74:	e027      	b.n	8003fc6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	0c9b      	lsrs	r3, r3, #18
 8003f7a:	f003 030f 	and.w	r3, r3, #15
 8003f7e:	4a17      	ldr	r2, [pc, #92]	@ (8003fdc <HAL_RCC_GetSysClockFreq+0x9c>)
 8003f80:	5cd3      	ldrb	r3, [r2, r3]
 8003f82:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d010      	beq.n	8003fb0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003f8e:	4b11      	ldr	r3, [pc, #68]	@ (8003fd4 <HAL_RCC_GetSysClockFreq+0x94>)
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	0c5b      	lsrs	r3, r3, #17
 8003f94:	f003 0301 	and.w	r3, r3, #1
 8003f98:	4a11      	ldr	r2, [pc, #68]	@ (8003fe0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003f9a:	5cd3      	ldrb	r3, [r2, r3]
 8003f9c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	4a0d      	ldr	r2, [pc, #52]	@ (8003fd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003fa2:	fb03 f202 	mul.w	r2, r3, r2
 8003fa6:	68bb      	ldr	r3, [r7, #8]
 8003fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fac:	617b      	str	r3, [r7, #20]
 8003fae:	e004      	b.n	8003fba <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a0c      	ldr	r2, [pc, #48]	@ (8003fe4 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003fb4:	fb02 f303 	mul.w	r3, r2, r3
 8003fb8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	613b      	str	r3, [r7, #16]
      break;
 8003fbe:	e002      	b.n	8003fc6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003fc0:	4b05      	ldr	r3, [pc, #20]	@ (8003fd8 <HAL_RCC_GetSysClockFreq+0x98>)
 8003fc2:	613b      	str	r3, [r7, #16]
      break;
 8003fc4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003fc6:	693b      	ldr	r3, [r7, #16]
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	371c      	adds	r7, #28
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bc80      	pop	{r7}
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	40021000 	.word	0x40021000
 8003fd8:	007a1200 	.word	0x007a1200
 8003fdc:	08009720 	.word	0x08009720
 8003fe0:	08009730 	.word	0x08009730
 8003fe4:	003d0900 	.word	0x003d0900

08003fe8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003fe8:	b480      	push	{r7}
 8003fea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003fec:	4b02      	ldr	r3, [pc, #8]	@ (8003ff8 <HAL_RCC_GetHCLKFreq+0x10>)
 8003fee:	681b      	ldr	r3, [r3, #0]
}
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bc80      	pop	{r7}
 8003ff6:	4770      	bx	lr
 8003ff8:	20000000 	.word	0x20000000

08003ffc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004000:	f7ff fff2 	bl	8003fe8 <HAL_RCC_GetHCLKFreq>
 8004004:	4602      	mov	r2, r0
 8004006:	4b05      	ldr	r3, [pc, #20]	@ (800401c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	0a1b      	lsrs	r3, r3, #8
 800400c:	f003 0307 	and.w	r3, r3, #7
 8004010:	4903      	ldr	r1, [pc, #12]	@ (8004020 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004012:	5ccb      	ldrb	r3, [r1, r3]
 8004014:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004018:	4618      	mov	r0, r3
 800401a:	bd80      	pop	{r7, pc}
 800401c:	40021000 	.word	0x40021000
 8004020:	08009718 	.word	0x08009718

08004024 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004028:	f7ff ffde 	bl	8003fe8 <HAL_RCC_GetHCLKFreq>
 800402c:	4602      	mov	r2, r0
 800402e:	4b05      	ldr	r3, [pc, #20]	@ (8004044 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	0adb      	lsrs	r3, r3, #11
 8004034:	f003 0307 	and.w	r3, r3, #7
 8004038:	4903      	ldr	r1, [pc, #12]	@ (8004048 <HAL_RCC_GetPCLK2Freq+0x24>)
 800403a:	5ccb      	ldrb	r3, [r1, r3]
 800403c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004040:	4618      	mov	r0, r3
 8004042:	bd80      	pop	{r7, pc}
 8004044:	40021000 	.word	0x40021000
 8004048:	08009718 	.word	0x08009718

0800404c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004054:	4b0a      	ldr	r3, [pc, #40]	@ (8004080 <RCC_Delay+0x34>)
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a0a      	ldr	r2, [pc, #40]	@ (8004084 <RCC_Delay+0x38>)
 800405a:	fba2 2303 	umull	r2, r3, r2, r3
 800405e:	0a5b      	lsrs	r3, r3, #9
 8004060:	687a      	ldr	r2, [r7, #4]
 8004062:	fb02 f303 	mul.w	r3, r2, r3
 8004066:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004068:	bf00      	nop
  }
  while (Delay --);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	1e5a      	subs	r2, r3, #1
 800406e:	60fa      	str	r2, [r7, #12]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d1f9      	bne.n	8004068 <RCC_Delay+0x1c>
}
 8004074:	bf00      	nop
 8004076:	bf00      	nop
 8004078:	3714      	adds	r7, #20
 800407a:	46bd      	mov	sp, r7
 800407c:	bc80      	pop	{r7}
 800407e:	4770      	bx	lr
 8004080:	20000000 	.word	0x20000000
 8004084:	10624dd3 	.word	0x10624dd3

08004088 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b082      	sub	sp, #8
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d101      	bne.n	800409a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e042      	b.n	8004120 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d106      	bne.n	80040b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2200      	movs	r2, #0
 80040aa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f7fd fa40 	bl	8001534 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2224      	movs	r2, #36	@ 0x24
 80040b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68da      	ldr	r2, [r3, #12]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80040ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040cc:	6878      	ldr	r0, [r7, #4]
 80040ce:	f000 f971 	bl	80043b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	691a      	ldr	r2, [r3, #16]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80040e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	695a      	ldr	r2, [r3, #20]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80040f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	68da      	ldr	r2, [r3, #12]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004100:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2220      	movs	r2, #32
 800410c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2220      	movs	r2, #32
 8004114:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2200      	movs	r2, #0
 800411c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800411e:	2300      	movs	r3, #0
}
 8004120:	4618      	mov	r0, r3
 8004122:	3708      	adds	r7, #8
 8004124:	46bd      	mov	sp, r7
 8004126:	bd80      	pop	{r7, pc}

08004128 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b08a      	sub	sp, #40	@ 0x28
 800412c:	af02      	add	r7, sp, #8
 800412e:	60f8      	str	r0, [r7, #12]
 8004130:	60b9      	str	r1, [r7, #8]
 8004132:	603b      	str	r3, [r7, #0]
 8004134:	4613      	mov	r3, r2
 8004136:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004138:	2300      	movs	r3, #0
 800413a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004142:	b2db      	uxtb	r3, r3
 8004144:	2b20      	cmp	r3, #32
 8004146:	d175      	bne.n	8004234 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	2b00      	cmp	r3, #0
 800414c:	d002      	beq.n	8004154 <HAL_UART_Transmit+0x2c>
 800414e:	88fb      	ldrh	r3, [r7, #6]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d101      	bne.n	8004158 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e06e      	b.n	8004236 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2200      	movs	r2, #0
 800415c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	2221      	movs	r2, #33	@ 0x21
 8004162:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004166:	f7fd fb9d 	bl	80018a4 <HAL_GetTick>
 800416a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	88fa      	ldrh	r2, [r7, #6]
 8004170:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	88fa      	ldrh	r2, [r7, #6]
 8004176:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	689b      	ldr	r3, [r3, #8]
 800417c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004180:	d108      	bne.n	8004194 <HAL_UART_Transmit+0x6c>
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	691b      	ldr	r3, [r3, #16]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d104      	bne.n	8004194 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800418a:	2300      	movs	r3, #0
 800418c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	61bb      	str	r3, [r7, #24]
 8004192:	e003      	b.n	800419c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004198:	2300      	movs	r3, #0
 800419a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800419c:	e02e      	b.n	80041fc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800419e:	683b      	ldr	r3, [r7, #0]
 80041a0:	9300      	str	r3, [sp, #0]
 80041a2:	697b      	ldr	r3, [r7, #20]
 80041a4:	2200      	movs	r2, #0
 80041a6:	2180      	movs	r1, #128	@ 0x80
 80041a8:	68f8      	ldr	r0, [r7, #12]
 80041aa:	f000 f848 	bl	800423e <UART_WaitOnFlagUntilTimeout>
 80041ae:	4603      	mov	r3, r0
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d005      	beq.n	80041c0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	2220      	movs	r2, #32
 80041b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e03a      	b.n	8004236 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10b      	bne.n	80041de <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	881b      	ldrh	r3, [r3, #0]
 80041ca:	461a      	mov	r2, r3
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80041d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80041d6:	69bb      	ldr	r3, [r7, #24]
 80041d8:	3302      	adds	r3, #2
 80041da:	61bb      	str	r3, [r7, #24]
 80041dc:	e007      	b.n	80041ee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	781a      	ldrb	r2, [r3, #0]
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80041e8:	69fb      	ldr	r3, [r7, #28]
 80041ea:	3301      	adds	r3, #1
 80041ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80041f2:	b29b      	uxth	r3, r3
 80041f4:	3b01      	subs	r3, #1
 80041f6:	b29a      	uxth	r2, r3
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004200:	b29b      	uxth	r3, r3
 8004202:	2b00      	cmp	r3, #0
 8004204:	d1cb      	bne.n	800419e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004206:	683b      	ldr	r3, [r7, #0]
 8004208:	9300      	str	r3, [sp, #0]
 800420a:	697b      	ldr	r3, [r7, #20]
 800420c:	2200      	movs	r2, #0
 800420e:	2140      	movs	r1, #64	@ 0x40
 8004210:	68f8      	ldr	r0, [r7, #12]
 8004212:	f000 f814 	bl	800423e <UART_WaitOnFlagUntilTimeout>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d005      	beq.n	8004228 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2220      	movs	r2, #32
 8004220:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004224:	2303      	movs	r3, #3
 8004226:	e006      	b.n	8004236 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	2220      	movs	r2, #32
 800422c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004230:	2300      	movs	r3, #0
 8004232:	e000      	b.n	8004236 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004234:	2302      	movs	r3, #2
  }
}
 8004236:	4618      	mov	r0, r3
 8004238:	3720      	adds	r7, #32
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800423e:	b580      	push	{r7, lr}
 8004240:	b086      	sub	sp, #24
 8004242:	af00      	add	r7, sp, #0
 8004244:	60f8      	str	r0, [r7, #12]
 8004246:	60b9      	str	r1, [r7, #8]
 8004248:	603b      	str	r3, [r7, #0]
 800424a:	4613      	mov	r3, r2
 800424c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800424e:	e03b      	b.n	80042c8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004250:	6a3b      	ldr	r3, [r7, #32]
 8004252:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004256:	d037      	beq.n	80042c8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004258:	f7fd fb24 	bl	80018a4 <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	6a3a      	ldr	r2, [r7, #32]
 8004264:	429a      	cmp	r2, r3
 8004266:	d302      	bcc.n	800426e <UART_WaitOnFlagUntilTimeout+0x30>
 8004268:	6a3b      	ldr	r3, [r7, #32]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d101      	bne.n	8004272 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e03a      	b.n	80042e8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	f003 0304 	and.w	r3, r3, #4
 800427c:	2b00      	cmp	r3, #0
 800427e:	d023      	beq.n	80042c8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	2b80      	cmp	r3, #128	@ 0x80
 8004284:	d020      	beq.n	80042c8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	2b40      	cmp	r3, #64	@ 0x40
 800428a:	d01d      	beq.n	80042c8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f003 0308 	and.w	r3, r3, #8
 8004296:	2b08      	cmp	r3, #8
 8004298:	d116      	bne.n	80042c8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800429a:	2300      	movs	r3, #0
 800429c:	617b      	str	r3, [r7, #20]
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	617b      	str	r3, [r7, #20]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	617b      	str	r3, [r7, #20]
 80042ae:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80042b0:	68f8      	ldr	r0, [r7, #12]
 80042b2:	f000 f81d 	bl	80042f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	2208      	movs	r2, #8
 80042ba:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	2200      	movs	r2, #0
 80042c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e00f      	b.n	80042e8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	681a      	ldr	r2, [r3, #0]
 80042ce:	68bb      	ldr	r3, [r7, #8]
 80042d0:	4013      	ands	r3, r2
 80042d2:	68ba      	ldr	r2, [r7, #8]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	bf0c      	ite	eq
 80042d8:	2301      	moveq	r3, #1
 80042da:	2300      	movne	r3, #0
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	461a      	mov	r2, r3
 80042e0:	79fb      	ldrb	r3, [r7, #7]
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d0b4      	beq.n	8004250 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042e6:	2300      	movs	r3, #0
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3718      	adds	r7, #24
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80042f0:	b480      	push	{r7}
 80042f2:	b095      	sub	sp, #84	@ 0x54
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	330c      	adds	r3, #12
 80042fe:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004300:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004302:	e853 3f00 	ldrex	r3, [r3]
 8004306:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004308:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800430a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800430e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	330c      	adds	r3, #12
 8004316:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004318:	643a      	str	r2, [r7, #64]	@ 0x40
 800431a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800431c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800431e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004320:	e841 2300 	strex	r3, r2, [r1]
 8004324:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004326:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004328:	2b00      	cmp	r3, #0
 800432a:	d1e5      	bne.n	80042f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	3314      	adds	r3, #20
 8004332:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004334:	6a3b      	ldr	r3, [r7, #32]
 8004336:	e853 3f00 	ldrex	r3, [r3]
 800433a:	61fb      	str	r3, [r7, #28]
   return(result);
 800433c:	69fb      	ldr	r3, [r7, #28]
 800433e:	f023 0301 	bic.w	r3, r3, #1
 8004342:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	3314      	adds	r3, #20
 800434a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800434c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800434e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004350:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004352:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004354:	e841 2300 	strex	r3, r2, [r1]
 8004358:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800435a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1e5      	bne.n	800432c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004364:	2b01      	cmp	r3, #1
 8004366:	d119      	bne.n	800439c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	330c      	adds	r3, #12
 800436e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	e853 3f00 	ldrex	r3, [r3]
 8004376:	60bb      	str	r3, [r7, #8]
   return(result);
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	f023 0310 	bic.w	r3, r3, #16
 800437e:	647b      	str	r3, [r7, #68]	@ 0x44
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	330c      	adds	r3, #12
 8004386:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004388:	61ba      	str	r2, [r7, #24]
 800438a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800438c:	6979      	ldr	r1, [r7, #20]
 800438e:	69ba      	ldr	r2, [r7, #24]
 8004390:	e841 2300 	strex	r3, r2, [r1]
 8004394:	613b      	str	r3, [r7, #16]
   return(result);
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	2b00      	cmp	r3, #0
 800439a:	d1e5      	bne.n	8004368 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	2220      	movs	r2, #32
 80043a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80043aa:	bf00      	nop
 80043ac:	3754      	adds	r7, #84	@ 0x54
 80043ae:	46bd      	mov	sp, r7
 80043b0:	bc80      	pop	{r7}
 80043b2:	4770      	bx	lr

080043b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b084      	sub	sp, #16
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	691b      	ldr	r3, [r3, #16]
 80043c2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	68da      	ldr	r2, [r3, #12]
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	430a      	orrs	r2, r1
 80043d0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	689a      	ldr	r2, [r3, #8]
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	691b      	ldr	r3, [r3, #16]
 80043da:	431a      	orrs	r2, r3
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	695b      	ldr	r3, [r3, #20]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	68db      	ldr	r3, [r3, #12]
 80043ea:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80043ee:	f023 030c 	bic.w	r3, r3, #12
 80043f2:	687a      	ldr	r2, [r7, #4]
 80043f4:	6812      	ldr	r2, [r2, #0]
 80043f6:	68b9      	ldr	r1, [r7, #8]
 80043f8:	430b      	orrs	r3, r1
 80043fa:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	695b      	ldr	r3, [r3, #20]
 8004402:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	699a      	ldr	r2, [r3, #24]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	430a      	orrs	r2, r1
 8004410:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	4a2c      	ldr	r2, [pc, #176]	@ (80044c8 <UART_SetConfig+0x114>)
 8004418:	4293      	cmp	r3, r2
 800441a:	d103      	bne.n	8004424 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800441c:	f7ff fe02 	bl	8004024 <HAL_RCC_GetPCLK2Freq>
 8004420:	60f8      	str	r0, [r7, #12]
 8004422:	e002      	b.n	800442a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004424:	f7ff fdea 	bl	8003ffc <HAL_RCC_GetPCLK1Freq>
 8004428:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	4613      	mov	r3, r2
 800442e:	009b      	lsls	r3, r3, #2
 8004430:	4413      	add	r3, r2
 8004432:	009a      	lsls	r2, r3, #2
 8004434:	441a      	add	r2, r3
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004440:	4a22      	ldr	r2, [pc, #136]	@ (80044cc <UART_SetConfig+0x118>)
 8004442:	fba2 2303 	umull	r2, r3, r2, r3
 8004446:	095b      	lsrs	r3, r3, #5
 8004448:	0119      	lsls	r1, r3, #4
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	4613      	mov	r3, r2
 800444e:	009b      	lsls	r3, r3, #2
 8004450:	4413      	add	r3, r2
 8004452:	009a      	lsls	r2, r3, #2
 8004454:	441a      	add	r2, r3
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	009b      	lsls	r3, r3, #2
 800445c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004460:	4b1a      	ldr	r3, [pc, #104]	@ (80044cc <UART_SetConfig+0x118>)
 8004462:	fba3 0302 	umull	r0, r3, r3, r2
 8004466:	095b      	lsrs	r3, r3, #5
 8004468:	2064      	movs	r0, #100	@ 0x64
 800446a:	fb00 f303 	mul.w	r3, r0, r3
 800446e:	1ad3      	subs	r3, r2, r3
 8004470:	011b      	lsls	r3, r3, #4
 8004472:	3332      	adds	r3, #50	@ 0x32
 8004474:	4a15      	ldr	r2, [pc, #84]	@ (80044cc <UART_SetConfig+0x118>)
 8004476:	fba2 2303 	umull	r2, r3, r2, r3
 800447a:	095b      	lsrs	r3, r3, #5
 800447c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004480:	4419      	add	r1, r3
 8004482:	68fa      	ldr	r2, [r7, #12]
 8004484:	4613      	mov	r3, r2
 8004486:	009b      	lsls	r3, r3, #2
 8004488:	4413      	add	r3, r2
 800448a:	009a      	lsls	r2, r3, #2
 800448c:	441a      	add	r2, r3
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	009b      	lsls	r3, r3, #2
 8004494:	fbb2 f2f3 	udiv	r2, r2, r3
 8004498:	4b0c      	ldr	r3, [pc, #48]	@ (80044cc <UART_SetConfig+0x118>)
 800449a:	fba3 0302 	umull	r0, r3, r3, r2
 800449e:	095b      	lsrs	r3, r3, #5
 80044a0:	2064      	movs	r0, #100	@ 0x64
 80044a2:	fb00 f303 	mul.w	r3, r0, r3
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	011b      	lsls	r3, r3, #4
 80044aa:	3332      	adds	r3, #50	@ 0x32
 80044ac:	4a07      	ldr	r2, [pc, #28]	@ (80044cc <UART_SetConfig+0x118>)
 80044ae:	fba2 2303 	umull	r2, r3, r2, r3
 80044b2:	095b      	lsrs	r3, r3, #5
 80044b4:	f003 020f 	and.w	r2, r3, #15
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	440a      	add	r2, r1
 80044be:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80044c0:	bf00      	nop
 80044c2:	3710      	adds	r7, #16
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	40013800 	.word	0x40013800
 80044cc:	51eb851f 	.word	0x51eb851f

080044d0 <__cvt>:
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044d6:	461d      	mov	r5, r3
 80044d8:	bfbb      	ittet	lt
 80044da:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80044de:	461d      	movlt	r5, r3
 80044e0:	2300      	movge	r3, #0
 80044e2:	232d      	movlt	r3, #45	@ 0x2d
 80044e4:	b088      	sub	sp, #32
 80044e6:	4614      	mov	r4, r2
 80044e8:	bfb8      	it	lt
 80044ea:	4614      	movlt	r4, r2
 80044ec:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80044ee:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80044f0:	7013      	strb	r3, [r2, #0]
 80044f2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80044f4:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80044f8:	f023 0820 	bic.w	r8, r3, #32
 80044fc:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004500:	d005      	beq.n	800450e <__cvt+0x3e>
 8004502:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8004506:	d100      	bne.n	800450a <__cvt+0x3a>
 8004508:	3601      	adds	r6, #1
 800450a:	2302      	movs	r3, #2
 800450c:	e000      	b.n	8004510 <__cvt+0x40>
 800450e:	2303      	movs	r3, #3
 8004510:	aa07      	add	r2, sp, #28
 8004512:	9204      	str	r2, [sp, #16]
 8004514:	aa06      	add	r2, sp, #24
 8004516:	e9cd a202 	strd	sl, r2, [sp, #8]
 800451a:	e9cd 3600 	strd	r3, r6, [sp]
 800451e:	4622      	mov	r2, r4
 8004520:	462b      	mov	r3, r5
 8004522:	f001 f999 	bl	8005858 <_dtoa_r>
 8004526:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800452a:	4607      	mov	r7, r0
 800452c:	d119      	bne.n	8004562 <__cvt+0x92>
 800452e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004530:	07db      	lsls	r3, r3, #31
 8004532:	d50e      	bpl.n	8004552 <__cvt+0x82>
 8004534:	eb00 0906 	add.w	r9, r0, r6
 8004538:	2200      	movs	r2, #0
 800453a:	2300      	movs	r3, #0
 800453c:	4620      	mov	r0, r4
 800453e:	4629      	mov	r1, r5
 8004540:	f7fc fa32 	bl	80009a8 <__aeabi_dcmpeq>
 8004544:	b108      	cbz	r0, 800454a <__cvt+0x7a>
 8004546:	f8cd 901c 	str.w	r9, [sp, #28]
 800454a:	2230      	movs	r2, #48	@ 0x30
 800454c:	9b07      	ldr	r3, [sp, #28]
 800454e:	454b      	cmp	r3, r9
 8004550:	d31e      	bcc.n	8004590 <__cvt+0xc0>
 8004552:	4638      	mov	r0, r7
 8004554:	9b07      	ldr	r3, [sp, #28]
 8004556:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8004558:	1bdb      	subs	r3, r3, r7
 800455a:	6013      	str	r3, [r2, #0]
 800455c:	b008      	add	sp, #32
 800455e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004562:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8004566:	eb00 0906 	add.w	r9, r0, r6
 800456a:	d1e5      	bne.n	8004538 <__cvt+0x68>
 800456c:	7803      	ldrb	r3, [r0, #0]
 800456e:	2b30      	cmp	r3, #48	@ 0x30
 8004570:	d10a      	bne.n	8004588 <__cvt+0xb8>
 8004572:	2200      	movs	r2, #0
 8004574:	2300      	movs	r3, #0
 8004576:	4620      	mov	r0, r4
 8004578:	4629      	mov	r1, r5
 800457a:	f7fc fa15 	bl	80009a8 <__aeabi_dcmpeq>
 800457e:	b918      	cbnz	r0, 8004588 <__cvt+0xb8>
 8004580:	f1c6 0601 	rsb	r6, r6, #1
 8004584:	f8ca 6000 	str.w	r6, [sl]
 8004588:	f8da 3000 	ldr.w	r3, [sl]
 800458c:	4499      	add	r9, r3
 800458e:	e7d3      	b.n	8004538 <__cvt+0x68>
 8004590:	1c59      	adds	r1, r3, #1
 8004592:	9107      	str	r1, [sp, #28]
 8004594:	701a      	strb	r2, [r3, #0]
 8004596:	e7d9      	b.n	800454c <__cvt+0x7c>

08004598 <__exponent>:
 8004598:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800459a:	2900      	cmp	r1, #0
 800459c:	bfb6      	itet	lt
 800459e:	232d      	movlt	r3, #45	@ 0x2d
 80045a0:	232b      	movge	r3, #43	@ 0x2b
 80045a2:	4249      	neglt	r1, r1
 80045a4:	2909      	cmp	r1, #9
 80045a6:	7002      	strb	r2, [r0, #0]
 80045a8:	7043      	strb	r3, [r0, #1]
 80045aa:	dd29      	ble.n	8004600 <__exponent+0x68>
 80045ac:	f10d 0307 	add.w	r3, sp, #7
 80045b0:	461d      	mov	r5, r3
 80045b2:	270a      	movs	r7, #10
 80045b4:	fbb1 f6f7 	udiv	r6, r1, r7
 80045b8:	461a      	mov	r2, r3
 80045ba:	fb07 1416 	mls	r4, r7, r6, r1
 80045be:	3430      	adds	r4, #48	@ 0x30
 80045c0:	f802 4c01 	strb.w	r4, [r2, #-1]
 80045c4:	460c      	mov	r4, r1
 80045c6:	2c63      	cmp	r4, #99	@ 0x63
 80045c8:	4631      	mov	r1, r6
 80045ca:	f103 33ff 	add.w	r3, r3, #4294967295
 80045ce:	dcf1      	bgt.n	80045b4 <__exponent+0x1c>
 80045d0:	3130      	adds	r1, #48	@ 0x30
 80045d2:	1e94      	subs	r4, r2, #2
 80045d4:	f803 1c01 	strb.w	r1, [r3, #-1]
 80045d8:	4623      	mov	r3, r4
 80045da:	1c41      	adds	r1, r0, #1
 80045dc:	42ab      	cmp	r3, r5
 80045de:	d30a      	bcc.n	80045f6 <__exponent+0x5e>
 80045e0:	f10d 0309 	add.w	r3, sp, #9
 80045e4:	1a9b      	subs	r3, r3, r2
 80045e6:	42ac      	cmp	r4, r5
 80045e8:	bf88      	it	hi
 80045ea:	2300      	movhi	r3, #0
 80045ec:	3302      	adds	r3, #2
 80045ee:	4403      	add	r3, r0
 80045f0:	1a18      	subs	r0, r3, r0
 80045f2:	b003      	add	sp, #12
 80045f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045f6:	f813 6b01 	ldrb.w	r6, [r3], #1
 80045fa:	f801 6f01 	strb.w	r6, [r1, #1]!
 80045fe:	e7ed      	b.n	80045dc <__exponent+0x44>
 8004600:	2330      	movs	r3, #48	@ 0x30
 8004602:	3130      	adds	r1, #48	@ 0x30
 8004604:	7083      	strb	r3, [r0, #2]
 8004606:	70c1      	strb	r1, [r0, #3]
 8004608:	1d03      	adds	r3, r0, #4
 800460a:	e7f1      	b.n	80045f0 <__exponent+0x58>

0800460c <_printf_float>:
 800460c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004610:	b091      	sub	sp, #68	@ 0x44
 8004612:	460c      	mov	r4, r1
 8004614:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8004618:	4616      	mov	r6, r2
 800461a:	461f      	mov	r7, r3
 800461c:	4605      	mov	r5, r0
 800461e:	f001 f807 	bl	8005630 <_localeconv_r>
 8004622:	6803      	ldr	r3, [r0, #0]
 8004624:	4618      	mov	r0, r3
 8004626:	9308      	str	r3, [sp, #32]
 8004628:	f7fb fd92 	bl	8000150 <strlen>
 800462c:	2300      	movs	r3, #0
 800462e:	930e      	str	r3, [sp, #56]	@ 0x38
 8004630:	f8d8 3000 	ldr.w	r3, [r8]
 8004634:	9009      	str	r0, [sp, #36]	@ 0x24
 8004636:	3307      	adds	r3, #7
 8004638:	f023 0307 	bic.w	r3, r3, #7
 800463c:	f103 0208 	add.w	r2, r3, #8
 8004640:	f894 a018 	ldrb.w	sl, [r4, #24]
 8004644:	f8d4 b000 	ldr.w	fp, [r4]
 8004648:	f8c8 2000 	str.w	r2, [r8]
 800464c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004650:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8004654:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004656:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800465a:	f04f 32ff 	mov.w	r2, #4294967295
 800465e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004662:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8004666:	4b9c      	ldr	r3, [pc, #624]	@ (80048d8 <_printf_float+0x2cc>)
 8004668:	f7fc f9d0 	bl	8000a0c <__aeabi_dcmpun>
 800466c:	bb70      	cbnz	r0, 80046cc <_printf_float+0xc0>
 800466e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004672:	f04f 32ff 	mov.w	r2, #4294967295
 8004676:	4b98      	ldr	r3, [pc, #608]	@ (80048d8 <_printf_float+0x2cc>)
 8004678:	f7fc f9aa 	bl	80009d0 <__aeabi_dcmple>
 800467c:	bb30      	cbnz	r0, 80046cc <_printf_float+0xc0>
 800467e:	2200      	movs	r2, #0
 8004680:	2300      	movs	r3, #0
 8004682:	4640      	mov	r0, r8
 8004684:	4649      	mov	r1, r9
 8004686:	f7fc f999 	bl	80009bc <__aeabi_dcmplt>
 800468a:	b110      	cbz	r0, 8004692 <_printf_float+0x86>
 800468c:	232d      	movs	r3, #45	@ 0x2d
 800468e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004692:	4a92      	ldr	r2, [pc, #584]	@ (80048dc <_printf_float+0x2d0>)
 8004694:	4b92      	ldr	r3, [pc, #584]	@ (80048e0 <_printf_float+0x2d4>)
 8004696:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800469a:	bf8c      	ite	hi
 800469c:	4690      	movhi	r8, r2
 800469e:	4698      	movls	r8, r3
 80046a0:	2303      	movs	r3, #3
 80046a2:	f04f 0900 	mov.w	r9, #0
 80046a6:	6123      	str	r3, [r4, #16]
 80046a8:	f02b 0304 	bic.w	r3, fp, #4
 80046ac:	6023      	str	r3, [r4, #0]
 80046ae:	4633      	mov	r3, r6
 80046b0:	4621      	mov	r1, r4
 80046b2:	4628      	mov	r0, r5
 80046b4:	9700      	str	r7, [sp, #0]
 80046b6:	aa0f      	add	r2, sp, #60	@ 0x3c
 80046b8:	f000 f9d4 	bl	8004a64 <_printf_common>
 80046bc:	3001      	adds	r0, #1
 80046be:	f040 8090 	bne.w	80047e2 <_printf_float+0x1d6>
 80046c2:	f04f 30ff 	mov.w	r0, #4294967295
 80046c6:	b011      	add	sp, #68	@ 0x44
 80046c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046cc:	4642      	mov	r2, r8
 80046ce:	464b      	mov	r3, r9
 80046d0:	4640      	mov	r0, r8
 80046d2:	4649      	mov	r1, r9
 80046d4:	f7fc f99a 	bl	8000a0c <__aeabi_dcmpun>
 80046d8:	b148      	cbz	r0, 80046ee <_printf_float+0xe2>
 80046da:	464b      	mov	r3, r9
 80046dc:	2b00      	cmp	r3, #0
 80046de:	bfb8      	it	lt
 80046e0:	232d      	movlt	r3, #45	@ 0x2d
 80046e2:	4a80      	ldr	r2, [pc, #512]	@ (80048e4 <_printf_float+0x2d8>)
 80046e4:	bfb8      	it	lt
 80046e6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80046ea:	4b7f      	ldr	r3, [pc, #508]	@ (80048e8 <_printf_float+0x2dc>)
 80046ec:	e7d3      	b.n	8004696 <_printf_float+0x8a>
 80046ee:	6863      	ldr	r3, [r4, #4]
 80046f0:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80046f4:	1c5a      	adds	r2, r3, #1
 80046f6:	d13f      	bne.n	8004778 <_printf_float+0x16c>
 80046f8:	2306      	movs	r3, #6
 80046fa:	6063      	str	r3, [r4, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8004702:	6023      	str	r3, [r4, #0]
 8004704:	9206      	str	r2, [sp, #24]
 8004706:	aa0e      	add	r2, sp, #56	@ 0x38
 8004708:	e9cd a204 	strd	sl, r2, [sp, #16]
 800470c:	aa0d      	add	r2, sp, #52	@ 0x34
 800470e:	9203      	str	r2, [sp, #12]
 8004710:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8004714:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004718:	6863      	ldr	r3, [r4, #4]
 800471a:	4642      	mov	r2, r8
 800471c:	9300      	str	r3, [sp, #0]
 800471e:	4628      	mov	r0, r5
 8004720:	464b      	mov	r3, r9
 8004722:	910a      	str	r1, [sp, #40]	@ 0x28
 8004724:	f7ff fed4 	bl	80044d0 <__cvt>
 8004728:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800472a:	4680      	mov	r8, r0
 800472c:	2947      	cmp	r1, #71	@ 0x47
 800472e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8004730:	d128      	bne.n	8004784 <_printf_float+0x178>
 8004732:	1cc8      	adds	r0, r1, #3
 8004734:	db02      	blt.n	800473c <_printf_float+0x130>
 8004736:	6863      	ldr	r3, [r4, #4]
 8004738:	4299      	cmp	r1, r3
 800473a:	dd40      	ble.n	80047be <_printf_float+0x1b2>
 800473c:	f1aa 0a02 	sub.w	sl, sl, #2
 8004740:	fa5f fa8a 	uxtb.w	sl, sl
 8004744:	4652      	mov	r2, sl
 8004746:	3901      	subs	r1, #1
 8004748:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800474c:	910d      	str	r1, [sp, #52]	@ 0x34
 800474e:	f7ff ff23 	bl	8004598 <__exponent>
 8004752:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8004754:	4681      	mov	r9, r0
 8004756:	1813      	adds	r3, r2, r0
 8004758:	2a01      	cmp	r2, #1
 800475a:	6123      	str	r3, [r4, #16]
 800475c:	dc02      	bgt.n	8004764 <_printf_float+0x158>
 800475e:	6822      	ldr	r2, [r4, #0]
 8004760:	07d2      	lsls	r2, r2, #31
 8004762:	d501      	bpl.n	8004768 <_printf_float+0x15c>
 8004764:	3301      	adds	r3, #1
 8004766:	6123      	str	r3, [r4, #16]
 8004768:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 800476c:	2b00      	cmp	r3, #0
 800476e:	d09e      	beq.n	80046ae <_printf_float+0xa2>
 8004770:	232d      	movs	r3, #45	@ 0x2d
 8004772:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004776:	e79a      	b.n	80046ae <_printf_float+0xa2>
 8004778:	2947      	cmp	r1, #71	@ 0x47
 800477a:	d1bf      	bne.n	80046fc <_printf_float+0xf0>
 800477c:	2b00      	cmp	r3, #0
 800477e:	d1bd      	bne.n	80046fc <_printf_float+0xf0>
 8004780:	2301      	movs	r3, #1
 8004782:	e7ba      	b.n	80046fa <_printf_float+0xee>
 8004784:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8004788:	d9dc      	bls.n	8004744 <_printf_float+0x138>
 800478a:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800478e:	d118      	bne.n	80047c2 <_printf_float+0x1b6>
 8004790:	2900      	cmp	r1, #0
 8004792:	6863      	ldr	r3, [r4, #4]
 8004794:	dd0b      	ble.n	80047ae <_printf_float+0x1a2>
 8004796:	6121      	str	r1, [r4, #16]
 8004798:	b913      	cbnz	r3, 80047a0 <_printf_float+0x194>
 800479a:	6822      	ldr	r2, [r4, #0]
 800479c:	07d0      	lsls	r0, r2, #31
 800479e:	d502      	bpl.n	80047a6 <_printf_float+0x19a>
 80047a0:	3301      	adds	r3, #1
 80047a2:	440b      	add	r3, r1
 80047a4:	6123      	str	r3, [r4, #16]
 80047a6:	f04f 0900 	mov.w	r9, #0
 80047aa:	65a1      	str	r1, [r4, #88]	@ 0x58
 80047ac:	e7dc      	b.n	8004768 <_printf_float+0x15c>
 80047ae:	b913      	cbnz	r3, 80047b6 <_printf_float+0x1aa>
 80047b0:	6822      	ldr	r2, [r4, #0]
 80047b2:	07d2      	lsls	r2, r2, #31
 80047b4:	d501      	bpl.n	80047ba <_printf_float+0x1ae>
 80047b6:	3302      	adds	r3, #2
 80047b8:	e7f4      	b.n	80047a4 <_printf_float+0x198>
 80047ba:	2301      	movs	r3, #1
 80047bc:	e7f2      	b.n	80047a4 <_printf_float+0x198>
 80047be:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80047c2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80047c4:	4299      	cmp	r1, r3
 80047c6:	db05      	blt.n	80047d4 <_printf_float+0x1c8>
 80047c8:	6823      	ldr	r3, [r4, #0]
 80047ca:	6121      	str	r1, [r4, #16]
 80047cc:	07d8      	lsls	r0, r3, #31
 80047ce:	d5ea      	bpl.n	80047a6 <_printf_float+0x19a>
 80047d0:	1c4b      	adds	r3, r1, #1
 80047d2:	e7e7      	b.n	80047a4 <_printf_float+0x198>
 80047d4:	2900      	cmp	r1, #0
 80047d6:	bfcc      	ite	gt
 80047d8:	2201      	movgt	r2, #1
 80047da:	f1c1 0202 	rsble	r2, r1, #2
 80047de:	4413      	add	r3, r2
 80047e0:	e7e0      	b.n	80047a4 <_printf_float+0x198>
 80047e2:	6823      	ldr	r3, [r4, #0]
 80047e4:	055a      	lsls	r2, r3, #21
 80047e6:	d407      	bmi.n	80047f8 <_printf_float+0x1ec>
 80047e8:	6923      	ldr	r3, [r4, #16]
 80047ea:	4642      	mov	r2, r8
 80047ec:	4631      	mov	r1, r6
 80047ee:	4628      	mov	r0, r5
 80047f0:	47b8      	blx	r7
 80047f2:	3001      	adds	r0, #1
 80047f4:	d12b      	bne.n	800484e <_printf_float+0x242>
 80047f6:	e764      	b.n	80046c2 <_printf_float+0xb6>
 80047f8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80047fc:	f240 80dc 	bls.w	80049b8 <_printf_float+0x3ac>
 8004800:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8004804:	2200      	movs	r2, #0
 8004806:	2300      	movs	r3, #0
 8004808:	f7fc f8ce 	bl	80009a8 <__aeabi_dcmpeq>
 800480c:	2800      	cmp	r0, #0
 800480e:	d033      	beq.n	8004878 <_printf_float+0x26c>
 8004810:	2301      	movs	r3, #1
 8004812:	4631      	mov	r1, r6
 8004814:	4628      	mov	r0, r5
 8004816:	4a35      	ldr	r2, [pc, #212]	@ (80048ec <_printf_float+0x2e0>)
 8004818:	47b8      	blx	r7
 800481a:	3001      	adds	r0, #1
 800481c:	f43f af51 	beq.w	80046c2 <_printf_float+0xb6>
 8004820:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8004824:	4543      	cmp	r3, r8
 8004826:	db02      	blt.n	800482e <_printf_float+0x222>
 8004828:	6823      	ldr	r3, [r4, #0]
 800482a:	07d8      	lsls	r0, r3, #31
 800482c:	d50f      	bpl.n	800484e <_printf_float+0x242>
 800482e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8004832:	4631      	mov	r1, r6
 8004834:	4628      	mov	r0, r5
 8004836:	47b8      	blx	r7
 8004838:	3001      	adds	r0, #1
 800483a:	f43f af42 	beq.w	80046c2 <_printf_float+0xb6>
 800483e:	f04f 0900 	mov.w	r9, #0
 8004842:	f108 38ff 	add.w	r8, r8, #4294967295
 8004846:	f104 0a1a 	add.w	sl, r4, #26
 800484a:	45c8      	cmp	r8, r9
 800484c:	dc09      	bgt.n	8004862 <_printf_float+0x256>
 800484e:	6823      	ldr	r3, [r4, #0]
 8004850:	079b      	lsls	r3, r3, #30
 8004852:	f100 8102 	bmi.w	8004a5a <_printf_float+0x44e>
 8004856:	68e0      	ldr	r0, [r4, #12]
 8004858:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800485a:	4298      	cmp	r0, r3
 800485c:	bfb8      	it	lt
 800485e:	4618      	movlt	r0, r3
 8004860:	e731      	b.n	80046c6 <_printf_float+0xba>
 8004862:	2301      	movs	r3, #1
 8004864:	4652      	mov	r2, sl
 8004866:	4631      	mov	r1, r6
 8004868:	4628      	mov	r0, r5
 800486a:	47b8      	blx	r7
 800486c:	3001      	adds	r0, #1
 800486e:	f43f af28 	beq.w	80046c2 <_printf_float+0xb6>
 8004872:	f109 0901 	add.w	r9, r9, #1
 8004876:	e7e8      	b.n	800484a <_printf_float+0x23e>
 8004878:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800487a:	2b00      	cmp	r3, #0
 800487c:	dc38      	bgt.n	80048f0 <_printf_float+0x2e4>
 800487e:	2301      	movs	r3, #1
 8004880:	4631      	mov	r1, r6
 8004882:	4628      	mov	r0, r5
 8004884:	4a19      	ldr	r2, [pc, #100]	@ (80048ec <_printf_float+0x2e0>)
 8004886:	47b8      	blx	r7
 8004888:	3001      	adds	r0, #1
 800488a:	f43f af1a 	beq.w	80046c2 <_printf_float+0xb6>
 800488e:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8004892:	ea59 0303 	orrs.w	r3, r9, r3
 8004896:	d102      	bne.n	800489e <_printf_float+0x292>
 8004898:	6823      	ldr	r3, [r4, #0]
 800489a:	07d9      	lsls	r1, r3, #31
 800489c:	d5d7      	bpl.n	800484e <_printf_float+0x242>
 800489e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80048a2:	4631      	mov	r1, r6
 80048a4:	4628      	mov	r0, r5
 80048a6:	47b8      	blx	r7
 80048a8:	3001      	adds	r0, #1
 80048aa:	f43f af0a 	beq.w	80046c2 <_printf_float+0xb6>
 80048ae:	f04f 0a00 	mov.w	sl, #0
 80048b2:	f104 0b1a 	add.w	fp, r4, #26
 80048b6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80048b8:	425b      	negs	r3, r3
 80048ba:	4553      	cmp	r3, sl
 80048bc:	dc01      	bgt.n	80048c2 <_printf_float+0x2b6>
 80048be:	464b      	mov	r3, r9
 80048c0:	e793      	b.n	80047ea <_printf_float+0x1de>
 80048c2:	2301      	movs	r3, #1
 80048c4:	465a      	mov	r2, fp
 80048c6:	4631      	mov	r1, r6
 80048c8:	4628      	mov	r0, r5
 80048ca:	47b8      	blx	r7
 80048cc:	3001      	adds	r0, #1
 80048ce:	f43f aef8 	beq.w	80046c2 <_printf_float+0xb6>
 80048d2:	f10a 0a01 	add.w	sl, sl, #1
 80048d6:	e7ee      	b.n	80048b6 <_printf_float+0x2aa>
 80048d8:	7fefffff 	.word	0x7fefffff
 80048dc:	08009736 	.word	0x08009736
 80048e0:	08009732 	.word	0x08009732
 80048e4:	0800973e 	.word	0x0800973e
 80048e8:	0800973a 	.word	0x0800973a
 80048ec:	08009742 	.word	0x08009742
 80048f0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80048f2:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80048f6:	4553      	cmp	r3, sl
 80048f8:	bfa8      	it	ge
 80048fa:	4653      	movge	r3, sl
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	4699      	mov	r9, r3
 8004900:	dc36      	bgt.n	8004970 <_printf_float+0x364>
 8004902:	f04f 0b00 	mov.w	fp, #0
 8004906:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800490a:	f104 021a 	add.w	r2, r4, #26
 800490e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8004910:	930a      	str	r3, [sp, #40]	@ 0x28
 8004912:	eba3 0309 	sub.w	r3, r3, r9
 8004916:	455b      	cmp	r3, fp
 8004918:	dc31      	bgt.n	800497e <_printf_float+0x372>
 800491a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800491c:	459a      	cmp	sl, r3
 800491e:	dc3a      	bgt.n	8004996 <_printf_float+0x38a>
 8004920:	6823      	ldr	r3, [r4, #0]
 8004922:	07da      	lsls	r2, r3, #31
 8004924:	d437      	bmi.n	8004996 <_printf_float+0x38a>
 8004926:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004928:	ebaa 0903 	sub.w	r9, sl, r3
 800492c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800492e:	ebaa 0303 	sub.w	r3, sl, r3
 8004932:	4599      	cmp	r9, r3
 8004934:	bfa8      	it	ge
 8004936:	4699      	movge	r9, r3
 8004938:	f1b9 0f00 	cmp.w	r9, #0
 800493c:	dc33      	bgt.n	80049a6 <_printf_float+0x39a>
 800493e:	f04f 0800 	mov.w	r8, #0
 8004942:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004946:	f104 0b1a 	add.w	fp, r4, #26
 800494a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800494c:	ebaa 0303 	sub.w	r3, sl, r3
 8004950:	eba3 0309 	sub.w	r3, r3, r9
 8004954:	4543      	cmp	r3, r8
 8004956:	f77f af7a 	ble.w	800484e <_printf_float+0x242>
 800495a:	2301      	movs	r3, #1
 800495c:	465a      	mov	r2, fp
 800495e:	4631      	mov	r1, r6
 8004960:	4628      	mov	r0, r5
 8004962:	47b8      	blx	r7
 8004964:	3001      	adds	r0, #1
 8004966:	f43f aeac 	beq.w	80046c2 <_printf_float+0xb6>
 800496a:	f108 0801 	add.w	r8, r8, #1
 800496e:	e7ec      	b.n	800494a <_printf_float+0x33e>
 8004970:	4642      	mov	r2, r8
 8004972:	4631      	mov	r1, r6
 8004974:	4628      	mov	r0, r5
 8004976:	47b8      	blx	r7
 8004978:	3001      	adds	r0, #1
 800497a:	d1c2      	bne.n	8004902 <_printf_float+0x2f6>
 800497c:	e6a1      	b.n	80046c2 <_printf_float+0xb6>
 800497e:	2301      	movs	r3, #1
 8004980:	4631      	mov	r1, r6
 8004982:	4628      	mov	r0, r5
 8004984:	920a      	str	r2, [sp, #40]	@ 0x28
 8004986:	47b8      	blx	r7
 8004988:	3001      	adds	r0, #1
 800498a:	f43f ae9a 	beq.w	80046c2 <_printf_float+0xb6>
 800498e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8004990:	f10b 0b01 	add.w	fp, fp, #1
 8004994:	e7bb      	b.n	800490e <_printf_float+0x302>
 8004996:	4631      	mov	r1, r6
 8004998:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800499c:	4628      	mov	r0, r5
 800499e:	47b8      	blx	r7
 80049a0:	3001      	adds	r0, #1
 80049a2:	d1c0      	bne.n	8004926 <_printf_float+0x31a>
 80049a4:	e68d      	b.n	80046c2 <_printf_float+0xb6>
 80049a6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80049a8:	464b      	mov	r3, r9
 80049aa:	4631      	mov	r1, r6
 80049ac:	4628      	mov	r0, r5
 80049ae:	4442      	add	r2, r8
 80049b0:	47b8      	blx	r7
 80049b2:	3001      	adds	r0, #1
 80049b4:	d1c3      	bne.n	800493e <_printf_float+0x332>
 80049b6:	e684      	b.n	80046c2 <_printf_float+0xb6>
 80049b8:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80049bc:	f1ba 0f01 	cmp.w	sl, #1
 80049c0:	dc01      	bgt.n	80049c6 <_printf_float+0x3ba>
 80049c2:	07db      	lsls	r3, r3, #31
 80049c4:	d536      	bpl.n	8004a34 <_printf_float+0x428>
 80049c6:	2301      	movs	r3, #1
 80049c8:	4642      	mov	r2, r8
 80049ca:	4631      	mov	r1, r6
 80049cc:	4628      	mov	r0, r5
 80049ce:	47b8      	blx	r7
 80049d0:	3001      	adds	r0, #1
 80049d2:	f43f ae76 	beq.w	80046c2 <_printf_float+0xb6>
 80049d6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80049da:	4631      	mov	r1, r6
 80049dc:	4628      	mov	r0, r5
 80049de:	47b8      	blx	r7
 80049e0:	3001      	adds	r0, #1
 80049e2:	f43f ae6e 	beq.w	80046c2 <_printf_float+0xb6>
 80049e6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80049ea:	2200      	movs	r2, #0
 80049ec:	2300      	movs	r3, #0
 80049ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80049f2:	f7fb ffd9 	bl	80009a8 <__aeabi_dcmpeq>
 80049f6:	b9c0      	cbnz	r0, 8004a2a <_printf_float+0x41e>
 80049f8:	4653      	mov	r3, sl
 80049fa:	f108 0201 	add.w	r2, r8, #1
 80049fe:	4631      	mov	r1, r6
 8004a00:	4628      	mov	r0, r5
 8004a02:	47b8      	blx	r7
 8004a04:	3001      	adds	r0, #1
 8004a06:	d10c      	bne.n	8004a22 <_printf_float+0x416>
 8004a08:	e65b      	b.n	80046c2 <_printf_float+0xb6>
 8004a0a:	2301      	movs	r3, #1
 8004a0c:	465a      	mov	r2, fp
 8004a0e:	4631      	mov	r1, r6
 8004a10:	4628      	mov	r0, r5
 8004a12:	47b8      	blx	r7
 8004a14:	3001      	adds	r0, #1
 8004a16:	f43f ae54 	beq.w	80046c2 <_printf_float+0xb6>
 8004a1a:	f108 0801 	add.w	r8, r8, #1
 8004a1e:	45d0      	cmp	r8, sl
 8004a20:	dbf3      	blt.n	8004a0a <_printf_float+0x3fe>
 8004a22:	464b      	mov	r3, r9
 8004a24:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8004a28:	e6e0      	b.n	80047ec <_printf_float+0x1e0>
 8004a2a:	f04f 0800 	mov.w	r8, #0
 8004a2e:	f104 0b1a 	add.w	fp, r4, #26
 8004a32:	e7f4      	b.n	8004a1e <_printf_float+0x412>
 8004a34:	2301      	movs	r3, #1
 8004a36:	4642      	mov	r2, r8
 8004a38:	e7e1      	b.n	80049fe <_printf_float+0x3f2>
 8004a3a:	2301      	movs	r3, #1
 8004a3c:	464a      	mov	r2, r9
 8004a3e:	4631      	mov	r1, r6
 8004a40:	4628      	mov	r0, r5
 8004a42:	47b8      	blx	r7
 8004a44:	3001      	adds	r0, #1
 8004a46:	f43f ae3c 	beq.w	80046c2 <_printf_float+0xb6>
 8004a4a:	f108 0801 	add.w	r8, r8, #1
 8004a4e:	68e3      	ldr	r3, [r4, #12]
 8004a50:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8004a52:	1a5b      	subs	r3, r3, r1
 8004a54:	4543      	cmp	r3, r8
 8004a56:	dcf0      	bgt.n	8004a3a <_printf_float+0x42e>
 8004a58:	e6fd      	b.n	8004856 <_printf_float+0x24a>
 8004a5a:	f04f 0800 	mov.w	r8, #0
 8004a5e:	f104 0919 	add.w	r9, r4, #25
 8004a62:	e7f4      	b.n	8004a4e <_printf_float+0x442>

08004a64 <_printf_common>:
 8004a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a68:	4616      	mov	r6, r2
 8004a6a:	4698      	mov	r8, r3
 8004a6c:	688a      	ldr	r2, [r1, #8]
 8004a6e:	690b      	ldr	r3, [r1, #16]
 8004a70:	4607      	mov	r7, r0
 8004a72:	4293      	cmp	r3, r2
 8004a74:	bfb8      	it	lt
 8004a76:	4613      	movlt	r3, r2
 8004a78:	6033      	str	r3, [r6, #0]
 8004a7a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004a7e:	460c      	mov	r4, r1
 8004a80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004a84:	b10a      	cbz	r2, 8004a8a <_printf_common+0x26>
 8004a86:	3301      	adds	r3, #1
 8004a88:	6033      	str	r3, [r6, #0]
 8004a8a:	6823      	ldr	r3, [r4, #0]
 8004a8c:	0699      	lsls	r1, r3, #26
 8004a8e:	bf42      	ittt	mi
 8004a90:	6833      	ldrmi	r3, [r6, #0]
 8004a92:	3302      	addmi	r3, #2
 8004a94:	6033      	strmi	r3, [r6, #0]
 8004a96:	6825      	ldr	r5, [r4, #0]
 8004a98:	f015 0506 	ands.w	r5, r5, #6
 8004a9c:	d106      	bne.n	8004aac <_printf_common+0x48>
 8004a9e:	f104 0a19 	add.w	sl, r4, #25
 8004aa2:	68e3      	ldr	r3, [r4, #12]
 8004aa4:	6832      	ldr	r2, [r6, #0]
 8004aa6:	1a9b      	subs	r3, r3, r2
 8004aa8:	42ab      	cmp	r3, r5
 8004aaa:	dc2b      	bgt.n	8004b04 <_printf_common+0xa0>
 8004aac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004ab0:	6822      	ldr	r2, [r4, #0]
 8004ab2:	3b00      	subs	r3, #0
 8004ab4:	bf18      	it	ne
 8004ab6:	2301      	movne	r3, #1
 8004ab8:	0692      	lsls	r2, r2, #26
 8004aba:	d430      	bmi.n	8004b1e <_printf_common+0xba>
 8004abc:	4641      	mov	r1, r8
 8004abe:	4638      	mov	r0, r7
 8004ac0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004ac4:	47c8      	blx	r9
 8004ac6:	3001      	adds	r0, #1
 8004ac8:	d023      	beq.n	8004b12 <_printf_common+0xae>
 8004aca:	6823      	ldr	r3, [r4, #0]
 8004acc:	6922      	ldr	r2, [r4, #16]
 8004ace:	f003 0306 	and.w	r3, r3, #6
 8004ad2:	2b04      	cmp	r3, #4
 8004ad4:	bf14      	ite	ne
 8004ad6:	2500      	movne	r5, #0
 8004ad8:	6833      	ldreq	r3, [r6, #0]
 8004ada:	f04f 0600 	mov.w	r6, #0
 8004ade:	bf08      	it	eq
 8004ae0:	68e5      	ldreq	r5, [r4, #12]
 8004ae2:	f104 041a 	add.w	r4, r4, #26
 8004ae6:	bf08      	it	eq
 8004ae8:	1aed      	subeq	r5, r5, r3
 8004aea:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004aee:	bf08      	it	eq
 8004af0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004af4:	4293      	cmp	r3, r2
 8004af6:	bfc4      	itt	gt
 8004af8:	1a9b      	subgt	r3, r3, r2
 8004afa:	18ed      	addgt	r5, r5, r3
 8004afc:	42b5      	cmp	r5, r6
 8004afe:	d11a      	bne.n	8004b36 <_printf_common+0xd2>
 8004b00:	2000      	movs	r0, #0
 8004b02:	e008      	b.n	8004b16 <_printf_common+0xb2>
 8004b04:	2301      	movs	r3, #1
 8004b06:	4652      	mov	r2, sl
 8004b08:	4641      	mov	r1, r8
 8004b0a:	4638      	mov	r0, r7
 8004b0c:	47c8      	blx	r9
 8004b0e:	3001      	adds	r0, #1
 8004b10:	d103      	bne.n	8004b1a <_printf_common+0xb6>
 8004b12:	f04f 30ff 	mov.w	r0, #4294967295
 8004b16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b1a:	3501      	adds	r5, #1
 8004b1c:	e7c1      	b.n	8004aa2 <_printf_common+0x3e>
 8004b1e:	2030      	movs	r0, #48	@ 0x30
 8004b20:	18e1      	adds	r1, r4, r3
 8004b22:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004b26:	1c5a      	adds	r2, r3, #1
 8004b28:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004b2c:	4422      	add	r2, r4
 8004b2e:	3302      	adds	r3, #2
 8004b30:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004b34:	e7c2      	b.n	8004abc <_printf_common+0x58>
 8004b36:	2301      	movs	r3, #1
 8004b38:	4622      	mov	r2, r4
 8004b3a:	4641      	mov	r1, r8
 8004b3c:	4638      	mov	r0, r7
 8004b3e:	47c8      	blx	r9
 8004b40:	3001      	adds	r0, #1
 8004b42:	d0e6      	beq.n	8004b12 <_printf_common+0xae>
 8004b44:	3601      	adds	r6, #1
 8004b46:	e7d9      	b.n	8004afc <_printf_common+0x98>

08004b48 <_printf_i>:
 8004b48:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004b4c:	7e0f      	ldrb	r7, [r1, #24]
 8004b4e:	4691      	mov	r9, r2
 8004b50:	2f78      	cmp	r7, #120	@ 0x78
 8004b52:	4680      	mov	r8, r0
 8004b54:	460c      	mov	r4, r1
 8004b56:	469a      	mov	sl, r3
 8004b58:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004b5a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8004b5e:	d807      	bhi.n	8004b70 <_printf_i+0x28>
 8004b60:	2f62      	cmp	r7, #98	@ 0x62
 8004b62:	d80a      	bhi.n	8004b7a <_printf_i+0x32>
 8004b64:	2f00      	cmp	r7, #0
 8004b66:	f000 80d1 	beq.w	8004d0c <_printf_i+0x1c4>
 8004b6a:	2f58      	cmp	r7, #88	@ 0x58
 8004b6c:	f000 80b8 	beq.w	8004ce0 <_printf_i+0x198>
 8004b70:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004b74:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8004b78:	e03a      	b.n	8004bf0 <_printf_i+0xa8>
 8004b7a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8004b7e:	2b15      	cmp	r3, #21
 8004b80:	d8f6      	bhi.n	8004b70 <_printf_i+0x28>
 8004b82:	a101      	add	r1, pc, #4	@ (adr r1, 8004b88 <_printf_i+0x40>)
 8004b84:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004b88:	08004be1 	.word	0x08004be1
 8004b8c:	08004bf5 	.word	0x08004bf5
 8004b90:	08004b71 	.word	0x08004b71
 8004b94:	08004b71 	.word	0x08004b71
 8004b98:	08004b71 	.word	0x08004b71
 8004b9c:	08004b71 	.word	0x08004b71
 8004ba0:	08004bf5 	.word	0x08004bf5
 8004ba4:	08004b71 	.word	0x08004b71
 8004ba8:	08004b71 	.word	0x08004b71
 8004bac:	08004b71 	.word	0x08004b71
 8004bb0:	08004b71 	.word	0x08004b71
 8004bb4:	08004cf3 	.word	0x08004cf3
 8004bb8:	08004c1f 	.word	0x08004c1f
 8004bbc:	08004cad 	.word	0x08004cad
 8004bc0:	08004b71 	.word	0x08004b71
 8004bc4:	08004b71 	.word	0x08004b71
 8004bc8:	08004d15 	.word	0x08004d15
 8004bcc:	08004b71 	.word	0x08004b71
 8004bd0:	08004c1f 	.word	0x08004c1f
 8004bd4:	08004b71 	.word	0x08004b71
 8004bd8:	08004b71 	.word	0x08004b71
 8004bdc:	08004cb5 	.word	0x08004cb5
 8004be0:	6833      	ldr	r3, [r6, #0]
 8004be2:	1d1a      	adds	r2, r3, #4
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	6032      	str	r2, [r6, #0]
 8004be8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004bec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e09c      	b.n	8004d2e <_printf_i+0x1e6>
 8004bf4:	6833      	ldr	r3, [r6, #0]
 8004bf6:	6820      	ldr	r0, [r4, #0]
 8004bf8:	1d19      	adds	r1, r3, #4
 8004bfa:	6031      	str	r1, [r6, #0]
 8004bfc:	0606      	lsls	r6, r0, #24
 8004bfe:	d501      	bpl.n	8004c04 <_printf_i+0xbc>
 8004c00:	681d      	ldr	r5, [r3, #0]
 8004c02:	e003      	b.n	8004c0c <_printf_i+0xc4>
 8004c04:	0645      	lsls	r5, r0, #25
 8004c06:	d5fb      	bpl.n	8004c00 <_printf_i+0xb8>
 8004c08:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004c0c:	2d00      	cmp	r5, #0
 8004c0e:	da03      	bge.n	8004c18 <_printf_i+0xd0>
 8004c10:	232d      	movs	r3, #45	@ 0x2d
 8004c12:	426d      	negs	r5, r5
 8004c14:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004c18:	230a      	movs	r3, #10
 8004c1a:	4858      	ldr	r0, [pc, #352]	@ (8004d7c <_printf_i+0x234>)
 8004c1c:	e011      	b.n	8004c42 <_printf_i+0xfa>
 8004c1e:	6821      	ldr	r1, [r4, #0]
 8004c20:	6833      	ldr	r3, [r6, #0]
 8004c22:	0608      	lsls	r0, r1, #24
 8004c24:	f853 5b04 	ldr.w	r5, [r3], #4
 8004c28:	d402      	bmi.n	8004c30 <_printf_i+0xe8>
 8004c2a:	0649      	lsls	r1, r1, #25
 8004c2c:	bf48      	it	mi
 8004c2e:	b2ad      	uxthmi	r5, r5
 8004c30:	2f6f      	cmp	r7, #111	@ 0x6f
 8004c32:	6033      	str	r3, [r6, #0]
 8004c34:	bf14      	ite	ne
 8004c36:	230a      	movne	r3, #10
 8004c38:	2308      	moveq	r3, #8
 8004c3a:	4850      	ldr	r0, [pc, #320]	@ (8004d7c <_printf_i+0x234>)
 8004c3c:	2100      	movs	r1, #0
 8004c3e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004c42:	6866      	ldr	r6, [r4, #4]
 8004c44:	2e00      	cmp	r6, #0
 8004c46:	60a6      	str	r6, [r4, #8]
 8004c48:	db05      	blt.n	8004c56 <_printf_i+0x10e>
 8004c4a:	6821      	ldr	r1, [r4, #0]
 8004c4c:	432e      	orrs	r6, r5
 8004c4e:	f021 0104 	bic.w	r1, r1, #4
 8004c52:	6021      	str	r1, [r4, #0]
 8004c54:	d04b      	beq.n	8004cee <_printf_i+0x1a6>
 8004c56:	4616      	mov	r6, r2
 8004c58:	fbb5 f1f3 	udiv	r1, r5, r3
 8004c5c:	fb03 5711 	mls	r7, r3, r1, r5
 8004c60:	5dc7      	ldrb	r7, [r0, r7]
 8004c62:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004c66:	462f      	mov	r7, r5
 8004c68:	42bb      	cmp	r3, r7
 8004c6a:	460d      	mov	r5, r1
 8004c6c:	d9f4      	bls.n	8004c58 <_printf_i+0x110>
 8004c6e:	2b08      	cmp	r3, #8
 8004c70:	d10b      	bne.n	8004c8a <_printf_i+0x142>
 8004c72:	6823      	ldr	r3, [r4, #0]
 8004c74:	07df      	lsls	r7, r3, #31
 8004c76:	d508      	bpl.n	8004c8a <_printf_i+0x142>
 8004c78:	6923      	ldr	r3, [r4, #16]
 8004c7a:	6861      	ldr	r1, [r4, #4]
 8004c7c:	4299      	cmp	r1, r3
 8004c7e:	bfde      	ittt	le
 8004c80:	2330      	movle	r3, #48	@ 0x30
 8004c82:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004c86:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004c8a:	1b92      	subs	r2, r2, r6
 8004c8c:	6122      	str	r2, [r4, #16]
 8004c8e:	464b      	mov	r3, r9
 8004c90:	4621      	mov	r1, r4
 8004c92:	4640      	mov	r0, r8
 8004c94:	f8cd a000 	str.w	sl, [sp]
 8004c98:	aa03      	add	r2, sp, #12
 8004c9a:	f7ff fee3 	bl	8004a64 <_printf_common>
 8004c9e:	3001      	adds	r0, #1
 8004ca0:	d14a      	bne.n	8004d38 <_printf_i+0x1f0>
 8004ca2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ca6:	b004      	add	sp, #16
 8004ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cac:	6823      	ldr	r3, [r4, #0]
 8004cae:	f043 0320 	orr.w	r3, r3, #32
 8004cb2:	6023      	str	r3, [r4, #0]
 8004cb4:	2778      	movs	r7, #120	@ 0x78
 8004cb6:	4832      	ldr	r0, [pc, #200]	@ (8004d80 <_printf_i+0x238>)
 8004cb8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004cbc:	6823      	ldr	r3, [r4, #0]
 8004cbe:	6831      	ldr	r1, [r6, #0]
 8004cc0:	061f      	lsls	r7, r3, #24
 8004cc2:	f851 5b04 	ldr.w	r5, [r1], #4
 8004cc6:	d402      	bmi.n	8004cce <_printf_i+0x186>
 8004cc8:	065f      	lsls	r7, r3, #25
 8004cca:	bf48      	it	mi
 8004ccc:	b2ad      	uxthmi	r5, r5
 8004cce:	6031      	str	r1, [r6, #0]
 8004cd0:	07d9      	lsls	r1, r3, #31
 8004cd2:	bf44      	itt	mi
 8004cd4:	f043 0320 	orrmi.w	r3, r3, #32
 8004cd8:	6023      	strmi	r3, [r4, #0]
 8004cda:	b11d      	cbz	r5, 8004ce4 <_printf_i+0x19c>
 8004cdc:	2310      	movs	r3, #16
 8004cde:	e7ad      	b.n	8004c3c <_printf_i+0xf4>
 8004ce0:	4826      	ldr	r0, [pc, #152]	@ (8004d7c <_printf_i+0x234>)
 8004ce2:	e7e9      	b.n	8004cb8 <_printf_i+0x170>
 8004ce4:	6823      	ldr	r3, [r4, #0]
 8004ce6:	f023 0320 	bic.w	r3, r3, #32
 8004cea:	6023      	str	r3, [r4, #0]
 8004cec:	e7f6      	b.n	8004cdc <_printf_i+0x194>
 8004cee:	4616      	mov	r6, r2
 8004cf0:	e7bd      	b.n	8004c6e <_printf_i+0x126>
 8004cf2:	6833      	ldr	r3, [r6, #0]
 8004cf4:	6825      	ldr	r5, [r4, #0]
 8004cf6:	1d18      	adds	r0, r3, #4
 8004cf8:	6961      	ldr	r1, [r4, #20]
 8004cfa:	6030      	str	r0, [r6, #0]
 8004cfc:	062e      	lsls	r6, r5, #24
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	d501      	bpl.n	8004d06 <_printf_i+0x1be>
 8004d02:	6019      	str	r1, [r3, #0]
 8004d04:	e002      	b.n	8004d0c <_printf_i+0x1c4>
 8004d06:	0668      	lsls	r0, r5, #25
 8004d08:	d5fb      	bpl.n	8004d02 <_printf_i+0x1ba>
 8004d0a:	8019      	strh	r1, [r3, #0]
 8004d0c:	2300      	movs	r3, #0
 8004d0e:	4616      	mov	r6, r2
 8004d10:	6123      	str	r3, [r4, #16]
 8004d12:	e7bc      	b.n	8004c8e <_printf_i+0x146>
 8004d14:	6833      	ldr	r3, [r6, #0]
 8004d16:	2100      	movs	r1, #0
 8004d18:	1d1a      	adds	r2, r3, #4
 8004d1a:	6032      	str	r2, [r6, #0]
 8004d1c:	681e      	ldr	r6, [r3, #0]
 8004d1e:	6862      	ldr	r2, [r4, #4]
 8004d20:	4630      	mov	r0, r6
 8004d22:	f000 fcfc 	bl	800571e <memchr>
 8004d26:	b108      	cbz	r0, 8004d2c <_printf_i+0x1e4>
 8004d28:	1b80      	subs	r0, r0, r6
 8004d2a:	6060      	str	r0, [r4, #4]
 8004d2c:	6863      	ldr	r3, [r4, #4]
 8004d2e:	6123      	str	r3, [r4, #16]
 8004d30:	2300      	movs	r3, #0
 8004d32:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004d36:	e7aa      	b.n	8004c8e <_printf_i+0x146>
 8004d38:	4632      	mov	r2, r6
 8004d3a:	4649      	mov	r1, r9
 8004d3c:	4640      	mov	r0, r8
 8004d3e:	6923      	ldr	r3, [r4, #16]
 8004d40:	47d0      	blx	sl
 8004d42:	3001      	adds	r0, #1
 8004d44:	d0ad      	beq.n	8004ca2 <_printf_i+0x15a>
 8004d46:	6823      	ldr	r3, [r4, #0]
 8004d48:	079b      	lsls	r3, r3, #30
 8004d4a:	d413      	bmi.n	8004d74 <_printf_i+0x22c>
 8004d4c:	68e0      	ldr	r0, [r4, #12]
 8004d4e:	9b03      	ldr	r3, [sp, #12]
 8004d50:	4298      	cmp	r0, r3
 8004d52:	bfb8      	it	lt
 8004d54:	4618      	movlt	r0, r3
 8004d56:	e7a6      	b.n	8004ca6 <_printf_i+0x15e>
 8004d58:	2301      	movs	r3, #1
 8004d5a:	4632      	mov	r2, r6
 8004d5c:	4649      	mov	r1, r9
 8004d5e:	4640      	mov	r0, r8
 8004d60:	47d0      	blx	sl
 8004d62:	3001      	adds	r0, #1
 8004d64:	d09d      	beq.n	8004ca2 <_printf_i+0x15a>
 8004d66:	3501      	adds	r5, #1
 8004d68:	68e3      	ldr	r3, [r4, #12]
 8004d6a:	9903      	ldr	r1, [sp, #12]
 8004d6c:	1a5b      	subs	r3, r3, r1
 8004d6e:	42ab      	cmp	r3, r5
 8004d70:	dcf2      	bgt.n	8004d58 <_printf_i+0x210>
 8004d72:	e7eb      	b.n	8004d4c <_printf_i+0x204>
 8004d74:	2500      	movs	r5, #0
 8004d76:	f104 0619 	add.w	r6, r4, #25
 8004d7a:	e7f5      	b.n	8004d68 <_printf_i+0x220>
 8004d7c:	08009744 	.word	0x08009744
 8004d80:	08009755 	.word	0x08009755

08004d84 <_scanf_float>:
 8004d84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d88:	b087      	sub	sp, #28
 8004d8a:	9303      	str	r3, [sp, #12]
 8004d8c:	688b      	ldr	r3, [r1, #8]
 8004d8e:	4691      	mov	r9, r2
 8004d90:	1e5a      	subs	r2, r3, #1
 8004d92:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8004d96:	bf82      	ittt	hi
 8004d98:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8004d9c:	eb03 0b05 	addhi.w	fp, r3, r5
 8004da0:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8004da4:	460a      	mov	r2, r1
 8004da6:	f04f 0500 	mov.w	r5, #0
 8004daa:	bf88      	it	hi
 8004dac:	608b      	strhi	r3, [r1, #8]
 8004dae:	680b      	ldr	r3, [r1, #0]
 8004db0:	4680      	mov	r8, r0
 8004db2:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8004db6:	f842 3b1c 	str.w	r3, [r2], #28
 8004dba:	460c      	mov	r4, r1
 8004dbc:	bf98      	it	ls
 8004dbe:	f04f 0b00 	movls.w	fp, #0
 8004dc2:	4616      	mov	r6, r2
 8004dc4:	46aa      	mov	sl, r5
 8004dc6:	462f      	mov	r7, r5
 8004dc8:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8004dcc:	9201      	str	r2, [sp, #4]
 8004dce:	9502      	str	r5, [sp, #8]
 8004dd0:	68a2      	ldr	r2, [r4, #8]
 8004dd2:	b15a      	cbz	r2, 8004dec <_scanf_float+0x68>
 8004dd4:	f8d9 3000 	ldr.w	r3, [r9]
 8004dd8:	781b      	ldrb	r3, [r3, #0]
 8004dda:	2b4e      	cmp	r3, #78	@ 0x4e
 8004ddc:	d862      	bhi.n	8004ea4 <_scanf_float+0x120>
 8004dde:	2b40      	cmp	r3, #64	@ 0x40
 8004de0:	d83a      	bhi.n	8004e58 <_scanf_float+0xd4>
 8004de2:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8004de6:	b2c8      	uxtb	r0, r1
 8004de8:	280e      	cmp	r0, #14
 8004dea:	d938      	bls.n	8004e5e <_scanf_float+0xda>
 8004dec:	b11f      	cbz	r7, 8004df6 <_scanf_float+0x72>
 8004dee:	6823      	ldr	r3, [r4, #0]
 8004df0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004df4:	6023      	str	r3, [r4, #0]
 8004df6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004dfa:	f1ba 0f01 	cmp.w	sl, #1
 8004dfe:	f200 8114 	bhi.w	800502a <_scanf_float+0x2a6>
 8004e02:	9b01      	ldr	r3, [sp, #4]
 8004e04:	429e      	cmp	r6, r3
 8004e06:	f200 8105 	bhi.w	8005014 <_scanf_float+0x290>
 8004e0a:	2001      	movs	r0, #1
 8004e0c:	b007      	add	sp, #28
 8004e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e12:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8004e16:	2a0d      	cmp	r2, #13
 8004e18:	d8e8      	bhi.n	8004dec <_scanf_float+0x68>
 8004e1a:	a101      	add	r1, pc, #4	@ (adr r1, 8004e20 <_scanf_float+0x9c>)
 8004e1c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8004e20:	08004f69 	.word	0x08004f69
 8004e24:	08004ded 	.word	0x08004ded
 8004e28:	08004ded 	.word	0x08004ded
 8004e2c:	08004ded 	.word	0x08004ded
 8004e30:	08004fc5 	.word	0x08004fc5
 8004e34:	08004f9f 	.word	0x08004f9f
 8004e38:	08004ded 	.word	0x08004ded
 8004e3c:	08004ded 	.word	0x08004ded
 8004e40:	08004f77 	.word	0x08004f77
 8004e44:	08004ded 	.word	0x08004ded
 8004e48:	08004ded 	.word	0x08004ded
 8004e4c:	08004ded 	.word	0x08004ded
 8004e50:	08004ded 	.word	0x08004ded
 8004e54:	08004f33 	.word	0x08004f33
 8004e58:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8004e5c:	e7db      	b.n	8004e16 <_scanf_float+0x92>
 8004e5e:	290e      	cmp	r1, #14
 8004e60:	d8c4      	bhi.n	8004dec <_scanf_float+0x68>
 8004e62:	a001      	add	r0, pc, #4	@ (adr r0, 8004e68 <_scanf_float+0xe4>)
 8004e64:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8004e68:	08004f23 	.word	0x08004f23
 8004e6c:	08004ded 	.word	0x08004ded
 8004e70:	08004f23 	.word	0x08004f23
 8004e74:	08004fb3 	.word	0x08004fb3
 8004e78:	08004ded 	.word	0x08004ded
 8004e7c:	08004ec5 	.word	0x08004ec5
 8004e80:	08004f09 	.word	0x08004f09
 8004e84:	08004f09 	.word	0x08004f09
 8004e88:	08004f09 	.word	0x08004f09
 8004e8c:	08004f09 	.word	0x08004f09
 8004e90:	08004f09 	.word	0x08004f09
 8004e94:	08004f09 	.word	0x08004f09
 8004e98:	08004f09 	.word	0x08004f09
 8004e9c:	08004f09 	.word	0x08004f09
 8004ea0:	08004f09 	.word	0x08004f09
 8004ea4:	2b6e      	cmp	r3, #110	@ 0x6e
 8004ea6:	d809      	bhi.n	8004ebc <_scanf_float+0x138>
 8004ea8:	2b60      	cmp	r3, #96	@ 0x60
 8004eaa:	d8b2      	bhi.n	8004e12 <_scanf_float+0x8e>
 8004eac:	2b54      	cmp	r3, #84	@ 0x54
 8004eae:	d07b      	beq.n	8004fa8 <_scanf_float+0x224>
 8004eb0:	2b59      	cmp	r3, #89	@ 0x59
 8004eb2:	d19b      	bne.n	8004dec <_scanf_float+0x68>
 8004eb4:	2d07      	cmp	r5, #7
 8004eb6:	d199      	bne.n	8004dec <_scanf_float+0x68>
 8004eb8:	2508      	movs	r5, #8
 8004eba:	e02f      	b.n	8004f1c <_scanf_float+0x198>
 8004ebc:	2b74      	cmp	r3, #116	@ 0x74
 8004ebe:	d073      	beq.n	8004fa8 <_scanf_float+0x224>
 8004ec0:	2b79      	cmp	r3, #121	@ 0x79
 8004ec2:	e7f6      	b.n	8004eb2 <_scanf_float+0x12e>
 8004ec4:	6821      	ldr	r1, [r4, #0]
 8004ec6:	05c8      	lsls	r0, r1, #23
 8004ec8:	d51e      	bpl.n	8004f08 <_scanf_float+0x184>
 8004eca:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8004ece:	6021      	str	r1, [r4, #0]
 8004ed0:	3701      	adds	r7, #1
 8004ed2:	f1bb 0f00 	cmp.w	fp, #0
 8004ed6:	d003      	beq.n	8004ee0 <_scanf_float+0x15c>
 8004ed8:	3201      	adds	r2, #1
 8004eda:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004ede:	60a2      	str	r2, [r4, #8]
 8004ee0:	68a3      	ldr	r3, [r4, #8]
 8004ee2:	3b01      	subs	r3, #1
 8004ee4:	60a3      	str	r3, [r4, #8]
 8004ee6:	6923      	ldr	r3, [r4, #16]
 8004ee8:	3301      	adds	r3, #1
 8004eea:	6123      	str	r3, [r4, #16]
 8004eec:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8004ef0:	3b01      	subs	r3, #1
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	f8c9 3004 	str.w	r3, [r9, #4]
 8004ef8:	f340 8083 	ble.w	8005002 <_scanf_float+0x27e>
 8004efc:	f8d9 3000 	ldr.w	r3, [r9]
 8004f00:	3301      	adds	r3, #1
 8004f02:	f8c9 3000 	str.w	r3, [r9]
 8004f06:	e763      	b.n	8004dd0 <_scanf_float+0x4c>
 8004f08:	eb1a 0105 	adds.w	r1, sl, r5
 8004f0c:	f47f af6e 	bne.w	8004dec <_scanf_float+0x68>
 8004f10:	460d      	mov	r5, r1
 8004f12:	468a      	mov	sl, r1
 8004f14:	6822      	ldr	r2, [r4, #0]
 8004f16:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8004f1a:	6022      	str	r2, [r4, #0]
 8004f1c:	f806 3b01 	strb.w	r3, [r6], #1
 8004f20:	e7de      	b.n	8004ee0 <_scanf_float+0x15c>
 8004f22:	6822      	ldr	r2, [r4, #0]
 8004f24:	0610      	lsls	r0, r2, #24
 8004f26:	f57f af61 	bpl.w	8004dec <_scanf_float+0x68>
 8004f2a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004f2e:	6022      	str	r2, [r4, #0]
 8004f30:	e7f4      	b.n	8004f1c <_scanf_float+0x198>
 8004f32:	f1ba 0f00 	cmp.w	sl, #0
 8004f36:	d10c      	bne.n	8004f52 <_scanf_float+0x1ce>
 8004f38:	b977      	cbnz	r7, 8004f58 <_scanf_float+0x1d4>
 8004f3a:	6822      	ldr	r2, [r4, #0]
 8004f3c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004f40:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004f44:	d108      	bne.n	8004f58 <_scanf_float+0x1d4>
 8004f46:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004f4a:	f04f 0a01 	mov.w	sl, #1
 8004f4e:	6022      	str	r2, [r4, #0]
 8004f50:	e7e4      	b.n	8004f1c <_scanf_float+0x198>
 8004f52:	f1ba 0f02 	cmp.w	sl, #2
 8004f56:	d051      	beq.n	8004ffc <_scanf_float+0x278>
 8004f58:	2d01      	cmp	r5, #1
 8004f5a:	d002      	beq.n	8004f62 <_scanf_float+0x1de>
 8004f5c:	2d04      	cmp	r5, #4
 8004f5e:	f47f af45 	bne.w	8004dec <_scanf_float+0x68>
 8004f62:	3501      	adds	r5, #1
 8004f64:	b2ed      	uxtb	r5, r5
 8004f66:	e7d9      	b.n	8004f1c <_scanf_float+0x198>
 8004f68:	f1ba 0f01 	cmp.w	sl, #1
 8004f6c:	f47f af3e 	bne.w	8004dec <_scanf_float+0x68>
 8004f70:	f04f 0a02 	mov.w	sl, #2
 8004f74:	e7d2      	b.n	8004f1c <_scanf_float+0x198>
 8004f76:	b975      	cbnz	r5, 8004f96 <_scanf_float+0x212>
 8004f78:	2f00      	cmp	r7, #0
 8004f7a:	f47f af38 	bne.w	8004dee <_scanf_float+0x6a>
 8004f7e:	6822      	ldr	r2, [r4, #0]
 8004f80:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8004f84:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8004f88:	f040 80ff 	bne.w	800518a <_scanf_float+0x406>
 8004f8c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004f90:	2501      	movs	r5, #1
 8004f92:	6022      	str	r2, [r4, #0]
 8004f94:	e7c2      	b.n	8004f1c <_scanf_float+0x198>
 8004f96:	2d03      	cmp	r5, #3
 8004f98:	d0e3      	beq.n	8004f62 <_scanf_float+0x1de>
 8004f9a:	2d05      	cmp	r5, #5
 8004f9c:	e7df      	b.n	8004f5e <_scanf_float+0x1da>
 8004f9e:	2d02      	cmp	r5, #2
 8004fa0:	f47f af24 	bne.w	8004dec <_scanf_float+0x68>
 8004fa4:	2503      	movs	r5, #3
 8004fa6:	e7b9      	b.n	8004f1c <_scanf_float+0x198>
 8004fa8:	2d06      	cmp	r5, #6
 8004faa:	f47f af1f 	bne.w	8004dec <_scanf_float+0x68>
 8004fae:	2507      	movs	r5, #7
 8004fb0:	e7b4      	b.n	8004f1c <_scanf_float+0x198>
 8004fb2:	6822      	ldr	r2, [r4, #0]
 8004fb4:	0591      	lsls	r1, r2, #22
 8004fb6:	f57f af19 	bpl.w	8004dec <_scanf_float+0x68>
 8004fba:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8004fbe:	6022      	str	r2, [r4, #0]
 8004fc0:	9702      	str	r7, [sp, #8]
 8004fc2:	e7ab      	b.n	8004f1c <_scanf_float+0x198>
 8004fc4:	6822      	ldr	r2, [r4, #0]
 8004fc6:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8004fca:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8004fce:	d005      	beq.n	8004fdc <_scanf_float+0x258>
 8004fd0:	0550      	lsls	r0, r2, #21
 8004fd2:	f57f af0b 	bpl.w	8004dec <_scanf_float+0x68>
 8004fd6:	2f00      	cmp	r7, #0
 8004fd8:	f000 80d7 	beq.w	800518a <_scanf_float+0x406>
 8004fdc:	0591      	lsls	r1, r2, #22
 8004fde:	bf58      	it	pl
 8004fe0:	9902      	ldrpl	r1, [sp, #8]
 8004fe2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8004fe6:	bf58      	it	pl
 8004fe8:	1a79      	subpl	r1, r7, r1
 8004fea:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8004fee:	f04f 0700 	mov.w	r7, #0
 8004ff2:	bf58      	it	pl
 8004ff4:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8004ff8:	6022      	str	r2, [r4, #0]
 8004ffa:	e78f      	b.n	8004f1c <_scanf_float+0x198>
 8004ffc:	f04f 0a03 	mov.w	sl, #3
 8005000:	e78c      	b.n	8004f1c <_scanf_float+0x198>
 8005002:	4649      	mov	r1, r9
 8005004:	4640      	mov	r0, r8
 8005006:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800500a:	4798      	blx	r3
 800500c:	2800      	cmp	r0, #0
 800500e:	f43f aedf 	beq.w	8004dd0 <_scanf_float+0x4c>
 8005012:	e6eb      	b.n	8004dec <_scanf_float+0x68>
 8005014:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005018:	464a      	mov	r2, r9
 800501a:	4640      	mov	r0, r8
 800501c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005020:	4798      	blx	r3
 8005022:	6923      	ldr	r3, [r4, #16]
 8005024:	3b01      	subs	r3, #1
 8005026:	6123      	str	r3, [r4, #16]
 8005028:	e6eb      	b.n	8004e02 <_scanf_float+0x7e>
 800502a:	1e6b      	subs	r3, r5, #1
 800502c:	2b06      	cmp	r3, #6
 800502e:	d824      	bhi.n	800507a <_scanf_float+0x2f6>
 8005030:	2d02      	cmp	r5, #2
 8005032:	d836      	bhi.n	80050a2 <_scanf_float+0x31e>
 8005034:	9b01      	ldr	r3, [sp, #4]
 8005036:	429e      	cmp	r6, r3
 8005038:	f67f aee7 	bls.w	8004e0a <_scanf_float+0x86>
 800503c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005040:	464a      	mov	r2, r9
 8005042:	4640      	mov	r0, r8
 8005044:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005048:	4798      	blx	r3
 800504a:	6923      	ldr	r3, [r4, #16]
 800504c:	3b01      	subs	r3, #1
 800504e:	6123      	str	r3, [r4, #16]
 8005050:	e7f0      	b.n	8005034 <_scanf_float+0x2b0>
 8005052:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005056:	464a      	mov	r2, r9
 8005058:	4640      	mov	r0, r8
 800505a:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 800505e:	4798      	blx	r3
 8005060:	6923      	ldr	r3, [r4, #16]
 8005062:	3b01      	subs	r3, #1
 8005064:	6123      	str	r3, [r4, #16]
 8005066:	f10a 3aff 	add.w	sl, sl, #4294967295
 800506a:	fa5f fa8a 	uxtb.w	sl, sl
 800506e:	f1ba 0f02 	cmp.w	sl, #2
 8005072:	d1ee      	bne.n	8005052 <_scanf_float+0x2ce>
 8005074:	3d03      	subs	r5, #3
 8005076:	b2ed      	uxtb	r5, r5
 8005078:	1b76      	subs	r6, r6, r5
 800507a:	6823      	ldr	r3, [r4, #0]
 800507c:	05da      	lsls	r2, r3, #23
 800507e:	d530      	bpl.n	80050e2 <_scanf_float+0x35e>
 8005080:	055b      	lsls	r3, r3, #21
 8005082:	d511      	bpl.n	80050a8 <_scanf_float+0x324>
 8005084:	9b01      	ldr	r3, [sp, #4]
 8005086:	429e      	cmp	r6, r3
 8005088:	f67f aebf 	bls.w	8004e0a <_scanf_float+0x86>
 800508c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005090:	464a      	mov	r2, r9
 8005092:	4640      	mov	r0, r8
 8005094:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8005098:	4798      	blx	r3
 800509a:	6923      	ldr	r3, [r4, #16]
 800509c:	3b01      	subs	r3, #1
 800509e:	6123      	str	r3, [r4, #16]
 80050a0:	e7f0      	b.n	8005084 <_scanf_float+0x300>
 80050a2:	46aa      	mov	sl, r5
 80050a4:	46b3      	mov	fp, r6
 80050a6:	e7de      	b.n	8005066 <_scanf_float+0x2e2>
 80050a8:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80050ac:	6923      	ldr	r3, [r4, #16]
 80050ae:	2965      	cmp	r1, #101	@ 0x65
 80050b0:	f103 33ff 	add.w	r3, r3, #4294967295
 80050b4:	f106 35ff 	add.w	r5, r6, #4294967295
 80050b8:	6123      	str	r3, [r4, #16]
 80050ba:	d00c      	beq.n	80050d6 <_scanf_float+0x352>
 80050bc:	2945      	cmp	r1, #69	@ 0x45
 80050be:	d00a      	beq.n	80050d6 <_scanf_float+0x352>
 80050c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80050c4:	464a      	mov	r2, r9
 80050c6:	4640      	mov	r0, r8
 80050c8:	4798      	blx	r3
 80050ca:	6923      	ldr	r3, [r4, #16]
 80050cc:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80050d0:	3b01      	subs	r3, #1
 80050d2:	1eb5      	subs	r5, r6, #2
 80050d4:	6123      	str	r3, [r4, #16]
 80050d6:	464a      	mov	r2, r9
 80050d8:	4640      	mov	r0, r8
 80050da:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80050de:	4798      	blx	r3
 80050e0:	462e      	mov	r6, r5
 80050e2:	6822      	ldr	r2, [r4, #0]
 80050e4:	f012 0210 	ands.w	r2, r2, #16
 80050e8:	d001      	beq.n	80050ee <_scanf_float+0x36a>
 80050ea:	2000      	movs	r0, #0
 80050ec:	e68e      	b.n	8004e0c <_scanf_float+0x88>
 80050ee:	7032      	strb	r2, [r6, #0]
 80050f0:	6823      	ldr	r3, [r4, #0]
 80050f2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80050f6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050fa:	d125      	bne.n	8005148 <_scanf_float+0x3c4>
 80050fc:	9b02      	ldr	r3, [sp, #8]
 80050fe:	429f      	cmp	r7, r3
 8005100:	d00a      	beq.n	8005118 <_scanf_float+0x394>
 8005102:	1bda      	subs	r2, r3, r7
 8005104:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8005108:	429e      	cmp	r6, r3
 800510a:	bf28      	it	cs
 800510c:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8005110:	4630      	mov	r0, r6
 8005112:	491f      	ldr	r1, [pc, #124]	@ (8005190 <_scanf_float+0x40c>)
 8005114:	f000 f97a 	bl	800540c <siprintf>
 8005118:	2200      	movs	r2, #0
 800511a:	4640      	mov	r0, r8
 800511c:	9901      	ldr	r1, [sp, #4]
 800511e:	f002 fd07 	bl	8007b30 <_strtod_r>
 8005122:	9b03      	ldr	r3, [sp, #12]
 8005124:	6825      	ldr	r5, [r4, #0]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f015 0f02 	tst.w	r5, #2
 800512c:	4606      	mov	r6, r0
 800512e:	460f      	mov	r7, r1
 8005130:	f103 0204 	add.w	r2, r3, #4
 8005134:	d015      	beq.n	8005162 <_scanf_float+0x3de>
 8005136:	9903      	ldr	r1, [sp, #12]
 8005138:	600a      	str	r2, [r1, #0]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	e9c3 6700 	strd	r6, r7, [r3]
 8005140:	68e3      	ldr	r3, [r4, #12]
 8005142:	3301      	adds	r3, #1
 8005144:	60e3      	str	r3, [r4, #12]
 8005146:	e7d0      	b.n	80050ea <_scanf_float+0x366>
 8005148:	9b04      	ldr	r3, [sp, #16]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d0e4      	beq.n	8005118 <_scanf_float+0x394>
 800514e:	9905      	ldr	r1, [sp, #20]
 8005150:	230a      	movs	r3, #10
 8005152:	4640      	mov	r0, r8
 8005154:	3101      	adds	r1, #1
 8005156:	f002 fd6b 	bl	8007c30 <_strtol_r>
 800515a:	9b04      	ldr	r3, [sp, #16]
 800515c:	9e05      	ldr	r6, [sp, #20]
 800515e:	1ac2      	subs	r2, r0, r3
 8005160:	e7d0      	b.n	8005104 <_scanf_float+0x380>
 8005162:	076d      	lsls	r5, r5, #29
 8005164:	d4e7      	bmi.n	8005136 <_scanf_float+0x3b2>
 8005166:	9d03      	ldr	r5, [sp, #12]
 8005168:	602a      	str	r2, [r5, #0]
 800516a:	681d      	ldr	r5, [r3, #0]
 800516c:	4602      	mov	r2, r0
 800516e:	460b      	mov	r3, r1
 8005170:	f7fb fc4c 	bl	8000a0c <__aeabi_dcmpun>
 8005174:	b120      	cbz	r0, 8005180 <_scanf_float+0x3fc>
 8005176:	4807      	ldr	r0, [pc, #28]	@ (8005194 <_scanf_float+0x410>)
 8005178:	f000 fae0 	bl	800573c <nanf>
 800517c:	6028      	str	r0, [r5, #0]
 800517e:	e7df      	b.n	8005140 <_scanf_float+0x3bc>
 8005180:	4630      	mov	r0, r6
 8005182:	4639      	mov	r1, r7
 8005184:	f7fb fca0 	bl	8000ac8 <__aeabi_d2f>
 8005188:	e7f8      	b.n	800517c <_scanf_float+0x3f8>
 800518a:	2700      	movs	r7, #0
 800518c:	e633      	b.n	8004df6 <_scanf_float+0x72>
 800518e:	bf00      	nop
 8005190:	08009766 	.word	0x08009766
 8005194:	080098a7 	.word	0x080098a7

08005198 <std>:
 8005198:	2300      	movs	r3, #0
 800519a:	b510      	push	{r4, lr}
 800519c:	4604      	mov	r4, r0
 800519e:	e9c0 3300 	strd	r3, r3, [r0]
 80051a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80051a6:	6083      	str	r3, [r0, #8]
 80051a8:	8181      	strh	r1, [r0, #12]
 80051aa:	6643      	str	r3, [r0, #100]	@ 0x64
 80051ac:	81c2      	strh	r2, [r0, #14]
 80051ae:	6183      	str	r3, [r0, #24]
 80051b0:	4619      	mov	r1, r3
 80051b2:	2208      	movs	r2, #8
 80051b4:	305c      	adds	r0, #92	@ 0x5c
 80051b6:	f000 fa33 	bl	8005620 <memset>
 80051ba:	4b0d      	ldr	r3, [pc, #52]	@ (80051f0 <std+0x58>)
 80051bc:	6224      	str	r4, [r4, #32]
 80051be:	6263      	str	r3, [r4, #36]	@ 0x24
 80051c0:	4b0c      	ldr	r3, [pc, #48]	@ (80051f4 <std+0x5c>)
 80051c2:	62a3      	str	r3, [r4, #40]	@ 0x28
 80051c4:	4b0c      	ldr	r3, [pc, #48]	@ (80051f8 <std+0x60>)
 80051c6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80051c8:	4b0c      	ldr	r3, [pc, #48]	@ (80051fc <std+0x64>)
 80051ca:	6323      	str	r3, [r4, #48]	@ 0x30
 80051cc:	4b0c      	ldr	r3, [pc, #48]	@ (8005200 <std+0x68>)
 80051ce:	429c      	cmp	r4, r3
 80051d0:	d006      	beq.n	80051e0 <std+0x48>
 80051d2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80051d6:	4294      	cmp	r4, r2
 80051d8:	d002      	beq.n	80051e0 <std+0x48>
 80051da:	33d0      	adds	r3, #208	@ 0xd0
 80051dc:	429c      	cmp	r4, r3
 80051de:	d105      	bne.n	80051ec <std+0x54>
 80051e0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80051e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80051e8:	f000 ba96 	b.w	8005718 <__retarget_lock_init_recursive>
 80051ec:	bd10      	pop	{r4, pc}
 80051ee:	bf00      	nop
 80051f0:	08005451 	.word	0x08005451
 80051f4:	08005473 	.word	0x08005473
 80051f8:	080054ab 	.word	0x080054ab
 80051fc:	080054cf 	.word	0x080054cf
 8005200:	20000298 	.word	0x20000298

08005204 <stdio_exit_handler>:
 8005204:	4a02      	ldr	r2, [pc, #8]	@ (8005210 <stdio_exit_handler+0xc>)
 8005206:	4903      	ldr	r1, [pc, #12]	@ (8005214 <stdio_exit_handler+0x10>)
 8005208:	4803      	ldr	r0, [pc, #12]	@ (8005218 <stdio_exit_handler+0x14>)
 800520a:	f000 b869 	b.w	80052e0 <_fwalk_sglue>
 800520e:	bf00      	nop
 8005210:	2000000c 	.word	0x2000000c
 8005214:	08008265 	.word	0x08008265
 8005218:	2000001c 	.word	0x2000001c

0800521c <cleanup_stdio>:
 800521c:	6841      	ldr	r1, [r0, #4]
 800521e:	4b0c      	ldr	r3, [pc, #48]	@ (8005250 <cleanup_stdio+0x34>)
 8005220:	b510      	push	{r4, lr}
 8005222:	4299      	cmp	r1, r3
 8005224:	4604      	mov	r4, r0
 8005226:	d001      	beq.n	800522c <cleanup_stdio+0x10>
 8005228:	f003 f81c 	bl	8008264 <_fflush_r>
 800522c:	68a1      	ldr	r1, [r4, #8]
 800522e:	4b09      	ldr	r3, [pc, #36]	@ (8005254 <cleanup_stdio+0x38>)
 8005230:	4299      	cmp	r1, r3
 8005232:	d002      	beq.n	800523a <cleanup_stdio+0x1e>
 8005234:	4620      	mov	r0, r4
 8005236:	f003 f815 	bl	8008264 <_fflush_r>
 800523a:	68e1      	ldr	r1, [r4, #12]
 800523c:	4b06      	ldr	r3, [pc, #24]	@ (8005258 <cleanup_stdio+0x3c>)
 800523e:	4299      	cmp	r1, r3
 8005240:	d004      	beq.n	800524c <cleanup_stdio+0x30>
 8005242:	4620      	mov	r0, r4
 8005244:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005248:	f003 b80c 	b.w	8008264 <_fflush_r>
 800524c:	bd10      	pop	{r4, pc}
 800524e:	bf00      	nop
 8005250:	20000298 	.word	0x20000298
 8005254:	20000300 	.word	0x20000300
 8005258:	20000368 	.word	0x20000368

0800525c <global_stdio_init.part.0>:
 800525c:	b510      	push	{r4, lr}
 800525e:	4b0b      	ldr	r3, [pc, #44]	@ (800528c <global_stdio_init.part.0+0x30>)
 8005260:	4c0b      	ldr	r4, [pc, #44]	@ (8005290 <global_stdio_init.part.0+0x34>)
 8005262:	4a0c      	ldr	r2, [pc, #48]	@ (8005294 <global_stdio_init.part.0+0x38>)
 8005264:	4620      	mov	r0, r4
 8005266:	601a      	str	r2, [r3, #0]
 8005268:	2104      	movs	r1, #4
 800526a:	2200      	movs	r2, #0
 800526c:	f7ff ff94 	bl	8005198 <std>
 8005270:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005274:	2201      	movs	r2, #1
 8005276:	2109      	movs	r1, #9
 8005278:	f7ff ff8e 	bl	8005198 <std>
 800527c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005280:	2202      	movs	r2, #2
 8005282:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005286:	2112      	movs	r1, #18
 8005288:	f7ff bf86 	b.w	8005198 <std>
 800528c:	200003d0 	.word	0x200003d0
 8005290:	20000298 	.word	0x20000298
 8005294:	08005205 	.word	0x08005205

08005298 <__sfp_lock_acquire>:
 8005298:	4801      	ldr	r0, [pc, #4]	@ (80052a0 <__sfp_lock_acquire+0x8>)
 800529a:	f000 ba3e 	b.w	800571a <__retarget_lock_acquire_recursive>
 800529e:	bf00      	nop
 80052a0:	200003d9 	.word	0x200003d9

080052a4 <__sfp_lock_release>:
 80052a4:	4801      	ldr	r0, [pc, #4]	@ (80052ac <__sfp_lock_release+0x8>)
 80052a6:	f000 ba39 	b.w	800571c <__retarget_lock_release_recursive>
 80052aa:	bf00      	nop
 80052ac:	200003d9 	.word	0x200003d9

080052b0 <__sinit>:
 80052b0:	b510      	push	{r4, lr}
 80052b2:	4604      	mov	r4, r0
 80052b4:	f7ff fff0 	bl	8005298 <__sfp_lock_acquire>
 80052b8:	6a23      	ldr	r3, [r4, #32]
 80052ba:	b11b      	cbz	r3, 80052c4 <__sinit+0x14>
 80052bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80052c0:	f7ff bff0 	b.w	80052a4 <__sfp_lock_release>
 80052c4:	4b04      	ldr	r3, [pc, #16]	@ (80052d8 <__sinit+0x28>)
 80052c6:	6223      	str	r3, [r4, #32]
 80052c8:	4b04      	ldr	r3, [pc, #16]	@ (80052dc <__sinit+0x2c>)
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d1f5      	bne.n	80052bc <__sinit+0xc>
 80052d0:	f7ff ffc4 	bl	800525c <global_stdio_init.part.0>
 80052d4:	e7f2      	b.n	80052bc <__sinit+0xc>
 80052d6:	bf00      	nop
 80052d8:	0800521d 	.word	0x0800521d
 80052dc:	200003d0 	.word	0x200003d0

080052e0 <_fwalk_sglue>:
 80052e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80052e4:	4607      	mov	r7, r0
 80052e6:	4688      	mov	r8, r1
 80052e8:	4614      	mov	r4, r2
 80052ea:	2600      	movs	r6, #0
 80052ec:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80052f0:	f1b9 0901 	subs.w	r9, r9, #1
 80052f4:	d505      	bpl.n	8005302 <_fwalk_sglue+0x22>
 80052f6:	6824      	ldr	r4, [r4, #0]
 80052f8:	2c00      	cmp	r4, #0
 80052fa:	d1f7      	bne.n	80052ec <_fwalk_sglue+0xc>
 80052fc:	4630      	mov	r0, r6
 80052fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005302:	89ab      	ldrh	r3, [r5, #12]
 8005304:	2b01      	cmp	r3, #1
 8005306:	d907      	bls.n	8005318 <_fwalk_sglue+0x38>
 8005308:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800530c:	3301      	adds	r3, #1
 800530e:	d003      	beq.n	8005318 <_fwalk_sglue+0x38>
 8005310:	4629      	mov	r1, r5
 8005312:	4638      	mov	r0, r7
 8005314:	47c0      	blx	r8
 8005316:	4306      	orrs	r6, r0
 8005318:	3568      	adds	r5, #104	@ 0x68
 800531a:	e7e9      	b.n	80052f0 <_fwalk_sglue+0x10>

0800531c <iprintf>:
 800531c:	b40f      	push	{r0, r1, r2, r3}
 800531e:	b507      	push	{r0, r1, r2, lr}
 8005320:	4906      	ldr	r1, [pc, #24]	@ (800533c <iprintf+0x20>)
 8005322:	ab04      	add	r3, sp, #16
 8005324:	6808      	ldr	r0, [r1, #0]
 8005326:	f853 2b04 	ldr.w	r2, [r3], #4
 800532a:	6881      	ldr	r1, [r0, #8]
 800532c:	9301      	str	r3, [sp, #4]
 800532e:	f002 fe01 	bl	8007f34 <_vfiprintf_r>
 8005332:	b003      	add	sp, #12
 8005334:	f85d eb04 	ldr.w	lr, [sp], #4
 8005338:	b004      	add	sp, #16
 800533a:	4770      	bx	lr
 800533c:	20000018 	.word	0x20000018

08005340 <putchar>:
 8005340:	4b02      	ldr	r3, [pc, #8]	@ (800534c <putchar+0xc>)
 8005342:	4601      	mov	r1, r0
 8005344:	6818      	ldr	r0, [r3, #0]
 8005346:	6882      	ldr	r2, [r0, #8]
 8005348:	f003 b815 	b.w	8008376 <_putc_r>
 800534c:	20000018 	.word	0x20000018

08005350 <_puts_r>:
 8005350:	6a03      	ldr	r3, [r0, #32]
 8005352:	b570      	push	{r4, r5, r6, lr}
 8005354:	4605      	mov	r5, r0
 8005356:	460e      	mov	r6, r1
 8005358:	6884      	ldr	r4, [r0, #8]
 800535a:	b90b      	cbnz	r3, 8005360 <_puts_r+0x10>
 800535c:	f7ff ffa8 	bl	80052b0 <__sinit>
 8005360:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005362:	07db      	lsls	r3, r3, #31
 8005364:	d405      	bmi.n	8005372 <_puts_r+0x22>
 8005366:	89a3      	ldrh	r3, [r4, #12]
 8005368:	0598      	lsls	r0, r3, #22
 800536a:	d402      	bmi.n	8005372 <_puts_r+0x22>
 800536c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800536e:	f000 f9d4 	bl	800571a <__retarget_lock_acquire_recursive>
 8005372:	89a3      	ldrh	r3, [r4, #12]
 8005374:	0719      	lsls	r1, r3, #28
 8005376:	d502      	bpl.n	800537e <_puts_r+0x2e>
 8005378:	6923      	ldr	r3, [r4, #16]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d135      	bne.n	80053ea <_puts_r+0x9a>
 800537e:	4621      	mov	r1, r4
 8005380:	4628      	mov	r0, r5
 8005382:	f000 f8e7 	bl	8005554 <__swsetup_r>
 8005386:	b380      	cbz	r0, 80053ea <_puts_r+0x9a>
 8005388:	f04f 35ff 	mov.w	r5, #4294967295
 800538c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800538e:	07da      	lsls	r2, r3, #31
 8005390:	d405      	bmi.n	800539e <_puts_r+0x4e>
 8005392:	89a3      	ldrh	r3, [r4, #12]
 8005394:	059b      	lsls	r3, r3, #22
 8005396:	d402      	bmi.n	800539e <_puts_r+0x4e>
 8005398:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800539a:	f000 f9bf 	bl	800571c <__retarget_lock_release_recursive>
 800539e:	4628      	mov	r0, r5
 80053a0:	bd70      	pop	{r4, r5, r6, pc}
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	da04      	bge.n	80053b0 <_puts_r+0x60>
 80053a6:	69a2      	ldr	r2, [r4, #24]
 80053a8:	429a      	cmp	r2, r3
 80053aa:	dc17      	bgt.n	80053dc <_puts_r+0x8c>
 80053ac:	290a      	cmp	r1, #10
 80053ae:	d015      	beq.n	80053dc <_puts_r+0x8c>
 80053b0:	6823      	ldr	r3, [r4, #0]
 80053b2:	1c5a      	adds	r2, r3, #1
 80053b4:	6022      	str	r2, [r4, #0]
 80053b6:	7019      	strb	r1, [r3, #0]
 80053b8:	68a3      	ldr	r3, [r4, #8]
 80053ba:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80053be:	3b01      	subs	r3, #1
 80053c0:	60a3      	str	r3, [r4, #8]
 80053c2:	2900      	cmp	r1, #0
 80053c4:	d1ed      	bne.n	80053a2 <_puts_r+0x52>
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	da11      	bge.n	80053ee <_puts_r+0x9e>
 80053ca:	4622      	mov	r2, r4
 80053cc:	210a      	movs	r1, #10
 80053ce:	4628      	mov	r0, r5
 80053d0:	f000 f881 	bl	80054d6 <__swbuf_r>
 80053d4:	3001      	adds	r0, #1
 80053d6:	d0d7      	beq.n	8005388 <_puts_r+0x38>
 80053d8:	250a      	movs	r5, #10
 80053da:	e7d7      	b.n	800538c <_puts_r+0x3c>
 80053dc:	4622      	mov	r2, r4
 80053de:	4628      	mov	r0, r5
 80053e0:	f000 f879 	bl	80054d6 <__swbuf_r>
 80053e4:	3001      	adds	r0, #1
 80053e6:	d1e7      	bne.n	80053b8 <_puts_r+0x68>
 80053e8:	e7ce      	b.n	8005388 <_puts_r+0x38>
 80053ea:	3e01      	subs	r6, #1
 80053ec:	e7e4      	b.n	80053b8 <_puts_r+0x68>
 80053ee:	6823      	ldr	r3, [r4, #0]
 80053f0:	1c5a      	adds	r2, r3, #1
 80053f2:	6022      	str	r2, [r4, #0]
 80053f4:	220a      	movs	r2, #10
 80053f6:	701a      	strb	r2, [r3, #0]
 80053f8:	e7ee      	b.n	80053d8 <_puts_r+0x88>
	...

080053fc <puts>:
 80053fc:	4b02      	ldr	r3, [pc, #8]	@ (8005408 <puts+0xc>)
 80053fe:	4601      	mov	r1, r0
 8005400:	6818      	ldr	r0, [r3, #0]
 8005402:	f7ff bfa5 	b.w	8005350 <_puts_r>
 8005406:	bf00      	nop
 8005408:	20000018 	.word	0x20000018

0800540c <siprintf>:
 800540c:	b40e      	push	{r1, r2, r3}
 800540e:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8005412:	b510      	push	{r4, lr}
 8005414:	2400      	movs	r4, #0
 8005416:	b09d      	sub	sp, #116	@ 0x74
 8005418:	ab1f      	add	r3, sp, #124	@ 0x7c
 800541a:	9002      	str	r0, [sp, #8]
 800541c:	9006      	str	r0, [sp, #24]
 800541e:	9107      	str	r1, [sp, #28]
 8005420:	9104      	str	r1, [sp, #16]
 8005422:	4809      	ldr	r0, [pc, #36]	@ (8005448 <siprintf+0x3c>)
 8005424:	4909      	ldr	r1, [pc, #36]	@ (800544c <siprintf+0x40>)
 8005426:	f853 2b04 	ldr.w	r2, [r3], #4
 800542a:	9105      	str	r1, [sp, #20]
 800542c:	6800      	ldr	r0, [r0, #0]
 800542e:	a902      	add	r1, sp, #8
 8005430:	9301      	str	r3, [sp, #4]
 8005432:	941b      	str	r4, [sp, #108]	@ 0x6c
 8005434:	f002 fc5a 	bl	8007cec <_svfiprintf_r>
 8005438:	9b02      	ldr	r3, [sp, #8]
 800543a:	701c      	strb	r4, [r3, #0]
 800543c:	b01d      	add	sp, #116	@ 0x74
 800543e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005442:	b003      	add	sp, #12
 8005444:	4770      	bx	lr
 8005446:	bf00      	nop
 8005448:	20000018 	.word	0x20000018
 800544c:	ffff0208 	.word	0xffff0208

08005450 <__sread>:
 8005450:	b510      	push	{r4, lr}
 8005452:	460c      	mov	r4, r1
 8005454:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005458:	f000 f910 	bl	800567c <_read_r>
 800545c:	2800      	cmp	r0, #0
 800545e:	bfab      	itete	ge
 8005460:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005462:	89a3      	ldrhlt	r3, [r4, #12]
 8005464:	181b      	addge	r3, r3, r0
 8005466:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800546a:	bfac      	ite	ge
 800546c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800546e:	81a3      	strhlt	r3, [r4, #12]
 8005470:	bd10      	pop	{r4, pc}

08005472 <__swrite>:
 8005472:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005476:	461f      	mov	r7, r3
 8005478:	898b      	ldrh	r3, [r1, #12]
 800547a:	4605      	mov	r5, r0
 800547c:	05db      	lsls	r3, r3, #23
 800547e:	460c      	mov	r4, r1
 8005480:	4616      	mov	r6, r2
 8005482:	d505      	bpl.n	8005490 <__swrite+0x1e>
 8005484:	2302      	movs	r3, #2
 8005486:	2200      	movs	r2, #0
 8005488:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800548c:	f000 f8e4 	bl	8005658 <_lseek_r>
 8005490:	89a3      	ldrh	r3, [r4, #12]
 8005492:	4632      	mov	r2, r6
 8005494:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005498:	81a3      	strh	r3, [r4, #12]
 800549a:	4628      	mov	r0, r5
 800549c:	463b      	mov	r3, r7
 800549e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80054a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054a6:	f000 b8fb 	b.w	80056a0 <_write_r>

080054aa <__sseek>:
 80054aa:	b510      	push	{r4, lr}
 80054ac:	460c      	mov	r4, r1
 80054ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054b2:	f000 f8d1 	bl	8005658 <_lseek_r>
 80054b6:	1c43      	adds	r3, r0, #1
 80054b8:	89a3      	ldrh	r3, [r4, #12]
 80054ba:	bf15      	itete	ne
 80054bc:	6560      	strne	r0, [r4, #84]	@ 0x54
 80054be:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80054c2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80054c6:	81a3      	strheq	r3, [r4, #12]
 80054c8:	bf18      	it	ne
 80054ca:	81a3      	strhne	r3, [r4, #12]
 80054cc:	bd10      	pop	{r4, pc}

080054ce <__sclose>:
 80054ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80054d2:	f000 b8b1 	b.w	8005638 <_close_r>

080054d6 <__swbuf_r>:
 80054d6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054d8:	460e      	mov	r6, r1
 80054da:	4614      	mov	r4, r2
 80054dc:	4605      	mov	r5, r0
 80054de:	b118      	cbz	r0, 80054e8 <__swbuf_r+0x12>
 80054e0:	6a03      	ldr	r3, [r0, #32]
 80054e2:	b90b      	cbnz	r3, 80054e8 <__swbuf_r+0x12>
 80054e4:	f7ff fee4 	bl	80052b0 <__sinit>
 80054e8:	69a3      	ldr	r3, [r4, #24]
 80054ea:	60a3      	str	r3, [r4, #8]
 80054ec:	89a3      	ldrh	r3, [r4, #12]
 80054ee:	071a      	lsls	r2, r3, #28
 80054f0:	d501      	bpl.n	80054f6 <__swbuf_r+0x20>
 80054f2:	6923      	ldr	r3, [r4, #16]
 80054f4:	b943      	cbnz	r3, 8005508 <__swbuf_r+0x32>
 80054f6:	4621      	mov	r1, r4
 80054f8:	4628      	mov	r0, r5
 80054fa:	f000 f82b 	bl	8005554 <__swsetup_r>
 80054fe:	b118      	cbz	r0, 8005508 <__swbuf_r+0x32>
 8005500:	f04f 37ff 	mov.w	r7, #4294967295
 8005504:	4638      	mov	r0, r7
 8005506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005508:	6823      	ldr	r3, [r4, #0]
 800550a:	6922      	ldr	r2, [r4, #16]
 800550c:	b2f6      	uxtb	r6, r6
 800550e:	1a98      	subs	r0, r3, r2
 8005510:	6963      	ldr	r3, [r4, #20]
 8005512:	4637      	mov	r7, r6
 8005514:	4283      	cmp	r3, r0
 8005516:	dc05      	bgt.n	8005524 <__swbuf_r+0x4e>
 8005518:	4621      	mov	r1, r4
 800551a:	4628      	mov	r0, r5
 800551c:	f002 fea2 	bl	8008264 <_fflush_r>
 8005520:	2800      	cmp	r0, #0
 8005522:	d1ed      	bne.n	8005500 <__swbuf_r+0x2a>
 8005524:	68a3      	ldr	r3, [r4, #8]
 8005526:	3b01      	subs	r3, #1
 8005528:	60a3      	str	r3, [r4, #8]
 800552a:	6823      	ldr	r3, [r4, #0]
 800552c:	1c5a      	adds	r2, r3, #1
 800552e:	6022      	str	r2, [r4, #0]
 8005530:	701e      	strb	r6, [r3, #0]
 8005532:	6962      	ldr	r2, [r4, #20]
 8005534:	1c43      	adds	r3, r0, #1
 8005536:	429a      	cmp	r2, r3
 8005538:	d004      	beq.n	8005544 <__swbuf_r+0x6e>
 800553a:	89a3      	ldrh	r3, [r4, #12]
 800553c:	07db      	lsls	r3, r3, #31
 800553e:	d5e1      	bpl.n	8005504 <__swbuf_r+0x2e>
 8005540:	2e0a      	cmp	r6, #10
 8005542:	d1df      	bne.n	8005504 <__swbuf_r+0x2e>
 8005544:	4621      	mov	r1, r4
 8005546:	4628      	mov	r0, r5
 8005548:	f002 fe8c 	bl	8008264 <_fflush_r>
 800554c:	2800      	cmp	r0, #0
 800554e:	d0d9      	beq.n	8005504 <__swbuf_r+0x2e>
 8005550:	e7d6      	b.n	8005500 <__swbuf_r+0x2a>
	...

08005554 <__swsetup_r>:
 8005554:	b538      	push	{r3, r4, r5, lr}
 8005556:	4b29      	ldr	r3, [pc, #164]	@ (80055fc <__swsetup_r+0xa8>)
 8005558:	4605      	mov	r5, r0
 800555a:	6818      	ldr	r0, [r3, #0]
 800555c:	460c      	mov	r4, r1
 800555e:	b118      	cbz	r0, 8005568 <__swsetup_r+0x14>
 8005560:	6a03      	ldr	r3, [r0, #32]
 8005562:	b90b      	cbnz	r3, 8005568 <__swsetup_r+0x14>
 8005564:	f7ff fea4 	bl	80052b0 <__sinit>
 8005568:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800556c:	0719      	lsls	r1, r3, #28
 800556e:	d422      	bmi.n	80055b6 <__swsetup_r+0x62>
 8005570:	06da      	lsls	r2, r3, #27
 8005572:	d407      	bmi.n	8005584 <__swsetup_r+0x30>
 8005574:	2209      	movs	r2, #9
 8005576:	602a      	str	r2, [r5, #0]
 8005578:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800557c:	f04f 30ff 	mov.w	r0, #4294967295
 8005580:	81a3      	strh	r3, [r4, #12]
 8005582:	e033      	b.n	80055ec <__swsetup_r+0x98>
 8005584:	0758      	lsls	r0, r3, #29
 8005586:	d512      	bpl.n	80055ae <__swsetup_r+0x5a>
 8005588:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800558a:	b141      	cbz	r1, 800559e <__swsetup_r+0x4a>
 800558c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005590:	4299      	cmp	r1, r3
 8005592:	d002      	beq.n	800559a <__swsetup_r+0x46>
 8005594:	4628      	mov	r0, r5
 8005596:	f000 ff33 	bl	8006400 <_free_r>
 800559a:	2300      	movs	r3, #0
 800559c:	6363      	str	r3, [r4, #52]	@ 0x34
 800559e:	89a3      	ldrh	r3, [r4, #12]
 80055a0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80055a4:	81a3      	strh	r3, [r4, #12]
 80055a6:	2300      	movs	r3, #0
 80055a8:	6063      	str	r3, [r4, #4]
 80055aa:	6923      	ldr	r3, [r4, #16]
 80055ac:	6023      	str	r3, [r4, #0]
 80055ae:	89a3      	ldrh	r3, [r4, #12]
 80055b0:	f043 0308 	orr.w	r3, r3, #8
 80055b4:	81a3      	strh	r3, [r4, #12]
 80055b6:	6923      	ldr	r3, [r4, #16]
 80055b8:	b94b      	cbnz	r3, 80055ce <__swsetup_r+0x7a>
 80055ba:	89a3      	ldrh	r3, [r4, #12]
 80055bc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80055c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80055c4:	d003      	beq.n	80055ce <__swsetup_r+0x7a>
 80055c6:	4621      	mov	r1, r4
 80055c8:	4628      	mov	r0, r5
 80055ca:	f002 fe98 	bl	80082fe <__smakebuf_r>
 80055ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055d2:	f013 0201 	ands.w	r2, r3, #1
 80055d6:	d00a      	beq.n	80055ee <__swsetup_r+0x9a>
 80055d8:	2200      	movs	r2, #0
 80055da:	60a2      	str	r2, [r4, #8]
 80055dc:	6962      	ldr	r2, [r4, #20]
 80055de:	4252      	negs	r2, r2
 80055e0:	61a2      	str	r2, [r4, #24]
 80055e2:	6922      	ldr	r2, [r4, #16]
 80055e4:	b942      	cbnz	r2, 80055f8 <__swsetup_r+0xa4>
 80055e6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80055ea:	d1c5      	bne.n	8005578 <__swsetup_r+0x24>
 80055ec:	bd38      	pop	{r3, r4, r5, pc}
 80055ee:	0799      	lsls	r1, r3, #30
 80055f0:	bf58      	it	pl
 80055f2:	6962      	ldrpl	r2, [r4, #20]
 80055f4:	60a2      	str	r2, [r4, #8]
 80055f6:	e7f4      	b.n	80055e2 <__swsetup_r+0x8e>
 80055f8:	2000      	movs	r0, #0
 80055fa:	e7f7      	b.n	80055ec <__swsetup_r+0x98>
 80055fc:	20000018 	.word	0x20000018

08005600 <memcmp>:
 8005600:	b510      	push	{r4, lr}
 8005602:	3901      	subs	r1, #1
 8005604:	4402      	add	r2, r0
 8005606:	4290      	cmp	r0, r2
 8005608:	d101      	bne.n	800560e <memcmp+0xe>
 800560a:	2000      	movs	r0, #0
 800560c:	e005      	b.n	800561a <memcmp+0x1a>
 800560e:	7803      	ldrb	r3, [r0, #0]
 8005610:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8005614:	42a3      	cmp	r3, r4
 8005616:	d001      	beq.n	800561c <memcmp+0x1c>
 8005618:	1b18      	subs	r0, r3, r4
 800561a:	bd10      	pop	{r4, pc}
 800561c:	3001      	adds	r0, #1
 800561e:	e7f2      	b.n	8005606 <memcmp+0x6>

08005620 <memset>:
 8005620:	4603      	mov	r3, r0
 8005622:	4402      	add	r2, r0
 8005624:	4293      	cmp	r3, r2
 8005626:	d100      	bne.n	800562a <memset+0xa>
 8005628:	4770      	bx	lr
 800562a:	f803 1b01 	strb.w	r1, [r3], #1
 800562e:	e7f9      	b.n	8005624 <memset+0x4>

08005630 <_localeconv_r>:
 8005630:	4800      	ldr	r0, [pc, #0]	@ (8005634 <_localeconv_r+0x4>)
 8005632:	4770      	bx	lr
 8005634:	20000158 	.word	0x20000158

08005638 <_close_r>:
 8005638:	b538      	push	{r3, r4, r5, lr}
 800563a:	2300      	movs	r3, #0
 800563c:	4d05      	ldr	r5, [pc, #20]	@ (8005654 <_close_r+0x1c>)
 800563e:	4604      	mov	r4, r0
 8005640:	4608      	mov	r0, r1
 8005642:	602b      	str	r3, [r5, #0]
 8005644:	f7fc f843 	bl	80016ce <_close>
 8005648:	1c43      	adds	r3, r0, #1
 800564a:	d102      	bne.n	8005652 <_close_r+0x1a>
 800564c:	682b      	ldr	r3, [r5, #0]
 800564e:	b103      	cbz	r3, 8005652 <_close_r+0x1a>
 8005650:	6023      	str	r3, [r4, #0]
 8005652:	bd38      	pop	{r3, r4, r5, pc}
 8005654:	200003d4 	.word	0x200003d4

08005658 <_lseek_r>:
 8005658:	b538      	push	{r3, r4, r5, lr}
 800565a:	4604      	mov	r4, r0
 800565c:	4608      	mov	r0, r1
 800565e:	4611      	mov	r1, r2
 8005660:	2200      	movs	r2, #0
 8005662:	4d05      	ldr	r5, [pc, #20]	@ (8005678 <_lseek_r+0x20>)
 8005664:	602a      	str	r2, [r5, #0]
 8005666:	461a      	mov	r2, r3
 8005668:	f7fc f855 	bl	8001716 <_lseek>
 800566c:	1c43      	adds	r3, r0, #1
 800566e:	d102      	bne.n	8005676 <_lseek_r+0x1e>
 8005670:	682b      	ldr	r3, [r5, #0]
 8005672:	b103      	cbz	r3, 8005676 <_lseek_r+0x1e>
 8005674:	6023      	str	r3, [r4, #0]
 8005676:	bd38      	pop	{r3, r4, r5, pc}
 8005678:	200003d4 	.word	0x200003d4

0800567c <_read_r>:
 800567c:	b538      	push	{r3, r4, r5, lr}
 800567e:	4604      	mov	r4, r0
 8005680:	4608      	mov	r0, r1
 8005682:	4611      	mov	r1, r2
 8005684:	2200      	movs	r2, #0
 8005686:	4d05      	ldr	r5, [pc, #20]	@ (800569c <_read_r+0x20>)
 8005688:	602a      	str	r2, [r5, #0]
 800568a:	461a      	mov	r2, r3
 800568c:	f7fb ffe6 	bl	800165c <_read>
 8005690:	1c43      	adds	r3, r0, #1
 8005692:	d102      	bne.n	800569a <_read_r+0x1e>
 8005694:	682b      	ldr	r3, [r5, #0]
 8005696:	b103      	cbz	r3, 800569a <_read_r+0x1e>
 8005698:	6023      	str	r3, [r4, #0]
 800569a:	bd38      	pop	{r3, r4, r5, pc}
 800569c:	200003d4 	.word	0x200003d4

080056a0 <_write_r>:
 80056a0:	b538      	push	{r3, r4, r5, lr}
 80056a2:	4604      	mov	r4, r0
 80056a4:	4608      	mov	r0, r1
 80056a6:	4611      	mov	r1, r2
 80056a8:	2200      	movs	r2, #0
 80056aa:	4d05      	ldr	r5, [pc, #20]	@ (80056c0 <_write_r+0x20>)
 80056ac:	602a      	str	r2, [r5, #0]
 80056ae:	461a      	mov	r2, r3
 80056b0:	f7fb fff1 	bl	8001696 <_write>
 80056b4:	1c43      	adds	r3, r0, #1
 80056b6:	d102      	bne.n	80056be <_write_r+0x1e>
 80056b8:	682b      	ldr	r3, [r5, #0]
 80056ba:	b103      	cbz	r3, 80056be <_write_r+0x1e>
 80056bc:	6023      	str	r3, [r4, #0]
 80056be:	bd38      	pop	{r3, r4, r5, pc}
 80056c0:	200003d4 	.word	0x200003d4

080056c4 <__errno>:
 80056c4:	4b01      	ldr	r3, [pc, #4]	@ (80056cc <__errno+0x8>)
 80056c6:	6818      	ldr	r0, [r3, #0]
 80056c8:	4770      	bx	lr
 80056ca:	bf00      	nop
 80056cc:	20000018 	.word	0x20000018

080056d0 <__libc_init_array>:
 80056d0:	b570      	push	{r4, r5, r6, lr}
 80056d2:	2600      	movs	r6, #0
 80056d4:	4d0c      	ldr	r5, [pc, #48]	@ (8005708 <__libc_init_array+0x38>)
 80056d6:	4c0d      	ldr	r4, [pc, #52]	@ (800570c <__libc_init_array+0x3c>)
 80056d8:	1b64      	subs	r4, r4, r5
 80056da:	10a4      	asrs	r4, r4, #2
 80056dc:	42a6      	cmp	r6, r4
 80056de:	d109      	bne.n	80056f4 <__libc_init_array+0x24>
 80056e0:	f003 fb0e 	bl	8008d00 <_init>
 80056e4:	2600      	movs	r6, #0
 80056e6:	4d0a      	ldr	r5, [pc, #40]	@ (8005710 <__libc_init_array+0x40>)
 80056e8:	4c0a      	ldr	r4, [pc, #40]	@ (8005714 <__libc_init_array+0x44>)
 80056ea:	1b64      	subs	r4, r4, r5
 80056ec:	10a4      	asrs	r4, r4, #2
 80056ee:	42a6      	cmp	r6, r4
 80056f0:	d105      	bne.n	80056fe <__libc_init_array+0x2e>
 80056f2:	bd70      	pop	{r4, r5, r6, pc}
 80056f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80056f8:	4798      	blx	r3
 80056fa:	3601      	adds	r6, #1
 80056fc:	e7ee      	b.n	80056dc <__libc_init_array+0xc>
 80056fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8005702:	4798      	blx	r3
 8005704:	3601      	adds	r6, #1
 8005706:	e7f2      	b.n	80056ee <__libc_init_array+0x1e>
 8005708:	08009b64 	.word	0x08009b64
 800570c:	08009b64 	.word	0x08009b64
 8005710:	08009b64 	.word	0x08009b64
 8005714:	08009b68 	.word	0x08009b68

08005718 <__retarget_lock_init_recursive>:
 8005718:	4770      	bx	lr

0800571a <__retarget_lock_acquire_recursive>:
 800571a:	4770      	bx	lr

0800571c <__retarget_lock_release_recursive>:
 800571c:	4770      	bx	lr

0800571e <memchr>:
 800571e:	4603      	mov	r3, r0
 8005720:	b510      	push	{r4, lr}
 8005722:	b2c9      	uxtb	r1, r1
 8005724:	4402      	add	r2, r0
 8005726:	4293      	cmp	r3, r2
 8005728:	4618      	mov	r0, r3
 800572a:	d101      	bne.n	8005730 <memchr+0x12>
 800572c:	2000      	movs	r0, #0
 800572e:	e003      	b.n	8005738 <memchr+0x1a>
 8005730:	7804      	ldrb	r4, [r0, #0]
 8005732:	3301      	adds	r3, #1
 8005734:	428c      	cmp	r4, r1
 8005736:	d1f6      	bne.n	8005726 <memchr+0x8>
 8005738:	bd10      	pop	{r4, pc}
	...

0800573c <nanf>:
 800573c:	4800      	ldr	r0, [pc, #0]	@ (8005740 <nanf+0x4>)
 800573e:	4770      	bx	lr
 8005740:	7fc00000 	.word	0x7fc00000

08005744 <quorem>:
 8005744:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005748:	6903      	ldr	r3, [r0, #16]
 800574a:	690c      	ldr	r4, [r1, #16]
 800574c:	4607      	mov	r7, r0
 800574e:	42a3      	cmp	r3, r4
 8005750:	db7e      	blt.n	8005850 <quorem+0x10c>
 8005752:	3c01      	subs	r4, #1
 8005754:	00a3      	lsls	r3, r4, #2
 8005756:	f100 0514 	add.w	r5, r0, #20
 800575a:	f101 0814 	add.w	r8, r1, #20
 800575e:	9300      	str	r3, [sp, #0]
 8005760:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005764:	9301      	str	r3, [sp, #4]
 8005766:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800576a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800576e:	3301      	adds	r3, #1
 8005770:	429a      	cmp	r2, r3
 8005772:	fbb2 f6f3 	udiv	r6, r2, r3
 8005776:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800577a:	d32e      	bcc.n	80057da <quorem+0x96>
 800577c:	f04f 0a00 	mov.w	sl, #0
 8005780:	46c4      	mov	ip, r8
 8005782:	46ae      	mov	lr, r5
 8005784:	46d3      	mov	fp, sl
 8005786:	f85c 3b04 	ldr.w	r3, [ip], #4
 800578a:	b298      	uxth	r0, r3
 800578c:	fb06 a000 	mla	r0, r6, r0, sl
 8005790:	0c1b      	lsrs	r3, r3, #16
 8005792:	0c02      	lsrs	r2, r0, #16
 8005794:	fb06 2303 	mla	r3, r6, r3, r2
 8005798:	f8de 2000 	ldr.w	r2, [lr]
 800579c:	b280      	uxth	r0, r0
 800579e:	b292      	uxth	r2, r2
 80057a0:	1a12      	subs	r2, r2, r0
 80057a2:	445a      	add	r2, fp
 80057a4:	f8de 0000 	ldr.w	r0, [lr]
 80057a8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80057ac:	b29b      	uxth	r3, r3
 80057ae:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80057b2:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80057b6:	b292      	uxth	r2, r2
 80057b8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80057bc:	45e1      	cmp	r9, ip
 80057be:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80057c2:	f84e 2b04 	str.w	r2, [lr], #4
 80057c6:	d2de      	bcs.n	8005786 <quorem+0x42>
 80057c8:	9b00      	ldr	r3, [sp, #0]
 80057ca:	58eb      	ldr	r3, [r5, r3]
 80057cc:	b92b      	cbnz	r3, 80057da <quorem+0x96>
 80057ce:	9b01      	ldr	r3, [sp, #4]
 80057d0:	3b04      	subs	r3, #4
 80057d2:	429d      	cmp	r5, r3
 80057d4:	461a      	mov	r2, r3
 80057d6:	d32f      	bcc.n	8005838 <quorem+0xf4>
 80057d8:	613c      	str	r4, [r7, #16]
 80057da:	4638      	mov	r0, r7
 80057dc:	f001 f9ca 	bl	8006b74 <__mcmp>
 80057e0:	2800      	cmp	r0, #0
 80057e2:	db25      	blt.n	8005830 <quorem+0xec>
 80057e4:	4629      	mov	r1, r5
 80057e6:	2000      	movs	r0, #0
 80057e8:	f858 2b04 	ldr.w	r2, [r8], #4
 80057ec:	f8d1 c000 	ldr.w	ip, [r1]
 80057f0:	fa1f fe82 	uxth.w	lr, r2
 80057f4:	fa1f f38c 	uxth.w	r3, ip
 80057f8:	eba3 030e 	sub.w	r3, r3, lr
 80057fc:	4403      	add	r3, r0
 80057fe:	0c12      	lsrs	r2, r2, #16
 8005800:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005804:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005808:	b29b      	uxth	r3, r3
 800580a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800580e:	45c1      	cmp	r9, r8
 8005810:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005814:	f841 3b04 	str.w	r3, [r1], #4
 8005818:	d2e6      	bcs.n	80057e8 <quorem+0xa4>
 800581a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800581e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005822:	b922      	cbnz	r2, 800582e <quorem+0xea>
 8005824:	3b04      	subs	r3, #4
 8005826:	429d      	cmp	r5, r3
 8005828:	461a      	mov	r2, r3
 800582a:	d30b      	bcc.n	8005844 <quorem+0x100>
 800582c:	613c      	str	r4, [r7, #16]
 800582e:	3601      	adds	r6, #1
 8005830:	4630      	mov	r0, r6
 8005832:	b003      	add	sp, #12
 8005834:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005838:	6812      	ldr	r2, [r2, #0]
 800583a:	3b04      	subs	r3, #4
 800583c:	2a00      	cmp	r2, #0
 800583e:	d1cb      	bne.n	80057d8 <quorem+0x94>
 8005840:	3c01      	subs	r4, #1
 8005842:	e7c6      	b.n	80057d2 <quorem+0x8e>
 8005844:	6812      	ldr	r2, [r2, #0]
 8005846:	3b04      	subs	r3, #4
 8005848:	2a00      	cmp	r2, #0
 800584a:	d1ef      	bne.n	800582c <quorem+0xe8>
 800584c:	3c01      	subs	r4, #1
 800584e:	e7ea      	b.n	8005826 <quorem+0xe2>
 8005850:	2000      	movs	r0, #0
 8005852:	e7ee      	b.n	8005832 <quorem+0xee>
 8005854:	0000      	movs	r0, r0
	...

08005858 <_dtoa_r>:
 8005858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800585c:	4614      	mov	r4, r2
 800585e:	461d      	mov	r5, r3
 8005860:	69c7      	ldr	r7, [r0, #28]
 8005862:	b097      	sub	sp, #92	@ 0x5c
 8005864:	4681      	mov	r9, r0
 8005866:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800586a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800586c:	b97f      	cbnz	r7, 800588e <_dtoa_r+0x36>
 800586e:	2010      	movs	r0, #16
 8005870:	f000 fe0e 	bl	8006490 <malloc>
 8005874:	4602      	mov	r2, r0
 8005876:	f8c9 001c 	str.w	r0, [r9, #28]
 800587a:	b920      	cbnz	r0, 8005886 <_dtoa_r+0x2e>
 800587c:	21ef      	movs	r1, #239	@ 0xef
 800587e:	4bac      	ldr	r3, [pc, #688]	@ (8005b30 <_dtoa_r+0x2d8>)
 8005880:	48ac      	ldr	r0, [pc, #688]	@ (8005b34 <_dtoa_r+0x2dc>)
 8005882:	f002 fe1f 	bl	80084c4 <__assert_func>
 8005886:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800588a:	6007      	str	r7, [r0, #0]
 800588c:	60c7      	str	r7, [r0, #12]
 800588e:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005892:	6819      	ldr	r1, [r3, #0]
 8005894:	b159      	cbz	r1, 80058ae <_dtoa_r+0x56>
 8005896:	685a      	ldr	r2, [r3, #4]
 8005898:	2301      	movs	r3, #1
 800589a:	4093      	lsls	r3, r2
 800589c:	604a      	str	r2, [r1, #4]
 800589e:	608b      	str	r3, [r1, #8]
 80058a0:	4648      	mov	r0, r9
 80058a2:	f000 feeb 	bl	800667c <_Bfree>
 80058a6:	2200      	movs	r2, #0
 80058a8:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80058ac:	601a      	str	r2, [r3, #0]
 80058ae:	1e2b      	subs	r3, r5, #0
 80058b0:	bfaf      	iteee	ge
 80058b2:	2300      	movge	r3, #0
 80058b4:	2201      	movlt	r2, #1
 80058b6:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80058ba:	9307      	strlt	r3, [sp, #28]
 80058bc:	bfa8      	it	ge
 80058be:	6033      	strge	r3, [r6, #0]
 80058c0:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80058c4:	4b9c      	ldr	r3, [pc, #624]	@ (8005b38 <_dtoa_r+0x2e0>)
 80058c6:	bfb8      	it	lt
 80058c8:	6032      	strlt	r2, [r6, #0]
 80058ca:	ea33 0308 	bics.w	r3, r3, r8
 80058ce:	d112      	bne.n	80058f6 <_dtoa_r+0x9e>
 80058d0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80058d4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80058d6:	6013      	str	r3, [r2, #0]
 80058d8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80058dc:	4323      	orrs	r3, r4
 80058de:	f000 855e 	beq.w	800639e <_dtoa_r+0xb46>
 80058e2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80058e4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8005b3c <_dtoa_r+0x2e4>
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	f000 8560 	beq.w	80063ae <_dtoa_r+0xb56>
 80058ee:	f10a 0303 	add.w	r3, sl, #3
 80058f2:	f000 bd5a 	b.w	80063aa <_dtoa_r+0xb52>
 80058f6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80058fa:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80058fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005902:	2200      	movs	r2, #0
 8005904:	2300      	movs	r3, #0
 8005906:	f7fb f84f 	bl	80009a8 <__aeabi_dcmpeq>
 800590a:	4607      	mov	r7, r0
 800590c:	b158      	cbz	r0, 8005926 <_dtoa_r+0xce>
 800590e:	2301      	movs	r3, #1
 8005910:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8005912:	6013      	str	r3, [r2, #0]
 8005914:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005916:	b113      	cbz	r3, 800591e <_dtoa_r+0xc6>
 8005918:	4b89      	ldr	r3, [pc, #548]	@ (8005b40 <_dtoa_r+0x2e8>)
 800591a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800591c:	6013      	str	r3, [r2, #0]
 800591e:	f8df a224 	ldr.w	sl, [pc, #548]	@ 8005b44 <_dtoa_r+0x2ec>
 8005922:	f000 bd44 	b.w	80063ae <_dtoa_r+0xb56>
 8005926:	ab14      	add	r3, sp, #80	@ 0x50
 8005928:	9301      	str	r3, [sp, #4]
 800592a:	ab15      	add	r3, sp, #84	@ 0x54
 800592c:	9300      	str	r3, [sp, #0]
 800592e:	4648      	mov	r0, r9
 8005930:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005934:	f001 fa36 	bl	8006da4 <__d2b>
 8005938:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800593c:	9003      	str	r0, [sp, #12]
 800593e:	2e00      	cmp	r6, #0
 8005940:	d078      	beq.n	8005a34 <_dtoa_r+0x1dc>
 8005942:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005946:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005948:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800594c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005950:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8005954:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8005958:	9712      	str	r7, [sp, #72]	@ 0x48
 800595a:	4619      	mov	r1, r3
 800595c:	2200      	movs	r2, #0
 800595e:	4b7a      	ldr	r3, [pc, #488]	@ (8005b48 <_dtoa_r+0x2f0>)
 8005960:	f7fa fc02 	bl	8000168 <__aeabi_dsub>
 8005964:	a36c      	add	r3, pc, #432	@ (adr r3, 8005b18 <_dtoa_r+0x2c0>)
 8005966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800596a:	f7fa fdb5 	bl	80004d8 <__aeabi_dmul>
 800596e:	a36c      	add	r3, pc, #432	@ (adr r3, 8005b20 <_dtoa_r+0x2c8>)
 8005970:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005974:	f7fa fbfa 	bl	800016c <__adddf3>
 8005978:	4604      	mov	r4, r0
 800597a:	4630      	mov	r0, r6
 800597c:	460d      	mov	r5, r1
 800597e:	f7fa fd41 	bl	8000404 <__aeabi_i2d>
 8005982:	a369      	add	r3, pc, #420	@ (adr r3, 8005b28 <_dtoa_r+0x2d0>)
 8005984:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005988:	f7fa fda6 	bl	80004d8 <__aeabi_dmul>
 800598c:	4602      	mov	r2, r0
 800598e:	460b      	mov	r3, r1
 8005990:	4620      	mov	r0, r4
 8005992:	4629      	mov	r1, r5
 8005994:	f7fa fbea 	bl	800016c <__adddf3>
 8005998:	4604      	mov	r4, r0
 800599a:	460d      	mov	r5, r1
 800599c:	f7fb f84c 	bl	8000a38 <__aeabi_d2iz>
 80059a0:	2200      	movs	r2, #0
 80059a2:	4607      	mov	r7, r0
 80059a4:	2300      	movs	r3, #0
 80059a6:	4620      	mov	r0, r4
 80059a8:	4629      	mov	r1, r5
 80059aa:	f7fb f807 	bl	80009bc <__aeabi_dcmplt>
 80059ae:	b140      	cbz	r0, 80059c2 <_dtoa_r+0x16a>
 80059b0:	4638      	mov	r0, r7
 80059b2:	f7fa fd27 	bl	8000404 <__aeabi_i2d>
 80059b6:	4622      	mov	r2, r4
 80059b8:	462b      	mov	r3, r5
 80059ba:	f7fa fff5 	bl	80009a8 <__aeabi_dcmpeq>
 80059be:	b900      	cbnz	r0, 80059c2 <_dtoa_r+0x16a>
 80059c0:	3f01      	subs	r7, #1
 80059c2:	2f16      	cmp	r7, #22
 80059c4:	d854      	bhi.n	8005a70 <_dtoa_r+0x218>
 80059c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80059ca:	4b60      	ldr	r3, [pc, #384]	@ (8005b4c <_dtoa_r+0x2f4>)
 80059cc:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80059d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d4:	f7fa fff2 	bl	80009bc <__aeabi_dcmplt>
 80059d8:	2800      	cmp	r0, #0
 80059da:	d04b      	beq.n	8005a74 <_dtoa_r+0x21c>
 80059dc:	2300      	movs	r3, #0
 80059de:	3f01      	subs	r7, #1
 80059e0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80059e2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80059e4:	1b9b      	subs	r3, r3, r6
 80059e6:	1e5a      	subs	r2, r3, #1
 80059e8:	bf49      	itett	mi
 80059ea:	f1c3 0301 	rsbmi	r3, r3, #1
 80059ee:	2300      	movpl	r3, #0
 80059f0:	9304      	strmi	r3, [sp, #16]
 80059f2:	2300      	movmi	r3, #0
 80059f4:	9209      	str	r2, [sp, #36]	@ 0x24
 80059f6:	bf54      	ite	pl
 80059f8:	9304      	strpl	r3, [sp, #16]
 80059fa:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80059fc:	2f00      	cmp	r7, #0
 80059fe:	db3b      	blt.n	8005a78 <_dtoa_r+0x220>
 8005a00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a02:	970e      	str	r7, [sp, #56]	@ 0x38
 8005a04:	443b      	add	r3, r7
 8005a06:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a08:	2300      	movs	r3, #0
 8005a0a:	930a      	str	r3, [sp, #40]	@ 0x28
 8005a0c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005a0e:	2b09      	cmp	r3, #9
 8005a10:	d865      	bhi.n	8005ade <_dtoa_r+0x286>
 8005a12:	2b05      	cmp	r3, #5
 8005a14:	bfc4      	itt	gt
 8005a16:	3b04      	subgt	r3, #4
 8005a18:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8005a1a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8005a1c:	bfc8      	it	gt
 8005a1e:	2400      	movgt	r4, #0
 8005a20:	f1a3 0302 	sub.w	r3, r3, #2
 8005a24:	bfd8      	it	le
 8005a26:	2401      	movle	r4, #1
 8005a28:	2b03      	cmp	r3, #3
 8005a2a:	d864      	bhi.n	8005af6 <_dtoa_r+0x29e>
 8005a2c:	e8df f003 	tbb	[pc, r3]
 8005a30:	2c385553 	.word	0x2c385553
 8005a34:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8005a38:	441e      	add	r6, r3
 8005a3a:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8005a3e:	2b20      	cmp	r3, #32
 8005a40:	bfc1      	itttt	gt
 8005a42:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8005a46:	fa08 f803 	lslgt.w	r8, r8, r3
 8005a4a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8005a4e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8005a52:	bfd6      	itet	le
 8005a54:	f1c3 0320 	rsble	r3, r3, #32
 8005a58:	ea48 0003 	orrgt.w	r0, r8, r3
 8005a5c:	fa04 f003 	lslle.w	r0, r4, r3
 8005a60:	f7fa fcc0 	bl	80003e4 <__aeabi_ui2d>
 8005a64:	2201      	movs	r2, #1
 8005a66:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8005a6a:	3e01      	subs	r6, #1
 8005a6c:	9212      	str	r2, [sp, #72]	@ 0x48
 8005a6e:	e774      	b.n	800595a <_dtoa_r+0x102>
 8005a70:	2301      	movs	r3, #1
 8005a72:	e7b5      	b.n	80059e0 <_dtoa_r+0x188>
 8005a74:	900f      	str	r0, [sp, #60]	@ 0x3c
 8005a76:	e7b4      	b.n	80059e2 <_dtoa_r+0x18a>
 8005a78:	9b04      	ldr	r3, [sp, #16]
 8005a7a:	1bdb      	subs	r3, r3, r7
 8005a7c:	9304      	str	r3, [sp, #16]
 8005a7e:	427b      	negs	r3, r7
 8005a80:	930a      	str	r3, [sp, #40]	@ 0x28
 8005a82:	2300      	movs	r3, #0
 8005a84:	930e      	str	r3, [sp, #56]	@ 0x38
 8005a86:	e7c1      	b.n	8005a0c <_dtoa_r+0x1b4>
 8005a88:	2301      	movs	r3, #1
 8005a8a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005a8c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005a8e:	eb07 0b03 	add.w	fp, r7, r3
 8005a92:	f10b 0301 	add.w	r3, fp, #1
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	9308      	str	r3, [sp, #32]
 8005a9a:	bfb8      	it	lt
 8005a9c:	2301      	movlt	r3, #1
 8005a9e:	e006      	b.n	8005aae <_dtoa_r+0x256>
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005aa4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	dd28      	ble.n	8005afc <_dtoa_r+0x2a4>
 8005aaa:	469b      	mov	fp, r3
 8005aac:	9308      	str	r3, [sp, #32]
 8005aae:	2100      	movs	r1, #0
 8005ab0:	2204      	movs	r2, #4
 8005ab2:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8005ab6:	f102 0514 	add.w	r5, r2, #20
 8005aba:	429d      	cmp	r5, r3
 8005abc:	d926      	bls.n	8005b0c <_dtoa_r+0x2b4>
 8005abe:	6041      	str	r1, [r0, #4]
 8005ac0:	4648      	mov	r0, r9
 8005ac2:	f000 fd9b 	bl	80065fc <_Balloc>
 8005ac6:	4682      	mov	sl, r0
 8005ac8:	2800      	cmp	r0, #0
 8005aca:	d143      	bne.n	8005b54 <_dtoa_r+0x2fc>
 8005acc:	4602      	mov	r2, r0
 8005ace:	f240 11af 	movw	r1, #431	@ 0x1af
 8005ad2:	4b1f      	ldr	r3, [pc, #124]	@ (8005b50 <_dtoa_r+0x2f8>)
 8005ad4:	e6d4      	b.n	8005880 <_dtoa_r+0x28>
 8005ad6:	2300      	movs	r3, #0
 8005ad8:	e7e3      	b.n	8005aa2 <_dtoa_r+0x24a>
 8005ada:	2300      	movs	r3, #0
 8005adc:	e7d5      	b.n	8005a8a <_dtoa_r+0x232>
 8005ade:	2401      	movs	r4, #1
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	940b      	str	r4, [sp, #44]	@ 0x2c
 8005ae4:	9320      	str	r3, [sp, #128]	@ 0x80
 8005ae6:	f04f 3bff 	mov.w	fp, #4294967295
 8005aea:	2200      	movs	r2, #0
 8005aec:	2312      	movs	r3, #18
 8005aee:	f8cd b020 	str.w	fp, [sp, #32]
 8005af2:	9221      	str	r2, [sp, #132]	@ 0x84
 8005af4:	e7db      	b.n	8005aae <_dtoa_r+0x256>
 8005af6:	2301      	movs	r3, #1
 8005af8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005afa:	e7f4      	b.n	8005ae6 <_dtoa_r+0x28e>
 8005afc:	f04f 0b01 	mov.w	fp, #1
 8005b00:	465b      	mov	r3, fp
 8005b02:	f8cd b020 	str.w	fp, [sp, #32]
 8005b06:	f8cd b084 	str.w	fp, [sp, #132]	@ 0x84
 8005b0a:	e7d0      	b.n	8005aae <_dtoa_r+0x256>
 8005b0c:	3101      	adds	r1, #1
 8005b0e:	0052      	lsls	r2, r2, #1
 8005b10:	e7d1      	b.n	8005ab6 <_dtoa_r+0x25e>
 8005b12:	bf00      	nop
 8005b14:	f3af 8000 	nop.w
 8005b18:	636f4361 	.word	0x636f4361
 8005b1c:	3fd287a7 	.word	0x3fd287a7
 8005b20:	8b60c8b3 	.word	0x8b60c8b3
 8005b24:	3fc68a28 	.word	0x3fc68a28
 8005b28:	509f79fb 	.word	0x509f79fb
 8005b2c:	3fd34413 	.word	0x3fd34413
 8005b30:	08009778 	.word	0x08009778
 8005b34:	0800978f 	.word	0x0800978f
 8005b38:	7ff00000 	.word	0x7ff00000
 8005b3c:	08009774 	.word	0x08009774
 8005b40:	08009743 	.word	0x08009743
 8005b44:	08009742 	.word	0x08009742
 8005b48:	3ff80000 	.word	0x3ff80000
 8005b4c:	08009940 	.word	0x08009940
 8005b50:	080097e7 	.word	0x080097e7
 8005b54:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8005b58:	6018      	str	r0, [r3, #0]
 8005b5a:	9b08      	ldr	r3, [sp, #32]
 8005b5c:	2b0e      	cmp	r3, #14
 8005b5e:	f200 80a1 	bhi.w	8005ca4 <_dtoa_r+0x44c>
 8005b62:	2c00      	cmp	r4, #0
 8005b64:	f000 809e 	beq.w	8005ca4 <_dtoa_r+0x44c>
 8005b68:	2f00      	cmp	r7, #0
 8005b6a:	dd33      	ble.n	8005bd4 <_dtoa_r+0x37c>
 8005b6c:	4b9c      	ldr	r3, [pc, #624]	@ (8005de0 <_dtoa_r+0x588>)
 8005b6e:	f007 020f 	and.w	r2, r7, #15
 8005b72:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005b76:	05f8      	lsls	r0, r7, #23
 8005b78:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005b7c:	e9cd 3410 	strd	r3, r4, [sp, #64]	@ 0x40
 8005b80:	ea4f 1427 	mov.w	r4, r7, asr #4
 8005b84:	d516      	bpl.n	8005bb4 <_dtoa_r+0x35c>
 8005b86:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005b8a:	4b96      	ldr	r3, [pc, #600]	@ (8005de4 <_dtoa_r+0x58c>)
 8005b8c:	2603      	movs	r6, #3
 8005b8e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005b92:	f7fa fdcb 	bl	800072c <__aeabi_ddiv>
 8005b96:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005b9a:	f004 040f 	and.w	r4, r4, #15
 8005b9e:	4d91      	ldr	r5, [pc, #580]	@ (8005de4 <_dtoa_r+0x58c>)
 8005ba0:	b954      	cbnz	r4, 8005bb8 <_dtoa_r+0x360>
 8005ba2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005ba6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005baa:	f7fa fdbf 	bl	800072c <__aeabi_ddiv>
 8005bae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005bb2:	e028      	b.n	8005c06 <_dtoa_r+0x3ae>
 8005bb4:	2602      	movs	r6, #2
 8005bb6:	e7f2      	b.n	8005b9e <_dtoa_r+0x346>
 8005bb8:	07e1      	lsls	r1, r4, #31
 8005bba:	d508      	bpl.n	8005bce <_dtoa_r+0x376>
 8005bbc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005bc0:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005bc4:	f7fa fc88 	bl	80004d8 <__aeabi_dmul>
 8005bc8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005bcc:	3601      	adds	r6, #1
 8005bce:	1064      	asrs	r4, r4, #1
 8005bd0:	3508      	adds	r5, #8
 8005bd2:	e7e5      	b.n	8005ba0 <_dtoa_r+0x348>
 8005bd4:	f000 80af 	beq.w	8005d36 <_dtoa_r+0x4de>
 8005bd8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005bdc:	427c      	negs	r4, r7
 8005bde:	4b80      	ldr	r3, [pc, #512]	@ (8005de0 <_dtoa_r+0x588>)
 8005be0:	f004 020f 	and.w	r2, r4, #15
 8005be4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005be8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bec:	f7fa fc74 	bl	80004d8 <__aeabi_dmul>
 8005bf0:	2602      	movs	r6, #2
 8005bf2:	2300      	movs	r3, #0
 8005bf4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005bf8:	4d7a      	ldr	r5, [pc, #488]	@ (8005de4 <_dtoa_r+0x58c>)
 8005bfa:	1124      	asrs	r4, r4, #4
 8005bfc:	2c00      	cmp	r4, #0
 8005bfe:	f040 808f 	bne.w	8005d20 <_dtoa_r+0x4c8>
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d1d3      	bne.n	8005bae <_dtoa_r+0x356>
 8005c06:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8005c0a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	f000 8094 	beq.w	8005d3a <_dtoa_r+0x4e2>
 8005c12:	2200      	movs	r2, #0
 8005c14:	4620      	mov	r0, r4
 8005c16:	4629      	mov	r1, r5
 8005c18:	4b73      	ldr	r3, [pc, #460]	@ (8005de8 <_dtoa_r+0x590>)
 8005c1a:	f7fa fecf 	bl	80009bc <__aeabi_dcmplt>
 8005c1e:	2800      	cmp	r0, #0
 8005c20:	f000 808b 	beq.w	8005d3a <_dtoa_r+0x4e2>
 8005c24:	9b08      	ldr	r3, [sp, #32]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	f000 8087 	beq.w	8005d3a <_dtoa_r+0x4e2>
 8005c2c:	f1bb 0f00 	cmp.w	fp, #0
 8005c30:	dd34      	ble.n	8005c9c <_dtoa_r+0x444>
 8005c32:	4620      	mov	r0, r4
 8005c34:	2200      	movs	r2, #0
 8005c36:	4629      	mov	r1, r5
 8005c38:	4b6c      	ldr	r3, [pc, #432]	@ (8005dec <_dtoa_r+0x594>)
 8005c3a:	f7fa fc4d 	bl	80004d8 <__aeabi_dmul>
 8005c3e:	465c      	mov	r4, fp
 8005c40:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005c44:	f107 38ff 	add.w	r8, r7, #4294967295
 8005c48:	3601      	adds	r6, #1
 8005c4a:	4630      	mov	r0, r6
 8005c4c:	f7fa fbda 	bl	8000404 <__aeabi_i2d>
 8005c50:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005c54:	f7fa fc40 	bl	80004d8 <__aeabi_dmul>
 8005c58:	2200      	movs	r2, #0
 8005c5a:	4b65      	ldr	r3, [pc, #404]	@ (8005df0 <_dtoa_r+0x598>)
 8005c5c:	f7fa fa86 	bl	800016c <__adddf3>
 8005c60:	4605      	mov	r5, r0
 8005c62:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8005c66:	2c00      	cmp	r4, #0
 8005c68:	d16a      	bne.n	8005d40 <_dtoa_r+0x4e8>
 8005c6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c6e:	2200      	movs	r2, #0
 8005c70:	4b60      	ldr	r3, [pc, #384]	@ (8005df4 <_dtoa_r+0x59c>)
 8005c72:	f7fa fa79 	bl	8000168 <__aeabi_dsub>
 8005c76:	4602      	mov	r2, r0
 8005c78:	460b      	mov	r3, r1
 8005c7a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005c7e:	462a      	mov	r2, r5
 8005c80:	4633      	mov	r3, r6
 8005c82:	f7fa feb9 	bl	80009f8 <__aeabi_dcmpgt>
 8005c86:	2800      	cmp	r0, #0
 8005c88:	f040 8298 	bne.w	80061bc <_dtoa_r+0x964>
 8005c8c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c90:	462a      	mov	r2, r5
 8005c92:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005c96:	f7fa fe91 	bl	80009bc <__aeabi_dcmplt>
 8005c9a:	bb38      	cbnz	r0, 8005cec <_dtoa_r+0x494>
 8005c9c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8005ca0:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005ca4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	f2c0 8157 	blt.w	8005f5a <_dtoa_r+0x702>
 8005cac:	2f0e      	cmp	r7, #14
 8005cae:	f300 8154 	bgt.w	8005f5a <_dtoa_r+0x702>
 8005cb2:	4b4b      	ldr	r3, [pc, #300]	@ (8005de0 <_dtoa_r+0x588>)
 8005cb4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8005cb8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005cbc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005cc0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	f280 80e5 	bge.w	8005e92 <_dtoa_r+0x63a>
 8005cc8:	9b08      	ldr	r3, [sp, #32]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	f300 80e1 	bgt.w	8005e92 <_dtoa_r+0x63a>
 8005cd0:	d10c      	bne.n	8005cec <_dtoa_r+0x494>
 8005cd2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	4b46      	ldr	r3, [pc, #280]	@ (8005df4 <_dtoa_r+0x59c>)
 8005cda:	f7fa fbfd 	bl	80004d8 <__aeabi_dmul>
 8005cde:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005ce2:	f7fa fe7f 	bl	80009e4 <__aeabi_dcmpge>
 8005ce6:	2800      	cmp	r0, #0
 8005ce8:	f000 8266 	beq.w	80061b8 <_dtoa_r+0x960>
 8005cec:	2400      	movs	r4, #0
 8005cee:	4625      	mov	r5, r4
 8005cf0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005cf2:	4656      	mov	r6, sl
 8005cf4:	ea6f 0803 	mvn.w	r8, r3
 8005cf8:	2700      	movs	r7, #0
 8005cfa:	4621      	mov	r1, r4
 8005cfc:	4648      	mov	r0, r9
 8005cfe:	f000 fcbd 	bl	800667c <_Bfree>
 8005d02:	2d00      	cmp	r5, #0
 8005d04:	f000 80bd 	beq.w	8005e82 <_dtoa_r+0x62a>
 8005d08:	b12f      	cbz	r7, 8005d16 <_dtoa_r+0x4be>
 8005d0a:	42af      	cmp	r7, r5
 8005d0c:	d003      	beq.n	8005d16 <_dtoa_r+0x4be>
 8005d0e:	4639      	mov	r1, r7
 8005d10:	4648      	mov	r0, r9
 8005d12:	f000 fcb3 	bl	800667c <_Bfree>
 8005d16:	4629      	mov	r1, r5
 8005d18:	4648      	mov	r0, r9
 8005d1a:	f000 fcaf 	bl	800667c <_Bfree>
 8005d1e:	e0b0      	b.n	8005e82 <_dtoa_r+0x62a>
 8005d20:	07e2      	lsls	r2, r4, #31
 8005d22:	d505      	bpl.n	8005d30 <_dtoa_r+0x4d8>
 8005d24:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005d28:	f7fa fbd6 	bl	80004d8 <__aeabi_dmul>
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	3601      	adds	r6, #1
 8005d30:	1064      	asrs	r4, r4, #1
 8005d32:	3508      	adds	r5, #8
 8005d34:	e762      	b.n	8005bfc <_dtoa_r+0x3a4>
 8005d36:	2602      	movs	r6, #2
 8005d38:	e765      	b.n	8005c06 <_dtoa_r+0x3ae>
 8005d3a:	46b8      	mov	r8, r7
 8005d3c:	9c08      	ldr	r4, [sp, #32]
 8005d3e:	e784      	b.n	8005c4a <_dtoa_r+0x3f2>
 8005d40:	4b27      	ldr	r3, [pc, #156]	@ (8005de0 <_dtoa_r+0x588>)
 8005d42:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005d44:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005d48:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005d4c:	4454      	add	r4, sl
 8005d4e:	2900      	cmp	r1, #0
 8005d50:	d054      	beq.n	8005dfc <_dtoa_r+0x5a4>
 8005d52:	2000      	movs	r0, #0
 8005d54:	4928      	ldr	r1, [pc, #160]	@ (8005df8 <_dtoa_r+0x5a0>)
 8005d56:	f7fa fce9 	bl	800072c <__aeabi_ddiv>
 8005d5a:	4633      	mov	r3, r6
 8005d5c:	462a      	mov	r2, r5
 8005d5e:	f7fa fa03 	bl	8000168 <__aeabi_dsub>
 8005d62:	4656      	mov	r6, sl
 8005d64:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005d68:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d6c:	f7fa fe64 	bl	8000a38 <__aeabi_d2iz>
 8005d70:	4605      	mov	r5, r0
 8005d72:	f7fa fb47 	bl	8000404 <__aeabi_i2d>
 8005d76:	4602      	mov	r2, r0
 8005d78:	460b      	mov	r3, r1
 8005d7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005d7e:	f7fa f9f3 	bl	8000168 <__aeabi_dsub>
 8005d82:	4602      	mov	r2, r0
 8005d84:	460b      	mov	r3, r1
 8005d86:	3530      	adds	r5, #48	@ 0x30
 8005d88:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005d8c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005d90:	f806 5b01 	strb.w	r5, [r6], #1
 8005d94:	f7fa fe12 	bl	80009bc <__aeabi_dcmplt>
 8005d98:	2800      	cmp	r0, #0
 8005d9a:	d172      	bne.n	8005e82 <_dtoa_r+0x62a>
 8005d9c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005da0:	2000      	movs	r0, #0
 8005da2:	4911      	ldr	r1, [pc, #68]	@ (8005de8 <_dtoa_r+0x590>)
 8005da4:	f7fa f9e0 	bl	8000168 <__aeabi_dsub>
 8005da8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005dac:	f7fa fe06 	bl	80009bc <__aeabi_dcmplt>
 8005db0:	2800      	cmp	r0, #0
 8005db2:	f040 80b4 	bne.w	8005f1e <_dtoa_r+0x6c6>
 8005db6:	42a6      	cmp	r6, r4
 8005db8:	f43f af70 	beq.w	8005c9c <_dtoa_r+0x444>
 8005dbc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	4b0a      	ldr	r3, [pc, #40]	@ (8005dec <_dtoa_r+0x594>)
 8005dc4:	f7fa fb88 	bl	80004d8 <__aeabi_dmul>
 8005dc8:	2200      	movs	r2, #0
 8005dca:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005dce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005dd2:	4b06      	ldr	r3, [pc, #24]	@ (8005dec <_dtoa_r+0x594>)
 8005dd4:	f7fa fb80 	bl	80004d8 <__aeabi_dmul>
 8005dd8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005ddc:	e7c4      	b.n	8005d68 <_dtoa_r+0x510>
 8005dde:	bf00      	nop
 8005de0:	08009940 	.word	0x08009940
 8005de4:	08009918 	.word	0x08009918
 8005de8:	3ff00000 	.word	0x3ff00000
 8005dec:	40240000 	.word	0x40240000
 8005df0:	401c0000 	.word	0x401c0000
 8005df4:	40140000 	.word	0x40140000
 8005df8:	3fe00000 	.word	0x3fe00000
 8005dfc:	4631      	mov	r1, r6
 8005dfe:	4628      	mov	r0, r5
 8005e00:	f7fa fb6a 	bl	80004d8 <__aeabi_dmul>
 8005e04:	4656      	mov	r6, sl
 8005e06:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8005e0a:	9413      	str	r4, [sp, #76]	@ 0x4c
 8005e0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e10:	f7fa fe12 	bl	8000a38 <__aeabi_d2iz>
 8005e14:	4605      	mov	r5, r0
 8005e16:	f7fa faf5 	bl	8000404 <__aeabi_i2d>
 8005e1a:	4602      	mov	r2, r0
 8005e1c:	460b      	mov	r3, r1
 8005e1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e22:	f7fa f9a1 	bl	8000168 <__aeabi_dsub>
 8005e26:	4602      	mov	r2, r0
 8005e28:	460b      	mov	r3, r1
 8005e2a:	3530      	adds	r5, #48	@ 0x30
 8005e2c:	f806 5b01 	strb.w	r5, [r6], #1
 8005e30:	42a6      	cmp	r6, r4
 8005e32:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005e36:	f04f 0200 	mov.w	r2, #0
 8005e3a:	d124      	bne.n	8005e86 <_dtoa_r+0x62e>
 8005e3c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8005e40:	4bae      	ldr	r3, [pc, #696]	@ (80060fc <_dtoa_r+0x8a4>)
 8005e42:	f7fa f993 	bl	800016c <__adddf3>
 8005e46:	4602      	mov	r2, r0
 8005e48:	460b      	mov	r3, r1
 8005e4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e4e:	f7fa fdd3 	bl	80009f8 <__aeabi_dcmpgt>
 8005e52:	2800      	cmp	r0, #0
 8005e54:	d163      	bne.n	8005f1e <_dtoa_r+0x6c6>
 8005e56:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8005e5a:	2000      	movs	r0, #0
 8005e5c:	49a7      	ldr	r1, [pc, #668]	@ (80060fc <_dtoa_r+0x8a4>)
 8005e5e:	f7fa f983 	bl	8000168 <__aeabi_dsub>
 8005e62:	4602      	mov	r2, r0
 8005e64:	460b      	mov	r3, r1
 8005e66:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e6a:	f7fa fda7 	bl	80009bc <__aeabi_dcmplt>
 8005e6e:	2800      	cmp	r0, #0
 8005e70:	f43f af14 	beq.w	8005c9c <_dtoa_r+0x444>
 8005e74:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8005e76:	1e73      	subs	r3, r6, #1
 8005e78:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005e7a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005e7e:	2b30      	cmp	r3, #48	@ 0x30
 8005e80:	d0f8      	beq.n	8005e74 <_dtoa_r+0x61c>
 8005e82:	4647      	mov	r7, r8
 8005e84:	e03b      	b.n	8005efe <_dtoa_r+0x6a6>
 8005e86:	4b9e      	ldr	r3, [pc, #632]	@ (8006100 <_dtoa_r+0x8a8>)
 8005e88:	f7fa fb26 	bl	80004d8 <__aeabi_dmul>
 8005e8c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005e90:	e7bc      	b.n	8005e0c <_dtoa_r+0x5b4>
 8005e92:	4656      	mov	r6, sl
 8005e94:	e9dd 4506 	ldrd	r4, r5, [sp, #24]
 8005e98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e9c:	4620      	mov	r0, r4
 8005e9e:	4629      	mov	r1, r5
 8005ea0:	f7fa fc44 	bl	800072c <__aeabi_ddiv>
 8005ea4:	f7fa fdc8 	bl	8000a38 <__aeabi_d2iz>
 8005ea8:	4680      	mov	r8, r0
 8005eaa:	f7fa faab 	bl	8000404 <__aeabi_i2d>
 8005eae:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005eb2:	f7fa fb11 	bl	80004d8 <__aeabi_dmul>
 8005eb6:	4602      	mov	r2, r0
 8005eb8:	460b      	mov	r3, r1
 8005eba:	4620      	mov	r0, r4
 8005ebc:	4629      	mov	r1, r5
 8005ebe:	f7fa f953 	bl	8000168 <__aeabi_dsub>
 8005ec2:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8005ec6:	9d08      	ldr	r5, [sp, #32]
 8005ec8:	f806 4b01 	strb.w	r4, [r6], #1
 8005ecc:	eba6 040a 	sub.w	r4, r6, sl
 8005ed0:	42a5      	cmp	r5, r4
 8005ed2:	4602      	mov	r2, r0
 8005ed4:	460b      	mov	r3, r1
 8005ed6:	d133      	bne.n	8005f40 <_dtoa_r+0x6e8>
 8005ed8:	f7fa f948 	bl	800016c <__adddf3>
 8005edc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ee0:	4604      	mov	r4, r0
 8005ee2:	460d      	mov	r5, r1
 8005ee4:	f7fa fd88 	bl	80009f8 <__aeabi_dcmpgt>
 8005ee8:	b9c0      	cbnz	r0, 8005f1c <_dtoa_r+0x6c4>
 8005eea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005eee:	4620      	mov	r0, r4
 8005ef0:	4629      	mov	r1, r5
 8005ef2:	f7fa fd59 	bl	80009a8 <__aeabi_dcmpeq>
 8005ef6:	b110      	cbz	r0, 8005efe <_dtoa_r+0x6a6>
 8005ef8:	f018 0f01 	tst.w	r8, #1
 8005efc:	d10e      	bne.n	8005f1c <_dtoa_r+0x6c4>
 8005efe:	4648      	mov	r0, r9
 8005f00:	9903      	ldr	r1, [sp, #12]
 8005f02:	f000 fbbb 	bl	800667c <_Bfree>
 8005f06:	2300      	movs	r3, #0
 8005f08:	7033      	strb	r3, [r6, #0]
 8005f0a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8005f0c:	3701      	adds	r7, #1
 8005f0e:	601f      	str	r7, [r3, #0]
 8005f10:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	f000 824b 	beq.w	80063ae <_dtoa_r+0xb56>
 8005f18:	601e      	str	r6, [r3, #0]
 8005f1a:	e248      	b.n	80063ae <_dtoa_r+0xb56>
 8005f1c:	46b8      	mov	r8, r7
 8005f1e:	4633      	mov	r3, r6
 8005f20:	461e      	mov	r6, r3
 8005f22:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005f26:	2a39      	cmp	r2, #57	@ 0x39
 8005f28:	d106      	bne.n	8005f38 <_dtoa_r+0x6e0>
 8005f2a:	459a      	cmp	sl, r3
 8005f2c:	d1f8      	bne.n	8005f20 <_dtoa_r+0x6c8>
 8005f2e:	2230      	movs	r2, #48	@ 0x30
 8005f30:	f108 0801 	add.w	r8, r8, #1
 8005f34:	f88a 2000 	strb.w	r2, [sl]
 8005f38:	781a      	ldrb	r2, [r3, #0]
 8005f3a:	3201      	adds	r2, #1
 8005f3c:	701a      	strb	r2, [r3, #0]
 8005f3e:	e7a0      	b.n	8005e82 <_dtoa_r+0x62a>
 8005f40:	2200      	movs	r2, #0
 8005f42:	4b6f      	ldr	r3, [pc, #444]	@ (8006100 <_dtoa_r+0x8a8>)
 8005f44:	f7fa fac8 	bl	80004d8 <__aeabi_dmul>
 8005f48:	2200      	movs	r2, #0
 8005f4a:	2300      	movs	r3, #0
 8005f4c:	4604      	mov	r4, r0
 8005f4e:	460d      	mov	r5, r1
 8005f50:	f7fa fd2a 	bl	80009a8 <__aeabi_dcmpeq>
 8005f54:	2800      	cmp	r0, #0
 8005f56:	d09f      	beq.n	8005e98 <_dtoa_r+0x640>
 8005f58:	e7d1      	b.n	8005efe <_dtoa_r+0x6a6>
 8005f5a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8005f5c:	2a00      	cmp	r2, #0
 8005f5e:	f000 80ea 	beq.w	8006136 <_dtoa_r+0x8de>
 8005f62:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005f64:	2a01      	cmp	r2, #1
 8005f66:	f300 80cd 	bgt.w	8006104 <_dtoa_r+0x8ac>
 8005f6a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8005f6c:	2a00      	cmp	r2, #0
 8005f6e:	f000 80c1 	beq.w	80060f4 <_dtoa_r+0x89c>
 8005f72:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8005f76:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8005f78:	9e04      	ldr	r6, [sp, #16]
 8005f7a:	9a04      	ldr	r2, [sp, #16]
 8005f7c:	2101      	movs	r1, #1
 8005f7e:	441a      	add	r2, r3
 8005f80:	9204      	str	r2, [sp, #16]
 8005f82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005f84:	4648      	mov	r0, r9
 8005f86:	441a      	add	r2, r3
 8005f88:	9209      	str	r2, [sp, #36]	@ 0x24
 8005f8a:	f000 fc75 	bl	8006878 <__i2b>
 8005f8e:	4605      	mov	r5, r0
 8005f90:	b166      	cbz	r6, 8005fac <_dtoa_r+0x754>
 8005f92:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	dd09      	ble.n	8005fac <_dtoa_r+0x754>
 8005f98:	42b3      	cmp	r3, r6
 8005f9a:	bfa8      	it	ge
 8005f9c:	4633      	movge	r3, r6
 8005f9e:	9a04      	ldr	r2, [sp, #16]
 8005fa0:	1af6      	subs	r6, r6, r3
 8005fa2:	1ad2      	subs	r2, r2, r3
 8005fa4:	9204      	str	r2, [sp, #16]
 8005fa6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005fa8:	1ad3      	subs	r3, r2, r3
 8005faa:	9309      	str	r3, [sp, #36]	@ 0x24
 8005fac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005fae:	b30b      	cbz	r3, 8005ff4 <_dtoa_r+0x79c>
 8005fb0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	f000 80c6 	beq.w	8006144 <_dtoa_r+0x8ec>
 8005fb8:	2c00      	cmp	r4, #0
 8005fba:	f000 80c0 	beq.w	800613e <_dtoa_r+0x8e6>
 8005fbe:	4629      	mov	r1, r5
 8005fc0:	4622      	mov	r2, r4
 8005fc2:	4648      	mov	r0, r9
 8005fc4:	f000 fd10 	bl	80069e8 <__pow5mult>
 8005fc8:	9a03      	ldr	r2, [sp, #12]
 8005fca:	4601      	mov	r1, r0
 8005fcc:	4605      	mov	r5, r0
 8005fce:	4648      	mov	r0, r9
 8005fd0:	f000 fc68 	bl	80068a4 <__multiply>
 8005fd4:	9903      	ldr	r1, [sp, #12]
 8005fd6:	4680      	mov	r8, r0
 8005fd8:	4648      	mov	r0, r9
 8005fda:	f000 fb4f 	bl	800667c <_Bfree>
 8005fde:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005fe0:	1b1b      	subs	r3, r3, r4
 8005fe2:	930a      	str	r3, [sp, #40]	@ 0x28
 8005fe4:	f000 80b1 	beq.w	800614a <_dtoa_r+0x8f2>
 8005fe8:	4641      	mov	r1, r8
 8005fea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005fec:	4648      	mov	r0, r9
 8005fee:	f000 fcfb 	bl	80069e8 <__pow5mult>
 8005ff2:	9003      	str	r0, [sp, #12]
 8005ff4:	2101      	movs	r1, #1
 8005ff6:	4648      	mov	r0, r9
 8005ff8:	f000 fc3e 	bl	8006878 <__i2b>
 8005ffc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8005ffe:	4604      	mov	r4, r0
 8006000:	2b00      	cmp	r3, #0
 8006002:	f000 81d8 	beq.w	80063b6 <_dtoa_r+0xb5e>
 8006006:	461a      	mov	r2, r3
 8006008:	4601      	mov	r1, r0
 800600a:	4648      	mov	r0, r9
 800600c:	f000 fcec 	bl	80069e8 <__pow5mult>
 8006010:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006012:	4604      	mov	r4, r0
 8006014:	2b01      	cmp	r3, #1
 8006016:	f300 809f 	bgt.w	8006158 <_dtoa_r+0x900>
 800601a:	9b06      	ldr	r3, [sp, #24]
 800601c:	2b00      	cmp	r3, #0
 800601e:	f040 8097 	bne.w	8006150 <_dtoa_r+0x8f8>
 8006022:	9b07      	ldr	r3, [sp, #28]
 8006024:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006028:	2b00      	cmp	r3, #0
 800602a:	f040 8093 	bne.w	8006154 <_dtoa_r+0x8fc>
 800602e:	9b07      	ldr	r3, [sp, #28]
 8006030:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006034:	0d1b      	lsrs	r3, r3, #20
 8006036:	051b      	lsls	r3, r3, #20
 8006038:	b133      	cbz	r3, 8006048 <_dtoa_r+0x7f0>
 800603a:	9b04      	ldr	r3, [sp, #16]
 800603c:	3301      	adds	r3, #1
 800603e:	9304      	str	r3, [sp, #16]
 8006040:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006042:	3301      	adds	r3, #1
 8006044:	9309      	str	r3, [sp, #36]	@ 0x24
 8006046:	2301      	movs	r3, #1
 8006048:	930a      	str	r3, [sp, #40]	@ 0x28
 800604a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800604c:	2b00      	cmp	r3, #0
 800604e:	f000 81b8 	beq.w	80063c2 <_dtoa_r+0xb6a>
 8006052:	6923      	ldr	r3, [r4, #16]
 8006054:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006058:	6918      	ldr	r0, [r3, #16]
 800605a:	f000 fbc1 	bl	80067e0 <__hi0bits>
 800605e:	f1c0 0020 	rsb	r0, r0, #32
 8006062:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006064:	4418      	add	r0, r3
 8006066:	f010 001f 	ands.w	r0, r0, #31
 800606a:	f000 8082 	beq.w	8006172 <_dtoa_r+0x91a>
 800606e:	f1c0 0320 	rsb	r3, r0, #32
 8006072:	2b04      	cmp	r3, #4
 8006074:	dd73      	ble.n	800615e <_dtoa_r+0x906>
 8006076:	9b04      	ldr	r3, [sp, #16]
 8006078:	f1c0 001c 	rsb	r0, r0, #28
 800607c:	4403      	add	r3, r0
 800607e:	9304      	str	r3, [sp, #16]
 8006080:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006082:	4406      	add	r6, r0
 8006084:	4403      	add	r3, r0
 8006086:	9309      	str	r3, [sp, #36]	@ 0x24
 8006088:	9b04      	ldr	r3, [sp, #16]
 800608a:	2b00      	cmp	r3, #0
 800608c:	dd05      	ble.n	800609a <_dtoa_r+0x842>
 800608e:	461a      	mov	r2, r3
 8006090:	4648      	mov	r0, r9
 8006092:	9903      	ldr	r1, [sp, #12]
 8006094:	f000 fd02 	bl	8006a9c <__lshift>
 8006098:	9003      	str	r0, [sp, #12]
 800609a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800609c:	2b00      	cmp	r3, #0
 800609e:	dd05      	ble.n	80060ac <_dtoa_r+0x854>
 80060a0:	4621      	mov	r1, r4
 80060a2:	461a      	mov	r2, r3
 80060a4:	4648      	mov	r0, r9
 80060a6:	f000 fcf9 	bl	8006a9c <__lshift>
 80060aa:	4604      	mov	r4, r0
 80060ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d061      	beq.n	8006176 <_dtoa_r+0x91e>
 80060b2:	4621      	mov	r1, r4
 80060b4:	9803      	ldr	r0, [sp, #12]
 80060b6:	f000 fd5d 	bl	8006b74 <__mcmp>
 80060ba:	2800      	cmp	r0, #0
 80060bc:	da5b      	bge.n	8006176 <_dtoa_r+0x91e>
 80060be:	2300      	movs	r3, #0
 80060c0:	220a      	movs	r2, #10
 80060c2:	4648      	mov	r0, r9
 80060c4:	9903      	ldr	r1, [sp, #12]
 80060c6:	f000 fafb 	bl	80066c0 <__multadd>
 80060ca:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80060cc:	f107 38ff 	add.w	r8, r7, #4294967295
 80060d0:	9003      	str	r0, [sp, #12]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	f000 8177 	beq.w	80063c6 <_dtoa_r+0xb6e>
 80060d8:	4629      	mov	r1, r5
 80060da:	2300      	movs	r3, #0
 80060dc:	220a      	movs	r2, #10
 80060de:	4648      	mov	r0, r9
 80060e0:	f000 faee 	bl	80066c0 <__multadd>
 80060e4:	f1bb 0f00 	cmp.w	fp, #0
 80060e8:	4605      	mov	r5, r0
 80060ea:	dc6f      	bgt.n	80061cc <_dtoa_r+0x974>
 80060ec:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80060ee:	2b02      	cmp	r3, #2
 80060f0:	dc49      	bgt.n	8006186 <_dtoa_r+0x92e>
 80060f2:	e06b      	b.n	80061cc <_dtoa_r+0x974>
 80060f4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80060f6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80060fa:	e73c      	b.n	8005f76 <_dtoa_r+0x71e>
 80060fc:	3fe00000 	.word	0x3fe00000
 8006100:	40240000 	.word	0x40240000
 8006104:	9b08      	ldr	r3, [sp, #32]
 8006106:	1e5c      	subs	r4, r3, #1
 8006108:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800610a:	42a3      	cmp	r3, r4
 800610c:	db09      	blt.n	8006122 <_dtoa_r+0x8ca>
 800610e:	1b1c      	subs	r4, r3, r4
 8006110:	9b08      	ldr	r3, [sp, #32]
 8006112:	2b00      	cmp	r3, #0
 8006114:	f6bf af30 	bge.w	8005f78 <_dtoa_r+0x720>
 8006118:	9b04      	ldr	r3, [sp, #16]
 800611a:	9a08      	ldr	r2, [sp, #32]
 800611c:	1a9e      	subs	r6, r3, r2
 800611e:	2300      	movs	r3, #0
 8006120:	e72b      	b.n	8005f7a <_dtoa_r+0x722>
 8006122:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006124:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006126:	1ae3      	subs	r3, r4, r3
 8006128:	441a      	add	r2, r3
 800612a:	940a      	str	r4, [sp, #40]	@ 0x28
 800612c:	9e04      	ldr	r6, [sp, #16]
 800612e:	2400      	movs	r4, #0
 8006130:	9b08      	ldr	r3, [sp, #32]
 8006132:	920e      	str	r2, [sp, #56]	@ 0x38
 8006134:	e721      	b.n	8005f7a <_dtoa_r+0x722>
 8006136:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006138:	9e04      	ldr	r6, [sp, #16]
 800613a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800613c:	e728      	b.n	8005f90 <_dtoa_r+0x738>
 800613e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8006142:	e751      	b.n	8005fe8 <_dtoa_r+0x790>
 8006144:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006146:	9903      	ldr	r1, [sp, #12]
 8006148:	e750      	b.n	8005fec <_dtoa_r+0x794>
 800614a:	f8cd 800c 	str.w	r8, [sp, #12]
 800614e:	e751      	b.n	8005ff4 <_dtoa_r+0x79c>
 8006150:	2300      	movs	r3, #0
 8006152:	e779      	b.n	8006048 <_dtoa_r+0x7f0>
 8006154:	9b06      	ldr	r3, [sp, #24]
 8006156:	e777      	b.n	8006048 <_dtoa_r+0x7f0>
 8006158:	2300      	movs	r3, #0
 800615a:	930a      	str	r3, [sp, #40]	@ 0x28
 800615c:	e779      	b.n	8006052 <_dtoa_r+0x7fa>
 800615e:	d093      	beq.n	8006088 <_dtoa_r+0x830>
 8006160:	9a04      	ldr	r2, [sp, #16]
 8006162:	331c      	adds	r3, #28
 8006164:	441a      	add	r2, r3
 8006166:	9204      	str	r2, [sp, #16]
 8006168:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800616a:	441e      	add	r6, r3
 800616c:	441a      	add	r2, r3
 800616e:	9209      	str	r2, [sp, #36]	@ 0x24
 8006170:	e78a      	b.n	8006088 <_dtoa_r+0x830>
 8006172:	4603      	mov	r3, r0
 8006174:	e7f4      	b.n	8006160 <_dtoa_r+0x908>
 8006176:	9b08      	ldr	r3, [sp, #32]
 8006178:	46b8      	mov	r8, r7
 800617a:	2b00      	cmp	r3, #0
 800617c:	dc20      	bgt.n	80061c0 <_dtoa_r+0x968>
 800617e:	469b      	mov	fp, r3
 8006180:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006182:	2b02      	cmp	r3, #2
 8006184:	dd1e      	ble.n	80061c4 <_dtoa_r+0x96c>
 8006186:	f1bb 0f00 	cmp.w	fp, #0
 800618a:	f47f adb1 	bne.w	8005cf0 <_dtoa_r+0x498>
 800618e:	4621      	mov	r1, r4
 8006190:	465b      	mov	r3, fp
 8006192:	2205      	movs	r2, #5
 8006194:	4648      	mov	r0, r9
 8006196:	f000 fa93 	bl	80066c0 <__multadd>
 800619a:	4601      	mov	r1, r0
 800619c:	4604      	mov	r4, r0
 800619e:	9803      	ldr	r0, [sp, #12]
 80061a0:	f000 fce8 	bl	8006b74 <__mcmp>
 80061a4:	2800      	cmp	r0, #0
 80061a6:	f77f ada3 	ble.w	8005cf0 <_dtoa_r+0x498>
 80061aa:	4656      	mov	r6, sl
 80061ac:	2331      	movs	r3, #49	@ 0x31
 80061ae:	f108 0801 	add.w	r8, r8, #1
 80061b2:	f806 3b01 	strb.w	r3, [r6], #1
 80061b6:	e59f      	b.n	8005cf8 <_dtoa_r+0x4a0>
 80061b8:	46b8      	mov	r8, r7
 80061ba:	9c08      	ldr	r4, [sp, #32]
 80061bc:	4625      	mov	r5, r4
 80061be:	e7f4      	b.n	80061aa <_dtoa_r+0x952>
 80061c0:	f8dd b020 	ldr.w	fp, [sp, #32]
 80061c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	f000 8101 	beq.w	80063ce <_dtoa_r+0xb76>
 80061cc:	2e00      	cmp	r6, #0
 80061ce:	dd05      	ble.n	80061dc <_dtoa_r+0x984>
 80061d0:	4629      	mov	r1, r5
 80061d2:	4632      	mov	r2, r6
 80061d4:	4648      	mov	r0, r9
 80061d6:	f000 fc61 	bl	8006a9c <__lshift>
 80061da:	4605      	mov	r5, r0
 80061dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d05c      	beq.n	800629c <_dtoa_r+0xa44>
 80061e2:	4648      	mov	r0, r9
 80061e4:	6869      	ldr	r1, [r5, #4]
 80061e6:	f000 fa09 	bl	80065fc <_Balloc>
 80061ea:	4606      	mov	r6, r0
 80061ec:	b928      	cbnz	r0, 80061fa <_dtoa_r+0x9a2>
 80061ee:	4602      	mov	r2, r0
 80061f0:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80061f4:	4b80      	ldr	r3, [pc, #512]	@ (80063f8 <_dtoa_r+0xba0>)
 80061f6:	f7ff bb43 	b.w	8005880 <_dtoa_r+0x28>
 80061fa:	692a      	ldr	r2, [r5, #16]
 80061fc:	f105 010c 	add.w	r1, r5, #12
 8006200:	3202      	adds	r2, #2
 8006202:	0092      	lsls	r2, r2, #2
 8006204:	300c      	adds	r0, #12
 8006206:	f002 f949 	bl	800849c <memcpy>
 800620a:	2201      	movs	r2, #1
 800620c:	4631      	mov	r1, r6
 800620e:	4648      	mov	r0, r9
 8006210:	f000 fc44 	bl	8006a9c <__lshift>
 8006214:	462f      	mov	r7, r5
 8006216:	4605      	mov	r5, r0
 8006218:	f10a 0301 	add.w	r3, sl, #1
 800621c:	9304      	str	r3, [sp, #16]
 800621e:	eb0a 030b 	add.w	r3, sl, fp
 8006222:	930a      	str	r3, [sp, #40]	@ 0x28
 8006224:	9b06      	ldr	r3, [sp, #24]
 8006226:	f003 0301 	and.w	r3, r3, #1
 800622a:	9309      	str	r3, [sp, #36]	@ 0x24
 800622c:	9b04      	ldr	r3, [sp, #16]
 800622e:	4621      	mov	r1, r4
 8006230:	9803      	ldr	r0, [sp, #12]
 8006232:	f103 3bff 	add.w	fp, r3, #4294967295
 8006236:	f7ff fa85 	bl	8005744 <quorem>
 800623a:	4603      	mov	r3, r0
 800623c:	4639      	mov	r1, r7
 800623e:	3330      	adds	r3, #48	@ 0x30
 8006240:	9006      	str	r0, [sp, #24]
 8006242:	9803      	ldr	r0, [sp, #12]
 8006244:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006246:	f000 fc95 	bl	8006b74 <__mcmp>
 800624a:	462a      	mov	r2, r5
 800624c:	9008      	str	r0, [sp, #32]
 800624e:	4621      	mov	r1, r4
 8006250:	4648      	mov	r0, r9
 8006252:	f000 fcab 	bl	8006bac <__mdiff>
 8006256:	68c2      	ldr	r2, [r0, #12]
 8006258:	4606      	mov	r6, r0
 800625a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800625c:	bb02      	cbnz	r2, 80062a0 <_dtoa_r+0xa48>
 800625e:	4601      	mov	r1, r0
 8006260:	9803      	ldr	r0, [sp, #12]
 8006262:	f000 fc87 	bl	8006b74 <__mcmp>
 8006266:	4602      	mov	r2, r0
 8006268:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800626a:	4631      	mov	r1, r6
 800626c:	4648      	mov	r0, r9
 800626e:	e9cd 320b 	strd	r3, r2, [sp, #44]	@ 0x2c
 8006272:	f000 fa03 	bl	800667c <_Bfree>
 8006276:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006278:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800627a:	9e04      	ldr	r6, [sp, #16]
 800627c:	ea42 0103 	orr.w	r1, r2, r3
 8006280:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006282:	4319      	orrs	r1, r3
 8006284:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006286:	d10d      	bne.n	80062a4 <_dtoa_r+0xa4c>
 8006288:	2b39      	cmp	r3, #57	@ 0x39
 800628a:	d027      	beq.n	80062dc <_dtoa_r+0xa84>
 800628c:	9a08      	ldr	r2, [sp, #32]
 800628e:	2a00      	cmp	r2, #0
 8006290:	dd01      	ble.n	8006296 <_dtoa_r+0xa3e>
 8006292:	9b06      	ldr	r3, [sp, #24]
 8006294:	3331      	adds	r3, #49	@ 0x31
 8006296:	f88b 3000 	strb.w	r3, [fp]
 800629a:	e52e      	b.n	8005cfa <_dtoa_r+0x4a2>
 800629c:	4628      	mov	r0, r5
 800629e:	e7b9      	b.n	8006214 <_dtoa_r+0x9bc>
 80062a0:	2201      	movs	r2, #1
 80062a2:	e7e2      	b.n	800626a <_dtoa_r+0xa12>
 80062a4:	9908      	ldr	r1, [sp, #32]
 80062a6:	2900      	cmp	r1, #0
 80062a8:	db04      	blt.n	80062b4 <_dtoa_r+0xa5c>
 80062aa:	9820      	ldr	r0, [sp, #128]	@ 0x80
 80062ac:	4301      	orrs	r1, r0
 80062ae:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80062b0:	4301      	orrs	r1, r0
 80062b2:	d120      	bne.n	80062f6 <_dtoa_r+0xa9e>
 80062b4:	2a00      	cmp	r2, #0
 80062b6:	ddee      	ble.n	8006296 <_dtoa_r+0xa3e>
 80062b8:	2201      	movs	r2, #1
 80062ba:	9903      	ldr	r1, [sp, #12]
 80062bc:	4648      	mov	r0, r9
 80062be:	9304      	str	r3, [sp, #16]
 80062c0:	f000 fbec 	bl	8006a9c <__lshift>
 80062c4:	4621      	mov	r1, r4
 80062c6:	9003      	str	r0, [sp, #12]
 80062c8:	f000 fc54 	bl	8006b74 <__mcmp>
 80062cc:	2800      	cmp	r0, #0
 80062ce:	9b04      	ldr	r3, [sp, #16]
 80062d0:	dc02      	bgt.n	80062d8 <_dtoa_r+0xa80>
 80062d2:	d1e0      	bne.n	8006296 <_dtoa_r+0xa3e>
 80062d4:	07da      	lsls	r2, r3, #31
 80062d6:	d5de      	bpl.n	8006296 <_dtoa_r+0xa3e>
 80062d8:	2b39      	cmp	r3, #57	@ 0x39
 80062da:	d1da      	bne.n	8006292 <_dtoa_r+0xa3a>
 80062dc:	2339      	movs	r3, #57	@ 0x39
 80062de:	f88b 3000 	strb.w	r3, [fp]
 80062e2:	4633      	mov	r3, r6
 80062e4:	461e      	mov	r6, r3
 80062e6:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80062ea:	3b01      	subs	r3, #1
 80062ec:	2a39      	cmp	r2, #57	@ 0x39
 80062ee:	d04e      	beq.n	800638e <_dtoa_r+0xb36>
 80062f0:	3201      	adds	r2, #1
 80062f2:	701a      	strb	r2, [r3, #0]
 80062f4:	e501      	b.n	8005cfa <_dtoa_r+0x4a2>
 80062f6:	2a00      	cmp	r2, #0
 80062f8:	dd03      	ble.n	8006302 <_dtoa_r+0xaaa>
 80062fa:	2b39      	cmp	r3, #57	@ 0x39
 80062fc:	d0ee      	beq.n	80062dc <_dtoa_r+0xa84>
 80062fe:	3301      	adds	r3, #1
 8006300:	e7c9      	b.n	8006296 <_dtoa_r+0xa3e>
 8006302:	9a04      	ldr	r2, [sp, #16]
 8006304:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006306:	f802 3c01 	strb.w	r3, [r2, #-1]
 800630a:	428a      	cmp	r2, r1
 800630c:	d028      	beq.n	8006360 <_dtoa_r+0xb08>
 800630e:	2300      	movs	r3, #0
 8006310:	220a      	movs	r2, #10
 8006312:	9903      	ldr	r1, [sp, #12]
 8006314:	4648      	mov	r0, r9
 8006316:	f000 f9d3 	bl	80066c0 <__multadd>
 800631a:	42af      	cmp	r7, r5
 800631c:	9003      	str	r0, [sp, #12]
 800631e:	f04f 0300 	mov.w	r3, #0
 8006322:	f04f 020a 	mov.w	r2, #10
 8006326:	4639      	mov	r1, r7
 8006328:	4648      	mov	r0, r9
 800632a:	d107      	bne.n	800633c <_dtoa_r+0xae4>
 800632c:	f000 f9c8 	bl	80066c0 <__multadd>
 8006330:	4607      	mov	r7, r0
 8006332:	4605      	mov	r5, r0
 8006334:	9b04      	ldr	r3, [sp, #16]
 8006336:	3301      	adds	r3, #1
 8006338:	9304      	str	r3, [sp, #16]
 800633a:	e777      	b.n	800622c <_dtoa_r+0x9d4>
 800633c:	f000 f9c0 	bl	80066c0 <__multadd>
 8006340:	4629      	mov	r1, r5
 8006342:	4607      	mov	r7, r0
 8006344:	2300      	movs	r3, #0
 8006346:	220a      	movs	r2, #10
 8006348:	4648      	mov	r0, r9
 800634a:	f000 f9b9 	bl	80066c0 <__multadd>
 800634e:	4605      	mov	r5, r0
 8006350:	e7f0      	b.n	8006334 <_dtoa_r+0xadc>
 8006352:	f1bb 0f00 	cmp.w	fp, #0
 8006356:	bfcc      	ite	gt
 8006358:	465e      	movgt	r6, fp
 800635a:	2601      	movle	r6, #1
 800635c:	2700      	movs	r7, #0
 800635e:	4456      	add	r6, sl
 8006360:	2201      	movs	r2, #1
 8006362:	9903      	ldr	r1, [sp, #12]
 8006364:	4648      	mov	r0, r9
 8006366:	9304      	str	r3, [sp, #16]
 8006368:	f000 fb98 	bl	8006a9c <__lshift>
 800636c:	4621      	mov	r1, r4
 800636e:	9003      	str	r0, [sp, #12]
 8006370:	f000 fc00 	bl	8006b74 <__mcmp>
 8006374:	2800      	cmp	r0, #0
 8006376:	dcb4      	bgt.n	80062e2 <_dtoa_r+0xa8a>
 8006378:	d102      	bne.n	8006380 <_dtoa_r+0xb28>
 800637a:	9b04      	ldr	r3, [sp, #16]
 800637c:	07db      	lsls	r3, r3, #31
 800637e:	d4b0      	bmi.n	80062e2 <_dtoa_r+0xa8a>
 8006380:	4633      	mov	r3, r6
 8006382:	461e      	mov	r6, r3
 8006384:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006388:	2a30      	cmp	r2, #48	@ 0x30
 800638a:	d0fa      	beq.n	8006382 <_dtoa_r+0xb2a>
 800638c:	e4b5      	b.n	8005cfa <_dtoa_r+0x4a2>
 800638e:	459a      	cmp	sl, r3
 8006390:	d1a8      	bne.n	80062e4 <_dtoa_r+0xa8c>
 8006392:	2331      	movs	r3, #49	@ 0x31
 8006394:	f108 0801 	add.w	r8, r8, #1
 8006398:	f88a 3000 	strb.w	r3, [sl]
 800639c:	e4ad      	b.n	8005cfa <_dtoa_r+0x4a2>
 800639e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80063a0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80063fc <_dtoa_r+0xba4>
 80063a4:	b11b      	cbz	r3, 80063ae <_dtoa_r+0xb56>
 80063a6:	f10a 0308 	add.w	r3, sl, #8
 80063aa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80063ac:	6013      	str	r3, [r2, #0]
 80063ae:	4650      	mov	r0, sl
 80063b0:	b017      	add	sp, #92	@ 0x5c
 80063b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063b6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80063b8:	2b01      	cmp	r3, #1
 80063ba:	f77f ae2e 	ble.w	800601a <_dtoa_r+0x7c2>
 80063be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80063c0:	930a      	str	r3, [sp, #40]	@ 0x28
 80063c2:	2001      	movs	r0, #1
 80063c4:	e64d      	b.n	8006062 <_dtoa_r+0x80a>
 80063c6:	f1bb 0f00 	cmp.w	fp, #0
 80063ca:	f77f aed9 	ble.w	8006180 <_dtoa_r+0x928>
 80063ce:	4656      	mov	r6, sl
 80063d0:	4621      	mov	r1, r4
 80063d2:	9803      	ldr	r0, [sp, #12]
 80063d4:	f7ff f9b6 	bl	8005744 <quorem>
 80063d8:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80063dc:	f806 3b01 	strb.w	r3, [r6], #1
 80063e0:	eba6 020a 	sub.w	r2, r6, sl
 80063e4:	4593      	cmp	fp, r2
 80063e6:	ddb4      	ble.n	8006352 <_dtoa_r+0xafa>
 80063e8:	2300      	movs	r3, #0
 80063ea:	220a      	movs	r2, #10
 80063ec:	4648      	mov	r0, r9
 80063ee:	9903      	ldr	r1, [sp, #12]
 80063f0:	f000 f966 	bl	80066c0 <__multadd>
 80063f4:	9003      	str	r0, [sp, #12]
 80063f6:	e7eb      	b.n	80063d0 <_dtoa_r+0xb78>
 80063f8:	080097e7 	.word	0x080097e7
 80063fc:	0800976b 	.word	0x0800976b

08006400 <_free_r>:
 8006400:	b538      	push	{r3, r4, r5, lr}
 8006402:	4605      	mov	r5, r0
 8006404:	2900      	cmp	r1, #0
 8006406:	d040      	beq.n	800648a <_free_r+0x8a>
 8006408:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800640c:	1f0c      	subs	r4, r1, #4
 800640e:	2b00      	cmp	r3, #0
 8006410:	bfb8      	it	lt
 8006412:	18e4      	addlt	r4, r4, r3
 8006414:	f000 f8e6 	bl	80065e4 <__malloc_lock>
 8006418:	4a1c      	ldr	r2, [pc, #112]	@ (800648c <_free_r+0x8c>)
 800641a:	6813      	ldr	r3, [r2, #0]
 800641c:	b933      	cbnz	r3, 800642c <_free_r+0x2c>
 800641e:	6063      	str	r3, [r4, #4]
 8006420:	6014      	str	r4, [r2, #0]
 8006422:	4628      	mov	r0, r5
 8006424:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006428:	f000 b8e2 	b.w	80065f0 <__malloc_unlock>
 800642c:	42a3      	cmp	r3, r4
 800642e:	d908      	bls.n	8006442 <_free_r+0x42>
 8006430:	6820      	ldr	r0, [r4, #0]
 8006432:	1821      	adds	r1, r4, r0
 8006434:	428b      	cmp	r3, r1
 8006436:	bf01      	itttt	eq
 8006438:	6819      	ldreq	r1, [r3, #0]
 800643a:	685b      	ldreq	r3, [r3, #4]
 800643c:	1809      	addeq	r1, r1, r0
 800643e:	6021      	streq	r1, [r4, #0]
 8006440:	e7ed      	b.n	800641e <_free_r+0x1e>
 8006442:	461a      	mov	r2, r3
 8006444:	685b      	ldr	r3, [r3, #4]
 8006446:	b10b      	cbz	r3, 800644c <_free_r+0x4c>
 8006448:	42a3      	cmp	r3, r4
 800644a:	d9fa      	bls.n	8006442 <_free_r+0x42>
 800644c:	6811      	ldr	r1, [r2, #0]
 800644e:	1850      	adds	r0, r2, r1
 8006450:	42a0      	cmp	r0, r4
 8006452:	d10b      	bne.n	800646c <_free_r+0x6c>
 8006454:	6820      	ldr	r0, [r4, #0]
 8006456:	4401      	add	r1, r0
 8006458:	1850      	adds	r0, r2, r1
 800645a:	4283      	cmp	r3, r0
 800645c:	6011      	str	r1, [r2, #0]
 800645e:	d1e0      	bne.n	8006422 <_free_r+0x22>
 8006460:	6818      	ldr	r0, [r3, #0]
 8006462:	685b      	ldr	r3, [r3, #4]
 8006464:	4408      	add	r0, r1
 8006466:	6010      	str	r0, [r2, #0]
 8006468:	6053      	str	r3, [r2, #4]
 800646a:	e7da      	b.n	8006422 <_free_r+0x22>
 800646c:	d902      	bls.n	8006474 <_free_r+0x74>
 800646e:	230c      	movs	r3, #12
 8006470:	602b      	str	r3, [r5, #0]
 8006472:	e7d6      	b.n	8006422 <_free_r+0x22>
 8006474:	6820      	ldr	r0, [r4, #0]
 8006476:	1821      	adds	r1, r4, r0
 8006478:	428b      	cmp	r3, r1
 800647a:	bf01      	itttt	eq
 800647c:	6819      	ldreq	r1, [r3, #0]
 800647e:	685b      	ldreq	r3, [r3, #4]
 8006480:	1809      	addeq	r1, r1, r0
 8006482:	6021      	streq	r1, [r4, #0]
 8006484:	6063      	str	r3, [r4, #4]
 8006486:	6054      	str	r4, [r2, #4]
 8006488:	e7cb      	b.n	8006422 <_free_r+0x22>
 800648a:	bd38      	pop	{r3, r4, r5, pc}
 800648c:	200003e0 	.word	0x200003e0

08006490 <malloc>:
 8006490:	4b02      	ldr	r3, [pc, #8]	@ (800649c <malloc+0xc>)
 8006492:	4601      	mov	r1, r0
 8006494:	6818      	ldr	r0, [r3, #0]
 8006496:	f000 b825 	b.w	80064e4 <_malloc_r>
 800649a:	bf00      	nop
 800649c:	20000018 	.word	0x20000018

080064a0 <sbrk_aligned>:
 80064a0:	b570      	push	{r4, r5, r6, lr}
 80064a2:	4e0f      	ldr	r6, [pc, #60]	@ (80064e0 <sbrk_aligned+0x40>)
 80064a4:	460c      	mov	r4, r1
 80064a6:	6831      	ldr	r1, [r6, #0]
 80064a8:	4605      	mov	r5, r0
 80064aa:	b911      	cbnz	r1, 80064b2 <sbrk_aligned+0x12>
 80064ac:	f001 ffe6 	bl	800847c <_sbrk_r>
 80064b0:	6030      	str	r0, [r6, #0]
 80064b2:	4621      	mov	r1, r4
 80064b4:	4628      	mov	r0, r5
 80064b6:	f001 ffe1 	bl	800847c <_sbrk_r>
 80064ba:	1c43      	adds	r3, r0, #1
 80064bc:	d103      	bne.n	80064c6 <sbrk_aligned+0x26>
 80064be:	f04f 34ff 	mov.w	r4, #4294967295
 80064c2:	4620      	mov	r0, r4
 80064c4:	bd70      	pop	{r4, r5, r6, pc}
 80064c6:	1cc4      	adds	r4, r0, #3
 80064c8:	f024 0403 	bic.w	r4, r4, #3
 80064cc:	42a0      	cmp	r0, r4
 80064ce:	d0f8      	beq.n	80064c2 <sbrk_aligned+0x22>
 80064d0:	1a21      	subs	r1, r4, r0
 80064d2:	4628      	mov	r0, r5
 80064d4:	f001 ffd2 	bl	800847c <_sbrk_r>
 80064d8:	3001      	adds	r0, #1
 80064da:	d1f2      	bne.n	80064c2 <sbrk_aligned+0x22>
 80064dc:	e7ef      	b.n	80064be <sbrk_aligned+0x1e>
 80064de:	bf00      	nop
 80064e0:	200003dc 	.word	0x200003dc

080064e4 <_malloc_r>:
 80064e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80064e8:	1ccd      	adds	r5, r1, #3
 80064ea:	f025 0503 	bic.w	r5, r5, #3
 80064ee:	3508      	adds	r5, #8
 80064f0:	2d0c      	cmp	r5, #12
 80064f2:	bf38      	it	cc
 80064f4:	250c      	movcc	r5, #12
 80064f6:	2d00      	cmp	r5, #0
 80064f8:	4606      	mov	r6, r0
 80064fa:	db01      	blt.n	8006500 <_malloc_r+0x1c>
 80064fc:	42a9      	cmp	r1, r5
 80064fe:	d904      	bls.n	800650a <_malloc_r+0x26>
 8006500:	230c      	movs	r3, #12
 8006502:	6033      	str	r3, [r6, #0]
 8006504:	2000      	movs	r0, #0
 8006506:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800650a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80065e0 <_malloc_r+0xfc>
 800650e:	f000 f869 	bl	80065e4 <__malloc_lock>
 8006512:	f8d8 3000 	ldr.w	r3, [r8]
 8006516:	461c      	mov	r4, r3
 8006518:	bb44      	cbnz	r4, 800656c <_malloc_r+0x88>
 800651a:	4629      	mov	r1, r5
 800651c:	4630      	mov	r0, r6
 800651e:	f7ff ffbf 	bl	80064a0 <sbrk_aligned>
 8006522:	1c43      	adds	r3, r0, #1
 8006524:	4604      	mov	r4, r0
 8006526:	d158      	bne.n	80065da <_malloc_r+0xf6>
 8006528:	f8d8 4000 	ldr.w	r4, [r8]
 800652c:	4627      	mov	r7, r4
 800652e:	2f00      	cmp	r7, #0
 8006530:	d143      	bne.n	80065ba <_malloc_r+0xd6>
 8006532:	2c00      	cmp	r4, #0
 8006534:	d04b      	beq.n	80065ce <_malloc_r+0xea>
 8006536:	6823      	ldr	r3, [r4, #0]
 8006538:	4639      	mov	r1, r7
 800653a:	4630      	mov	r0, r6
 800653c:	eb04 0903 	add.w	r9, r4, r3
 8006540:	f001 ff9c 	bl	800847c <_sbrk_r>
 8006544:	4581      	cmp	r9, r0
 8006546:	d142      	bne.n	80065ce <_malloc_r+0xea>
 8006548:	6821      	ldr	r1, [r4, #0]
 800654a:	4630      	mov	r0, r6
 800654c:	1a6d      	subs	r5, r5, r1
 800654e:	4629      	mov	r1, r5
 8006550:	f7ff ffa6 	bl	80064a0 <sbrk_aligned>
 8006554:	3001      	adds	r0, #1
 8006556:	d03a      	beq.n	80065ce <_malloc_r+0xea>
 8006558:	6823      	ldr	r3, [r4, #0]
 800655a:	442b      	add	r3, r5
 800655c:	6023      	str	r3, [r4, #0]
 800655e:	f8d8 3000 	ldr.w	r3, [r8]
 8006562:	685a      	ldr	r2, [r3, #4]
 8006564:	bb62      	cbnz	r2, 80065c0 <_malloc_r+0xdc>
 8006566:	f8c8 7000 	str.w	r7, [r8]
 800656a:	e00f      	b.n	800658c <_malloc_r+0xa8>
 800656c:	6822      	ldr	r2, [r4, #0]
 800656e:	1b52      	subs	r2, r2, r5
 8006570:	d420      	bmi.n	80065b4 <_malloc_r+0xd0>
 8006572:	2a0b      	cmp	r2, #11
 8006574:	d917      	bls.n	80065a6 <_malloc_r+0xc2>
 8006576:	1961      	adds	r1, r4, r5
 8006578:	42a3      	cmp	r3, r4
 800657a:	6025      	str	r5, [r4, #0]
 800657c:	bf18      	it	ne
 800657e:	6059      	strne	r1, [r3, #4]
 8006580:	6863      	ldr	r3, [r4, #4]
 8006582:	bf08      	it	eq
 8006584:	f8c8 1000 	streq.w	r1, [r8]
 8006588:	5162      	str	r2, [r4, r5]
 800658a:	604b      	str	r3, [r1, #4]
 800658c:	4630      	mov	r0, r6
 800658e:	f000 f82f 	bl	80065f0 <__malloc_unlock>
 8006592:	f104 000b 	add.w	r0, r4, #11
 8006596:	1d23      	adds	r3, r4, #4
 8006598:	f020 0007 	bic.w	r0, r0, #7
 800659c:	1ac2      	subs	r2, r0, r3
 800659e:	bf1c      	itt	ne
 80065a0:	1a1b      	subne	r3, r3, r0
 80065a2:	50a3      	strne	r3, [r4, r2]
 80065a4:	e7af      	b.n	8006506 <_malloc_r+0x22>
 80065a6:	6862      	ldr	r2, [r4, #4]
 80065a8:	42a3      	cmp	r3, r4
 80065aa:	bf0c      	ite	eq
 80065ac:	f8c8 2000 	streq.w	r2, [r8]
 80065b0:	605a      	strne	r2, [r3, #4]
 80065b2:	e7eb      	b.n	800658c <_malloc_r+0xa8>
 80065b4:	4623      	mov	r3, r4
 80065b6:	6864      	ldr	r4, [r4, #4]
 80065b8:	e7ae      	b.n	8006518 <_malloc_r+0x34>
 80065ba:	463c      	mov	r4, r7
 80065bc:	687f      	ldr	r7, [r7, #4]
 80065be:	e7b6      	b.n	800652e <_malloc_r+0x4a>
 80065c0:	461a      	mov	r2, r3
 80065c2:	685b      	ldr	r3, [r3, #4]
 80065c4:	42a3      	cmp	r3, r4
 80065c6:	d1fb      	bne.n	80065c0 <_malloc_r+0xdc>
 80065c8:	2300      	movs	r3, #0
 80065ca:	6053      	str	r3, [r2, #4]
 80065cc:	e7de      	b.n	800658c <_malloc_r+0xa8>
 80065ce:	230c      	movs	r3, #12
 80065d0:	4630      	mov	r0, r6
 80065d2:	6033      	str	r3, [r6, #0]
 80065d4:	f000 f80c 	bl	80065f0 <__malloc_unlock>
 80065d8:	e794      	b.n	8006504 <_malloc_r+0x20>
 80065da:	6005      	str	r5, [r0, #0]
 80065dc:	e7d6      	b.n	800658c <_malloc_r+0xa8>
 80065de:	bf00      	nop
 80065e0:	200003e0 	.word	0x200003e0

080065e4 <__malloc_lock>:
 80065e4:	4801      	ldr	r0, [pc, #4]	@ (80065ec <__malloc_lock+0x8>)
 80065e6:	f7ff b898 	b.w	800571a <__retarget_lock_acquire_recursive>
 80065ea:	bf00      	nop
 80065ec:	200003d8 	.word	0x200003d8

080065f0 <__malloc_unlock>:
 80065f0:	4801      	ldr	r0, [pc, #4]	@ (80065f8 <__malloc_unlock+0x8>)
 80065f2:	f7ff b893 	b.w	800571c <__retarget_lock_release_recursive>
 80065f6:	bf00      	nop
 80065f8:	200003d8 	.word	0x200003d8

080065fc <_Balloc>:
 80065fc:	b570      	push	{r4, r5, r6, lr}
 80065fe:	69c6      	ldr	r6, [r0, #28]
 8006600:	4604      	mov	r4, r0
 8006602:	460d      	mov	r5, r1
 8006604:	b976      	cbnz	r6, 8006624 <_Balloc+0x28>
 8006606:	2010      	movs	r0, #16
 8006608:	f7ff ff42 	bl	8006490 <malloc>
 800660c:	4602      	mov	r2, r0
 800660e:	61e0      	str	r0, [r4, #28]
 8006610:	b920      	cbnz	r0, 800661c <_Balloc+0x20>
 8006612:	216b      	movs	r1, #107	@ 0x6b
 8006614:	4b17      	ldr	r3, [pc, #92]	@ (8006674 <_Balloc+0x78>)
 8006616:	4818      	ldr	r0, [pc, #96]	@ (8006678 <_Balloc+0x7c>)
 8006618:	f001 ff54 	bl	80084c4 <__assert_func>
 800661c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006620:	6006      	str	r6, [r0, #0]
 8006622:	60c6      	str	r6, [r0, #12]
 8006624:	69e6      	ldr	r6, [r4, #28]
 8006626:	68f3      	ldr	r3, [r6, #12]
 8006628:	b183      	cbz	r3, 800664c <_Balloc+0x50>
 800662a:	69e3      	ldr	r3, [r4, #28]
 800662c:	68db      	ldr	r3, [r3, #12]
 800662e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006632:	b9b8      	cbnz	r0, 8006664 <_Balloc+0x68>
 8006634:	2101      	movs	r1, #1
 8006636:	fa01 f605 	lsl.w	r6, r1, r5
 800663a:	1d72      	adds	r2, r6, #5
 800663c:	4620      	mov	r0, r4
 800663e:	0092      	lsls	r2, r2, #2
 8006640:	f001 ff5e 	bl	8008500 <_calloc_r>
 8006644:	b160      	cbz	r0, 8006660 <_Balloc+0x64>
 8006646:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800664a:	e00e      	b.n	800666a <_Balloc+0x6e>
 800664c:	2221      	movs	r2, #33	@ 0x21
 800664e:	2104      	movs	r1, #4
 8006650:	4620      	mov	r0, r4
 8006652:	f001 ff55 	bl	8008500 <_calloc_r>
 8006656:	69e3      	ldr	r3, [r4, #28]
 8006658:	60f0      	str	r0, [r6, #12]
 800665a:	68db      	ldr	r3, [r3, #12]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d1e4      	bne.n	800662a <_Balloc+0x2e>
 8006660:	2000      	movs	r0, #0
 8006662:	bd70      	pop	{r4, r5, r6, pc}
 8006664:	6802      	ldr	r2, [r0, #0]
 8006666:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800666a:	2300      	movs	r3, #0
 800666c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006670:	e7f7      	b.n	8006662 <_Balloc+0x66>
 8006672:	bf00      	nop
 8006674:	08009778 	.word	0x08009778
 8006678:	080097f8 	.word	0x080097f8

0800667c <_Bfree>:
 800667c:	b570      	push	{r4, r5, r6, lr}
 800667e:	69c6      	ldr	r6, [r0, #28]
 8006680:	4605      	mov	r5, r0
 8006682:	460c      	mov	r4, r1
 8006684:	b976      	cbnz	r6, 80066a4 <_Bfree+0x28>
 8006686:	2010      	movs	r0, #16
 8006688:	f7ff ff02 	bl	8006490 <malloc>
 800668c:	4602      	mov	r2, r0
 800668e:	61e8      	str	r0, [r5, #28]
 8006690:	b920      	cbnz	r0, 800669c <_Bfree+0x20>
 8006692:	218f      	movs	r1, #143	@ 0x8f
 8006694:	4b08      	ldr	r3, [pc, #32]	@ (80066b8 <_Bfree+0x3c>)
 8006696:	4809      	ldr	r0, [pc, #36]	@ (80066bc <_Bfree+0x40>)
 8006698:	f001 ff14 	bl	80084c4 <__assert_func>
 800669c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80066a0:	6006      	str	r6, [r0, #0]
 80066a2:	60c6      	str	r6, [r0, #12]
 80066a4:	b13c      	cbz	r4, 80066b6 <_Bfree+0x3a>
 80066a6:	69eb      	ldr	r3, [r5, #28]
 80066a8:	6862      	ldr	r2, [r4, #4]
 80066aa:	68db      	ldr	r3, [r3, #12]
 80066ac:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80066b0:	6021      	str	r1, [r4, #0]
 80066b2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80066b6:	bd70      	pop	{r4, r5, r6, pc}
 80066b8:	08009778 	.word	0x08009778
 80066bc:	080097f8 	.word	0x080097f8

080066c0 <__multadd>:
 80066c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80066c4:	4607      	mov	r7, r0
 80066c6:	460c      	mov	r4, r1
 80066c8:	461e      	mov	r6, r3
 80066ca:	2000      	movs	r0, #0
 80066cc:	690d      	ldr	r5, [r1, #16]
 80066ce:	f101 0c14 	add.w	ip, r1, #20
 80066d2:	f8dc 3000 	ldr.w	r3, [ip]
 80066d6:	3001      	adds	r0, #1
 80066d8:	b299      	uxth	r1, r3
 80066da:	fb02 6101 	mla	r1, r2, r1, r6
 80066de:	0c1e      	lsrs	r6, r3, #16
 80066e0:	0c0b      	lsrs	r3, r1, #16
 80066e2:	fb02 3306 	mla	r3, r2, r6, r3
 80066e6:	b289      	uxth	r1, r1
 80066e8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80066ec:	4285      	cmp	r5, r0
 80066ee:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80066f2:	f84c 1b04 	str.w	r1, [ip], #4
 80066f6:	dcec      	bgt.n	80066d2 <__multadd+0x12>
 80066f8:	b30e      	cbz	r6, 800673e <__multadd+0x7e>
 80066fa:	68a3      	ldr	r3, [r4, #8]
 80066fc:	42ab      	cmp	r3, r5
 80066fe:	dc19      	bgt.n	8006734 <__multadd+0x74>
 8006700:	6861      	ldr	r1, [r4, #4]
 8006702:	4638      	mov	r0, r7
 8006704:	3101      	adds	r1, #1
 8006706:	f7ff ff79 	bl	80065fc <_Balloc>
 800670a:	4680      	mov	r8, r0
 800670c:	b928      	cbnz	r0, 800671a <__multadd+0x5a>
 800670e:	4602      	mov	r2, r0
 8006710:	21ba      	movs	r1, #186	@ 0xba
 8006712:	4b0c      	ldr	r3, [pc, #48]	@ (8006744 <__multadd+0x84>)
 8006714:	480c      	ldr	r0, [pc, #48]	@ (8006748 <__multadd+0x88>)
 8006716:	f001 fed5 	bl	80084c4 <__assert_func>
 800671a:	6922      	ldr	r2, [r4, #16]
 800671c:	f104 010c 	add.w	r1, r4, #12
 8006720:	3202      	adds	r2, #2
 8006722:	0092      	lsls	r2, r2, #2
 8006724:	300c      	adds	r0, #12
 8006726:	f001 feb9 	bl	800849c <memcpy>
 800672a:	4621      	mov	r1, r4
 800672c:	4638      	mov	r0, r7
 800672e:	f7ff ffa5 	bl	800667c <_Bfree>
 8006732:	4644      	mov	r4, r8
 8006734:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006738:	3501      	adds	r5, #1
 800673a:	615e      	str	r6, [r3, #20]
 800673c:	6125      	str	r5, [r4, #16]
 800673e:	4620      	mov	r0, r4
 8006740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006744:	080097e7 	.word	0x080097e7
 8006748:	080097f8 	.word	0x080097f8

0800674c <__s2b>:
 800674c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006750:	4615      	mov	r5, r2
 8006752:	2209      	movs	r2, #9
 8006754:	461f      	mov	r7, r3
 8006756:	3308      	adds	r3, #8
 8006758:	460c      	mov	r4, r1
 800675a:	fb93 f3f2 	sdiv	r3, r3, r2
 800675e:	4606      	mov	r6, r0
 8006760:	2201      	movs	r2, #1
 8006762:	2100      	movs	r1, #0
 8006764:	429a      	cmp	r2, r3
 8006766:	db09      	blt.n	800677c <__s2b+0x30>
 8006768:	4630      	mov	r0, r6
 800676a:	f7ff ff47 	bl	80065fc <_Balloc>
 800676e:	b940      	cbnz	r0, 8006782 <__s2b+0x36>
 8006770:	4602      	mov	r2, r0
 8006772:	21d3      	movs	r1, #211	@ 0xd3
 8006774:	4b18      	ldr	r3, [pc, #96]	@ (80067d8 <__s2b+0x8c>)
 8006776:	4819      	ldr	r0, [pc, #100]	@ (80067dc <__s2b+0x90>)
 8006778:	f001 fea4 	bl	80084c4 <__assert_func>
 800677c:	0052      	lsls	r2, r2, #1
 800677e:	3101      	adds	r1, #1
 8006780:	e7f0      	b.n	8006764 <__s2b+0x18>
 8006782:	9b08      	ldr	r3, [sp, #32]
 8006784:	2d09      	cmp	r5, #9
 8006786:	6143      	str	r3, [r0, #20]
 8006788:	f04f 0301 	mov.w	r3, #1
 800678c:	6103      	str	r3, [r0, #16]
 800678e:	dd16      	ble.n	80067be <__s2b+0x72>
 8006790:	f104 0909 	add.w	r9, r4, #9
 8006794:	46c8      	mov	r8, r9
 8006796:	442c      	add	r4, r5
 8006798:	f818 3b01 	ldrb.w	r3, [r8], #1
 800679c:	4601      	mov	r1, r0
 800679e:	220a      	movs	r2, #10
 80067a0:	4630      	mov	r0, r6
 80067a2:	3b30      	subs	r3, #48	@ 0x30
 80067a4:	f7ff ff8c 	bl	80066c0 <__multadd>
 80067a8:	45a0      	cmp	r8, r4
 80067aa:	d1f5      	bne.n	8006798 <__s2b+0x4c>
 80067ac:	f1a5 0408 	sub.w	r4, r5, #8
 80067b0:	444c      	add	r4, r9
 80067b2:	1b2d      	subs	r5, r5, r4
 80067b4:	1963      	adds	r3, r4, r5
 80067b6:	42bb      	cmp	r3, r7
 80067b8:	db04      	blt.n	80067c4 <__s2b+0x78>
 80067ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067be:	2509      	movs	r5, #9
 80067c0:	340a      	adds	r4, #10
 80067c2:	e7f6      	b.n	80067b2 <__s2b+0x66>
 80067c4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80067c8:	4601      	mov	r1, r0
 80067ca:	220a      	movs	r2, #10
 80067cc:	4630      	mov	r0, r6
 80067ce:	3b30      	subs	r3, #48	@ 0x30
 80067d0:	f7ff ff76 	bl	80066c0 <__multadd>
 80067d4:	e7ee      	b.n	80067b4 <__s2b+0x68>
 80067d6:	bf00      	nop
 80067d8:	080097e7 	.word	0x080097e7
 80067dc:	080097f8 	.word	0x080097f8

080067e0 <__hi0bits>:
 80067e0:	4603      	mov	r3, r0
 80067e2:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80067e6:	bf3a      	itte	cc
 80067e8:	0403      	lslcc	r3, r0, #16
 80067ea:	2010      	movcc	r0, #16
 80067ec:	2000      	movcs	r0, #0
 80067ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80067f2:	bf3c      	itt	cc
 80067f4:	021b      	lslcc	r3, r3, #8
 80067f6:	3008      	addcc	r0, #8
 80067f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80067fc:	bf3c      	itt	cc
 80067fe:	011b      	lslcc	r3, r3, #4
 8006800:	3004      	addcc	r0, #4
 8006802:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006806:	bf3c      	itt	cc
 8006808:	009b      	lslcc	r3, r3, #2
 800680a:	3002      	addcc	r0, #2
 800680c:	2b00      	cmp	r3, #0
 800680e:	db05      	blt.n	800681c <__hi0bits+0x3c>
 8006810:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006814:	f100 0001 	add.w	r0, r0, #1
 8006818:	bf08      	it	eq
 800681a:	2020      	moveq	r0, #32
 800681c:	4770      	bx	lr

0800681e <__lo0bits>:
 800681e:	6803      	ldr	r3, [r0, #0]
 8006820:	4602      	mov	r2, r0
 8006822:	f013 0007 	ands.w	r0, r3, #7
 8006826:	d00b      	beq.n	8006840 <__lo0bits+0x22>
 8006828:	07d9      	lsls	r1, r3, #31
 800682a:	d421      	bmi.n	8006870 <__lo0bits+0x52>
 800682c:	0798      	lsls	r0, r3, #30
 800682e:	bf49      	itett	mi
 8006830:	085b      	lsrmi	r3, r3, #1
 8006832:	089b      	lsrpl	r3, r3, #2
 8006834:	2001      	movmi	r0, #1
 8006836:	6013      	strmi	r3, [r2, #0]
 8006838:	bf5c      	itt	pl
 800683a:	2002      	movpl	r0, #2
 800683c:	6013      	strpl	r3, [r2, #0]
 800683e:	4770      	bx	lr
 8006840:	b299      	uxth	r1, r3
 8006842:	b909      	cbnz	r1, 8006848 <__lo0bits+0x2a>
 8006844:	2010      	movs	r0, #16
 8006846:	0c1b      	lsrs	r3, r3, #16
 8006848:	b2d9      	uxtb	r1, r3
 800684a:	b909      	cbnz	r1, 8006850 <__lo0bits+0x32>
 800684c:	3008      	adds	r0, #8
 800684e:	0a1b      	lsrs	r3, r3, #8
 8006850:	0719      	lsls	r1, r3, #28
 8006852:	bf04      	itt	eq
 8006854:	091b      	lsreq	r3, r3, #4
 8006856:	3004      	addeq	r0, #4
 8006858:	0799      	lsls	r1, r3, #30
 800685a:	bf04      	itt	eq
 800685c:	089b      	lsreq	r3, r3, #2
 800685e:	3002      	addeq	r0, #2
 8006860:	07d9      	lsls	r1, r3, #31
 8006862:	d403      	bmi.n	800686c <__lo0bits+0x4e>
 8006864:	085b      	lsrs	r3, r3, #1
 8006866:	f100 0001 	add.w	r0, r0, #1
 800686a:	d003      	beq.n	8006874 <__lo0bits+0x56>
 800686c:	6013      	str	r3, [r2, #0]
 800686e:	4770      	bx	lr
 8006870:	2000      	movs	r0, #0
 8006872:	4770      	bx	lr
 8006874:	2020      	movs	r0, #32
 8006876:	4770      	bx	lr

08006878 <__i2b>:
 8006878:	b510      	push	{r4, lr}
 800687a:	460c      	mov	r4, r1
 800687c:	2101      	movs	r1, #1
 800687e:	f7ff febd 	bl	80065fc <_Balloc>
 8006882:	4602      	mov	r2, r0
 8006884:	b928      	cbnz	r0, 8006892 <__i2b+0x1a>
 8006886:	f240 1145 	movw	r1, #325	@ 0x145
 800688a:	4b04      	ldr	r3, [pc, #16]	@ (800689c <__i2b+0x24>)
 800688c:	4804      	ldr	r0, [pc, #16]	@ (80068a0 <__i2b+0x28>)
 800688e:	f001 fe19 	bl	80084c4 <__assert_func>
 8006892:	2301      	movs	r3, #1
 8006894:	6144      	str	r4, [r0, #20]
 8006896:	6103      	str	r3, [r0, #16]
 8006898:	bd10      	pop	{r4, pc}
 800689a:	bf00      	nop
 800689c:	080097e7 	.word	0x080097e7
 80068a0:	080097f8 	.word	0x080097f8

080068a4 <__multiply>:
 80068a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068a8:	4617      	mov	r7, r2
 80068aa:	690a      	ldr	r2, [r1, #16]
 80068ac:	693b      	ldr	r3, [r7, #16]
 80068ae:	4689      	mov	r9, r1
 80068b0:	429a      	cmp	r2, r3
 80068b2:	bfa2      	ittt	ge
 80068b4:	463b      	movge	r3, r7
 80068b6:	460f      	movge	r7, r1
 80068b8:	4699      	movge	r9, r3
 80068ba:	693d      	ldr	r5, [r7, #16]
 80068bc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	6879      	ldr	r1, [r7, #4]
 80068c4:	eb05 060a 	add.w	r6, r5, sl
 80068c8:	42b3      	cmp	r3, r6
 80068ca:	b085      	sub	sp, #20
 80068cc:	bfb8      	it	lt
 80068ce:	3101      	addlt	r1, #1
 80068d0:	f7ff fe94 	bl	80065fc <_Balloc>
 80068d4:	b930      	cbnz	r0, 80068e4 <__multiply+0x40>
 80068d6:	4602      	mov	r2, r0
 80068d8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80068dc:	4b40      	ldr	r3, [pc, #256]	@ (80069e0 <__multiply+0x13c>)
 80068de:	4841      	ldr	r0, [pc, #260]	@ (80069e4 <__multiply+0x140>)
 80068e0:	f001 fdf0 	bl	80084c4 <__assert_func>
 80068e4:	f100 0414 	add.w	r4, r0, #20
 80068e8:	4623      	mov	r3, r4
 80068ea:	2200      	movs	r2, #0
 80068ec:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80068f0:	4573      	cmp	r3, lr
 80068f2:	d320      	bcc.n	8006936 <__multiply+0x92>
 80068f4:	f107 0814 	add.w	r8, r7, #20
 80068f8:	f109 0114 	add.w	r1, r9, #20
 80068fc:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8006900:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8006904:	9302      	str	r3, [sp, #8]
 8006906:	1beb      	subs	r3, r5, r7
 8006908:	3b15      	subs	r3, #21
 800690a:	f023 0303 	bic.w	r3, r3, #3
 800690e:	3304      	adds	r3, #4
 8006910:	3715      	adds	r7, #21
 8006912:	42bd      	cmp	r5, r7
 8006914:	bf38      	it	cc
 8006916:	2304      	movcc	r3, #4
 8006918:	9301      	str	r3, [sp, #4]
 800691a:	9b02      	ldr	r3, [sp, #8]
 800691c:	9103      	str	r1, [sp, #12]
 800691e:	428b      	cmp	r3, r1
 8006920:	d80c      	bhi.n	800693c <__multiply+0x98>
 8006922:	2e00      	cmp	r6, #0
 8006924:	dd03      	ble.n	800692e <__multiply+0x8a>
 8006926:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800692a:	2b00      	cmp	r3, #0
 800692c:	d055      	beq.n	80069da <__multiply+0x136>
 800692e:	6106      	str	r6, [r0, #16]
 8006930:	b005      	add	sp, #20
 8006932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006936:	f843 2b04 	str.w	r2, [r3], #4
 800693a:	e7d9      	b.n	80068f0 <__multiply+0x4c>
 800693c:	f8b1 a000 	ldrh.w	sl, [r1]
 8006940:	f1ba 0f00 	cmp.w	sl, #0
 8006944:	d01f      	beq.n	8006986 <__multiply+0xe2>
 8006946:	46c4      	mov	ip, r8
 8006948:	46a1      	mov	r9, r4
 800694a:	2700      	movs	r7, #0
 800694c:	f85c 2b04 	ldr.w	r2, [ip], #4
 8006950:	f8d9 3000 	ldr.w	r3, [r9]
 8006954:	fa1f fb82 	uxth.w	fp, r2
 8006958:	b29b      	uxth	r3, r3
 800695a:	fb0a 330b 	mla	r3, sl, fp, r3
 800695e:	443b      	add	r3, r7
 8006960:	f8d9 7000 	ldr.w	r7, [r9]
 8006964:	0c12      	lsrs	r2, r2, #16
 8006966:	0c3f      	lsrs	r7, r7, #16
 8006968:	fb0a 7202 	mla	r2, sl, r2, r7
 800696c:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8006970:	b29b      	uxth	r3, r3
 8006972:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006976:	4565      	cmp	r5, ip
 8006978:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800697c:	f849 3b04 	str.w	r3, [r9], #4
 8006980:	d8e4      	bhi.n	800694c <__multiply+0xa8>
 8006982:	9b01      	ldr	r3, [sp, #4]
 8006984:	50e7      	str	r7, [r4, r3]
 8006986:	9b03      	ldr	r3, [sp, #12]
 8006988:	3104      	adds	r1, #4
 800698a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800698e:	f1b9 0f00 	cmp.w	r9, #0
 8006992:	d020      	beq.n	80069d6 <__multiply+0x132>
 8006994:	4647      	mov	r7, r8
 8006996:	46a4      	mov	ip, r4
 8006998:	f04f 0a00 	mov.w	sl, #0
 800699c:	6823      	ldr	r3, [r4, #0]
 800699e:	f8b7 b000 	ldrh.w	fp, [r7]
 80069a2:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80069a6:	b29b      	uxth	r3, r3
 80069a8:	fb09 220b 	mla	r2, r9, fp, r2
 80069ac:	4452      	add	r2, sl
 80069ae:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80069b2:	f84c 3b04 	str.w	r3, [ip], #4
 80069b6:	f857 3b04 	ldr.w	r3, [r7], #4
 80069ba:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80069be:	f8bc 3000 	ldrh.w	r3, [ip]
 80069c2:	42bd      	cmp	r5, r7
 80069c4:	fb09 330a 	mla	r3, r9, sl, r3
 80069c8:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80069cc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80069d0:	d8e5      	bhi.n	800699e <__multiply+0xfa>
 80069d2:	9a01      	ldr	r2, [sp, #4]
 80069d4:	50a3      	str	r3, [r4, r2]
 80069d6:	3404      	adds	r4, #4
 80069d8:	e79f      	b.n	800691a <__multiply+0x76>
 80069da:	3e01      	subs	r6, #1
 80069dc:	e7a1      	b.n	8006922 <__multiply+0x7e>
 80069de:	bf00      	nop
 80069e0:	080097e7 	.word	0x080097e7
 80069e4:	080097f8 	.word	0x080097f8

080069e8 <__pow5mult>:
 80069e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069ec:	4615      	mov	r5, r2
 80069ee:	f012 0203 	ands.w	r2, r2, #3
 80069f2:	4607      	mov	r7, r0
 80069f4:	460e      	mov	r6, r1
 80069f6:	d007      	beq.n	8006a08 <__pow5mult+0x20>
 80069f8:	4c25      	ldr	r4, [pc, #148]	@ (8006a90 <__pow5mult+0xa8>)
 80069fa:	3a01      	subs	r2, #1
 80069fc:	2300      	movs	r3, #0
 80069fe:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006a02:	f7ff fe5d 	bl	80066c0 <__multadd>
 8006a06:	4606      	mov	r6, r0
 8006a08:	10ad      	asrs	r5, r5, #2
 8006a0a:	d03d      	beq.n	8006a88 <__pow5mult+0xa0>
 8006a0c:	69fc      	ldr	r4, [r7, #28]
 8006a0e:	b97c      	cbnz	r4, 8006a30 <__pow5mult+0x48>
 8006a10:	2010      	movs	r0, #16
 8006a12:	f7ff fd3d 	bl	8006490 <malloc>
 8006a16:	4602      	mov	r2, r0
 8006a18:	61f8      	str	r0, [r7, #28]
 8006a1a:	b928      	cbnz	r0, 8006a28 <__pow5mult+0x40>
 8006a1c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8006a20:	4b1c      	ldr	r3, [pc, #112]	@ (8006a94 <__pow5mult+0xac>)
 8006a22:	481d      	ldr	r0, [pc, #116]	@ (8006a98 <__pow5mult+0xb0>)
 8006a24:	f001 fd4e 	bl	80084c4 <__assert_func>
 8006a28:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006a2c:	6004      	str	r4, [r0, #0]
 8006a2e:	60c4      	str	r4, [r0, #12]
 8006a30:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8006a34:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006a38:	b94c      	cbnz	r4, 8006a4e <__pow5mult+0x66>
 8006a3a:	f240 2171 	movw	r1, #625	@ 0x271
 8006a3e:	4638      	mov	r0, r7
 8006a40:	f7ff ff1a 	bl	8006878 <__i2b>
 8006a44:	2300      	movs	r3, #0
 8006a46:	4604      	mov	r4, r0
 8006a48:	f8c8 0008 	str.w	r0, [r8, #8]
 8006a4c:	6003      	str	r3, [r0, #0]
 8006a4e:	f04f 0900 	mov.w	r9, #0
 8006a52:	07eb      	lsls	r3, r5, #31
 8006a54:	d50a      	bpl.n	8006a6c <__pow5mult+0x84>
 8006a56:	4631      	mov	r1, r6
 8006a58:	4622      	mov	r2, r4
 8006a5a:	4638      	mov	r0, r7
 8006a5c:	f7ff ff22 	bl	80068a4 <__multiply>
 8006a60:	4680      	mov	r8, r0
 8006a62:	4631      	mov	r1, r6
 8006a64:	4638      	mov	r0, r7
 8006a66:	f7ff fe09 	bl	800667c <_Bfree>
 8006a6a:	4646      	mov	r6, r8
 8006a6c:	106d      	asrs	r5, r5, #1
 8006a6e:	d00b      	beq.n	8006a88 <__pow5mult+0xa0>
 8006a70:	6820      	ldr	r0, [r4, #0]
 8006a72:	b938      	cbnz	r0, 8006a84 <__pow5mult+0x9c>
 8006a74:	4622      	mov	r2, r4
 8006a76:	4621      	mov	r1, r4
 8006a78:	4638      	mov	r0, r7
 8006a7a:	f7ff ff13 	bl	80068a4 <__multiply>
 8006a7e:	6020      	str	r0, [r4, #0]
 8006a80:	f8c0 9000 	str.w	r9, [r0]
 8006a84:	4604      	mov	r4, r0
 8006a86:	e7e4      	b.n	8006a52 <__pow5mult+0x6a>
 8006a88:	4630      	mov	r0, r6
 8006a8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006a8e:	bf00      	nop
 8006a90:	08009908 	.word	0x08009908
 8006a94:	08009778 	.word	0x08009778
 8006a98:	080097f8 	.word	0x080097f8

08006a9c <__lshift>:
 8006a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006aa0:	460c      	mov	r4, r1
 8006aa2:	4607      	mov	r7, r0
 8006aa4:	4691      	mov	r9, r2
 8006aa6:	6923      	ldr	r3, [r4, #16]
 8006aa8:	6849      	ldr	r1, [r1, #4]
 8006aaa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8006aae:	68a3      	ldr	r3, [r4, #8]
 8006ab0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006ab4:	f108 0601 	add.w	r6, r8, #1
 8006ab8:	42b3      	cmp	r3, r6
 8006aba:	db0b      	blt.n	8006ad4 <__lshift+0x38>
 8006abc:	4638      	mov	r0, r7
 8006abe:	f7ff fd9d 	bl	80065fc <_Balloc>
 8006ac2:	4605      	mov	r5, r0
 8006ac4:	b948      	cbnz	r0, 8006ada <__lshift+0x3e>
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8006acc:	4b27      	ldr	r3, [pc, #156]	@ (8006b6c <__lshift+0xd0>)
 8006ace:	4828      	ldr	r0, [pc, #160]	@ (8006b70 <__lshift+0xd4>)
 8006ad0:	f001 fcf8 	bl	80084c4 <__assert_func>
 8006ad4:	3101      	adds	r1, #1
 8006ad6:	005b      	lsls	r3, r3, #1
 8006ad8:	e7ee      	b.n	8006ab8 <__lshift+0x1c>
 8006ada:	2300      	movs	r3, #0
 8006adc:	f100 0114 	add.w	r1, r0, #20
 8006ae0:	f100 0210 	add.w	r2, r0, #16
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	4553      	cmp	r3, sl
 8006ae8:	db33      	blt.n	8006b52 <__lshift+0xb6>
 8006aea:	6920      	ldr	r0, [r4, #16]
 8006aec:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006af0:	f104 0314 	add.w	r3, r4, #20
 8006af4:	f019 091f 	ands.w	r9, r9, #31
 8006af8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006afc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006b00:	d02b      	beq.n	8006b5a <__lshift+0xbe>
 8006b02:	468a      	mov	sl, r1
 8006b04:	2200      	movs	r2, #0
 8006b06:	f1c9 0e20 	rsb	lr, r9, #32
 8006b0a:	6818      	ldr	r0, [r3, #0]
 8006b0c:	fa00 f009 	lsl.w	r0, r0, r9
 8006b10:	4310      	orrs	r0, r2
 8006b12:	f84a 0b04 	str.w	r0, [sl], #4
 8006b16:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b1a:	459c      	cmp	ip, r3
 8006b1c:	fa22 f20e 	lsr.w	r2, r2, lr
 8006b20:	d8f3      	bhi.n	8006b0a <__lshift+0x6e>
 8006b22:	ebac 0304 	sub.w	r3, ip, r4
 8006b26:	3b15      	subs	r3, #21
 8006b28:	f023 0303 	bic.w	r3, r3, #3
 8006b2c:	3304      	adds	r3, #4
 8006b2e:	f104 0015 	add.w	r0, r4, #21
 8006b32:	4560      	cmp	r0, ip
 8006b34:	bf88      	it	hi
 8006b36:	2304      	movhi	r3, #4
 8006b38:	50ca      	str	r2, [r1, r3]
 8006b3a:	b10a      	cbz	r2, 8006b40 <__lshift+0xa4>
 8006b3c:	f108 0602 	add.w	r6, r8, #2
 8006b40:	3e01      	subs	r6, #1
 8006b42:	4638      	mov	r0, r7
 8006b44:	4621      	mov	r1, r4
 8006b46:	612e      	str	r6, [r5, #16]
 8006b48:	f7ff fd98 	bl	800667c <_Bfree>
 8006b4c:	4628      	mov	r0, r5
 8006b4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b52:	f842 0f04 	str.w	r0, [r2, #4]!
 8006b56:	3301      	adds	r3, #1
 8006b58:	e7c5      	b.n	8006ae6 <__lshift+0x4a>
 8006b5a:	3904      	subs	r1, #4
 8006b5c:	f853 2b04 	ldr.w	r2, [r3], #4
 8006b60:	459c      	cmp	ip, r3
 8006b62:	f841 2f04 	str.w	r2, [r1, #4]!
 8006b66:	d8f9      	bhi.n	8006b5c <__lshift+0xc0>
 8006b68:	e7ea      	b.n	8006b40 <__lshift+0xa4>
 8006b6a:	bf00      	nop
 8006b6c:	080097e7 	.word	0x080097e7
 8006b70:	080097f8 	.word	0x080097f8

08006b74 <__mcmp>:
 8006b74:	4603      	mov	r3, r0
 8006b76:	690a      	ldr	r2, [r1, #16]
 8006b78:	6900      	ldr	r0, [r0, #16]
 8006b7a:	b530      	push	{r4, r5, lr}
 8006b7c:	1a80      	subs	r0, r0, r2
 8006b7e:	d10e      	bne.n	8006b9e <__mcmp+0x2a>
 8006b80:	3314      	adds	r3, #20
 8006b82:	3114      	adds	r1, #20
 8006b84:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006b88:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8006b8c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006b90:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006b94:	4295      	cmp	r5, r2
 8006b96:	d003      	beq.n	8006ba0 <__mcmp+0x2c>
 8006b98:	d205      	bcs.n	8006ba6 <__mcmp+0x32>
 8006b9a:	f04f 30ff 	mov.w	r0, #4294967295
 8006b9e:	bd30      	pop	{r4, r5, pc}
 8006ba0:	42a3      	cmp	r3, r4
 8006ba2:	d3f3      	bcc.n	8006b8c <__mcmp+0x18>
 8006ba4:	e7fb      	b.n	8006b9e <__mcmp+0x2a>
 8006ba6:	2001      	movs	r0, #1
 8006ba8:	e7f9      	b.n	8006b9e <__mcmp+0x2a>
	...

08006bac <__mdiff>:
 8006bac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bb0:	4689      	mov	r9, r1
 8006bb2:	4606      	mov	r6, r0
 8006bb4:	4611      	mov	r1, r2
 8006bb6:	4648      	mov	r0, r9
 8006bb8:	4614      	mov	r4, r2
 8006bba:	f7ff ffdb 	bl	8006b74 <__mcmp>
 8006bbe:	1e05      	subs	r5, r0, #0
 8006bc0:	d112      	bne.n	8006be8 <__mdiff+0x3c>
 8006bc2:	4629      	mov	r1, r5
 8006bc4:	4630      	mov	r0, r6
 8006bc6:	f7ff fd19 	bl	80065fc <_Balloc>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	b928      	cbnz	r0, 8006bda <__mdiff+0x2e>
 8006bce:	f240 2137 	movw	r1, #567	@ 0x237
 8006bd2:	4b3e      	ldr	r3, [pc, #248]	@ (8006ccc <__mdiff+0x120>)
 8006bd4:	483e      	ldr	r0, [pc, #248]	@ (8006cd0 <__mdiff+0x124>)
 8006bd6:	f001 fc75 	bl	80084c4 <__assert_func>
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8006be0:	4610      	mov	r0, r2
 8006be2:	b003      	add	sp, #12
 8006be4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006be8:	bfbc      	itt	lt
 8006bea:	464b      	movlt	r3, r9
 8006bec:	46a1      	movlt	r9, r4
 8006bee:	4630      	mov	r0, r6
 8006bf0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006bf4:	bfba      	itte	lt
 8006bf6:	461c      	movlt	r4, r3
 8006bf8:	2501      	movlt	r5, #1
 8006bfa:	2500      	movge	r5, #0
 8006bfc:	f7ff fcfe 	bl	80065fc <_Balloc>
 8006c00:	4602      	mov	r2, r0
 8006c02:	b918      	cbnz	r0, 8006c0c <__mdiff+0x60>
 8006c04:	f240 2145 	movw	r1, #581	@ 0x245
 8006c08:	4b30      	ldr	r3, [pc, #192]	@ (8006ccc <__mdiff+0x120>)
 8006c0a:	e7e3      	b.n	8006bd4 <__mdiff+0x28>
 8006c0c:	f100 0b14 	add.w	fp, r0, #20
 8006c10:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8006c14:	f109 0310 	add.w	r3, r9, #16
 8006c18:	60c5      	str	r5, [r0, #12]
 8006c1a:	f04f 0c00 	mov.w	ip, #0
 8006c1e:	f109 0514 	add.w	r5, r9, #20
 8006c22:	46d9      	mov	r9, fp
 8006c24:	6926      	ldr	r6, [r4, #16]
 8006c26:	f104 0e14 	add.w	lr, r4, #20
 8006c2a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8006c2e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8006c32:	9301      	str	r3, [sp, #4]
 8006c34:	9b01      	ldr	r3, [sp, #4]
 8006c36:	f85e 0b04 	ldr.w	r0, [lr], #4
 8006c3a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8006c3e:	b281      	uxth	r1, r0
 8006c40:	9301      	str	r3, [sp, #4]
 8006c42:	fa1f f38a 	uxth.w	r3, sl
 8006c46:	1a5b      	subs	r3, r3, r1
 8006c48:	0c00      	lsrs	r0, r0, #16
 8006c4a:	4463      	add	r3, ip
 8006c4c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8006c50:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8006c5a:	4576      	cmp	r6, lr
 8006c5c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006c60:	f849 3b04 	str.w	r3, [r9], #4
 8006c64:	d8e6      	bhi.n	8006c34 <__mdiff+0x88>
 8006c66:	1b33      	subs	r3, r6, r4
 8006c68:	3b15      	subs	r3, #21
 8006c6a:	f023 0303 	bic.w	r3, r3, #3
 8006c6e:	3415      	adds	r4, #21
 8006c70:	3304      	adds	r3, #4
 8006c72:	42a6      	cmp	r6, r4
 8006c74:	bf38      	it	cc
 8006c76:	2304      	movcc	r3, #4
 8006c78:	441d      	add	r5, r3
 8006c7a:	445b      	add	r3, fp
 8006c7c:	461e      	mov	r6, r3
 8006c7e:	462c      	mov	r4, r5
 8006c80:	4544      	cmp	r4, r8
 8006c82:	d30e      	bcc.n	8006ca2 <__mdiff+0xf6>
 8006c84:	f108 0103 	add.w	r1, r8, #3
 8006c88:	1b49      	subs	r1, r1, r5
 8006c8a:	f021 0103 	bic.w	r1, r1, #3
 8006c8e:	3d03      	subs	r5, #3
 8006c90:	45a8      	cmp	r8, r5
 8006c92:	bf38      	it	cc
 8006c94:	2100      	movcc	r1, #0
 8006c96:	440b      	add	r3, r1
 8006c98:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006c9c:	b199      	cbz	r1, 8006cc6 <__mdiff+0x11a>
 8006c9e:	6117      	str	r7, [r2, #16]
 8006ca0:	e79e      	b.n	8006be0 <__mdiff+0x34>
 8006ca2:	46e6      	mov	lr, ip
 8006ca4:	f854 1b04 	ldr.w	r1, [r4], #4
 8006ca8:	fa1f fc81 	uxth.w	ip, r1
 8006cac:	44f4      	add	ip, lr
 8006cae:	0c08      	lsrs	r0, r1, #16
 8006cb0:	4471      	add	r1, lr
 8006cb2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8006cb6:	b289      	uxth	r1, r1
 8006cb8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8006cbc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8006cc0:	f846 1b04 	str.w	r1, [r6], #4
 8006cc4:	e7dc      	b.n	8006c80 <__mdiff+0xd4>
 8006cc6:	3f01      	subs	r7, #1
 8006cc8:	e7e6      	b.n	8006c98 <__mdiff+0xec>
 8006cca:	bf00      	nop
 8006ccc:	080097e7 	.word	0x080097e7
 8006cd0:	080097f8 	.word	0x080097f8

08006cd4 <__ulp>:
 8006cd4:	4b0e      	ldr	r3, [pc, #56]	@ (8006d10 <__ulp+0x3c>)
 8006cd6:	400b      	ands	r3, r1
 8006cd8:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	dc08      	bgt.n	8006cf2 <__ulp+0x1e>
 8006ce0:	425b      	negs	r3, r3
 8006ce2:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8006ce6:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006cea:	da04      	bge.n	8006cf6 <__ulp+0x22>
 8006cec:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8006cf0:	4113      	asrs	r3, r2
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	e008      	b.n	8006d08 <__ulp+0x34>
 8006cf6:	f1a2 0314 	sub.w	r3, r2, #20
 8006cfa:	2b1e      	cmp	r3, #30
 8006cfc:	bfd6      	itet	le
 8006cfe:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8006d02:	2201      	movgt	r2, #1
 8006d04:	40da      	lsrle	r2, r3
 8006d06:	2300      	movs	r3, #0
 8006d08:	4619      	mov	r1, r3
 8006d0a:	4610      	mov	r0, r2
 8006d0c:	4770      	bx	lr
 8006d0e:	bf00      	nop
 8006d10:	7ff00000 	.word	0x7ff00000

08006d14 <__b2d>:
 8006d14:	6902      	ldr	r2, [r0, #16]
 8006d16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d18:	f100 0614 	add.w	r6, r0, #20
 8006d1c:	eb06 0282 	add.w	r2, r6, r2, lsl #2
 8006d20:	f852 4c04 	ldr.w	r4, [r2, #-4]
 8006d24:	4f1e      	ldr	r7, [pc, #120]	@ (8006da0 <__b2d+0x8c>)
 8006d26:	4620      	mov	r0, r4
 8006d28:	f7ff fd5a 	bl	80067e0 <__hi0bits>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	f1c0 0020 	rsb	r0, r0, #32
 8006d32:	2b0a      	cmp	r3, #10
 8006d34:	f1a2 0504 	sub.w	r5, r2, #4
 8006d38:	6008      	str	r0, [r1, #0]
 8006d3a:	dc12      	bgt.n	8006d62 <__b2d+0x4e>
 8006d3c:	42ae      	cmp	r6, r5
 8006d3e:	bf2c      	ite	cs
 8006d40:	2200      	movcs	r2, #0
 8006d42:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8006d46:	f1c3 0c0b 	rsb	ip, r3, #11
 8006d4a:	3315      	adds	r3, #21
 8006d4c:	fa24 fe0c 	lsr.w	lr, r4, ip
 8006d50:	fa04 f303 	lsl.w	r3, r4, r3
 8006d54:	fa22 f20c 	lsr.w	r2, r2, ip
 8006d58:	ea4e 0107 	orr.w	r1, lr, r7
 8006d5c:	431a      	orrs	r2, r3
 8006d5e:	4610      	mov	r0, r2
 8006d60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d62:	42ae      	cmp	r6, r5
 8006d64:	bf36      	itet	cc
 8006d66:	f1a2 0508 	subcc.w	r5, r2, #8
 8006d6a:	2200      	movcs	r2, #0
 8006d6c:	f852 2c08 	ldrcc.w	r2, [r2, #-8]
 8006d70:	3b0b      	subs	r3, #11
 8006d72:	d012      	beq.n	8006d9a <__b2d+0x86>
 8006d74:	f1c3 0720 	rsb	r7, r3, #32
 8006d78:	fa22 f107 	lsr.w	r1, r2, r7
 8006d7c:	409c      	lsls	r4, r3
 8006d7e:	430c      	orrs	r4, r1
 8006d80:	42b5      	cmp	r5, r6
 8006d82:	f044 517f 	orr.w	r1, r4, #1069547520	@ 0x3fc00000
 8006d86:	bf94      	ite	ls
 8006d88:	2400      	movls	r4, #0
 8006d8a:	f855 4c04 	ldrhi.w	r4, [r5, #-4]
 8006d8e:	409a      	lsls	r2, r3
 8006d90:	40fc      	lsrs	r4, r7
 8006d92:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 8006d96:	4322      	orrs	r2, r4
 8006d98:	e7e1      	b.n	8006d5e <__b2d+0x4a>
 8006d9a:	ea44 0107 	orr.w	r1, r4, r7
 8006d9e:	e7de      	b.n	8006d5e <__b2d+0x4a>
 8006da0:	3ff00000 	.word	0x3ff00000

08006da4 <__d2b>:
 8006da4:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8006da8:	2101      	movs	r1, #1
 8006daa:	4690      	mov	r8, r2
 8006dac:	4699      	mov	r9, r3
 8006dae:	9e08      	ldr	r6, [sp, #32]
 8006db0:	f7ff fc24 	bl	80065fc <_Balloc>
 8006db4:	4604      	mov	r4, r0
 8006db6:	b930      	cbnz	r0, 8006dc6 <__d2b+0x22>
 8006db8:	4602      	mov	r2, r0
 8006dba:	f240 310f 	movw	r1, #783	@ 0x30f
 8006dbe:	4b23      	ldr	r3, [pc, #140]	@ (8006e4c <__d2b+0xa8>)
 8006dc0:	4823      	ldr	r0, [pc, #140]	@ (8006e50 <__d2b+0xac>)
 8006dc2:	f001 fb7f 	bl	80084c4 <__assert_func>
 8006dc6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8006dca:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8006dce:	b10d      	cbz	r5, 8006dd4 <__d2b+0x30>
 8006dd0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006dd4:	9301      	str	r3, [sp, #4]
 8006dd6:	f1b8 0300 	subs.w	r3, r8, #0
 8006dda:	d024      	beq.n	8006e26 <__d2b+0x82>
 8006ddc:	4668      	mov	r0, sp
 8006dde:	9300      	str	r3, [sp, #0]
 8006de0:	f7ff fd1d 	bl	800681e <__lo0bits>
 8006de4:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006de8:	b1d8      	cbz	r0, 8006e22 <__d2b+0x7e>
 8006dea:	f1c0 0320 	rsb	r3, r0, #32
 8006dee:	fa02 f303 	lsl.w	r3, r2, r3
 8006df2:	430b      	orrs	r3, r1
 8006df4:	40c2      	lsrs	r2, r0
 8006df6:	6163      	str	r3, [r4, #20]
 8006df8:	9201      	str	r2, [sp, #4]
 8006dfa:	9b01      	ldr	r3, [sp, #4]
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	bf0c      	ite	eq
 8006e00:	2201      	moveq	r2, #1
 8006e02:	2202      	movne	r2, #2
 8006e04:	61a3      	str	r3, [r4, #24]
 8006e06:	6122      	str	r2, [r4, #16]
 8006e08:	b1ad      	cbz	r5, 8006e36 <__d2b+0x92>
 8006e0a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8006e0e:	4405      	add	r5, r0
 8006e10:	6035      	str	r5, [r6, #0]
 8006e12:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8006e16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006e18:	6018      	str	r0, [r3, #0]
 8006e1a:	4620      	mov	r0, r4
 8006e1c:	b002      	add	sp, #8
 8006e1e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8006e22:	6161      	str	r1, [r4, #20]
 8006e24:	e7e9      	b.n	8006dfa <__d2b+0x56>
 8006e26:	a801      	add	r0, sp, #4
 8006e28:	f7ff fcf9 	bl	800681e <__lo0bits>
 8006e2c:	9b01      	ldr	r3, [sp, #4]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	6163      	str	r3, [r4, #20]
 8006e32:	3020      	adds	r0, #32
 8006e34:	e7e7      	b.n	8006e06 <__d2b+0x62>
 8006e36:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8006e3a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8006e3e:	6030      	str	r0, [r6, #0]
 8006e40:	6918      	ldr	r0, [r3, #16]
 8006e42:	f7ff fccd 	bl	80067e0 <__hi0bits>
 8006e46:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8006e4a:	e7e4      	b.n	8006e16 <__d2b+0x72>
 8006e4c:	080097e7 	.word	0x080097e7
 8006e50:	080097f8 	.word	0x080097f8

08006e54 <__ratio>:
 8006e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e58:	b085      	sub	sp, #20
 8006e5a:	e9cd 1000 	strd	r1, r0, [sp]
 8006e5e:	a902      	add	r1, sp, #8
 8006e60:	f7ff ff58 	bl	8006d14 <__b2d>
 8006e64:	468b      	mov	fp, r1
 8006e66:	4606      	mov	r6, r0
 8006e68:	460f      	mov	r7, r1
 8006e6a:	9800      	ldr	r0, [sp, #0]
 8006e6c:	a903      	add	r1, sp, #12
 8006e6e:	f7ff ff51 	bl	8006d14 <__b2d>
 8006e72:	460d      	mov	r5, r1
 8006e74:	9b01      	ldr	r3, [sp, #4]
 8006e76:	4689      	mov	r9, r1
 8006e78:	6919      	ldr	r1, [r3, #16]
 8006e7a:	9b00      	ldr	r3, [sp, #0]
 8006e7c:	4604      	mov	r4, r0
 8006e7e:	691b      	ldr	r3, [r3, #16]
 8006e80:	4630      	mov	r0, r6
 8006e82:	1ac9      	subs	r1, r1, r3
 8006e84:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8006e88:	1a9b      	subs	r3, r3, r2
 8006e8a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	bfcd      	iteet	gt
 8006e92:	463a      	movgt	r2, r7
 8006e94:	462a      	movle	r2, r5
 8006e96:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006e9a:	eb02 5b03 	addgt.w	fp, r2, r3, lsl #20
 8006e9e:	bfd8      	it	le
 8006ea0:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8006ea4:	464b      	mov	r3, r9
 8006ea6:	4622      	mov	r2, r4
 8006ea8:	4659      	mov	r1, fp
 8006eaa:	f7f9 fc3f 	bl	800072c <__aeabi_ddiv>
 8006eae:	b005      	add	sp, #20
 8006eb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006eb4 <__copybits>:
 8006eb4:	3901      	subs	r1, #1
 8006eb6:	b570      	push	{r4, r5, r6, lr}
 8006eb8:	1149      	asrs	r1, r1, #5
 8006eba:	6914      	ldr	r4, [r2, #16]
 8006ebc:	3101      	adds	r1, #1
 8006ebe:	f102 0314 	add.w	r3, r2, #20
 8006ec2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006ec6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006eca:	1f05      	subs	r5, r0, #4
 8006ecc:	42a3      	cmp	r3, r4
 8006ece:	d30c      	bcc.n	8006eea <__copybits+0x36>
 8006ed0:	1aa3      	subs	r3, r4, r2
 8006ed2:	3b11      	subs	r3, #17
 8006ed4:	f023 0303 	bic.w	r3, r3, #3
 8006ed8:	3211      	adds	r2, #17
 8006eda:	42a2      	cmp	r2, r4
 8006edc:	bf88      	it	hi
 8006ede:	2300      	movhi	r3, #0
 8006ee0:	4418      	add	r0, r3
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	4288      	cmp	r0, r1
 8006ee6:	d305      	bcc.n	8006ef4 <__copybits+0x40>
 8006ee8:	bd70      	pop	{r4, r5, r6, pc}
 8006eea:	f853 6b04 	ldr.w	r6, [r3], #4
 8006eee:	f845 6f04 	str.w	r6, [r5, #4]!
 8006ef2:	e7eb      	b.n	8006ecc <__copybits+0x18>
 8006ef4:	f840 3b04 	str.w	r3, [r0], #4
 8006ef8:	e7f4      	b.n	8006ee4 <__copybits+0x30>

08006efa <__any_on>:
 8006efa:	f100 0214 	add.w	r2, r0, #20
 8006efe:	6900      	ldr	r0, [r0, #16]
 8006f00:	114b      	asrs	r3, r1, #5
 8006f02:	4298      	cmp	r0, r3
 8006f04:	b510      	push	{r4, lr}
 8006f06:	db11      	blt.n	8006f2c <__any_on+0x32>
 8006f08:	dd0a      	ble.n	8006f20 <__any_on+0x26>
 8006f0a:	f011 011f 	ands.w	r1, r1, #31
 8006f0e:	d007      	beq.n	8006f20 <__any_on+0x26>
 8006f10:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006f14:	fa24 f001 	lsr.w	r0, r4, r1
 8006f18:	fa00 f101 	lsl.w	r1, r0, r1
 8006f1c:	428c      	cmp	r4, r1
 8006f1e:	d10b      	bne.n	8006f38 <__any_on+0x3e>
 8006f20:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006f24:	4293      	cmp	r3, r2
 8006f26:	d803      	bhi.n	8006f30 <__any_on+0x36>
 8006f28:	2000      	movs	r0, #0
 8006f2a:	bd10      	pop	{r4, pc}
 8006f2c:	4603      	mov	r3, r0
 8006f2e:	e7f7      	b.n	8006f20 <__any_on+0x26>
 8006f30:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006f34:	2900      	cmp	r1, #0
 8006f36:	d0f5      	beq.n	8006f24 <__any_on+0x2a>
 8006f38:	2001      	movs	r0, #1
 8006f3a:	e7f6      	b.n	8006f2a <__any_on+0x30>

08006f3c <sulp>:
 8006f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f40:	460f      	mov	r7, r1
 8006f42:	4690      	mov	r8, r2
 8006f44:	f7ff fec6 	bl	8006cd4 <__ulp>
 8006f48:	4604      	mov	r4, r0
 8006f4a:	460d      	mov	r5, r1
 8006f4c:	f1b8 0f00 	cmp.w	r8, #0
 8006f50:	d011      	beq.n	8006f76 <sulp+0x3a>
 8006f52:	f3c7 530a 	ubfx	r3, r7, #20, #11
 8006f56:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	dd0b      	ble.n	8006f76 <sulp+0x3a>
 8006f5e:	2400      	movs	r4, #0
 8006f60:	051b      	lsls	r3, r3, #20
 8006f62:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8006f66:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8006f6a:	4622      	mov	r2, r4
 8006f6c:	462b      	mov	r3, r5
 8006f6e:	f7f9 fab3 	bl	80004d8 <__aeabi_dmul>
 8006f72:	4604      	mov	r4, r0
 8006f74:	460d      	mov	r5, r1
 8006f76:	4620      	mov	r0, r4
 8006f78:	4629      	mov	r1, r5
 8006f7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08006f80 <_strtod_l>:
 8006f80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f84:	b09f      	sub	sp, #124	@ 0x7c
 8006f86:	9217      	str	r2, [sp, #92]	@ 0x5c
 8006f88:	2200      	movs	r2, #0
 8006f8a:	460c      	mov	r4, r1
 8006f8c:	921a      	str	r2, [sp, #104]	@ 0x68
 8006f8e:	f04f 0a00 	mov.w	sl, #0
 8006f92:	f04f 0b00 	mov.w	fp, #0
 8006f96:	460a      	mov	r2, r1
 8006f98:	9005      	str	r0, [sp, #20]
 8006f9a:	9219      	str	r2, [sp, #100]	@ 0x64
 8006f9c:	7811      	ldrb	r1, [r2, #0]
 8006f9e:	292b      	cmp	r1, #43	@ 0x2b
 8006fa0:	d048      	beq.n	8007034 <_strtod_l+0xb4>
 8006fa2:	d836      	bhi.n	8007012 <_strtod_l+0x92>
 8006fa4:	290d      	cmp	r1, #13
 8006fa6:	d830      	bhi.n	800700a <_strtod_l+0x8a>
 8006fa8:	2908      	cmp	r1, #8
 8006faa:	d830      	bhi.n	800700e <_strtod_l+0x8e>
 8006fac:	2900      	cmp	r1, #0
 8006fae:	d039      	beq.n	8007024 <_strtod_l+0xa4>
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	920e      	str	r2, [sp, #56]	@ 0x38
 8006fb4:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8006fb6:	782a      	ldrb	r2, [r5, #0]
 8006fb8:	2a30      	cmp	r2, #48	@ 0x30
 8006fba:	f040 80b0 	bne.w	800711e <_strtod_l+0x19e>
 8006fbe:	786a      	ldrb	r2, [r5, #1]
 8006fc0:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8006fc4:	2a58      	cmp	r2, #88	@ 0x58
 8006fc6:	d16c      	bne.n	80070a2 <_strtod_l+0x122>
 8006fc8:	9302      	str	r3, [sp, #8]
 8006fca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006fcc:	4a8f      	ldr	r2, [pc, #572]	@ (800720c <_strtod_l+0x28c>)
 8006fce:	9301      	str	r3, [sp, #4]
 8006fd0:	ab1a      	add	r3, sp, #104	@ 0x68
 8006fd2:	9300      	str	r3, [sp, #0]
 8006fd4:	9805      	ldr	r0, [sp, #20]
 8006fd6:	ab1b      	add	r3, sp, #108	@ 0x6c
 8006fd8:	a919      	add	r1, sp, #100	@ 0x64
 8006fda:	f001 fb0d 	bl	80085f8 <__gethex>
 8006fde:	f010 060f 	ands.w	r6, r0, #15
 8006fe2:	4604      	mov	r4, r0
 8006fe4:	d005      	beq.n	8006ff2 <_strtod_l+0x72>
 8006fe6:	2e06      	cmp	r6, #6
 8006fe8:	d126      	bne.n	8007038 <_strtod_l+0xb8>
 8006fea:	2300      	movs	r3, #0
 8006fec:	3501      	adds	r5, #1
 8006fee:	9519      	str	r5, [sp, #100]	@ 0x64
 8006ff0:	930e      	str	r3, [sp, #56]	@ 0x38
 8006ff2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	f040 8582 	bne.w	8007afe <_strtod_l+0xb7e>
 8006ffa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006ffc:	b1bb      	cbz	r3, 800702e <_strtod_l+0xae>
 8006ffe:	4650      	mov	r0, sl
 8007000:	f10b 4100 	add.w	r1, fp, #2147483648	@ 0x80000000
 8007004:	b01f      	add	sp, #124	@ 0x7c
 8007006:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800700a:	2920      	cmp	r1, #32
 800700c:	d1d0      	bne.n	8006fb0 <_strtod_l+0x30>
 800700e:	3201      	adds	r2, #1
 8007010:	e7c3      	b.n	8006f9a <_strtod_l+0x1a>
 8007012:	292d      	cmp	r1, #45	@ 0x2d
 8007014:	d1cc      	bne.n	8006fb0 <_strtod_l+0x30>
 8007016:	2101      	movs	r1, #1
 8007018:	910e      	str	r1, [sp, #56]	@ 0x38
 800701a:	1c51      	adds	r1, r2, #1
 800701c:	9119      	str	r1, [sp, #100]	@ 0x64
 800701e:	7852      	ldrb	r2, [r2, #1]
 8007020:	2a00      	cmp	r2, #0
 8007022:	d1c7      	bne.n	8006fb4 <_strtod_l+0x34>
 8007024:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007026:	9419      	str	r4, [sp, #100]	@ 0x64
 8007028:	2b00      	cmp	r3, #0
 800702a:	f040 8566 	bne.w	8007afa <_strtod_l+0xb7a>
 800702e:	4650      	mov	r0, sl
 8007030:	4659      	mov	r1, fp
 8007032:	e7e7      	b.n	8007004 <_strtod_l+0x84>
 8007034:	2100      	movs	r1, #0
 8007036:	e7ef      	b.n	8007018 <_strtod_l+0x98>
 8007038:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800703a:	b13a      	cbz	r2, 800704c <_strtod_l+0xcc>
 800703c:	2135      	movs	r1, #53	@ 0x35
 800703e:	a81c      	add	r0, sp, #112	@ 0x70
 8007040:	f7ff ff38 	bl	8006eb4 <__copybits>
 8007044:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007046:	9805      	ldr	r0, [sp, #20]
 8007048:	f7ff fb18 	bl	800667c <_Bfree>
 800704c:	3e01      	subs	r6, #1
 800704e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8007050:	2e04      	cmp	r6, #4
 8007052:	d806      	bhi.n	8007062 <_strtod_l+0xe2>
 8007054:	e8df f006 	tbb	[pc, r6]
 8007058:	201d0314 	.word	0x201d0314
 800705c:	14          	.byte	0x14
 800705d:	00          	.byte	0x00
 800705e:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8007062:	05e1      	lsls	r1, r4, #23
 8007064:	bf48      	it	mi
 8007066:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800706a:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800706e:	0d1b      	lsrs	r3, r3, #20
 8007070:	051b      	lsls	r3, r3, #20
 8007072:	2b00      	cmp	r3, #0
 8007074:	d1bd      	bne.n	8006ff2 <_strtod_l+0x72>
 8007076:	f7fe fb25 	bl	80056c4 <__errno>
 800707a:	2322      	movs	r3, #34	@ 0x22
 800707c:	6003      	str	r3, [r0, #0]
 800707e:	e7b8      	b.n	8006ff2 <_strtod_l+0x72>
 8007080:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8007084:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8007088:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800708c:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8007090:	e7e7      	b.n	8007062 <_strtod_l+0xe2>
 8007092:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8007210 <_strtod_l+0x290>
 8007096:	e7e4      	b.n	8007062 <_strtod_l+0xe2>
 8007098:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800709c:	f04f 3aff 	mov.w	sl, #4294967295
 80070a0:	e7df      	b.n	8007062 <_strtod_l+0xe2>
 80070a2:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80070a4:	1c5a      	adds	r2, r3, #1
 80070a6:	9219      	str	r2, [sp, #100]	@ 0x64
 80070a8:	785b      	ldrb	r3, [r3, #1]
 80070aa:	2b30      	cmp	r3, #48	@ 0x30
 80070ac:	d0f9      	beq.n	80070a2 <_strtod_l+0x122>
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d09f      	beq.n	8006ff2 <_strtod_l+0x72>
 80070b2:	2301      	movs	r3, #1
 80070b4:	2700      	movs	r7, #0
 80070b6:	220a      	movs	r2, #10
 80070b8:	46b9      	mov	r9, r7
 80070ba:	9308      	str	r3, [sp, #32]
 80070bc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80070be:	970b      	str	r7, [sp, #44]	@ 0x2c
 80070c0:	930c      	str	r3, [sp, #48]	@ 0x30
 80070c2:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80070c4:	7805      	ldrb	r5, [r0, #0]
 80070c6:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80070ca:	b2d9      	uxtb	r1, r3
 80070cc:	2909      	cmp	r1, #9
 80070ce:	d928      	bls.n	8007122 <_strtod_l+0x1a2>
 80070d0:	2201      	movs	r2, #1
 80070d2:	4950      	ldr	r1, [pc, #320]	@ (8007214 <_strtod_l+0x294>)
 80070d4:	f001 f99d 	bl	8008412 <strncmp>
 80070d8:	2800      	cmp	r0, #0
 80070da:	d032      	beq.n	8007142 <_strtod_l+0x1c2>
 80070dc:	2000      	movs	r0, #0
 80070de:	462a      	mov	r2, r5
 80070e0:	4603      	mov	r3, r0
 80070e2:	464d      	mov	r5, r9
 80070e4:	900a      	str	r0, [sp, #40]	@ 0x28
 80070e6:	2a65      	cmp	r2, #101	@ 0x65
 80070e8:	d001      	beq.n	80070ee <_strtod_l+0x16e>
 80070ea:	2a45      	cmp	r2, #69	@ 0x45
 80070ec:	d114      	bne.n	8007118 <_strtod_l+0x198>
 80070ee:	b91d      	cbnz	r5, 80070f8 <_strtod_l+0x178>
 80070f0:	9a08      	ldr	r2, [sp, #32]
 80070f2:	4302      	orrs	r2, r0
 80070f4:	d096      	beq.n	8007024 <_strtod_l+0xa4>
 80070f6:	2500      	movs	r5, #0
 80070f8:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80070fa:	1c62      	adds	r2, r4, #1
 80070fc:	9219      	str	r2, [sp, #100]	@ 0x64
 80070fe:	7862      	ldrb	r2, [r4, #1]
 8007100:	2a2b      	cmp	r2, #43	@ 0x2b
 8007102:	d07a      	beq.n	80071fa <_strtod_l+0x27a>
 8007104:	2a2d      	cmp	r2, #45	@ 0x2d
 8007106:	d07e      	beq.n	8007206 <_strtod_l+0x286>
 8007108:	f04f 0c00 	mov.w	ip, #0
 800710c:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8007110:	2909      	cmp	r1, #9
 8007112:	f240 8085 	bls.w	8007220 <_strtod_l+0x2a0>
 8007116:	9419      	str	r4, [sp, #100]	@ 0x64
 8007118:	f04f 0800 	mov.w	r8, #0
 800711c:	e0a5      	b.n	800726a <_strtod_l+0x2ea>
 800711e:	2300      	movs	r3, #0
 8007120:	e7c8      	b.n	80070b4 <_strtod_l+0x134>
 8007122:	f1b9 0f08 	cmp.w	r9, #8
 8007126:	bfd8      	it	le
 8007128:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800712a:	f100 0001 	add.w	r0, r0, #1
 800712e:	bfd6      	itet	le
 8007130:	fb02 3301 	mlale	r3, r2, r1, r3
 8007134:	fb02 3707 	mlagt	r7, r2, r7, r3
 8007138:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800713a:	f109 0901 	add.w	r9, r9, #1
 800713e:	9019      	str	r0, [sp, #100]	@ 0x64
 8007140:	e7bf      	b.n	80070c2 <_strtod_l+0x142>
 8007142:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007144:	1c5a      	adds	r2, r3, #1
 8007146:	9219      	str	r2, [sp, #100]	@ 0x64
 8007148:	785a      	ldrb	r2, [r3, #1]
 800714a:	f1b9 0f00 	cmp.w	r9, #0
 800714e:	d03b      	beq.n	80071c8 <_strtod_l+0x248>
 8007150:	464d      	mov	r5, r9
 8007152:	900a      	str	r0, [sp, #40]	@ 0x28
 8007154:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8007158:	2b09      	cmp	r3, #9
 800715a:	d912      	bls.n	8007182 <_strtod_l+0x202>
 800715c:	2301      	movs	r3, #1
 800715e:	e7c2      	b.n	80070e6 <_strtod_l+0x166>
 8007160:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007162:	3001      	adds	r0, #1
 8007164:	1c5a      	adds	r2, r3, #1
 8007166:	9219      	str	r2, [sp, #100]	@ 0x64
 8007168:	785a      	ldrb	r2, [r3, #1]
 800716a:	2a30      	cmp	r2, #48	@ 0x30
 800716c:	d0f8      	beq.n	8007160 <_strtod_l+0x1e0>
 800716e:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8007172:	2b08      	cmp	r3, #8
 8007174:	f200 84c8 	bhi.w	8007b08 <_strtod_l+0xb88>
 8007178:	900a      	str	r0, [sp, #40]	@ 0x28
 800717a:	2000      	movs	r0, #0
 800717c:	4605      	mov	r5, r0
 800717e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007180:	930c      	str	r3, [sp, #48]	@ 0x30
 8007182:	3a30      	subs	r2, #48	@ 0x30
 8007184:	f100 0301 	add.w	r3, r0, #1
 8007188:	d018      	beq.n	80071bc <_strtod_l+0x23c>
 800718a:	462e      	mov	r6, r5
 800718c:	f04f 0e0a 	mov.w	lr, #10
 8007190:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007192:	4419      	add	r1, r3
 8007194:	910a      	str	r1, [sp, #40]	@ 0x28
 8007196:	1c71      	adds	r1, r6, #1
 8007198:	eba1 0c05 	sub.w	ip, r1, r5
 800719c:	4563      	cmp	r3, ip
 800719e:	dc15      	bgt.n	80071cc <_strtod_l+0x24c>
 80071a0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80071a4:	182b      	adds	r3, r5, r0
 80071a6:	2b08      	cmp	r3, #8
 80071a8:	f105 0501 	add.w	r5, r5, #1
 80071ac:	4405      	add	r5, r0
 80071ae:	dc1a      	bgt.n	80071e6 <_strtod_l+0x266>
 80071b0:	230a      	movs	r3, #10
 80071b2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80071b4:	fb03 2301 	mla	r3, r3, r1, r2
 80071b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80071ba:	2300      	movs	r3, #0
 80071bc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80071be:	4618      	mov	r0, r3
 80071c0:	1c51      	adds	r1, r2, #1
 80071c2:	9119      	str	r1, [sp, #100]	@ 0x64
 80071c4:	7852      	ldrb	r2, [r2, #1]
 80071c6:	e7c5      	b.n	8007154 <_strtod_l+0x1d4>
 80071c8:	4648      	mov	r0, r9
 80071ca:	e7ce      	b.n	800716a <_strtod_l+0x1ea>
 80071cc:	2e08      	cmp	r6, #8
 80071ce:	dc05      	bgt.n	80071dc <_strtod_l+0x25c>
 80071d0:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80071d2:	fb0e f606 	mul.w	r6, lr, r6
 80071d6:	960b      	str	r6, [sp, #44]	@ 0x2c
 80071d8:	460e      	mov	r6, r1
 80071da:	e7dc      	b.n	8007196 <_strtod_l+0x216>
 80071dc:	2910      	cmp	r1, #16
 80071de:	bfd8      	it	le
 80071e0:	fb0e f707 	mulle.w	r7, lr, r7
 80071e4:	e7f8      	b.n	80071d8 <_strtod_l+0x258>
 80071e6:	2b0f      	cmp	r3, #15
 80071e8:	bfdc      	itt	le
 80071ea:	230a      	movle	r3, #10
 80071ec:	fb03 2707 	mlale	r7, r3, r7, r2
 80071f0:	e7e3      	b.n	80071ba <_strtod_l+0x23a>
 80071f2:	2300      	movs	r3, #0
 80071f4:	930a      	str	r3, [sp, #40]	@ 0x28
 80071f6:	2301      	movs	r3, #1
 80071f8:	e77a      	b.n	80070f0 <_strtod_l+0x170>
 80071fa:	f04f 0c00 	mov.w	ip, #0
 80071fe:	1ca2      	adds	r2, r4, #2
 8007200:	9219      	str	r2, [sp, #100]	@ 0x64
 8007202:	78a2      	ldrb	r2, [r4, #2]
 8007204:	e782      	b.n	800710c <_strtod_l+0x18c>
 8007206:	f04f 0c01 	mov.w	ip, #1
 800720a:	e7f8      	b.n	80071fe <_strtod_l+0x27e>
 800720c:	08009a1c 	.word	0x08009a1c
 8007210:	7ff00000 	.word	0x7ff00000
 8007214:	08009851 	.word	0x08009851
 8007218:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800721a:	1c51      	adds	r1, r2, #1
 800721c:	9119      	str	r1, [sp, #100]	@ 0x64
 800721e:	7852      	ldrb	r2, [r2, #1]
 8007220:	2a30      	cmp	r2, #48	@ 0x30
 8007222:	d0f9      	beq.n	8007218 <_strtod_l+0x298>
 8007224:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8007228:	2908      	cmp	r1, #8
 800722a:	f63f af75 	bhi.w	8007118 <_strtod_l+0x198>
 800722e:	f04f 080a 	mov.w	r8, #10
 8007232:	3a30      	subs	r2, #48	@ 0x30
 8007234:	9209      	str	r2, [sp, #36]	@ 0x24
 8007236:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8007238:	920f      	str	r2, [sp, #60]	@ 0x3c
 800723a:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800723c:	1c56      	adds	r6, r2, #1
 800723e:	9619      	str	r6, [sp, #100]	@ 0x64
 8007240:	7852      	ldrb	r2, [r2, #1]
 8007242:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8007246:	f1be 0f09 	cmp.w	lr, #9
 800724a:	d939      	bls.n	80072c0 <_strtod_l+0x340>
 800724c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800724e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8007252:	1a76      	subs	r6, r6, r1
 8007254:	2e08      	cmp	r6, #8
 8007256:	dc03      	bgt.n	8007260 <_strtod_l+0x2e0>
 8007258:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800725a:	4588      	cmp	r8, r1
 800725c:	bfa8      	it	ge
 800725e:	4688      	movge	r8, r1
 8007260:	f1bc 0f00 	cmp.w	ip, #0
 8007264:	d001      	beq.n	800726a <_strtod_l+0x2ea>
 8007266:	f1c8 0800 	rsb	r8, r8, #0
 800726a:	2d00      	cmp	r5, #0
 800726c:	d14e      	bne.n	800730c <_strtod_l+0x38c>
 800726e:	9908      	ldr	r1, [sp, #32]
 8007270:	4308      	orrs	r0, r1
 8007272:	f47f aebe 	bne.w	8006ff2 <_strtod_l+0x72>
 8007276:	2b00      	cmp	r3, #0
 8007278:	f47f aed4 	bne.w	8007024 <_strtod_l+0xa4>
 800727c:	2a69      	cmp	r2, #105	@ 0x69
 800727e:	d028      	beq.n	80072d2 <_strtod_l+0x352>
 8007280:	dc25      	bgt.n	80072ce <_strtod_l+0x34e>
 8007282:	2a49      	cmp	r2, #73	@ 0x49
 8007284:	d025      	beq.n	80072d2 <_strtod_l+0x352>
 8007286:	2a4e      	cmp	r2, #78	@ 0x4e
 8007288:	f47f aecc 	bne.w	8007024 <_strtod_l+0xa4>
 800728c:	4999      	ldr	r1, [pc, #612]	@ (80074f4 <_strtod_l+0x574>)
 800728e:	a819      	add	r0, sp, #100	@ 0x64
 8007290:	f001 fbd4 	bl	8008a3c <__match>
 8007294:	2800      	cmp	r0, #0
 8007296:	f43f aec5 	beq.w	8007024 <_strtod_l+0xa4>
 800729a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800729c:	781b      	ldrb	r3, [r3, #0]
 800729e:	2b28      	cmp	r3, #40	@ 0x28
 80072a0:	d12e      	bne.n	8007300 <_strtod_l+0x380>
 80072a2:	4995      	ldr	r1, [pc, #596]	@ (80074f8 <_strtod_l+0x578>)
 80072a4:	aa1c      	add	r2, sp, #112	@ 0x70
 80072a6:	a819      	add	r0, sp, #100	@ 0x64
 80072a8:	f001 fbdc 	bl	8008a64 <__hexnan>
 80072ac:	2805      	cmp	r0, #5
 80072ae:	d127      	bne.n	8007300 <_strtod_l+0x380>
 80072b0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80072b2:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80072b6:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80072ba:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80072be:	e698      	b.n	8006ff2 <_strtod_l+0x72>
 80072c0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80072c2:	fb08 2101 	mla	r1, r8, r1, r2
 80072c6:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80072ca:	9209      	str	r2, [sp, #36]	@ 0x24
 80072cc:	e7b5      	b.n	800723a <_strtod_l+0x2ba>
 80072ce:	2a6e      	cmp	r2, #110	@ 0x6e
 80072d0:	e7da      	b.n	8007288 <_strtod_l+0x308>
 80072d2:	498a      	ldr	r1, [pc, #552]	@ (80074fc <_strtod_l+0x57c>)
 80072d4:	a819      	add	r0, sp, #100	@ 0x64
 80072d6:	f001 fbb1 	bl	8008a3c <__match>
 80072da:	2800      	cmp	r0, #0
 80072dc:	f43f aea2 	beq.w	8007024 <_strtod_l+0xa4>
 80072e0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80072e2:	4987      	ldr	r1, [pc, #540]	@ (8007500 <_strtod_l+0x580>)
 80072e4:	3b01      	subs	r3, #1
 80072e6:	a819      	add	r0, sp, #100	@ 0x64
 80072e8:	9319      	str	r3, [sp, #100]	@ 0x64
 80072ea:	f001 fba7 	bl	8008a3c <__match>
 80072ee:	b910      	cbnz	r0, 80072f6 <_strtod_l+0x376>
 80072f0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80072f2:	3301      	adds	r3, #1
 80072f4:	9319      	str	r3, [sp, #100]	@ 0x64
 80072f6:	f04f 0a00 	mov.w	sl, #0
 80072fa:	f8df b208 	ldr.w	fp, [pc, #520]	@ 8007504 <_strtod_l+0x584>
 80072fe:	e678      	b.n	8006ff2 <_strtod_l+0x72>
 8007300:	4881      	ldr	r0, [pc, #516]	@ (8007508 <_strtod_l+0x588>)
 8007302:	f001 f8d9 	bl	80084b8 <nan>
 8007306:	4682      	mov	sl, r0
 8007308:	468b      	mov	fp, r1
 800730a:	e672      	b.n	8006ff2 <_strtod_l+0x72>
 800730c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800730e:	f1b9 0f00 	cmp.w	r9, #0
 8007312:	bf08      	it	eq
 8007314:	46a9      	moveq	r9, r5
 8007316:	eba8 0303 	sub.w	r3, r8, r3
 800731a:	2d10      	cmp	r5, #16
 800731c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800731e:	462c      	mov	r4, r5
 8007320:	9309      	str	r3, [sp, #36]	@ 0x24
 8007322:	bfa8      	it	ge
 8007324:	2410      	movge	r4, #16
 8007326:	f7f9 f85d 	bl	80003e4 <__aeabi_ui2d>
 800732a:	2d09      	cmp	r5, #9
 800732c:	4682      	mov	sl, r0
 800732e:	468b      	mov	fp, r1
 8007330:	dc11      	bgt.n	8007356 <_strtod_l+0x3d6>
 8007332:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007334:	2b00      	cmp	r3, #0
 8007336:	f43f ae5c 	beq.w	8006ff2 <_strtod_l+0x72>
 800733a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800733c:	dd76      	ble.n	800742c <_strtod_l+0x4ac>
 800733e:	2b16      	cmp	r3, #22
 8007340:	dc5d      	bgt.n	80073fe <_strtod_l+0x47e>
 8007342:	4972      	ldr	r1, [pc, #456]	@ (800750c <_strtod_l+0x58c>)
 8007344:	4652      	mov	r2, sl
 8007346:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800734a:	465b      	mov	r3, fp
 800734c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007350:	f7f9 f8c2 	bl	80004d8 <__aeabi_dmul>
 8007354:	e7d7      	b.n	8007306 <_strtod_l+0x386>
 8007356:	4b6d      	ldr	r3, [pc, #436]	@ (800750c <_strtod_l+0x58c>)
 8007358:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800735c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8007360:	f7f9 f8ba 	bl	80004d8 <__aeabi_dmul>
 8007364:	4682      	mov	sl, r0
 8007366:	4638      	mov	r0, r7
 8007368:	468b      	mov	fp, r1
 800736a:	f7f9 f83b 	bl	80003e4 <__aeabi_ui2d>
 800736e:	4602      	mov	r2, r0
 8007370:	460b      	mov	r3, r1
 8007372:	4650      	mov	r0, sl
 8007374:	4659      	mov	r1, fp
 8007376:	f7f8 fef9 	bl	800016c <__adddf3>
 800737a:	2d0f      	cmp	r5, #15
 800737c:	4682      	mov	sl, r0
 800737e:	468b      	mov	fp, r1
 8007380:	ddd7      	ble.n	8007332 <_strtod_l+0x3b2>
 8007382:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007384:	1b2c      	subs	r4, r5, r4
 8007386:	441c      	add	r4, r3
 8007388:	2c00      	cmp	r4, #0
 800738a:	f340 8093 	ble.w	80074b4 <_strtod_l+0x534>
 800738e:	f014 030f 	ands.w	r3, r4, #15
 8007392:	d00a      	beq.n	80073aa <_strtod_l+0x42a>
 8007394:	495d      	ldr	r1, [pc, #372]	@ (800750c <_strtod_l+0x58c>)
 8007396:	4652      	mov	r2, sl
 8007398:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800739c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80073a0:	465b      	mov	r3, fp
 80073a2:	f7f9 f899 	bl	80004d8 <__aeabi_dmul>
 80073a6:	4682      	mov	sl, r0
 80073a8:	468b      	mov	fp, r1
 80073aa:	f034 040f 	bics.w	r4, r4, #15
 80073ae:	d073      	beq.n	8007498 <_strtod_l+0x518>
 80073b0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80073b4:	dd49      	ble.n	800744a <_strtod_l+0x4ca>
 80073b6:	2400      	movs	r4, #0
 80073b8:	46a0      	mov	r8, r4
 80073ba:	46a1      	mov	r9, r4
 80073bc:	940b      	str	r4, [sp, #44]	@ 0x2c
 80073be:	2322      	movs	r3, #34	@ 0x22
 80073c0:	f04f 0a00 	mov.w	sl, #0
 80073c4:	9a05      	ldr	r2, [sp, #20]
 80073c6:	f8df b13c 	ldr.w	fp, [pc, #316]	@ 8007504 <_strtod_l+0x584>
 80073ca:	6013      	str	r3, [r2, #0]
 80073cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	f43f ae0f 	beq.w	8006ff2 <_strtod_l+0x72>
 80073d4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80073d6:	9805      	ldr	r0, [sp, #20]
 80073d8:	f7ff f950 	bl	800667c <_Bfree>
 80073dc:	4649      	mov	r1, r9
 80073de:	9805      	ldr	r0, [sp, #20]
 80073e0:	f7ff f94c 	bl	800667c <_Bfree>
 80073e4:	4641      	mov	r1, r8
 80073e6:	9805      	ldr	r0, [sp, #20]
 80073e8:	f7ff f948 	bl	800667c <_Bfree>
 80073ec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80073ee:	9805      	ldr	r0, [sp, #20]
 80073f0:	f7ff f944 	bl	800667c <_Bfree>
 80073f4:	4621      	mov	r1, r4
 80073f6:	9805      	ldr	r0, [sp, #20]
 80073f8:	f7ff f940 	bl	800667c <_Bfree>
 80073fc:	e5f9      	b.n	8006ff2 <_strtod_l+0x72>
 80073fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007400:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8007404:	4293      	cmp	r3, r2
 8007406:	dbbc      	blt.n	8007382 <_strtod_l+0x402>
 8007408:	4c40      	ldr	r4, [pc, #256]	@ (800750c <_strtod_l+0x58c>)
 800740a:	f1c5 050f 	rsb	r5, r5, #15
 800740e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8007412:	4652      	mov	r2, sl
 8007414:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007418:	465b      	mov	r3, fp
 800741a:	f7f9 f85d 	bl	80004d8 <__aeabi_dmul>
 800741e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007420:	1b5d      	subs	r5, r3, r5
 8007422:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8007426:	e9d4 2300 	ldrd	r2, r3, [r4]
 800742a:	e791      	b.n	8007350 <_strtod_l+0x3d0>
 800742c:	3316      	adds	r3, #22
 800742e:	dba8      	blt.n	8007382 <_strtod_l+0x402>
 8007430:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007432:	4650      	mov	r0, sl
 8007434:	eba3 0808 	sub.w	r8, r3, r8
 8007438:	4b34      	ldr	r3, [pc, #208]	@ (800750c <_strtod_l+0x58c>)
 800743a:	4659      	mov	r1, fp
 800743c:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8007440:	e9d8 2300 	ldrd	r2, r3, [r8]
 8007444:	f7f9 f972 	bl	800072c <__aeabi_ddiv>
 8007448:	e75d      	b.n	8007306 <_strtod_l+0x386>
 800744a:	2300      	movs	r3, #0
 800744c:	4650      	mov	r0, sl
 800744e:	4659      	mov	r1, fp
 8007450:	461e      	mov	r6, r3
 8007452:	4f2f      	ldr	r7, [pc, #188]	@ (8007510 <_strtod_l+0x590>)
 8007454:	1124      	asrs	r4, r4, #4
 8007456:	2c01      	cmp	r4, #1
 8007458:	dc21      	bgt.n	800749e <_strtod_l+0x51e>
 800745a:	b10b      	cbz	r3, 8007460 <_strtod_l+0x4e0>
 800745c:	4682      	mov	sl, r0
 800745e:	468b      	mov	fp, r1
 8007460:	492b      	ldr	r1, [pc, #172]	@ (8007510 <_strtod_l+0x590>)
 8007462:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8007466:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800746a:	4652      	mov	r2, sl
 800746c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007470:	465b      	mov	r3, fp
 8007472:	f7f9 f831 	bl	80004d8 <__aeabi_dmul>
 8007476:	4b23      	ldr	r3, [pc, #140]	@ (8007504 <_strtod_l+0x584>)
 8007478:	460a      	mov	r2, r1
 800747a:	400b      	ands	r3, r1
 800747c:	4925      	ldr	r1, [pc, #148]	@ (8007514 <_strtod_l+0x594>)
 800747e:	4682      	mov	sl, r0
 8007480:	428b      	cmp	r3, r1
 8007482:	d898      	bhi.n	80073b6 <_strtod_l+0x436>
 8007484:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8007488:	428b      	cmp	r3, r1
 800748a:	bf86      	itte	hi
 800748c:	f04f 3aff 	movhi.w	sl, #4294967295
 8007490:	f8df b084 	ldrhi.w	fp, [pc, #132]	@ 8007518 <_strtod_l+0x598>
 8007494:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8007498:	2300      	movs	r3, #0
 800749a:	9308      	str	r3, [sp, #32]
 800749c:	e076      	b.n	800758c <_strtod_l+0x60c>
 800749e:	07e2      	lsls	r2, r4, #31
 80074a0:	d504      	bpl.n	80074ac <_strtod_l+0x52c>
 80074a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074a6:	f7f9 f817 	bl	80004d8 <__aeabi_dmul>
 80074aa:	2301      	movs	r3, #1
 80074ac:	3601      	adds	r6, #1
 80074ae:	1064      	asrs	r4, r4, #1
 80074b0:	3708      	adds	r7, #8
 80074b2:	e7d0      	b.n	8007456 <_strtod_l+0x4d6>
 80074b4:	d0f0      	beq.n	8007498 <_strtod_l+0x518>
 80074b6:	4264      	negs	r4, r4
 80074b8:	f014 020f 	ands.w	r2, r4, #15
 80074bc:	d00a      	beq.n	80074d4 <_strtod_l+0x554>
 80074be:	4b13      	ldr	r3, [pc, #76]	@ (800750c <_strtod_l+0x58c>)
 80074c0:	4650      	mov	r0, sl
 80074c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074c6:	4659      	mov	r1, fp
 80074c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074cc:	f7f9 f92e 	bl	800072c <__aeabi_ddiv>
 80074d0:	4682      	mov	sl, r0
 80074d2:	468b      	mov	fp, r1
 80074d4:	1124      	asrs	r4, r4, #4
 80074d6:	d0df      	beq.n	8007498 <_strtod_l+0x518>
 80074d8:	2c1f      	cmp	r4, #31
 80074da:	dd1f      	ble.n	800751c <_strtod_l+0x59c>
 80074dc:	2400      	movs	r4, #0
 80074de:	46a0      	mov	r8, r4
 80074e0:	46a1      	mov	r9, r4
 80074e2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80074e4:	2322      	movs	r3, #34	@ 0x22
 80074e6:	9a05      	ldr	r2, [sp, #20]
 80074e8:	f04f 0a00 	mov.w	sl, #0
 80074ec:	f04f 0b00 	mov.w	fp, #0
 80074f0:	6013      	str	r3, [r2, #0]
 80074f2:	e76b      	b.n	80073cc <_strtod_l+0x44c>
 80074f4:	0800973f 	.word	0x0800973f
 80074f8:	08009a08 	.word	0x08009a08
 80074fc:	08009737 	.word	0x08009737
 8007500:	0800976e 	.word	0x0800976e
 8007504:	7ff00000 	.word	0x7ff00000
 8007508:	080098a7 	.word	0x080098a7
 800750c:	08009940 	.word	0x08009940
 8007510:	08009918 	.word	0x08009918
 8007514:	7ca00000 	.word	0x7ca00000
 8007518:	7fefffff 	.word	0x7fefffff
 800751c:	f014 0310 	ands.w	r3, r4, #16
 8007520:	bf18      	it	ne
 8007522:	236a      	movne	r3, #106	@ 0x6a
 8007524:	4650      	mov	r0, sl
 8007526:	9308      	str	r3, [sp, #32]
 8007528:	4659      	mov	r1, fp
 800752a:	2300      	movs	r3, #0
 800752c:	4e77      	ldr	r6, [pc, #476]	@ (800770c <_strtod_l+0x78c>)
 800752e:	07e7      	lsls	r7, r4, #31
 8007530:	d504      	bpl.n	800753c <_strtod_l+0x5bc>
 8007532:	e9d6 2300 	ldrd	r2, r3, [r6]
 8007536:	f7f8 ffcf 	bl	80004d8 <__aeabi_dmul>
 800753a:	2301      	movs	r3, #1
 800753c:	1064      	asrs	r4, r4, #1
 800753e:	f106 0608 	add.w	r6, r6, #8
 8007542:	d1f4      	bne.n	800752e <_strtod_l+0x5ae>
 8007544:	b10b      	cbz	r3, 800754a <_strtod_l+0x5ca>
 8007546:	4682      	mov	sl, r0
 8007548:	468b      	mov	fp, r1
 800754a:	9b08      	ldr	r3, [sp, #32]
 800754c:	b1b3      	cbz	r3, 800757c <_strtod_l+0x5fc>
 800754e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8007552:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8007556:	2b00      	cmp	r3, #0
 8007558:	4659      	mov	r1, fp
 800755a:	dd0f      	ble.n	800757c <_strtod_l+0x5fc>
 800755c:	2b1f      	cmp	r3, #31
 800755e:	dd58      	ble.n	8007612 <_strtod_l+0x692>
 8007560:	2b34      	cmp	r3, #52	@ 0x34
 8007562:	bfd8      	it	le
 8007564:	f04f 33ff 	movle.w	r3, #4294967295
 8007568:	f04f 0a00 	mov.w	sl, #0
 800756c:	bfcf      	iteee	gt
 800756e:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8007572:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8007576:	4093      	lslle	r3, r2
 8007578:	ea03 0b01 	andle.w	fp, r3, r1
 800757c:	2200      	movs	r2, #0
 800757e:	2300      	movs	r3, #0
 8007580:	4650      	mov	r0, sl
 8007582:	4659      	mov	r1, fp
 8007584:	f7f9 fa10 	bl	80009a8 <__aeabi_dcmpeq>
 8007588:	2800      	cmp	r0, #0
 800758a:	d1a7      	bne.n	80074dc <_strtod_l+0x55c>
 800758c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800758e:	464a      	mov	r2, r9
 8007590:	9300      	str	r3, [sp, #0]
 8007592:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007594:	462b      	mov	r3, r5
 8007596:	9805      	ldr	r0, [sp, #20]
 8007598:	f7ff f8d8 	bl	800674c <__s2b>
 800759c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800759e:	2800      	cmp	r0, #0
 80075a0:	f43f af09 	beq.w	80073b6 <_strtod_l+0x436>
 80075a4:	2400      	movs	r4, #0
 80075a6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80075a8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80075aa:	2a00      	cmp	r2, #0
 80075ac:	eba3 0308 	sub.w	r3, r3, r8
 80075b0:	bfa8      	it	ge
 80075b2:	2300      	movge	r3, #0
 80075b4:	46a0      	mov	r8, r4
 80075b6:	9312      	str	r3, [sp, #72]	@ 0x48
 80075b8:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 80075bc:	9316      	str	r3, [sp, #88]	@ 0x58
 80075be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80075c0:	9805      	ldr	r0, [sp, #20]
 80075c2:	6859      	ldr	r1, [r3, #4]
 80075c4:	f7ff f81a 	bl	80065fc <_Balloc>
 80075c8:	4681      	mov	r9, r0
 80075ca:	2800      	cmp	r0, #0
 80075cc:	f43f aef7 	beq.w	80073be <_strtod_l+0x43e>
 80075d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80075d2:	300c      	adds	r0, #12
 80075d4:	691a      	ldr	r2, [r3, #16]
 80075d6:	f103 010c 	add.w	r1, r3, #12
 80075da:	3202      	adds	r2, #2
 80075dc:	0092      	lsls	r2, r2, #2
 80075de:	f000 ff5d 	bl	800849c <memcpy>
 80075e2:	ab1c      	add	r3, sp, #112	@ 0x70
 80075e4:	9301      	str	r3, [sp, #4]
 80075e6:	ab1b      	add	r3, sp, #108	@ 0x6c
 80075e8:	9300      	str	r3, [sp, #0]
 80075ea:	4652      	mov	r2, sl
 80075ec:	465b      	mov	r3, fp
 80075ee:	9805      	ldr	r0, [sp, #20]
 80075f0:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 80075f4:	f7ff fbd6 	bl	8006da4 <__d2b>
 80075f8:	901a      	str	r0, [sp, #104]	@ 0x68
 80075fa:	2800      	cmp	r0, #0
 80075fc:	f43f aedf 	beq.w	80073be <_strtod_l+0x43e>
 8007600:	2101      	movs	r1, #1
 8007602:	9805      	ldr	r0, [sp, #20]
 8007604:	f7ff f938 	bl	8006878 <__i2b>
 8007608:	4680      	mov	r8, r0
 800760a:	b948      	cbnz	r0, 8007620 <_strtod_l+0x6a0>
 800760c:	f04f 0800 	mov.w	r8, #0
 8007610:	e6d5      	b.n	80073be <_strtod_l+0x43e>
 8007612:	f04f 32ff 	mov.w	r2, #4294967295
 8007616:	fa02 f303 	lsl.w	r3, r2, r3
 800761a:	ea03 0a0a 	and.w	sl, r3, sl
 800761e:	e7ad      	b.n	800757c <_strtod_l+0x5fc>
 8007620:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8007622:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8007624:	2d00      	cmp	r5, #0
 8007626:	bfab      	itete	ge
 8007628:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800762a:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800762c:	18ef      	addge	r7, r5, r3
 800762e:	1b5e      	sublt	r6, r3, r5
 8007630:	9b08      	ldr	r3, [sp, #32]
 8007632:	bfa8      	it	ge
 8007634:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8007636:	eba5 0503 	sub.w	r5, r5, r3
 800763a:	4415      	add	r5, r2
 800763c:	4b34      	ldr	r3, [pc, #208]	@ (8007710 <_strtod_l+0x790>)
 800763e:	f105 35ff 	add.w	r5, r5, #4294967295
 8007642:	bfb8      	it	lt
 8007644:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8007646:	429d      	cmp	r5, r3
 8007648:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800764c:	da50      	bge.n	80076f0 <_strtod_l+0x770>
 800764e:	1b5b      	subs	r3, r3, r5
 8007650:	2b1f      	cmp	r3, #31
 8007652:	f04f 0101 	mov.w	r1, #1
 8007656:	eba2 0203 	sub.w	r2, r2, r3
 800765a:	dc3d      	bgt.n	80076d8 <_strtod_l+0x758>
 800765c:	fa01 f303 	lsl.w	r3, r1, r3
 8007660:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007662:	2300      	movs	r3, #0
 8007664:	9310      	str	r3, [sp, #64]	@ 0x40
 8007666:	18bd      	adds	r5, r7, r2
 8007668:	9b08      	ldr	r3, [sp, #32]
 800766a:	42af      	cmp	r7, r5
 800766c:	4416      	add	r6, r2
 800766e:	441e      	add	r6, r3
 8007670:	463b      	mov	r3, r7
 8007672:	bfa8      	it	ge
 8007674:	462b      	movge	r3, r5
 8007676:	42b3      	cmp	r3, r6
 8007678:	bfa8      	it	ge
 800767a:	4633      	movge	r3, r6
 800767c:	2b00      	cmp	r3, #0
 800767e:	bfc2      	ittt	gt
 8007680:	1aed      	subgt	r5, r5, r3
 8007682:	1af6      	subgt	r6, r6, r3
 8007684:	1aff      	subgt	r7, r7, r3
 8007686:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007688:	2b00      	cmp	r3, #0
 800768a:	dd16      	ble.n	80076ba <_strtod_l+0x73a>
 800768c:	4641      	mov	r1, r8
 800768e:	461a      	mov	r2, r3
 8007690:	9805      	ldr	r0, [sp, #20]
 8007692:	f7ff f9a9 	bl	80069e8 <__pow5mult>
 8007696:	4680      	mov	r8, r0
 8007698:	2800      	cmp	r0, #0
 800769a:	d0b7      	beq.n	800760c <_strtod_l+0x68c>
 800769c:	4601      	mov	r1, r0
 800769e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80076a0:	9805      	ldr	r0, [sp, #20]
 80076a2:	f7ff f8ff 	bl	80068a4 <__multiply>
 80076a6:	900a      	str	r0, [sp, #40]	@ 0x28
 80076a8:	2800      	cmp	r0, #0
 80076aa:	f43f ae88 	beq.w	80073be <_strtod_l+0x43e>
 80076ae:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80076b0:	9805      	ldr	r0, [sp, #20]
 80076b2:	f7fe ffe3 	bl	800667c <_Bfree>
 80076b6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80076b8:	931a      	str	r3, [sp, #104]	@ 0x68
 80076ba:	2d00      	cmp	r5, #0
 80076bc:	dc1d      	bgt.n	80076fa <_strtod_l+0x77a>
 80076be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	dd27      	ble.n	8007714 <_strtod_l+0x794>
 80076c4:	4649      	mov	r1, r9
 80076c6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80076c8:	9805      	ldr	r0, [sp, #20]
 80076ca:	f7ff f98d 	bl	80069e8 <__pow5mult>
 80076ce:	4681      	mov	r9, r0
 80076d0:	bb00      	cbnz	r0, 8007714 <_strtod_l+0x794>
 80076d2:	f04f 0900 	mov.w	r9, #0
 80076d6:	e672      	b.n	80073be <_strtod_l+0x43e>
 80076d8:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 80076dc:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 80076e0:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 80076e4:	35e2      	adds	r5, #226	@ 0xe2
 80076e6:	fa01 f305 	lsl.w	r3, r1, r5
 80076ea:	9310      	str	r3, [sp, #64]	@ 0x40
 80076ec:	9113      	str	r1, [sp, #76]	@ 0x4c
 80076ee:	e7ba      	b.n	8007666 <_strtod_l+0x6e6>
 80076f0:	2300      	movs	r3, #0
 80076f2:	9310      	str	r3, [sp, #64]	@ 0x40
 80076f4:	2301      	movs	r3, #1
 80076f6:	9313      	str	r3, [sp, #76]	@ 0x4c
 80076f8:	e7b5      	b.n	8007666 <_strtod_l+0x6e6>
 80076fa:	462a      	mov	r2, r5
 80076fc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80076fe:	9805      	ldr	r0, [sp, #20]
 8007700:	f7ff f9cc 	bl	8006a9c <__lshift>
 8007704:	901a      	str	r0, [sp, #104]	@ 0x68
 8007706:	2800      	cmp	r0, #0
 8007708:	d1d9      	bne.n	80076be <_strtod_l+0x73e>
 800770a:	e658      	b.n	80073be <_strtod_l+0x43e>
 800770c:	08009a30 	.word	0x08009a30
 8007710:	fffffc02 	.word	0xfffffc02
 8007714:	2e00      	cmp	r6, #0
 8007716:	dd07      	ble.n	8007728 <_strtod_l+0x7a8>
 8007718:	4649      	mov	r1, r9
 800771a:	4632      	mov	r2, r6
 800771c:	9805      	ldr	r0, [sp, #20]
 800771e:	f7ff f9bd 	bl	8006a9c <__lshift>
 8007722:	4681      	mov	r9, r0
 8007724:	2800      	cmp	r0, #0
 8007726:	d0d4      	beq.n	80076d2 <_strtod_l+0x752>
 8007728:	2f00      	cmp	r7, #0
 800772a:	dd08      	ble.n	800773e <_strtod_l+0x7be>
 800772c:	4641      	mov	r1, r8
 800772e:	463a      	mov	r2, r7
 8007730:	9805      	ldr	r0, [sp, #20]
 8007732:	f7ff f9b3 	bl	8006a9c <__lshift>
 8007736:	4680      	mov	r8, r0
 8007738:	2800      	cmp	r0, #0
 800773a:	f43f ae40 	beq.w	80073be <_strtod_l+0x43e>
 800773e:	464a      	mov	r2, r9
 8007740:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007742:	9805      	ldr	r0, [sp, #20]
 8007744:	f7ff fa32 	bl	8006bac <__mdiff>
 8007748:	4604      	mov	r4, r0
 800774a:	2800      	cmp	r0, #0
 800774c:	f43f ae37 	beq.w	80073be <_strtod_l+0x43e>
 8007750:	68c3      	ldr	r3, [r0, #12]
 8007752:	4641      	mov	r1, r8
 8007754:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007756:	2300      	movs	r3, #0
 8007758:	60c3      	str	r3, [r0, #12]
 800775a:	f7ff fa0b 	bl	8006b74 <__mcmp>
 800775e:	2800      	cmp	r0, #0
 8007760:	da3d      	bge.n	80077de <_strtod_l+0x85e>
 8007762:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007764:	ea53 030a 	orrs.w	r3, r3, sl
 8007768:	d163      	bne.n	8007832 <_strtod_l+0x8b2>
 800776a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800776e:	2b00      	cmp	r3, #0
 8007770:	d15f      	bne.n	8007832 <_strtod_l+0x8b2>
 8007772:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8007776:	0d1b      	lsrs	r3, r3, #20
 8007778:	051b      	lsls	r3, r3, #20
 800777a:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800777e:	d958      	bls.n	8007832 <_strtod_l+0x8b2>
 8007780:	6963      	ldr	r3, [r4, #20]
 8007782:	b913      	cbnz	r3, 800778a <_strtod_l+0x80a>
 8007784:	6923      	ldr	r3, [r4, #16]
 8007786:	2b01      	cmp	r3, #1
 8007788:	dd53      	ble.n	8007832 <_strtod_l+0x8b2>
 800778a:	4621      	mov	r1, r4
 800778c:	2201      	movs	r2, #1
 800778e:	9805      	ldr	r0, [sp, #20]
 8007790:	f7ff f984 	bl	8006a9c <__lshift>
 8007794:	4641      	mov	r1, r8
 8007796:	4604      	mov	r4, r0
 8007798:	f7ff f9ec 	bl	8006b74 <__mcmp>
 800779c:	2800      	cmp	r0, #0
 800779e:	dd48      	ble.n	8007832 <_strtod_l+0x8b2>
 80077a0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80077a4:	9a08      	ldr	r2, [sp, #32]
 80077a6:	0d1b      	lsrs	r3, r3, #20
 80077a8:	051b      	lsls	r3, r3, #20
 80077aa:	2a00      	cmp	r2, #0
 80077ac:	d062      	beq.n	8007874 <_strtod_l+0x8f4>
 80077ae:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80077b2:	d85f      	bhi.n	8007874 <_strtod_l+0x8f4>
 80077b4:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80077b8:	f67f ae94 	bls.w	80074e4 <_strtod_l+0x564>
 80077bc:	4650      	mov	r0, sl
 80077be:	4659      	mov	r1, fp
 80077c0:	4ba3      	ldr	r3, [pc, #652]	@ (8007a50 <_strtod_l+0xad0>)
 80077c2:	2200      	movs	r2, #0
 80077c4:	f7f8 fe88 	bl	80004d8 <__aeabi_dmul>
 80077c8:	4ba2      	ldr	r3, [pc, #648]	@ (8007a54 <_strtod_l+0xad4>)
 80077ca:	4682      	mov	sl, r0
 80077cc:	400b      	ands	r3, r1
 80077ce:	468b      	mov	fp, r1
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	f47f adff 	bne.w	80073d4 <_strtod_l+0x454>
 80077d6:	2322      	movs	r3, #34	@ 0x22
 80077d8:	9a05      	ldr	r2, [sp, #20]
 80077da:	6013      	str	r3, [r2, #0]
 80077dc:	e5fa      	b.n	80073d4 <_strtod_l+0x454>
 80077de:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80077e2:	d165      	bne.n	80078b0 <_strtod_l+0x930>
 80077e4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80077e6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80077ea:	b35a      	cbz	r2, 8007844 <_strtod_l+0x8c4>
 80077ec:	4a9a      	ldr	r2, [pc, #616]	@ (8007a58 <_strtod_l+0xad8>)
 80077ee:	4293      	cmp	r3, r2
 80077f0:	d12b      	bne.n	800784a <_strtod_l+0x8ca>
 80077f2:	9b08      	ldr	r3, [sp, #32]
 80077f4:	4651      	mov	r1, sl
 80077f6:	b303      	cbz	r3, 800783a <_strtod_l+0x8ba>
 80077f8:	465a      	mov	r2, fp
 80077fa:	4b96      	ldr	r3, [pc, #600]	@ (8007a54 <_strtod_l+0xad4>)
 80077fc:	4013      	ands	r3, r2
 80077fe:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8007802:	f04f 32ff 	mov.w	r2, #4294967295
 8007806:	d81b      	bhi.n	8007840 <_strtod_l+0x8c0>
 8007808:	0d1b      	lsrs	r3, r3, #20
 800780a:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800780e:	fa02 f303 	lsl.w	r3, r2, r3
 8007812:	4299      	cmp	r1, r3
 8007814:	d119      	bne.n	800784a <_strtod_l+0x8ca>
 8007816:	4b91      	ldr	r3, [pc, #580]	@ (8007a5c <_strtod_l+0xadc>)
 8007818:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800781a:	429a      	cmp	r2, r3
 800781c:	d102      	bne.n	8007824 <_strtod_l+0x8a4>
 800781e:	3101      	adds	r1, #1
 8007820:	f43f adcd 	beq.w	80073be <_strtod_l+0x43e>
 8007824:	f04f 0a00 	mov.w	sl, #0
 8007828:	4b8a      	ldr	r3, [pc, #552]	@ (8007a54 <_strtod_l+0xad4>)
 800782a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800782c:	401a      	ands	r2, r3
 800782e:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8007832:	9b08      	ldr	r3, [sp, #32]
 8007834:	2b00      	cmp	r3, #0
 8007836:	d1c1      	bne.n	80077bc <_strtod_l+0x83c>
 8007838:	e5cc      	b.n	80073d4 <_strtod_l+0x454>
 800783a:	f04f 33ff 	mov.w	r3, #4294967295
 800783e:	e7e8      	b.n	8007812 <_strtod_l+0x892>
 8007840:	4613      	mov	r3, r2
 8007842:	e7e6      	b.n	8007812 <_strtod_l+0x892>
 8007844:	ea53 030a 	orrs.w	r3, r3, sl
 8007848:	d0aa      	beq.n	80077a0 <_strtod_l+0x820>
 800784a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800784c:	b1db      	cbz	r3, 8007886 <_strtod_l+0x906>
 800784e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007850:	4213      	tst	r3, r2
 8007852:	d0ee      	beq.n	8007832 <_strtod_l+0x8b2>
 8007854:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007856:	4650      	mov	r0, sl
 8007858:	4659      	mov	r1, fp
 800785a:	9a08      	ldr	r2, [sp, #32]
 800785c:	b1bb      	cbz	r3, 800788e <_strtod_l+0x90e>
 800785e:	f7ff fb6d 	bl	8006f3c <sulp>
 8007862:	4602      	mov	r2, r0
 8007864:	460b      	mov	r3, r1
 8007866:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800786a:	f7f8 fc7f 	bl	800016c <__adddf3>
 800786e:	4682      	mov	sl, r0
 8007870:	468b      	mov	fp, r1
 8007872:	e7de      	b.n	8007832 <_strtod_l+0x8b2>
 8007874:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8007878:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800787c:	f04f 3aff 	mov.w	sl, #4294967295
 8007880:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8007884:	e7d5      	b.n	8007832 <_strtod_l+0x8b2>
 8007886:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007888:	ea13 0f0a 	tst.w	r3, sl
 800788c:	e7e1      	b.n	8007852 <_strtod_l+0x8d2>
 800788e:	f7ff fb55 	bl	8006f3c <sulp>
 8007892:	4602      	mov	r2, r0
 8007894:	460b      	mov	r3, r1
 8007896:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800789a:	f7f8 fc65 	bl	8000168 <__aeabi_dsub>
 800789e:	2200      	movs	r2, #0
 80078a0:	2300      	movs	r3, #0
 80078a2:	4682      	mov	sl, r0
 80078a4:	468b      	mov	fp, r1
 80078a6:	f7f9 f87f 	bl	80009a8 <__aeabi_dcmpeq>
 80078aa:	2800      	cmp	r0, #0
 80078ac:	d0c1      	beq.n	8007832 <_strtod_l+0x8b2>
 80078ae:	e619      	b.n	80074e4 <_strtod_l+0x564>
 80078b0:	4641      	mov	r1, r8
 80078b2:	4620      	mov	r0, r4
 80078b4:	f7ff face 	bl	8006e54 <__ratio>
 80078b8:	2200      	movs	r2, #0
 80078ba:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80078be:	4606      	mov	r6, r0
 80078c0:	460f      	mov	r7, r1
 80078c2:	f7f9 f885 	bl	80009d0 <__aeabi_dcmple>
 80078c6:	2800      	cmp	r0, #0
 80078c8:	d06d      	beq.n	80079a6 <_strtod_l+0xa26>
 80078ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d178      	bne.n	80079c2 <_strtod_l+0xa42>
 80078d0:	f1ba 0f00 	cmp.w	sl, #0
 80078d4:	d156      	bne.n	8007984 <_strtod_l+0xa04>
 80078d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80078d8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d158      	bne.n	8007992 <_strtod_l+0xa12>
 80078e0:	2200      	movs	r2, #0
 80078e2:	4630      	mov	r0, r6
 80078e4:	4639      	mov	r1, r7
 80078e6:	4b5e      	ldr	r3, [pc, #376]	@ (8007a60 <_strtod_l+0xae0>)
 80078e8:	f7f9 f868 	bl	80009bc <__aeabi_dcmplt>
 80078ec:	2800      	cmp	r0, #0
 80078ee:	d157      	bne.n	80079a0 <_strtod_l+0xa20>
 80078f0:	4630      	mov	r0, r6
 80078f2:	4639      	mov	r1, r7
 80078f4:	2200      	movs	r2, #0
 80078f6:	4b5b      	ldr	r3, [pc, #364]	@ (8007a64 <_strtod_l+0xae4>)
 80078f8:	f7f8 fdee 	bl	80004d8 <__aeabi_dmul>
 80078fc:	4606      	mov	r6, r0
 80078fe:	460f      	mov	r7, r1
 8007900:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8007904:	9606      	str	r6, [sp, #24]
 8007906:	9307      	str	r3, [sp, #28]
 8007908:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800790c:	4d51      	ldr	r5, [pc, #324]	@ (8007a54 <_strtod_l+0xad4>)
 800790e:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007912:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007914:	401d      	ands	r5, r3
 8007916:	4b54      	ldr	r3, [pc, #336]	@ (8007a68 <_strtod_l+0xae8>)
 8007918:	429d      	cmp	r5, r3
 800791a:	f040 80ab 	bne.w	8007a74 <_strtod_l+0xaf4>
 800791e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007920:	4650      	mov	r0, sl
 8007922:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8007926:	4659      	mov	r1, fp
 8007928:	f7ff f9d4 	bl	8006cd4 <__ulp>
 800792c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007930:	f7f8 fdd2 	bl	80004d8 <__aeabi_dmul>
 8007934:	4652      	mov	r2, sl
 8007936:	465b      	mov	r3, fp
 8007938:	f7f8 fc18 	bl	800016c <__adddf3>
 800793c:	460b      	mov	r3, r1
 800793e:	4945      	ldr	r1, [pc, #276]	@ (8007a54 <_strtod_l+0xad4>)
 8007940:	4a4a      	ldr	r2, [pc, #296]	@ (8007a6c <_strtod_l+0xaec>)
 8007942:	4019      	ands	r1, r3
 8007944:	4291      	cmp	r1, r2
 8007946:	4682      	mov	sl, r0
 8007948:	d942      	bls.n	80079d0 <_strtod_l+0xa50>
 800794a:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800794c:	4b43      	ldr	r3, [pc, #268]	@ (8007a5c <_strtod_l+0xadc>)
 800794e:	429a      	cmp	r2, r3
 8007950:	d103      	bne.n	800795a <_strtod_l+0x9da>
 8007952:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007954:	3301      	adds	r3, #1
 8007956:	f43f ad32 	beq.w	80073be <_strtod_l+0x43e>
 800795a:	f04f 3aff 	mov.w	sl, #4294967295
 800795e:	f8df b0fc 	ldr.w	fp, [pc, #252]	@ 8007a5c <_strtod_l+0xadc>
 8007962:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007964:	9805      	ldr	r0, [sp, #20]
 8007966:	f7fe fe89 	bl	800667c <_Bfree>
 800796a:	4649      	mov	r1, r9
 800796c:	9805      	ldr	r0, [sp, #20]
 800796e:	f7fe fe85 	bl	800667c <_Bfree>
 8007972:	4641      	mov	r1, r8
 8007974:	9805      	ldr	r0, [sp, #20]
 8007976:	f7fe fe81 	bl	800667c <_Bfree>
 800797a:	4621      	mov	r1, r4
 800797c:	9805      	ldr	r0, [sp, #20]
 800797e:	f7fe fe7d 	bl	800667c <_Bfree>
 8007982:	e61c      	b.n	80075be <_strtod_l+0x63e>
 8007984:	f1ba 0f01 	cmp.w	sl, #1
 8007988:	d103      	bne.n	8007992 <_strtod_l+0xa12>
 800798a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800798c:	2b00      	cmp	r3, #0
 800798e:	f43f ada9 	beq.w	80074e4 <_strtod_l+0x564>
 8007992:	2200      	movs	r2, #0
 8007994:	4b36      	ldr	r3, [pc, #216]	@ (8007a70 <_strtod_l+0xaf0>)
 8007996:	2600      	movs	r6, #0
 8007998:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800799c:	4f30      	ldr	r7, [pc, #192]	@ (8007a60 <_strtod_l+0xae0>)
 800799e:	e7b3      	b.n	8007908 <_strtod_l+0x988>
 80079a0:	2600      	movs	r6, #0
 80079a2:	4f30      	ldr	r7, [pc, #192]	@ (8007a64 <_strtod_l+0xae4>)
 80079a4:	e7ac      	b.n	8007900 <_strtod_l+0x980>
 80079a6:	4630      	mov	r0, r6
 80079a8:	4639      	mov	r1, r7
 80079aa:	4b2e      	ldr	r3, [pc, #184]	@ (8007a64 <_strtod_l+0xae4>)
 80079ac:	2200      	movs	r2, #0
 80079ae:	f7f8 fd93 	bl	80004d8 <__aeabi_dmul>
 80079b2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80079b4:	4606      	mov	r6, r0
 80079b6:	460f      	mov	r7, r1
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d0a1      	beq.n	8007900 <_strtod_l+0x980>
 80079bc:	e9cd 6706 	strd	r6, r7, [sp, #24]
 80079c0:	e7a2      	b.n	8007908 <_strtod_l+0x988>
 80079c2:	2200      	movs	r2, #0
 80079c4:	4b26      	ldr	r3, [pc, #152]	@ (8007a60 <_strtod_l+0xae0>)
 80079c6:	4616      	mov	r6, r2
 80079c8:	461f      	mov	r7, r3
 80079ca:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80079ce:	e79b      	b.n	8007908 <_strtod_l+0x988>
 80079d0:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 80079d4:	9b08      	ldr	r3, [sp, #32]
 80079d6:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d1c1      	bne.n	8007962 <_strtod_l+0x9e2>
 80079de:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80079e2:	0d1b      	lsrs	r3, r3, #20
 80079e4:	051b      	lsls	r3, r3, #20
 80079e6:	429d      	cmp	r5, r3
 80079e8:	d1bb      	bne.n	8007962 <_strtod_l+0x9e2>
 80079ea:	4630      	mov	r0, r6
 80079ec:	4639      	mov	r1, r7
 80079ee:	f7f9 f8bb 	bl	8000b68 <__aeabi_d2lz>
 80079f2:	f7f8 fd43 	bl	800047c <__aeabi_l2d>
 80079f6:	4602      	mov	r2, r0
 80079f8:	460b      	mov	r3, r1
 80079fa:	4630      	mov	r0, r6
 80079fc:	4639      	mov	r1, r7
 80079fe:	f7f8 fbb3 	bl	8000168 <__aeabi_dsub>
 8007a02:	460b      	mov	r3, r1
 8007a04:	4602      	mov	r2, r0
 8007a06:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8007a0a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8007a0e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a10:	ea46 060a 	orr.w	r6, r6, sl
 8007a14:	431e      	orrs	r6, r3
 8007a16:	d06a      	beq.n	8007aee <_strtod_l+0xb6e>
 8007a18:	a309      	add	r3, pc, #36	@ (adr r3, 8007a40 <_strtod_l+0xac0>)
 8007a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a1e:	f7f8 ffcd 	bl	80009bc <__aeabi_dcmplt>
 8007a22:	2800      	cmp	r0, #0
 8007a24:	f47f acd6 	bne.w	80073d4 <_strtod_l+0x454>
 8007a28:	a307      	add	r3, pc, #28	@ (adr r3, 8007a48 <_strtod_l+0xac8>)
 8007a2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a2e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a32:	f7f8 ffe1 	bl	80009f8 <__aeabi_dcmpgt>
 8007a36:	2800      	cmp	r0, #0
 8007a38:	d093      	beq.n	8007962 <_strtod_l+0x9e2>
 8007a3a:	e4cb      	b.n	80073d4 <_strtod_l+0x454>
 8007a3c:	f3af 8000 	nop.w
 8007a40:	94a03595 	.word	0x94a03595
 8007a44:	3fdfffff 	.word	0x3fdfffff
 8007a48:	35afe535 	.word	0x35afe535
 8007a4c:	3fe00000 	.word	0x3fe00000
 8007a50:	39500000 	.word	0x39500000
 8007a54:	7ff00000 	.word	0x7ff00000
 8007a58:	000fffff 	.word	0x000fffff
 8007a5c:	7fefffff 	.word	0x7fefffff
 8007a60:	3ff00000 	.word	0x3ff00000
 8007a64:	3fe00000 	.word	0x3fe00000
 8007a68:	7fe00000 	.word	0x7fe00000
 8007a6c:	7c9fffff 	.word	0x7c9fffff
 8007a70:	bff00000 	.word	0xbff00000
 8007a74:	9b08      	ldr	r3, [sp, #32]
 8007a76:	b323      	cbz	r3, 8007ac2 <_strtod_l+0xb42>
 8007a78:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8007a7c:	d821      	bhi.n	8007ac2 <_strtod_l+0xb42>
 8007a7e:	a328      	add	r3, pc, #160	@ (adr r3, 8007b20 <_strtod_l+0xba0>)
 8007a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a84:	4630      	mov	r0, r6
 8007a86:	4639      	mov	r1, r7
 8007a88:	f7f8 ffa2 	bl	80009d0 <__aeabi_dcmple>
 8007a8c:	b1a0      	cbz	r0, 8007ab8 <_strtod_l+0xb38>
 8007a8e:	4639      	mov	r1, r7
 8007a90:	4630      	mov	r0, r6
 8007a92:	f7f8 fff9 	bl	8000a88 <__aeabi_d2uiz>
 8007a96:	2801      	cmp	r0, #1
 8007a98:	bf38      	it	cc
 8007a9a:	2001      	movcc	r0, #1
 8007a9c:	f7f8 fca2 	bl	80003e4 <__aeabi_ui2d>
 8007aa0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007aa2:	4606      	mov	r6, r0
 8007aa4:	460f      	mov	r7, r1
 8007aa6:	b9fb      	cbnz	r3, 8007ae8 <_strtod_l+0xb68>
 8007aa8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8007aac:	9014      	str	r0, [sp, #80]	@ 0x50
 8007aae:	9315      	str	r3, [sp, #84]	@ 0x54
 8007ab0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8007ab4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8007ab8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007aba:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8007abe:	1b5b      	subs	r3, r3, r5
 8007ac0:	9311      	str	r3, [sp, #68]	@ 0x44
 8007ac2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007ac6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8007aca:	f7ff f903 	bl	8006cd4 <__ulp>
 8007ace:	4602      	mov	r2, r0
 8007ad0:	460b      	mov	r3, r1
 8007ad2:	4650      	mov	r0, sl
 8007ad4:	4659      	mov	r1, fp
 8007ad6:	f7f8 fcff 	bl	80004d8 <__aeabi_dmul>
 8007ada:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8007ade:	f7f8 fb45 	bl	800016c <__adddf3>
 8007ae2:	4682      	mov	sl, r0
 8007ae4:	468b      	mov	fp, r1
 8007ae6:	e775      	b.n	80079d4 <_strtod_l+0xa54>
 8007ae8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8007aec:	e7e0      	b.n	8007ab0 <_strtod_l+0xb30>
 8007aee:	a30e      	add	r3, pc, #56	@ (adr r3, 8007b28 <_strtod_l+0xba8>)
 8007af0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007af4:	f7f8 ff62 	bl	80009bc <__aeabi_dcmplt>
 8007af8:	e79d      	b.n	8007a36 <_strtod_l+0xab6>
 8007afa:	2300      	movs	r3, #0
 8007afc:	930e      	str	r3, [sp, #56]	@ 0x38
 8007afe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007b00:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8007b02:	6013      	str	r3, [r2, #0]
 8007b04:	f7ff ba79 	b.w	8006ffa <_strtod_l+0x7a>
 8007b08:	2a65      	cmp	r2, #101	@ 0x65
 8007b0a:	f43f ab72 	beq.w	80071f2 <_strtod_l+0x272>
 8007b0e:	2a45      	cmp	r2, #69	@ 0x45
 8007b10:	f43f ab6f 	beq.w	80071f2 <_strtod_l+0x272>
 8007b14:	2301      	movs	r3, #1
 8007b16:	f7ff bbaa 	b.w	800726e <_strtod_l+0x2ee>
 8007b1a:	bf00      	nop
 8007b1c:	f3af 8000 	nop.w
 8007b20:	ffc00000 	.word	0xffc00000
 8007b24:	41dfffff 	.word	0x41dfffff
 8007b28:	94a03595 	.word	0x94a03595
 8007b2c:	3fcfffff 	.word	0x3fcfffff

08007b30 <_strtod_r>:
 8007b30:	4b01      	ldr	r3, [pc, #4]	@ (8007b38 <_strtod_r+0x8>)
 8007b32:	f7ff ba25 	b.w	8006f80 <_strtod_l>
 8007b36:	bf00      	nop
 8007b38:	20000068 	.word	0x20000068

08007b3c <_strtol_l.isra.0>:
 8007b3c:	2b24      	cmp	r3, #36	@ 0x24
 8007b3e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b42:	4686      	mov	lr, r0
 8007b44:	4690      	mov	r8, r2
 8007b46:	d801      	bhi.n	8007b4c <_strtol_l.isra.0+0x10>
 8007b48:	2b01      	cmp	r3, #1
 8007b4a:	d106      	bne.n	8007b5a <_strtol_l.isra.0+0x1e>
 8007b4c:	f7fd fdba 	bl	80056c4 <__errno>
 8007b50:	2316      	movs	r3, #22
 8007b52:	6003      	str	r3, [r0, #0]
 8007b54:	2000      	movs	r0, #0
 8007b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b5a:	460d      	mov	r5, r1
 8007b5c:	4833      	ldr	r0, [pc, #204]	@ (8007c2c <_strtol_l.isra.0+0xf0>)
 8007b5e:	462a      	mov	r2, r5
 8007b60:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007b64:	5d06      	ldrb	r6, [r0, r4]
 8007b66:	f016 0608 	ands.w	r6, r6, #8
 8007b6a:	d1f8      	bne.n	8007b5e <_strtol_l.isra.0+0x22>
 8007b6c:	2c2d      	cmp	r4, #45	@ 0x2d
 8007b6e:	d110      	bne.n	8007b92 <_strtol_l.isra.0+0x56>
 8007b70:	2601      	movs	r6, #1
 8007b72:	782c      	ldrb	r4, [r5, #0]
 8007b74:	1c95      	adds	r5, r2, #2
 8007b76:	f033 0210 	bics.w	r2, r3, #16
 8007b7a:	d115      	bne.n	8007ba8 <_strtol_l.isra.0+0x6c>
 8007b7c:	2c30      	cmp	r4, #48	@ 0x30
 8007b7e:	d10d      	bne.n	8007b9c <_strtol_l.isra.0+0x60>
 8007b80:	782a      	ldrb	r2, [r5, #0]
 8007b82:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8007b86:	2a58      	cmp	r2, #88	@ 0x58
 8007b88:	d108      	bne.n	8007b9c <_strtol_l.isra.0+0x60>
 8007b8a:	786c      	ldrb	r4, [r5, #1]
 8007b8c:	3502      	adds	r5, #2
 8007b8e:	2310      	movs	r3, #16
 8007b90:	e00a      	b.n	8007ba8 <_strtol_l.isra.0+0x6c>
 8007b92:	2c2b      	cmp	r4, #43	@ 0x2b
 8007b94:	bf04      	itt	eq
 8007b96:	782c      	ldrbeq	r4, [r5, #0]
 8007b98:	1c95      	addeq	r5, r2, #2
 8007b9a:	e7ec      	b.n	8007b76 <_strtol_l.isra.0+0x3a>
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d1f6      	bne.n	8007b8e <_strtol_l.isra.0+0x52>
 8007ba0:	2c30      	cmp	r4, #48	@ 0x30
 8007ba2:	bf14      	ite	ne
 8007ba4:	230a      	movne	r3, #10
 8007ba6:	2308      	moveq	r3, #8
 8007ba8:	2200      	movs	r2, #0
 8007baa:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8007bae:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007bb2:	fbbc f9f3 	udiv	r9, ip, r3
 8007bb6:	4610      	mov	r0, r2
 8007bb8:	fb03 ca19 	mls	sl, r3, r9, ip
 8007bbc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8007bc0:	2f09      	cmp	r7, #9
 8007bc2:	d80f      	bhi.n	8007be4 <_strtol_l.isra.0+0xa8>
 8007bc4:	463c      	mov	r4, r7
 8007bc6:	42a3      	cmp	r3, r4
 8007bc8:	dd1b      	ble.n	8007c02 <_strtol_l.isra.0+0xc6>
 8007bca:	1c57      	adds	r7, r2, #1
 8007bcc:	d007      	beq.n	8007bde <_strtol_l.isra.0+0xa2>
 8007bce:	4581      	cmp	r9, r0
 8007bd0:	d314      	bcc.n	8007bfc <_strtol_l.isra.0+0xc0>
 8007bd2:	d101      	bne.n	8007bd8 <_strtol_l.isra.0+0x9c>
 8007bd4:	45a2      	cmp	sl, r4
 8007bd6:	db11      	blt.n	8007bfc <_strtol_l.isra.0+0xc0>
 8007bd8:	2201      	movs	r2, #1
 8007bda:	fb00 4003 	mla	r0, r0, r3, r4
 8007bde:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007be2:	e7eb      	b.n	8007bbc <_strtol_l.isra.0+0x80>
 8007be4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8007be8:	2f19      	cmp	r7, #25
 8007bea:	d801      	bhi.n	8007bf0 <_strtol_l.isra.0+0xb4>
 8007bec:	3c37      	subs	r4, #55	@ 0x37
 8007bee:	e7ea      	b.n	8007bc6 <_strtol_l.isra.0+0x8a>
 8007bf0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8007bf4:	2f19      	cmp	r7, #25
 8007bf6:	d804      	bhi.n	8007c02 <_strtol_l.isra.0+0xc6>
 8007bf8:	3c57      	subs	r4, #87	@ 0x57
 8007bfa:	e7e4      	b.n	8007bc6 <_strtol_l.isra.0+0x8a>
 8007bfc:	f04f 32ff 	mov.w	r2, #4294967295
 8007c00:	e7ed      	b.n	8007bde <_strtol_l.isra.0+0xa2>
 8007c02:	1c53      	adds	r3, r2, #1
 8007c04:	d108      	bne.n	8007c18 <_strtol_l.isra.0+0xdc>
 8007c06:	2322      	movs	r3, #34	@ 0x22
 8007c08:	4660      	mov	r0, ip
 8007c0a:	f8ce 3000 	str.w	r3, [lr]
 8007c0e:	f1b8 0f00 	cmp.w	r8, #0
 8007c12:	d0a0      	beq.n	8007b56 <_strtol_l.isra.0+0x1a>
 8007c14:	1e69      	subs	r1, r5, #1
 8007c16:	e006      	b.n	8007c26 <_strtol_l.isra.0+0xea>
 8007c18:	b106      	cbz	r6, 8007c1c <_strtol_l.isra.0+0xe0>
 8007c1a:	4240      	negs	r0, r0
 8007c1c:	f1b8 0f00 	cmp.w	r8, #0
 8007c20:	d099      	beq.n	8007b56 <_strtol_l.isra.0+0x1a>
 8007c22:	2a00      	cmp	r2, #0
 8007c24:	d1f6      	bne.n	8007c14 <_strtol_l.isra.0+0xd8>
 8007c26:	f8c8 1000 	str.w	r1, [r8]
 8007c2a:	e794      	b.n	8007b56 <_strtol_l.isra.0+0x1a>
 8007c2c:	08009a59 	.word	0x08009a59

08007c30 <_strtol_r>:
 8007c30:	f7ff bf84 	b.w	8007b3c <_strtol_l.isra.0>

08007c34 <__ssputs_r>:
 8007c34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c38:	461f      	mov	r7, r3
 8007c3a:	688e      	ldr	r6, [r1, #8]
 8007c3c:	4682      	mov	sl, r0
 8007c3e:	42be      	cmp	r6, r7
 8007c40:	460c      	mov	r4, r1
 8007c42:	4690      	mov	r8, r2
 8007c44:	680b      	ldr	r3, [r1, #0]
 8007c46:	d82d      	bhi.n	8007ca4 <__ssputs_r+0x70>
 8007c48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007c4c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007c50:	d026      	beq.n	8007ca0 <__ssputs_r+0x6c>
 8007c52:	6965      	ldr	r5, [r4, #20]
 8007c54:	6909      	ldr	r1, [r1, #16]
 8007c56:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c5a:	eba3 0901 	sub.w	r9, r3, r1
 8007c5e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007c62:	1c7b      	adds	r3, r7, #1
 8007c64:	444b      	add	r3, r9
 8007c66:	106d      	asrs	r5, r5, #1
 8007c68:	429d      	cmp	r5, r3
 8007c6a:	bf38      	it	cc
 8007c6c:	461d      	movcc	r5, r3
 8007c6e:	0553      	lsls	r3, r2, #21
 8007c70:	d527      	bpl.n	8007cc2 <__ssputs_r+0x8e>
 8007c72:	4629      	mov	r1, r5
 8007c74:	f7fe fc36 	bl	80064e4 <_malloc_r>
 8007c78:	4606      	mov	r6, r0
 8007c7a:	b360      	cbz	r0, 8007cd6 <__ssputs_r+0xa2>
 8007c7c:	464a      	mov	r2, r9
 8007c7e:	6921      	ldr	r1, [r4, #16]
 8007c80:	f000 fc0c 	bl	800849c <memcpy>
 8007c84:	89a3      	ldrh	r3, [r4, #12]
 8007c86:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007c8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c8e:	81a3      	strh	r3, [r4, #12]
 8007c90:	6126      	str	r6, [r4, #16]
 8007c92:	444e      	add	r6, r9
 8007c94:	6026      	str	r6, [r4, #0]
 8007c96:	463e      	mov	r6, r7
 8007c98:	6165      	str	r5, [r4, #20]
 8007c9a:	eba5 0509 	sub.w	r5, r5, r9
 8007c9e:	60a5      	str	r5, [r4, #8]
 8007ca0:	42be      	cmp	r6, r7
 8007ca2:	d900      	bls.n	8007ca6 <__ssputs_r+0x72>
 8007ca4:	463e      	mov	r6, r7
 8007ca6:	4632      	mov	r2, r6
 8007ca8:	4641      	mov	r1, r8
 8007caa:	6820      	ldr	r0, [r4, #0]
 8007cac:	f000 fb97 	bl	80083de <memmove>
 8007cb0:	2000      	movs	r0, #0
 8007cb2:	68a3      	ldr	r3, [r4, #8]
 8007cb4:	1b9b      	subs	r3, r3, r6
 8007cb6:	60a3      	str	r3, [r4, #8]
 8007cb8:	6823      	ldr	r3, [r4, #0]
 8007cba:	4433      	add	r3, r6
 8007cbc:	6023      	str	r3, [r4, #0]
 8007cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cc2:	462a      	mov	r2, r5
 8007cc4:	f000 ff7b 	bl	8008bbe <_realloc_r>
 8007cc8:	4606      	mov	r6, r0
 8007cca:	2800      	cmp	r0, #0
 8007ccc:	d1e0      	bne.n	8007c90 <__ssputs_r+0x5c>
 8007cce:	4650      	mov	r0, sl
 8007cd0:	6921      	ldr	r1, [r4, #16]
 8007cd2:	f7fe fb95 	bl	8006400 <_free_r>
 8007cd6:	230c      	movs	r3, #12
 8007cd8:	f8ca 3000 	str.w	r3, [sl]
 8007cdc:	89a3      	ldrh	r3, [r4, #12]
 8007cde:	f04f 30ff 	mov.w	r0, #4294967295
 8007ce2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ce6:	81a3      	strh	r3, [r4, #12]
 8007ce8:	e7e9      	b.n	8007cbe <__ssputs_r+0x8a>
	...

08007cec <_svfiprintf_r>:
 8007cec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cf0:	4698      	mov	r8, r3
 8007cf2:	898b      	ldrh	r3, [r1, #12]
 8007cf4:	4607      	mov	r7, r0
 8007cf6:	061b      	lsls	r3, r3, #24
 8007cf8:	460d      	mov	r5, r1
 8007cfa:	4614      	mov	r4, r2
 8007cfc:	b09d      	sub	sp, #116	@ 0x74
 8007cfe:	d510      	bpl.n	8007d22 <_svfiprintf_r+0x36>
 8007d00:	690b      	ldr	r3, [r1, #16]
 8007d02:	b973      	cbnz	r3, 8007d22 <_svfiprintf_r+0x36>
 8007d04:	2140      	movs	r1, #64	@ 0x40
 8007d06:	f7fe fbed 	bl	80064e4 <_malloc_r>
 8007d0a:	6028      	str	r0, [r5, #0]
 8007d0c:	6128      	str	r0, [r5, #16]
 8007d0e:	b930      	cbnz	r0, 8007d1e <_svfiprintf_r+0x32>
 8007d10:	230c      	movs	r3, #12
 8007d12:	603b      	str	r3, [r7, #0]
 8007d14:	f04f 30ff 	mov.w	r0, #4294967295
 8007d18:	b01d      	add	sp, #116	@ 0x74
 8007d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d1e:	2340      	movs	r3, #64	@ 0x40
 8007d20:	616b      	str	r3, [r5, #20]
 8007d22:	2300      	movs	r3, #0
 8007d24:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d26:	2320      	movs	r3, #32
 8007d28:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007d2c:	2330      	movs	r3, #48	@ 0x30
 8007d2e:	f04f 0901 	mov.w	r9, #1
 8007d32:	f8cd 800c 	str.w	r8, [sp, #12]
 8007d36:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007ed0 <_svfiprintf_r+0x1e4>
 8007d3a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007d3e:	4623      	mov	r3, r4
 8007d40:	469a      	mov	sl, r3
 8007d42:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007d46:	b10a      	cbz	r2, 8007d4c <_svfiprintf_r+0x60>
 8007d48:	2a25      	cmp	r2, #37	@ 0x25
 8007d4a:	d1f9      	bne.n	8007d40 <_svfiprintf_r+0x54>
 8007d4c:	ebba 0b04 	subs.w	fp, sl, r4
 8007d50:	d00b      	beq.n	8007d6a <_svfiprintf_r+0x7e>
 8007d52:	465b      	mov	r3, fp
 8007d54:	4622      	mov	r2, r4
 8007d56:	4629      	mov	r1, r5
 8007d58:	4638      	mov	r0, r7
 8007d5a:	f7ff ff6b 	bl	8007c34 <__ssputs_r>
 8007d5e:	3001      	adds	r0, #1
 8007d60:	f000 80a7 	beq.w	8007eb2 <_svfiprintf_r+0x1c6>
 8007d64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d66:	445a      	add	r2, fp
 8007d68:	9209      	str	r2, [sp, #36]	@ 0x24
 8007d6a:	f89a 3000 	ldrb.w	r3, [sl]
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	f000 809f 	beq.w	8007eb2 <_svfiprintf_r+0x1c6>
 8007d74:	2300      	movs	r3, #0
 8007d76:	f04f 32ff 	mov.w	r2, #4294967295
 8007d7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d7e:	f10a 0a01 	add.w	sl, sl, #1
 8007d82:	9304      	str	r3, [sp, #16]
 8007d84:	9307      	str	r3, [sp, #28]
 8007d86:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007d8a:	931a      	str	r3, [sp, #104]	@ 0x68
 8007d8c:	4654      	mov	r4, sl
 8007d8e:	2205      	movs	r2, #5
 8007d90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d94:	484e      	ldr	r0, [pc, #312]	@ (8007ed0 <_svfiprintf_r+0x1e4>)
 8007d96:	f7fd fcc2 	bl	800571e <memchr>
 8007d9a:	9a04      	ldr	r2, [sp, #16]
 8007d9c:	b9d8      	cbnz	r0, 8007dd6 <_svfiprintf_r+0xea>
 8007d9e:	06d0      	lsls	r0, r2, #27
 8007da0:	bf44      	itt	mi
 8007da2:	2320      	movmi	r3, #32
 8007da4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007da8:	0711      	lsls	r1, r2, #28
 8007daa:	bf44      	itt	mi
 8007dac:	232b      	movmi	r3, #43	@ 0x2b
 8007dae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007db2:	f89a 3000 	ldrb.w	r3, [sl]
 8007db6:	2b2a      	cmp	r3, #42	@ 0x2a
 8007db8:	d015      	beq.n	8007de6 <_svfiprintf_r+0xfa>
 8007dba:	4654      	mov	r4, sl
 8007dbc:	2000      	movs	r0, #0
 8007dbe:	f04f 0c0a 	mov.w	ip, #10
 8007dc2:	9a07      	ldr	r2, [sp, #28]
 8007dc4:	4621      	mov	r1, r4
 8007dc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007dca:	3b30      	subs	r3, #48	@ 0x30
 8007dcc:	2b09      	cmp	r3, #9
 8007dce:	d94b      	bls.n	8007e68 <_svfiprintf_r+0x17c>
 8007dd0:	b1b0      	cbz	r0, 8007e00 <_svfiprintf_r+0x114>
 8007dd2:	9207      	str	r2, [sp, #28]
 8007dd4:	e014      	b.n	8007e00 <_svfiprintf_r+0x114>
 8007dd6:	eba0 0308 	sub.w	r3, r0, r8
 8007dda:	fa09 f303 	lsl.w	r3, r9, r3
 8007dde:	4313      	orrs	r3, r2
 8007de0:	46a2      	mov	sl, r4
 8007de2:	9304      	str	r3, [sp, #16]
 8007de4:	e7d2      	b.n	8007d8c <_svfiprintf_r+0xa0>
 8007de6:	9b03      	ldr	r3, [sp, #12]
 8007de8:	1d19      	adds	r1, r3, #4
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	9103      	str	r1, [sp, #12]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	bfbb      	ittet	lt
 8007df2:	425b      	neglt	r3, r3
 8007df4:	f042 0202 	orrlt.w	r2, r2, #2
 8007df8:	9307      	strge	r3, [sp, #28]
 8007dfa:	9307      	strlt	r3, [sp, #28]
 8007dfc:	bfb8      	it	lt
 8007dfe:	9204      	strlt	r2, [sp, #16]
 8007e00:	7823      	ldrb	r3, [r4, #0]
 8007e02:	2b2e      	cmp	r3, #46	@ 0x2e
 8007e04:	d10a      	bne.n	8007e1c <_svfiprintf_r+0x130>
 8007e06:	7863      	ldrb	r3, [r4, #1]
 8007e08:	2b2a      	cmp	r3, #42	@ 0x2a
 8007e0a:	d132      	bne.n	8007e72 <_svfiprintf_r+0x186>
 8007e0c:	9b03      	ldr	r3, [sp, #12]
 8007e0e:	3402      	adds	r4, #2
 8007e10:	1d1a      	adds	r2, r3, #4
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	9203      	str	r2, [sp, #12]
 8007e16:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007e1a:	9305      	str	r3, [sp, #20]
 8007e1c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007ed4 <_svfiprintf_r+0x1e8>
 8007e20:	2203      	movs	r2, #3
 8007e22:	4650      	mov	r0, sl
 8007e24:	7821      	ldrb	r1, [r4, #0]
 8007e26:	f7fd fc7a 	bl	800571e <memchr>
 8007e2a:	b138      	cbz	r0, 8007e3c <_svfiprintf_r+0x150>
 8007e2c:	2240      	movs	r2, #64	@ 0x40
 8007e2e:	9b04      	ldr	r3, [sp, #16]
 8007e30:	eba0 000a 	sub.w	r0, r0, sl
 8007e34:	4082      	lsls	r2, r0
 8007e36:	4313      	orrs	r3, r2
 8007e38:	3401      	adds	r4, #1
 8007e3a:	9304      	str	r3, [sp, #16]
 8007e3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e40:	2206      	movs	r2, #6
 8007e42:	4825      	ldr	r0, [pc, #148]	@ (8007ed8 <_svfiprintf_r+0x1ec>)
 8007e44:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007e48:	f7fd fc69 	bl	800571e <memchr>
 8007e4c:	2800      	cmp	r0, #0
 8007e4e:	d036      	beq.n	8007ebe <_svfiprintf_r+0x1d2>
 8007e50:	4b22      	ldr	r3, [pc, #136]	@ (8007edc <_svfiprintf_r+0x1f0>)
 8007e52:	bb1b      	cbnz	r3, 8007e9c <_svfiprintf_r+0x1b0>
 8007e54:	9b03      	ldr	r3, [sp, #12]
 8007e56:	3307      	adds	r3, #7
 8007e58:	f023 0307 	bic.w	r3, r3, #7
 8007e5c:	3308      	adds	r3, #8
 8007e5e:	9303      	str	r3, [sp, #12]
 8007e60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e62:	4433      	add	r3, r6
 8007e64:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e66:	e76a      	b.n	8007d3e <_svfiprintf_r+0x52>
 8007e68:	460c      	mov	r4, r1
 8007e6a:	2001      	movs	r0, #1
 8007e6c:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e70:	e7a8      	b.n	8007dc4 <_svfiprintf_r+0xd8>
 8007e72:	2300      	movs	r3, #0
 8007e74:	f04f 0c0a 	mov.w	ip, #10
 8007e78:	4619      	mov	r1, r3
 8007e7a:	3401      	adds	r4, #1
 8007e7c:	9305      	str	r3, [sp, #20]
 8007e7e:	4620      	mov	r0, r4
 8007e80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e84:	3a30      	subs	r2, #48	@ 0x30
 8007e86:	2a09      	cmp	r2, #9
 8007e88:	d903      	bls.n	8007e92 <_svfiprintf_r+0x1a6>
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d0c6      	beq.n	8007e1c <_svfiprintf_r+0x130>
 8007e8e:	9105      	str	r1, [sp, #20]
 8007e90:	e7c4      	b.n	8007e1c <_svfiprintf_r+0x130>
 8007e92:	4604      	mov	r4, r0
 8007e94:	2301      	movs	r3, #1
 8007e96:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e9a:	e7f0      	b.n	8007e7e <_svfiprintf_r+0x192>
 8007e9c:	ab03      	add	r3, sp, #12
 8007e9e:	9300      	str	r3, [sp, #0]
 8007ea0:	462a      	mov	r2, r5
 8007ea2:	4638      	mov	r0, r7
 8007ea4:	4b0e      	ldr	r3, [pc, #56]	@ (8007ee0 <_svfiprintf_r+0x1f4>)
 8007ea6:	a904      	add	r1, sp, #16
 8007ea8:	f7fc fbb0 	bl	800460c <_printf_float>
 8007eac:	1c42      	adds	r2, r0, #1
 8007eae:	4606      	mov	r6, r0
 8007eb0:	d1d6      	bne.n	8007e60 <_svfiprintf_r+0x174>
 8007eb2:	89ab      	ldrh	r3, [r5, #12]
 8007eb4:	065b      	lsls	r3, r3, #25
 8007eb6:	f53f af2d 	bmi.w	8007d14 <_svfiprintf_r+0x28>
 8007eba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007ebc:	e72c      	b.n	8007d18 <_svfiprintf_r+0x2c>
 8007ebe:	ab03      	add	r3, sp, #12
 8007ec0:	9300      	str	r3, [sp, #0]
 8007ec2:	462a      	mov	r2, r5
 8007ec4:	4638      	mov	r0, r7
 8007ec6:	4b06      	ldr	r3, [pc, #24]	@ (8007ee0 <_svfiprintf_r+0x1f4>)
 8007ec8:	a904      	add	r1, sp, #16
 8007eca:	f7fc fe3d 	bl	8004b48 <_printf_i>
 8007ece:	e7ed      	b.n	8007eac <_svfiprintf_r+0x1c0>
 8007ed0:	08009853 	.word	0x08009853
 8007ed4:	08009859 	.word	0x08009859
 8007ed8:	0800985d 	.word	0x0800985d
 8007edc:	0800460d 	.word	0x0800460d
 8007ee0:	08007c35 	.word	0x08007c35

08007ee4 <__sfputc_r>:
 8007ee4:	6893      	ldr	r3, [r2, #8]
 8007ee6:	b410      	push	{r4}
 8007ee8:	3b01      	subs	r3, #1
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	6093      	str	r3, [r2, #8]
 8007eee:	da07      	bge.n	8007f00 <__sfputc_r+0x1c>
 8007ef0:	6994      	ldr	r4, [r2, #24]
 8007ef2:	42a3      	cmp	r3, r4
 8007ef4:	db01      	blt.n	8007efa <__sfputc_r+0x16>
 8007ef6:	290a      	cmp	r1, #10
 8007ef8:	d102      	bne.n	8007f00 <__sfputc_r+0x1c>
 8007efa:	bc10      	pop	{r4}
 8007efc:	f7fd baeb 	b.w	80054d6 <__swbuf_r>
 8007f00:	6813      	ldr	r3, [r2, #0]
 8007f02:	1c58      	adds	r0, r3, #1
 8007f04:	6010      	str	r0, [r2, #0]
 8007f06:	7019      	strb	r1, [r3, #0]
 8007f08:	4608      	mov	r0, r1
 8007f0a:	bc10      	pop	{r4}
 8007f0c:	4770      	bx	lr

08007f0e <__sfputs_r>:
 8007f0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f10:	4606      	mov	r6, r0
 8007f12:	460f      	mov	r7, r1
 8007f14:	4614      	mov	r4, r2
 8007f16:	18d5      	adds	r5, r2, r3
 8007f18:	42ac      	cmp	r4, r5
 8007f1a:	d101      	bne.n	8007f20 <__sfputs_r+0x12>
 8007f1c:	2000      	movs	r0, #0
 8007f1e:	e007      	b.n	8007f30 <__sfputs_r+0x22>
 8007f20:	463a      	mov	r2, r7
 8007f22:	4630      	mov	r0, r6
 8007f24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f28:	f7ff ffdc 	bl	8007ee4 <__sfputc_r>
 8007f2c:	1c43      	adds	r3, r0, #1
 8007f2e:	d1f3      	bne.n	8007f18 <__sfputs_r+0xa>
 8007f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007f34 <_vfiprintf_r>:
 8007f34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f38:	460d      	mov	r5, r1
 8007f3a:	4614      	mov	r4, r2
 8007f3c:	4698      	mov	r8, r3
 8007f3e:	4606      	mov	r6, r0
 8007f40:	b09d      	sub	sp, #116	@ 0x74
 8007f42:	b118      	cbz	r0, 8007f4c <_vfiprintf_r+0x18>
 8007f44:	6a03      	ldr	r3, [r0, #32]
 8007f46:	b90b      	cbnz	r3, 8007f4c <_vfiprintf_r+0x18>
 8007f48:	f7fd f9b2 	bl	80052b0 <__sinit>
 8007f4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007f4e:	07d9      	lsls	r1, r3, #31
 8007f50:	d405      	bmi.n	8007f5e <_vfiprintf_r+0x2a>
 8007f52:	89ab      	ldrh	r3, [r5, #12]
 8007f54:	059a      	lsls	r2, r3, #22
 8007f56:	d402      	bmi.n	8007f5e <_vfiprintf_r+0x2a>
 8007f58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007f5a:	f7fd fbde 	bl	800571a <__retarget_lock_acquire_recursive>
 8007f5e:	89ab      	ldrh	r3, [r5, #12]
 8007f60:	071b      	lsls	r3, r3, #28
 8007f62:	d501      	bpl.n	8007f68 <_vfiprintf_r+0x34>
 8007f64:	692b      	ldr	r3, [r5, #16]
 8007f66:	b99b      	cbnz	r3, 8007f90 <_vfiprintf_r+0x5c>
 8007f68:	4629      	mov	r1, r5
 8007f6a:	4630      	mov	r0, r6
 8007f6c:	f7fd faf2 	bl	8005554 <__swsetup_r>
 8007f70:	b170      	cbz	r0, 8007f90 <_vfiprintf_r+0x5c>
 8007f72:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007f74:	07dc      	lsls	r4, r3, #31
 8007f76:	d504      	bpl.n	8007f82 <_vfiprintf_r+0x4e>
 8007f78:	f04f 30ff 	mov.w	r0, #4294967295
 8007f7c:	b01d      	add	sp, #116	@ 0x74
 8007f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f82:	89ab      	ldrh	r3, [r5, #12]
 8007f84:	0598      	lsls	r0, r3, #22
 8007f86:	d4f7      	bmi.n	8007f78 <_vfiprintf_r+0x44>
 8007f88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007f8a:	f7fd fbc7 	bl	800571c <__retarget_lock_release_recursive>
 8007f8e:	e7f3      	b.n	8007f78 <_vfiprintf_r+0x44>
 8007f90:	2300      	movs	r3, #0
 8007f92:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f94:	2320      	movs	r3, #32
 8007f96:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007f9a:	2330      	movs	r3, #48	@ 0x30
 8007f9c:	f04f 0901 	mov.w	r9, #1
 8007fa0:	f8cd 800c 	str.w	r8, [sp, #12]
 8007fa4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8008150 <_vfiprintf_r+0x21c>
 8007fa8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007fac:	4623      	mov	r3, r4
 8007fae:	469a      	mov	sl, r3
 8007fb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fb4:	b10a      	cbz	r2, 8007fba <_vfiprintf_r+0x86>
 8007fb6:	2a25      	cmp	r2, #37	@ 0x25
 8007fb8:	d1f9      	bne.n	8007fae <_vfiprintf_r+0x7a>
 8007fba:	ebba 0b04 	subs.w	fp, sl, r4
 8007fbe:	d00b      	beq.n	8007fd8 <_vfiprintf_r+0xa4>
 8007fc0:	465b      	mov	r3, fp
 8007fc2:	4622      	mov	r2, r4
 8007fc4:	4629      	mov	r1, r5
 8007fc6:	4630      	mov	r0, r6
 8007fc8:	f7ff ffa1 	bl	8007f0e <__sfputs_r>
 8007fcc:	3001      	adds	r0, #1
 8007fce:	f000 80a7 	beq.w	8008120 <_vfiprintf_r+0x1ec>
 8007fd2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007fd4:	445a      	add	r2, fp
 8007fd6:	9209      	str	r2, [sp, #36]	@ 0x24
 8007fd8:	f89a 3000 	ldrb.w	r3, [sl]
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	f000 809f 	beq.w	8008120 <_vfiprintf_r+0x1ec>
 8007fe2:	2300      	movs	r3, #0
 8007fe4:	f04f 32ff 	mov.w	r2, #4294967295
 8007fe8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007fec:	f10a 0a01 	add.w	sl, sl, #1
 8007ff0:	9304      	str	r3, [sp, #16]
 8007ff2:	9307      	str	r3, [sp, #28]
 8007ff4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007ff8:	931a      	str	r3, [sp, #104]	@ 0x68
 8007ffa:	4654      	mov	r4, sl
 8007ffc:	2205      	movs	r2, #5
 8007ffe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008002:	4853      	ldr	r0, [pc, #332]	@ (8008150 <_vfiprintf_r+0x21c>)
 8008004:	f7fd fb8b 	bl	800571e <memchr>
 8008008:	9a04      	ldr	r2, [sp, #16]
 800800a:	b9d8      	cbnz	r0, 8008044 <_vfiprintf_r+0x110>
 800800c:	06d1      	lsls	r1, r2, #27
 800800e:	bf44      	itt	mi
 8008010:	2320      	movmi	r3, #32
 8008012:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008016:	0713      	lsls	r3, r2, #28
 8008018:	bf44      	itt	mi
 800801a:	232b      	movmi	r3, #43	@ 0x2b
 800801c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008020:	f89a 3000 	ldrb.w	r3, [sl]
 8008024:	2b2a      	cmp	r3, #42	@ 0x2a
 8008026:	d015      	beq.n	8008054 <_vfiprintf_r+0x120>
 8008028:	4654      	mov	r4, sl
 800802a:	2000      	movs	r0, #0
 800802c:	f04f 0c0a 	mov.w	ip, #10
 8008030:	9a07      	ldr	r2, [sp, #28]
 8008032:	4621      	mov	r1, r4
 8008034:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008038:	3b30      	subs	r3, #48	@ 0x30
 800803a:	2b09      	cmp	r3, #9
 800803c:	d94b      	bls.n	80080d6 <_vfiprintf_r+0x1a2>
 800803e:	b1b0      	cbz	r0, 800806e <_vfiprintf_r+0x13a>
 8008040:	9207      	str	r2, [sp, #28]
 8008042:	e014      	b.n	800806e <_vfiprintf_r+0x13a>
 8008044:	eba0 0308 	sub.w	r3, r0, r8
 8008048:	fa09 f303 	lsl.w	r3, r9, r3
 800804c:	4313      	orrs	r3, r2
 800804e:	46a2      	mov	sl, r4
 8008050:	9304      	str	r3, [sp, #16]
 8008052:	e7d2      	b.n	8007ffa <_vfiprintf_r+0xc6>
 8008054:	9b03      	ldr	r3, [sp, #12]
 8008056:	1d19      	adds	r1, r3, #4
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	9103      	str	r1, [sp, #12]
 800805c:	2b00      	cmp	r3, #0
 800805e:	bfbb      	ittet	lt
 8008060:	425b      	neglt	r3, r3
 8008062:	f042 0202 	orrlt.w	r2, r2, #2
 8008066:	9307      	strge	r3, [sp, #28]
 8008068:	9307      	strlt	r3, [sp, #28]
 800806a:	bfb8      	it	lt
 800806c:	9204      	strlt	r2, [sp, #16]
 800806e:	7823      	ldrb	r3, [r4, #0]
 8008070:	2b2e      	cmp	r3, #46	@ 0x2e
 8008072:	d10a      	bne.n	800808a <_vfiprintf_r+0x156>
 8008074:	7863      	ldrb	r3, [r4, #1]
 8008076:	2b2a      	cmp	r3, #42	@ 0x2a
 8008078:	d132      	bne.n	80080e0 <_vfiprintf_r+0x1ac>
 800807a:	9b03      	ldr	r3, [sp, #12]
 800807c:	3402      	adds	r4, #2
 800807e:	1d1a      	adds	r2, r3, #4
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	9203      	str	r2, [sp, #12]
 8008084:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008088:	9305      	str	r3, [sp, #20]
 800808a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8008154 <_vfiprintf_r+0x220>
 800808e:	2203      	movs	r2, #3
 8008090:	4650      	mov	r0, sl
 8008092:	7821      	ldrb	r1, [r4, #0]
 8008094:	f7fd fb43 	bl	800571e <memchr>
 8008098:	b138      	cbz	r0, 80080aa <_vfiprintf_r+0x176>
 800809a:	2240      	movs	r2, #64	@ 0x40
 800809c:	9b04      	ldr	r3, [sp, #16]
 800809e:	eba0 000a 	sub.w	r0, r0, sl
 80080a2:	4082      	lsls	r2, r0
 80080a4:	4313      	orrs	r3, r2
 80080a6:	3401      	adds	r4, #1
 80080a8:	9304      	str	r3, [sp, #16]
 80080aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080ae:	2206      	movs	r2, #6
 80080b0:	4829      	ldr	r0, [pc, #164]	@ (8008158 <_vfiprintf_r+0x224>)
 80080b2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80080b6:	f7fd fb32 	bl	800571e <memchr>
 80080ba:	2800      	cmp	r0, #0
 80080bc:	d03f      	beq.n	800813e <_vfiprintf_r+0x20a>
 80080be:	4b27      	ldr	r3, [pc, #156]	@ (800815c <_vfiprintf_r+0x228>)
 80080c0:	bb1b      	cbnz	r3, 800810a <_vfiprintf_r+0x1d6>
 80080c2:	9b03      	ldr	r3, [sp, #12]
 80080c4:	3307      	adds	r3, #7
 80080c6:	f023 0307 	bic.w	r3, r3, #7
 80080ca:	3308      	adds	r3, #8
 80080cc:	9303      	str	r3, [sp, #12]
 80080ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080d0:	443b      	add	r3, r7
 80080d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80080d4:	e76a      	b.n	8007fac <_vfiprintf_r+0x78>
 80080d6:	460c      	mov	r4, r1
 80080d8:	2001      	movs	r0, #1
 80080da:	fb0c 3202 	mla	r2, ip, r2, r3
 80080de:	e7a8      	b.n	8008032 <_vfiprintf_r+0xfe>
 80080e0:	2300      	movs	r3, #0
 80080e2:	f04f 0c0a 	mov.w	ip, #10
 80080e6:	4619      	mov	r1, r3
 80080e8:	3401      	adds	r4, #1
 80080ea:	9305      	str	r3, [sp, #20]
 80080ec:	4620      	mov	r0, r4
 80080ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 80080f2:	3a30      	subs	r2, #48	@ 0x30
 80080f4:	2a09      	cmp	r2, #9
 80080f6:	d903      	bls.n	8008100 <_vfiprintf_r+0x1cc>
 80080f8:	2b00      	cmp	r3, #0
 80080fa:	d0c6      	beq.n	800808a <_vfiprintf_r+0x156>
 80080fc:	9105      	str	r1, [sp, #20]
 80080fe:	e7c4      	b.n	800808a <_vfiprintf_r+0x156>
 8008100:	4604      	mov	r4, r0
 8008102:	2301      	movs	r3, #1
 8008104:	fb0c 2101 	mla	r1, ip, r1, r2
 8008108:	e7f0      	b.n	80080ec <_vfiprintf_r+0x1b8>
 800810a:	ab03      	add	r3, sp, #12
 800810c:	9300      	str	r3, [sp, #0]
 800810e:	462a      	mov	r2, r5
 8008110:	4630      	mov	r0, r6
 8008112:	4b13      	ldr	r3, [pc, #76]	@ (8008160 <_vfiprintf_r+0x22c>)
 8008114:	a904      	add	r1, sp, #16
 8008116:	f7fc fa79 	bl	800460c <_printf_float>
 800811a:	4607      	mov	r7, r0
 800811c:	1c78      	adds	r0, r7, #1
 800811e:	d1d6      	bne.n	80080ce <_vfiprintf_r+0x19a>
 8008120:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008122:	07d9      	lsls	r1, r3, #31
 8008124:	d405      	bmi.n	8008132 <_vfiprintf_r+0x1fe>
 8008126:	89ab      	ldrh	r3, [r5, #12]
 8008128:	059a      	lsls	r2, r3, #22
 800812a:	d402      	bmi.n	8008132 <_vfiprintf_r+0x1fe>
 800812c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800812e:	f7fd faf5 	bl	800571c <__retarget_lock_release_recursive>
 8008132:	89ab      	ldrh	r3, [r5, #12]
 8008134:	065b      	lsls	r3, r3, #25
 8008136:	f53f af1f 	bmi.w	8007f78 <_vfiprintf_r+0x44>
 800813a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800813c:	e71e      	b.n	8007f7c <_vfiprintf_r+0x48>
 800813e:	ab03      	add	r3, sp, #12
 8008140:	9300      	str	r3, [sp, #0]
 8008142:	462a      	mov	r2, r5
 8008144:	4630      	mov	r0, r6
 8008146:	4b06      	ldr	r3, [pc, #24]	@ (8008160 <_vfiprintf_r+0x22c>)
 8008148:	a904      	add	r1, sp, #16
 800814a:	f7fc fcfd 	bl	8004b48 <_printf_i>
 800814e:	e7e4      	b.n	800811a <_vfiprintf_r+0x1e6>
 8008150:	08009853 	.word	0x08009853
 8008154:	08009859 	.word	0x08009859
 8008158:	0800985d 	.word	0x0800985d
 800815c:	0800460d 	.word	0x0800460d
 8008160:	08007f0f 	.word	0x08007f0f

08008164 <__sflush_r>:
 8008164:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800816a:	0716      	lsls	r6, r2, #28
 800816c:	4605      	mov	r5, r0
 800816e:	460c      	mov	r4, r1
 8008170:	d454      	bmi.n	800821c <__sflush_r+0xb8>
 8008172:	684b      	ldr	r3, [r1, #4]
 8008174:	2b00      	cmp	r3, #0
 8008176:	dc02      	bgt.n	800817e <__sflush_r+0x1a>
 8008178:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800817a:	2b00      	cmp	r3, #0
 800817c:	dd48      	ble.n	8008210 <__sflush_r+0xac>
 800817e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008180:	2e00      	cmp	r6, #0
 8008182:	d045      	beq.n	8008210 <__sflush_r+0xac>
 8008184:	2300      	movs	r3, #0
 8008186:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800818a:	682f      	ldr	r7, [r5, #0]
 800818c:	6a21      	ldr	r1, [r4, #32]
 800818e:	602b      	str	r3, [r5, #0]
 8008190:	d030      	beq.n	80081f4 <__sflush_r+0x90>
 8008192:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008194:	89a3      	ldrh	r3, [r4, #12]
 8008196:	0759      	lsls	r1, r3, #29
 8008198:	d505      	bpl.n	80081a6 <__sflush_r+0x42>
 800819a:	6863      	ldr	r3, [r4, #4]
 800819c:	1ad2      	subs	r2, r2, r3
 800819e:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80081a0:	b10b      	cbz	r3, 80081a6 <__sflush_r+0x42>
 80081a2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80081a4:	1ad2      	subs	r2, r2, r3
 80081a6:	2300      	movs	r3, #0
 80081a8:	4628      	mov	r0, r5
 80081aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80081ac:	6a21      	ldr	r1, [r4, #32]
 80081ae:	47b0      	blx	r6
 80081b0:	1c43      	adds	r3, r0, #1
 80081b2:	89a3      	ldrh	r3, [r4, #12]
 80081b4:	d106      	bne.n	80081c4 <__sflush_r+0x60>
 80081b6:	6829      	ldr	r1, [r5, #0]
 80081b8:	291d      	cmp	r1, #29
 80081ba:	d82b      	bhi.n	8008214 <__sflush_r+0xb0>
 80081bc:	4a28      	ldr	r2, [pc, #160]	@ (8008260 <__sflush_r+0xfc>)
 80081be:	40ca      	lsrs	r2, r1
 80081c0:	07d6      	lsls	r6, r2, #31
 80081c2:	d527      	bpl.n	8008214 <__sflush_r+0xb0>
 80081c4:	2200      	movs	r2, #0
 80081c6:	6062      	str	r2, [r4, #4]
 80081c8:	6922      	ldr	r2, [r4, #16]
 80081ca:	04d9      	lsls	r1, r3, #19
 80081cc:	6022      	str	r2, [r4, #0]
 80081ce:	d504      	bpl.n	80081da <__sflush_r+0x76>
 80081d0:	1c42      	adds	r2, r0, #1
 80081d2:	d101      	bne.n	80081d8 <__sflush_r+0x74>
 80081d4:	682b      	ldr	r3, [r5, #0]
 80081d6:	b903      	cbnz	r3, 80081da <__sflush_r+0x76>
 80081d8:	6560      	str	r0, [r4, #84]	@ 0x54
 80081da:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80081dc:	602f      	str	r7, [r5, #0]
 80081de:	b1b9      	cbz	r1, 8008210 <__sflush_r+0xac>
 80081e0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80081e4:	4299      	cmp	r1, r3
 80081e6:	d002      	beq.n	80081ee <__sflush_r+0x8a>
 80081e8:	4628      	mov	r0, r5
 80081ea:	f7fe f909 	bl	8006400 <_free_r>
 80081ee:	2300      	movs	r3, #0
 80081f0:	6363      	str	r3, [r4, #52]	@ 0x34
 80081f2:	e00d      	b.n	8008210 <__sflush_r+0xac>
 80081f4:	2301      	movs	r3, #1
 80081f6:	4628      	mov	r0, r5
 80081f8:	47b0      	blx	r6
 80081fa:	4602      	mov	r2, r0
 80081fc:	1c50      	adds	r0, r2, #1
 80081fe:	d1c9      	bne.n	8008194 <__sflush_r+0x30>
 8008200:	682b      	ldr	r3, [r5, #0]
 8008202:	2b00      	cmp	r3, #0
 8008204:	d0c6      	beq.n	8008194 <__sflush_r+0x30>
 8008206:	2b1d      	cmp	r3, #29
 8008208:	d001      	beq.n	800820e <__sflush_r+0xaa>
 800820a:	2b16      	cmp	r3, #22
 800820c:	d11d      	bne.n	800824a <__sflush_r+0xe6>
 800820e:	602f      	str	r7, [r5, #0]
 8008210:	2000      	movs	r0, #0
 8008212:	e021      	b.n	8008258 <__sflush_r+0xf4>
 8008214:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008218:	b21b      	sxth	r3, r3
 800821a:	e01a      	b.n	8008252 <__sflush_r+0xee>
 800821c:	690f      	ldr	r7, [r1, #16]
 800821e:	2f00      	cmp	r7, #0
 8008220:	d0f6      	beq.n	8008210 <__sflush_r+0xac>
 8008222:	0793      	lsls	r3, r2, #30
 8008224:	bf18      	it	ne
 8008226:	2300      	movne	r3, #0
 8008228:	680e      	ldr	r6, [r1, #0]
 800822a:	bf08      	it	eq
 800822c:	694b      	ldreq	r3, [r1, #20]
 800822e:	1bf6      	subs	r6, r6, r7
 8008230:	600f      	str	r7, [r1, #0]
 8008232:	608b      	str	r3, [r1, #8]
 8008234:	2e00      	cmp	r6, #0
 8008236:	ddeb      	ble.n	8008210 <__sflush_r+0xac>
 8008238:	4633      	mov	r3, r6
 800823a:	463a      	mov	r2, r7
 800823c:	4628      	mov	r0, r5
 800823e:	6a21      	ldr	r1, [r4, #32]
 8008240:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8008244:	47e0      	blx	ip
 8008246:	2800      	cmp	r0, #0
 8008248:	dc07      	bgt.n	800825a <__sflush_r+0xf6>
 800824a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800824e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008252:	f04f 30ff 	mov.w	r0, #4294967295
 8008256:	81a3      	strh	r3, [r4, #12]
 8008258:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800825a:	4407      	add	r7, r0
 800825c:	1a36      	subs	r6, r6, r0
 800825e:	e7e9      	b.n	8008234 <__sflush_r+0xd0>
 8008260:	20400001 	.word	0x20400001

08008264 <_fflush_r>:
 8008264:	b538      	push	{r3, r4, r5, lr}
 8008266:	690b      	ldr	r3, [r1, #16]
 8008268:	4605      	mov	r5, r0
 800826a:	460c      	mov	r4, r1
 800826c:	b913      	cbnz	r3, 8008274 <_fflush_r+0x10>
 800826e:	2500      	movs	r5, #0
 8008270:	4628      	mov	r0, r5
 8008272:	bd38      	pop	{r3, r4, r5, pc}
 8008274:	b118      	cbz	r0, 800827e <_fflush_r+0x1a>
 8008276:	6a03      	ldr	r3, [r0, #32]
 8008278:	b90b      	cbnz	r3, 800827e <_fflush_r+0x1a>
 800827a:	f7fd f819 	bl	80052b0 <__sinit>
 800827e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008282:	2b00      	cmp	r3, #0
 8008284:	d0f3      	beq.n	800826e <_fflush_r+0xa>
 8008286:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008288:	07d0      	lsls	r0, r2, #31
 800828a:	d404      	bmi.n	8008296 <_fflush_r+0x32>
 800828c:	0599      	lsls	r1, r3, #22
 800828e:	d402      	bmi.n	8008296 <_fflush_r+0x32>
 8008290:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008292:	f7fd fa42 	bl	800571a <__retarget_lock_acquire_recursive>
 8008296:	4628      	mov	r0, r5
 8008298:	4621      	mov	r1, r4
 800829a:	f7ff ff63 	bl	8008164 <__sflush_r>
 800829e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80082a0:	4605      	mov	r5, r0
 80082a2:	07da      	lsls	r2, r3, #31
 80082a4:	d4e4      	bmi.n	8008270 <_fflush_r+0xc>
 80082a6:	89a3      	ldrh	r3, [r4, #12]
 80082a8:	059b      	lsls	r3, r3, #22
 80082aa:	d4e1      	bmi.n	8008270 <_fflush_r+0xc>
 80082ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80082ae:	f7fd fa35 	bl	800571c <__retarget_lock_release_recursive>
 80082b2:	e7dd      	b.n	8008270 <_fflush_r+0xc>

080082b4 <__swhatbuf_r>:
 80082b4:	b570      	push	{r4, r5, r6, lr}
 80082b6:	460c      	mov	r4, r1
 80082b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082bc:	4615      	mov	r5, r2
 80082be:	2900      	cmp	r1, #0
 80082c0:	461e      	mov	r6, r3
 80082c2:	b096      	sub	sp, #88	@ 0x58
 80082c4:	da0c      	bge.n	80082e0 <__swhatbuf_r+0x2c>
 80082c6:	89a3      	ldrh	r3, [r4, #12]
 80082c8:	2100      	movs	r1, #0
 80082ca:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80082ce:	bf14      	ite	ne
 80082d0:	2340      	movne	r3, #64	@ 0x40
 80082d2:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80082d6:	2000      	movs	r0, #0
 80082d8:	6031      	str	r1, [r6, #0]
 80082da:	602b      	str	r3, [r5, #0]
 80082dc:	b016      	add	sp, #88	@ 0x58
 80082de:	bd70      	pop	{r4, r5, r6, pc}
 80082e0:	466a      	mov	r2, sp
 80082e2:	f000 f8a9 	bl	8008438 <_fstat_r>
 80082e6:	2800      	cmp	r0, #0
 80082e8:	dbed      	blt.n	80082c6 <__swhatbuf_r+0x12>
 80082ea:	9901      	ldr	r1, [sp, #4]
 80082ec:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80082f0:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80082f4:	4259      	negs	r1, r3
 80082f6:	4159      	adcs	r1, r3
 80082f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80082fc:	e7eb      	b.n	80082d6 <__swhatbuf_r+0x22>

080082fe <__smakebuf_r>:
 80082fe:	898b      	ldrh	r3, [r1, #12]
 8008300:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008302:	079d      	lsls	r5, r3, #30
 8008304:	4606      	mov	r6, r0
 8008306:	460c      	mov	r4, r1
 8008308:	d507      	bpl.n	800831a <__smakebuf_r+0x1c>
 800830a:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800830e:	6023      	str	r3, [r4, #0]
 8008310:	6123      	str	r3, [r4, #16]
 8008312:	2301      	movs	r3, #1
 8008314:	6163      	str	r3, [r4, #20]
 8008316:	b003      	add	sp, #12
 8008318:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800831a:	466a      	mov	r2, sp
 800831c:	ab01      	add	r3, sp, #4
 800831e:	f7ff ffc9 	bl	80082b4 <__swhatbuf_r>
 8008322:	9f00      	ldr	r7, [sp, #0]
 8008324:	4605      	mov	r5, r0
 8008326:	4639      	mov	r1, r7
 8008328:	4630      	mov	r0, r6
 800832a:	f7fe f8db 	bl	80064e4 <_malloc_r>
 800832e:	b948      	cbnz	r0, 8008344 <__smakebuf_r+0x46>
 8008330:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008334:	059a      	lsls	r2, r3, #22
 8008336:	d4ee      	bmi.n	8008316 <__smakebuf_r+0x18>
 8008338:	f023 0303 	bic.w	r3, r3, #3
 800833c:	f043 0302 	orr.w	r3, r3, #2
 8008340:	81a3      	strh	r3, [r4, #12]
 8008342:	e7e2      	b.n	800830a <__smakebuf_r+0xc>
 8008344:	89a3      	ldrh	r3, [r4, #12]
 8008346:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800834a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800834e:	81a3      	strh	r3, [r4, #12]
 8008350:	9b01      	ldr	r3, [sp, #4]
 8008352:	6020      	str	r0, [r4, #0]
 8008354:	b15b      	cbz	r3, 800836e <__smakebuf_r+0x70>
 8008356:	4630      	mov	r0, r6
 8008358:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800835c:	f000 f87e 	bl	800845c <_isatty_r>
 8008360:	b128      	cbz	r0, 800836e <__smakebuf_r+0x70>
 8008362:	89a3      	ldrh	r3, [r4, #12]
 8008364:	f023 0303 	bic.w	r3, r3, #3
 8008368:	f043 0301 	orr.w	r3, r3, #1
 800836c:	81a3      	strh	r3, [r4, #12]
 800836e:	89a3      	ldrh	r3, [r4, #12]
 8008370:	431d      	orrs	r5, r3
 8008372:	81a5      	strh	r5, [r4, #12]
 8008374:	e7cf      	b.n	8008316 <__smakebuf_r+0x18>

08008376 <_putc_r>:
 8008376:	b570      	push	{r4, r5, r6, lr}
 8008378:	460d      	mov	r5, r1
 800837a:	4614      	mov	r4, r2
 800837c:	4606      	mov	r6, r0
 800837e:	b118      	cbz	r0, 8008388 <_putc_r+0x12>
 8008380:	6a03      	ldr	r3, [r0, #32]
 8008382:	b90b      	cbnz	r3, 8008388 <_putc_r+0x12>
 8008384:	f7fc ff94 	bl	80052b0 <__sinit>
 8008388:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800838a:	07d8      	lsls	r0, r3, #31
 800838c:	d405      	bmi.n	800839a <_putc_r+0x24>
 800838e:	89a3      	ldrh	r3, [r4, #12]
 8008390:	0599      	lsls	r1, r3, #22
 8008392:	d402      	bmi.n	800839a <_putc_r+0x24>
 8008394:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008396:	f7fd f9c0 	bl	800571a <__retarget_lock_acquire_recursive>
 800839a:	68a3      	ldr	r3, [r4, #8]
 800839c:	3b01      	subs	r3, #1
 800839e:	2b00      	cmp	r3, #0
 80083a0:	60a3      	str	r3, [r4, #8]
 80083a2:	da05      	bge.n	80083b0 <_putc_r+0x3a>
 80083a4:	69a2      	ldr	r2, [r4, #24]
 80083a6:	4293      	cmp	r3, r2
 80083a8:	db12      	blt.n	80083d0 <_putc_r+0x5a>
 80083aa:	b2eb      	uxtb	r3, r5
 80083ac:	2b0a      	cmp	r3, #10
 80083ae:	d00f      	beq.n	80083d0 <_putc_r+0x5a>
 80083b0:	6823      	ldr	r3, [r4, #0]
 80083b2:	1c5a      	adds	r2, r3, #1
 80083b4:	6022      	str	r2, [r4, #0]
 80083b6:	701d      	strb	r5, [r3, #0]
 80083b8:	b2ed      	uxtb	r5, r5
 80083ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80083bc:	07da      	lsls	r2, r3, #31
 80083be:	d405      	bmi.n	80083cc <_putc_r+0x56>
 80083c0:	89a3      	ldrh	r3, [r4, #12]
 80083c2:	059b      	lsls	r3, r3, #22
 80083c4:	d402      	bmi.n	80083cc <_putc_r+0x56>
 80083c6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80083c8:	f7fd f9a8 	bl	800571c <__retarget_lock_release_recursive>
 80083cc:	4628      	mov	r0, r5
 80083ce:	bd70      	pop	{r4, r5, r6, pc}
 80083d0:	4629      	mov	r1, r5
 80083d2:	4622      	mov	r2, r4
 80083d4:	4630      	mov	r0, r6
 80083d6:	f7fd f87e 	bl	80054d6 <__swbuf_r>
 80083da:	4605      	mov	r5, r0
 80083dc:	e7ed      	b.n	80083ba <_putc_r+0x44>

080083de <memmove>:
 80083de:	4288      	cmp	r0, r1
 80083e0:	b510      	push	{r4, lr}
 80083e2:	eb01 0402 	add.w	r4, r1, r2
 80083e6:	d902      	bls.n	80083ee <memmove+0x10>
 80083e8:	4284      	cmp	r4, r0
 80083ea:	4623      	mov	r3, r4
 80083ec:	d807      	bhi.n	80083fe <memmove+0x20>
 80083ee:	1e43      	subs	r3, r0, #1
 80083f0:	42a1      	cmp	r1, r4
 80083f2:	d008      	beq.n	8008406 <memmove+0x28>
 80083f4:	f811 2b01 	ldrb.w	r2, [r1], #1
 80083f8:	f803 2f01 	strb.w	r2, [r3, #1]!
 80083fc:	e7f8      	b.n	80083f0 <memmove+0x12>
 80083fe:	4601      	mov	r1, r0
 8008400:	4402      	add	r2, r0
 8008402:	428a      	cmp	r2, r1
 8008404:	d100      	bne.n	8008408 <memmove+0x2a>
 8008406:	bd10      	pop	{r4, pc}
 8008408:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800840c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008410:	e7f7      	b.n	8008402 <memmove+0x24>

08008412 <strncmp>:
 8008412:	b510      	push	{r4, lr}
 8008414:	b16a      	cbz	r2, 8008432 <strncmp+0x20>
 8008416:	3901      	subs	r1, #1
 8008418:	1884      	adds	r4, r0, r2
 800841a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800841e:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8008422:	429a      	cmp	r2, r3
 8008424:	d103      	bne.n	800842e <strncmp+0x1c>
 8008426:	42a0      	cmp	r0, r4
 8008428:	d001      	beq.n	800842e <strncmp+0x1c>
 800842a:	2a00      	cmp	r2, #0
 800842c:	d1f5      	bne.n	800841a <strncmp+0x8>
 800842e:	1ad0      	subs	r0, r2, r3
 8008430:	bd10      	pop	{r4, pc}
 8008432:	4610      	mov	r0, r2
 8008434:	e7fc      	b.n	8008430 <strncmp+0x1e>
	...

08008438 <_fstat_r>:
 8008438:	b538      	push	{r3, r4, r5, lr}
 800843a:	2300      	movs	r3, #0
 800843c:	4d06      	ldr	r5, [pc, #24]	@ (8008458 <_fstat_r+0x20>)
 800843e:	4604      	mov	r4, r0
 8008440:	4608      	mov	r0, r1
 8008442:	4611      	mov	r1, r2
 8008444:	602b      	str	r3, [r5, #0]
 8008446:	f7f9 f94d 	bl	80016e4 <_fstat>
 800844a:	1c43      	adds	r3, r0, #1
 800844c:	d102      	bne.n	8008454 <_fstat_r+0x1c>
 800844e:	682b      	ldr	r3, [r5, #0]
 8008450:	b103      	cbz	r3, 8008454 <_fstat_r+0x1c>
 8008452:	6023      	str	r3, [r4, #0]
 8008454:	bd38      	pop	{r3, r4, r5, pc}
 8008456:	bf00      	nop
 8008458:	200003d4 	.word	0x200003d4

0800845c <_isatty_r>:
 800845c:	b538      	push	{r3, r4, r5, lr}
 800845e:	2300      	movs	r3, #0
 8008460:	4d05      	ldr	r5, [pc, #20]	@ (8008478 <_isatty_r+0x1c>)
 8008462:	4604      	mov	r4, r0
 8008464:	4608      	mov	r0, r1
 8008466:	602b      	str	r3, [r5, #0]
 8008468:	f7f9 f94b 	bl	8001702 <_isatty>
 800846c:	1c43      	adds	r3, r0, #1
 800846e:	d102      	bne.n	8008476 <_isatty_r+0x1a>
 8008470:	682b      	ldr	r3, [r5, #0]
 8008472:	b103      	cbz	r3, 8008476 <_isatty_r+0x1a>
 8008474:	6023      	str	r3, [r4, #0]
 8008476:	bd38      	pop	{r3, r4, r5, pc}
 8008478:	200003d4 	.word	0x200003d4

0800847c <_sbrk_r>:
 800847c:	b538      	push	{r3, r4, r5, lr}
 800847e:	2300      	movs	r3, #0
 8008480:	4d05      	ldr	r5, [pc, #20]	@ (8008498 <_sbrk_r+0x1c>)
 8008482:	4604      	mov	r4, r0
 8008484:	4608      	mov	r0, r1
 8008486:	602b      	str	r3, [r5, #0]
 8008488:	f7f9 f952 	bl	8001730 <_sbrk>
 800848c:	1c43      	adds	r3, r0, #1
 800848e:	d102      	bne.n	8008496 <_sbrk_r+0x1a>
 8008490:	682b      	ldr	r3, [r5, #0]
 8008492:	b103      	cbz	r3, 8008496 <_sbrk_r+0x1a>
 8008494:	6023      	str	r3, [r4, #0]
 8008496:	bd38      	pop	{r3, r4, r5, pc}
 8008498:	200003d4 	.word	0x200003d4

0800849c <memcpy>:
 800849c:	440a      	add	r2, r1
 800849e:	4291      	cmp	r1, r2
 80084a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80084a4:	d100      	bne.n	80084a8 <memcpy+0xc>
 80084a6:	4770      	bx	lr
 80084a8:	b510      	push	{r4, lr}
 80084aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80084ae:	4291      	cmp	r1, r2
 80084b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80084b4:	d1f9      	bne.n	80084aa <memcpy+0xe>
 80084b6:	bd10      	pop	{r4, pc}

080084b8 <nan>:
 80084b8:	2000      	movs	r0, #0
 80084ba:	4901      	ldr	r1, [pc, #4]	@ (80084c0 <nan+0x8>)
 80084bc:	4770      	bx	lr
 80084be:	bf00      	nop
 80084c0:	7ff80000 	.word	0x7ff80000

080084c4 <__assert_func>:
 80084c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80084c6:	4614      	mov	r4, r2
 80084c8:	461a      	mov	r2, r3
 80084ca:	4b09      	ldr	r3, [pc, #36]	@ (80084f0 <__assert_func+0x2c>)
 80084cc:	4605      	mov	r5, r0
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	68d8      	ldr	r0, [r3, #12]
 80084d2:	b14c      	cbz	r4, 80084e8 <__assert_func+0x24>
 80084d4:	4b07      	ldr	r3, [pc, #28]	@ (80084f4 <__assert_func+0x30>)
 80084d6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80084da:	9100      	str	r1, [sp, #0]
 80084dc:	462b      	mov	r3, r5
 80084de:	4906      	ldr	r1, [pc, #24]	@ (80084f8 <__assert_func+0x34>)
 80084e0:	f000 fba8 	bl	8008c34 <fiprintf>
 80084e4:	f000 fbb8 	bl	8008c58 <abort>
 80084e8:	4b04      	ldr	r3, [pc, #16]	@ (80084fc <__assert_func+0x38>)
 80084ea:	461c      	mov	r4, r3
 80084ec:	e7f3      	b.n	80084d6 <__assert_func+0x12>
 80084ee:	bf00      	nop
 80084f0:	20000018 	.word	0x20000018
 80084f4:	0800986c 	.word	0x0800986c
 80084f8:	08009879 	.word	0x08009879
 80084fc:	080098a7 	.word	0x080098a7

08008500 <_calloc_r>:
 8008500:	b570      	push	{r4, r5, r6, lr}
 8008502:	fba1 5402 	umull	r5, r4, r1, r2
 8008506:	b934      	cbnz	r4, 8008516 <_calloc_r+0x16>
 8008508:	4629      	mov	r1, r5
 800850a:	f7fd ffeb 	bl	80064e4 <_malloc_r>
 800850e:	4606      	mov	r6, r0
 8008510:	b928      	cbnz	r0, 800851e <_calloc_r+0x1e>
 8008512:	4630      	mov	r0, r6
 8008514:	bd70      	pop	{r4, r5, r6, pc}
 8008516:	220c      	movs	r2, #12
 8008518:	2600      	movs	r6, #0
 800851a:	6002      	str	r2, [r0, #0]
 800851c:	e7f9      	b.n	8008512 <_calloc_r+0x12>
 800851e:	462a      	mov	r2, r5
 8008520:	4621      	mov	r1, r4
 8008522:	f7fd f87d 	bl	8005620 <memset>
 8008526:	e7f4      	b.n	8008512 <_calloc_r+0x12>

08008528 <rshift>:
 8008528:	6903      	ldr	r3, [r0, #16]
 800852a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800852e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8008532:	f100 0414 	add.w	r4, r0, #20
 8008536:	ea4f 1261 	mov.w	r2, r1, asr #5
 800853a:	dd46      	ble.n	80085ca <rshift+0xa2>
 800853c:	f011 011f 	ands.w	r1, r1, #31
 8008540:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008544:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008548:	d10c      	bne.n	8008564 <rshift+0x3c>
 800854a:	4629      	mov	r1, r5
 800854c:	f100 0710 	add.w	r7, r0, #16
 8008550:	42b1      	cmp	r1, r6
 8008552:	d335      	bcc.n	80085c0 <rshift+0x98>
 8008554:	1a9b      	subs	r3, r3, r2
 8008556:	009b      	lsls	r3, r3, #2
 8008558:	1eea      	subs	r2, r5, #3
 800855a:	4296      	cmp	r6, r2
 800855c:	bf38      	it	cc
 800855e:	2300      	movcc	r3, #0
 8008560:	4423      	add	r3, r4
 8008562:	e015      	b.n	8008590 <rshift+0x68>
 8008564:	46a1      	mov	r9, r4
 8008566:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800856a:	f1c1 0820 	rsb	r8, r1, #32
 800856e:	40cf      	lsrs	r7, r1
 8008570:	f105 0e04 	add.w	lr, r5, #4
 8008574:	4576      	cmp	r6, lr
 8008576:	46f4      	mov	ip, lr
 8008578:	d816      	bhi.n	80085a8 <rshift+0x80>
 800857a:	1a9a      	subs	r2, r3, r2
 800857c:	0092      	lsls	r2, r2, #2
 800857e:	3a04      	subs	r2, #4
 8008580:	3501      	adds	r5, #1
 8008582:	42ae      	cmp	r6, r5
 8008584:	bf38      	it	cc
 8008586:	2200      	movcc	r2, #0
 8008588:	18a3      	adds	r3, r4, r2
 800858a:	50a7      	str	r7, [r4, r2]
 800858c:	b107      	cbz	r7, 8008590 <rshift+0x68>
 800858e:	3304      	adds	r3, #4
 8008590:	42a3      	cmp	r3, r4
 8008592:	eba3 0204 	sub.w	r2, r3, r4
 8008596:	bf08      	it	eq
 8008598:	2300      	moveq	r3, #0
 800859a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800859e:	6102      	str	r2, [r0, #16]
 80085a0:	bf08      	it	eq
 80085a2:	6143      	streq	r3, [r0, #20]
 80085a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80085a8:	f8dc c000 	ldr.w	ip, [ip]
 80085ac:	fa0c fc08 	lsl.w	ip, ip, r8
 80085b0:	ea4c 0707 	orr.w	r7, ip, r7
 80085b4:	f849 7b04 	str.w	r7, [r9], #4
 80085b8:	f85e 7b04 	ldr.w	r7, [lr], #4
 80085bc:	40cf      	lsrs	r7, r1
 80085be:	e7d9      	b.n	8008574 <rshift+0x4c>
 80085c0:	f851 cb04 	ldr.w	ip, [r1], #4
 80085c4:	f847 cf04 	str.w	ip, [r7, #4]!
 80085c8:	e7c2      	b.n	8008550 <rshift+0x28>
 80085ca:	4623      	mov	r3, r4
 80085cc:	e7e0      	b.n	8008590 <rshift+0x68>

080085ce <__hexdig_fun>:
 80085ce:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80085d2:	2b09      	cmp	r3, #9
 80085d4:	d802      	bhi.n	80085dc <__hexdig_fun+0xe>
 80085d6:	3820      	subs	r0, #32
 80085d8:	b2c0      	uxtb	r0, r0
 80085da:	4770      	bx	lr
 80085dc:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80085e0:	2b05      	cmp	r3, #5
 80085e2:	d801      	bhi.n	80085e8 <__hexdig_fun+0x1a>
 80085e4:	3847      	subs	r0, #71	@ 0x47
 80085e6:	e7f7      	b.n	80085d8 <__hexdig_fun+0xa>
 80085e8:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80085ec:	2b05      	cmp	r3, #5
 80085ee:	d801      	bhi.n	80085f4 <__hexdig_fun+0x26>
 80085f0:	3827      	subs	r0, #39	@ 0x27
 80085f2:	e7f1      	b.n	80085d8 <__hexdig_fun+0xa>
 80085f4:	2000      	movs	r0, #0
 80085f6:	4770      	bx	lr

080085f8 <__gethex>:
 80085f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085fc:	468a      	mov	sl, r1
 80085fe:	4690      	mov	r8, r2
 8008600:	b085      	sub	sp, #20
 8008602:	9302      	str	r3, [sp, #8]
 8008604:	680b      	ldr	r3, [r1, #0]
 8008606:	9001      	str	r0, [sp, #4]
 8008608:	1c9c      	adds	r4, r3, #2
 800860a:	46a1      	mov	r9, r4
 800860c:	f814 0b01 	ldrb.w	r0, [r4], #1
 8008610:	2830      	cmp	r0, #48	@ 0x30
 8008612:	d0fa      	beq.n	800860a <__gethex+0x12>
 8008614:	eba9 0303 	sub.w	r3, r9, r3
 8008618:	f1a3 0b02 	sub.w	fp, r3, #2
 800861c:	f7ff ffd7 	bl	80085ce <__hexdig_fun>
 8008620:	4605      	mov	r5, r0
 8008622:	2800      	cmp	r0, #0
 8008624:	d168      	bne.n	80086f8 <__gethex+0x100>
 8008626:	2201      	movs	r2, #1
 8008628:	4648      	mov	r0, r9
 800862a:	499f      	ldr	r1, [pc, #636]	@ (80088a8 <__gethex+0x2b0>)
 800862c:	f7ff fef1 	bl	8008412 <strncmp>
 8008630:	4607      	mov	r7, r0
 8008632:	2800      	cmp	r0, #0
 8008634:	d167      	bne.n	8008706 <__gethex+0x10e>
 8008636:	f899 0001 	ldrb.w	r0, [r9, #1]
 800863a:	4626      	mov	r6, r4
 800863c:	f7ff ffc7 	bl	80085ce <__hexdig_fun>
 8008640:	2800      	cmp	r0, #0
 8008642:	d062      	beq.n	800870a <__gethex+0x112>
 8008644:	4623      	mov	r3, r4
 8008646:	7818      	ldrb	r0, [r3, #0]
 8008648:	4699      	mov	r9, r3
 800864a:	2830      	cmp	r0, #48	@ 0x30
 800864c:	f103 0301 	add.w	r3, r3, #1
 8008650:	d0f9      	beq.n	8008646 <__gethex+0x4e>
 8008652:	f7ff ffbc 	bl	80085ce <__hexdig_fun>
 8008656:	fab0 f580 	clz	r5, r0
 800865a:	f04f 0b01 	mov.w	fp, #1
 800865e:	096d      	lsrs	r5, r5, #5
 8008660:	464a      	mov	r2, r9
 8008662:	4616      	mov	r6, r2
 8008664:	7830      	ldrb	r0, [r6, #0]
 8008666:	3201      	adds	r2, #1
 8008668:	f7ff ffb1 	bl	80085ce <__hexdig_fun>
 800866c:	2800      	cmp	r0, #0
 800866e:	d1f8      	bne.n	8008662 <__gethex+0x6a>
 8008670:	2201      	movs	r2, #1
 8008672:	4630      	mov	r0, r6
 8008674:	498c      	ldr	r1, [pc, #560]	@ (80088a8 <__gethex+0x2b0>)
 8008676:	f7ff fecc 	bl	8008412 <strncmp>
 800867a:	2800      	cmp	r0, #0
 800867c:	d13f      	bne.n	80086fe <__gethex+0x106>
 800867e:	b944      	cbnz	r4, 8008692 <__gethex+0x9a>
 8008680:	1c74      	adds	r4, r6, #1
 8008682:	4622      	mov	r2, r4
 8008684:	4616      	mov	r6, r2
 8008686:	7830      	ldrb	r0, [r6, #0]
 8008688:	3201      	adds	r2, #1
 800868a:	f7ff ffa0 	bl	80085ce <__hexdig_fun>
 800868e:	2800      	cmp	r0, #0
 8008690:	d1f8      	bne.n	8008684 <__gethex+0x8c>
 8008692:	1ba4      	subs	r4, r4, r6
 8008694:	00a7      	lsls	r7, r4, #2
 8008696:	7833      	ldrb	r3, [r6, #0]
 8008698:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800869c:	2b50      	cmp	r3, #80	@ 0x50
 800869e:	d13e      	bne.n	800871e <__gethex+0x126>
 80086a0:	7873      	ldrb	r3, [r6, #1]
 80086a2:	2b2b      	cmp	r3, #43	@ 0x2b
 80086a4:	d033      	beq.n	800870e <__gethex+0x116>
 80086a6:	2b2d      	cmp	r3, #45	@ 0x2d
 80086a8:	d034      	beq.n	8008714 <__gethex+0x11c>
 80086aa:	2400      	movs	r4, #0
 80086ac:	1c71      	adds	r1, r6, #1
 80086ae:	7808      	ldrb	r0, [r1, #0]
 80086b0:	f7ff ff8d 	bl	80085ce <__hexdig_fun>
 80086b4:	1e43      	subs	r3, r0, #1
 80086b6:	b2db      	uxtb	r3, r3
 80086b8:	2b18      	cmp	r3, #24
 80086ba:	d830      	bhi.n	800871e <__gethex+0x126>
 80086bc:	f1a0 0210 	sub.w	r2, r0, #16
 80086c0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80086c4:	f7ff ff83 	bl	80085ce <__hexdig_fun>
 80086c8:	f100 3cff 	add.w	ip, r0, #4294967295
 80086cc:	fa5f fc8c 	uxtb.w	ip, ip
 80086d0:	f1bc 0f18 	cmp.w	ip, #24
 80086d4:	f04f 030a 	mov.w	r3, #10
 80086d8:	d91e      	bls.n	8008718 <__gethex+0x120>
 80086da:	b104      	cbz	r4, 80086de <__gethex+0xe6>
 80086dc:	4252      	negs	r2, r2
 80086de:	4417      	add	r7, r2
 80086e0:	f8ca 1000 	str.w	r1, [sl]
 80086e4:	b1ed      	cbz	r5, 8008722 <__gethex+0x12a>
 80086e6:	f1bb 0f00 	cmp.w	fp, #0
 80086ea:	bf0c      	ite	eq
 80086ec:	2506      	moveq	r5, #6
 80086ee:	2500      	movne	r5, #0
 80086f0:	4628      	mov	r0, r5
 80086f2:	b005      	add	sp, #20
 80086f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086f8:	2500      	movs	r5, #0
 80086fa:	462c      	mov	r4, r5
 80086fc:	e7b0      	b.n	8008660 <__gethex+0x68>
 80086fe:	2c00      	cmp	r4, #0
 8008700:	d1c7      	bne.n	8008692 <__gethex+0x9a>
 8008702:	4627      	mov	r7, r4
 8008704:	e7c7      	b.n	8008696 <__gethex+0x9e>
 8008706:	464e      	mov	r6, r9
 8008708:	462f      	mov	r7, r5
 800870a:	2501      	movs	r5, #1
 800870c:	e7c3      	b.n	8008696 <__gethex+0x9e>
 800870e:	2400      	movs	r4, #0
 8008710:	1cb1      	adds	r1, r6, #2
 8008712:	e7cc      	b.n	80086ae <__gethex+0xb6>
 8008714:	2401      	movs	r4, #1
 8008716:	e7fb      	b.n	8008710 <__gethex+0x118>
 8008718:	fb03 0002 	mla	r0, r3, r2, r0
 800871c:	e7ce      	b.n	80086bc <__gethex+0xc4>
 800871e:	4631      	mov	r1, r6
 8008720:	e7de      	b.n	80086e0 <__gethex+0xe8>
 8008722:	4629      	mov	r1, r5
 8008724:	eba6 0309 	sub.w	r3, r6, r9
 8008728:	3b01      	subs	r3, #1
 800872a:	2b07      	cmp	r3, #7
 800872c:	dc0a      	bgt.n	8008744 <__gethex+0x14c>
 800872e:	9801      	ldr	r0, [sp, #4]
 8008730:	f7fd ff64 	bl	80065fc <_Balloc>
 8008734:	4604      	mov	r4, r0
 8008736:	b940      	cbnz	r0, 800874a <__gethex+0x152>
 8008738:	4602      	mov	r2, r0
 800873a:	21e4      	movs	r1, #228	@ 0xe4
 800873c:	4b5b      	ldr	r3, [pc, #364]	@ (80088ac <__gethex+0x2b4>)
 800873e:	485c      	ldr	r0, [pc, #368]	@ (80088b0 <__gethex+0x2b8>)
 8008740:	f7ff fec0 	bl	80084c4 <__assert_func>
 8008744:	3101      	adds	r1, #1
 8008746:	105b      	asrs	r3, r3, #1
 8008748:	e7ef      	b.n	800872a <__gethex+0x132>
 800874a:	2300      	movs	r3, #0
 800874c:	f100 0a14 	add.w	sl, r0, #20
 8008750:	4655      	mov	r5, sl
 8008752:	469b      	mov	fp, r3
 8008754:	45b1      	cmp	r9, r6
 8008756:	d337      	bcc.n	80087c8 <__gethex+0x1d0>
 8008758:	f845 bb04 	str.w	fp, [r5], #4
 800875c:	eba5 050a 	sub.w	r5, r5, sl
 8008760:	10ad      	asrs	r5, r5, #2
 8008762:	6125      	str	r5, [r4, #16]
 8008764:	4658      	mov	r0, fp
 8008766:	f7fe f83b 	bl	80067e0 <__hi0bits>
 800876a:	016d      	lsls	r5, r5, #5
 800876c:	f8d8 6000 	ldr.w	r6, [r8]
 8008770:	1a2d      	subs	r5, r5, r0
 8008772:	42b5      	cmp	r5, r6
 8008774:	dd54      	ble.n	8008820 <__gethex+0x228>
 8008776:	1bad      	subs	r5, r5, r6
 8008778:	4629      	mov	r1, r5
 800877a:	4620      	mov	r0, r4
 800877c:	f7fe fbbd 	bl	8006efa <__any_on>
 8008780:	4681      	mov	r9, r0
 8008782:	b178      	cbz	r0, 80087a4 <__gethex+0x1ac>
 8008784:	f04f 0901 	mov.w	r9, #1
 8008788:	1e6b      	subs	r3, r5, #1
 800878a:	1159      	asrs	r1, r3, #5
 800878c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 8008790:	f003 021f 	and.w	r2, r3, #31
 8008794:	fa09 f202 	lsl.w	r2, r9, r2
 8008798:	420a      	tst	r2, r1
 800879a:	d003      	beq.n	80087a4 <__gethex+0x1ac>
 800879c:	454b      	cmp	r3, r9
 800879e:	dc36      	bgt.n	800880e <__gethex+0x216>
 80087a0:	f04f 0902 	mov.w	r9, #2
 80087a4:	4629      	mov	r1, r5
 80087a6:	4620      	mov	r0, r4
 80087a8:	f7ff febe 	bl	8008528 <rshift>
 80087ac:	442f      	add	r7, r5
 80087ae:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80087b2:	42bb      	cmp	r3, r7
 80087b4:	da42      	bge.n	800883c <__gethex+0x244>
 80087b6:	4621      	mov	r1, r4
 80087b8:	9801      	ldr	r0, [sp, #4]
 80087ba:	f7fd ff5f 	bl	800667c <_Bfree>
 80087be:	2300      	movs	r3, #0
 80087c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80087c2:	25a3      	movs	r5, #163	@ 0xa3
 80087c4:	6013      	str	r3, [r2, #0]
 80087c6:	e793      	b.n	80086f0 <__gethex+0xf8>
 80087c8:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80087cc:	2a2e      	cmp	r2, #46	@ 0x2e
 80087ce:	d012      	beq.n	80087f6 <__gethex+0x1fe>
 80087d0:	2b20      	cmp	r3, #32
 80087d2:	d104      	bne.n	80087de <__gethex+0x1e6>
 80087d4:	f845 bb04 	str.w	fp, [r5], #4
 80087d8:	f04f 0b00 	mov.w	fp, #0
 80087dc:	465b      	mov	r3, fp
 80087de:	7830      	ldrb	r0, [r6, #0]
 80087e0:	9303      	str	r3, [sp, #12]
 80087e2:	f7ff fef4 	bl	80085ce <__hexdig_fun>
 80087e6:	9b03      	ldr	r3, [sp, #12]
 80087e8:	f000 000f 	and.w	r0, r0, #15
 80087ec:	4098      	lsls	r0, r3
 80087ee:	ea4b 0b00 	orr.w	fp, fp, r0
 80087f2:	3304      	adds	r3, #4
 80087f4:	e7ae      	b.n	8008754 <__gethex+0x15c>
 80087f6:	45b1      	cmp	r9, r6
 80087f8:	d8ea      	bhi.n	80087d0 <__gethex+0x1d8>
 80087fa:	2201      	movs	r2, #1
 80087fc:	4630      	mov	r0, r6
 80087fe:	492a      	ldr	r1, [pc, #168]	@ (80088a8 <__gethex+0x2b0>)
 8008800:	9303      	str	r3, [sp, #12]
 8008802:	f7ff fe06 	bl	8008412 <strncmp>
 8008806:	9b03      	ldr	r3, [sp, #12]
 8008808:	2800      	cmp	r0, #0
 800880a:	d1e1      	bne.n	80087d0 <__gethex+0x1d8>
 800880c:	e7a2      	b.n	8008754 <__gethex+0x15c>
 800880e:	4620      	mov	r0, r4
 8008810:	1ea9      	subs	r1, r5, #2
 8008812:	f7fe fb72 	bl	8006efa <__any_on>
 8008816:	2800      	cmp	r0, #0
 8008818:	d0c2      	beq.n	80087a0 <__gethex+0x1a8>
 800881a:	f04f 0903 	mov.w	r9, #3
 800881e:	e7c1      	b.n	80087a4 <__gethex+0x1ac>
 8008820:	da09      	bge.n	8008836 <__gethex+0x23e>
 8008822:	1b75      	subs	r5, r6, r5
 8008824:	4621      	mov	r1, r4
 8008826:	462a      	mov	r2, r5
 8008828:	9801      	ldr	r0, [sp, #4]
 800882a:	f7fe f937 	bl	8006a9c <__lshift>
 800882e:	4604      	mov	r4, r0
 8008830:	1b7f      	subs	r7, r7, r5
 8008832:	f100 0a14 	add.w	sl, r0, #20
 8008836:	f04f 0900 	mov.w	r9, #0
 800883a:	e7b8      	b.n	80087ae <__gethex+0x1b6>
 800883c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8008840:	42bd      	cmp	r5, r7
 8008842:	dd6f      	ble.n	8008924 <__gethex+0x32c>
 8008844:	1bed      	subs	r5, r5, r7
 8008846:	42ae      	cmp	r6, r5
 8008848:	dc34      	bgt.n	80088b4 <__gethex+0x2bc>
 800884a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800884e:	2b02      	cmp	r3, #2
 8008850:	d022      	beq.n	8008898 <__gethex+0x2a0>
 8008852:	2b03      	cmp	r3, #3
 8008854:	d024      	beq.n	80088a0 <__gethex+0x2a8>
 8008856:	2b01      	cmp	r3, #1
 8008858:	d115      	bne.n	8008886 <__gethex+0x28e>
 800885a:	42ae      	cmp	r6, r5
 800885c:	d113      	bne.n	8008886 <__gethex+0x28e>
 800885e:	2e01      	cmp	r6, #1
 8008860:	d10b      	bne.n	800887a <__gethex+0x282>
 8008862:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008866:	9a02      	ldr	r2, [sp, #8]
 8008868:	2562      	movs	r5, #98	@ 0x62
 800886a:	6013      	str	r3, [r2, #0]
 800886c:	2301      	movs	r3, #1
 800886e:	6123      	str	r3, [r4, #16]
 8008870:	f8ca 3000 	str.w	r3, [sl]
 8008874:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008876:	601c      	str	r4, [r3, #0]
 8008878:	e73a      	b.n	80086f0 <__gethex+0xf8>
 800887a:	4620      	mov	r0, r4
 800887c:	1e71      	subs	r1, r6, #1
 800887e:	f7fe fb3c 	bl	8006efa <__any_on>
 8008882:	2800      	cmp	r0, #0
 8008884:	d1ed      	bne.n	8008862 <__gethex+0x26a>
 8008886:	4621      	mov	r1, r4
 8008888:	9801      	ldr	r0, [sp, #4]
 800888a:	f7fd fef7 	bl	800667c <_Bfree>
 800888e:	2300      	movs	r3, #0
 8008890:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008892:	2550      	movs	r5, #80	@ 0x50
 8008894:	6013      	str	r3, [r2, #0]
 8008896:	e72b      	b.n	80086f0 <__gethex+0xf8>
 8008898:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800889a:	2b00      	cmp	r3, #0
 800889c:	d1f3      	bne.n	8008886 <__gethex+0x28e>
 800889e:	e7e0      	b.n	8008862 <__gethex+0x26a>
 80088a0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d1dd      	bne.n	8008862 <__gethex+0x26a>
 80088a6:	e7ee      	b.n	8008886 <__gethex+0x28e>
 80088a8:	08009851 	.word	0x08009851
 80088ac:	080097e7 	.word	0x080097e7
 80088b0:	080098a8 	.word	0x080098a8
 80088b4:	1e6f      	subs	r7, r5, #1
 80088b6:	f1b9 0f00 	cmp.w	r9, #0
 80088ba:	d130      	bne.n	800891e <__gethex+0x326>
 80088bc:	b127      	cbz	r7, 80088c8 <__gethex+0x2d0>
 80088be:	4639      	mov	r1, r7
 80088c0:	4620      	mov	r0, r4
 80088c2:	f7fe fb1a 	bl	8006efa <__any_on>
 80088c6:	4681      	mov	r9, r0
 80088c8:	2301      	movs	r3, #1
 80088ca:	4629      	mov	r1, r5
 80088cc:	1b76      	subs	r6, r6, r5
 80088ce:	2502      	movs	r5, #2
 80088d0:	117a      	asrs	r2, r7, #5
 80088d2:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80088d6:	f007 071f 	and.w	r7, r7, #31
 80088da:	40bb      	lsls	r3, r7
 80088dc:	4213      	tst	r3, r2
 80088de:	4620      	mov	r0, r4
 80088e0:	bf18      	it	ne
 80088e2:	f049 0902 	orrne.w	r9, r9, #2
 80088e6:	f7ff fe1f 	bl	8008528 <rshift>
 80088ea:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80088ee:	f1b9 0f00 	cmp.w	r9, #0
 80088f2:	d047      	beq.n	8008984 <__gethex+0x38c>
 80088f4:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80088f8:	2b02      	cmp	r3, #2
 80088fa:	d015      	beq.n	8008928 <__gethex+0x330>
 80088fc:	2b03      	cmp	r3, #3
 80088fe:	d017      	beq.n	8008930 <__gethex+0x338>
 8008900:	2b01      	cmp	r3, #1
 8008902:	d109      	bne.n	8008918 <__gethex+0x320>
 8008904:	f019 0f02 	tst.w	r9, #2
 8008908:	d006      	beq.n	8008918 <__gethex+0x320>
 800890a:	f8da 3000 	ldr.w	r3, [sl]
 800890e:	ea49 0903 	orr.w	r9, r9, r3
 8008912:	f019 0f01 	tst.w	r9, #1
 8008916:	d10e      	bne.n	8008936 <__gethex+0x33e>
 8008918:	f045 0510 	orr.w	r5, r5, #16
 800891c:	e032      	b.n	8008984 <__gethex+0x38c>
 800891e:	f04f 0901 	mov.w	r9, #1
 8008922:	e7d1      	b.n	80088c8 <__gethex+0x2d0>
 8008924:	2501      	movs	r5, #1
 8008926:	e7e2      	b.n	80088ee <__gethex+0x2f6>
 8008928:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800892a:	f1c3 0301 	rsb	r3, r3, #1
 800892e:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008930:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008932:	2b00      	cmp	r3, #0
 8008934:	d0f0      	beq.n	8008918 <__gethex+0x320>
 8008936:	f04f 0c00 	mov.w	ip, #0
 800893a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800893e:	f104 0314 	add.w	r3, r4, #20
 8008942:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8008946:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800894a:	4618      	mov	r0, r3
 800894c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008950:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008954:	d01b      	beq.n	800898e <__gethex+0x396>
 8008956:	3201      	adds	r2, #1
 8008958:	6002      	str	r2, [r0, #0]
 800895a:	2d02      	cmp	r5, #2
 800895c:	f104 0314 	add.w	r3, r4, #20
 8008960:	d13c      	bne.n	80089dc <__gethex+0x3e4>
 8008962:	f8d8 2000 	ldr.w	r2, [r8]
 8008966:	3a01      	subs	r2, #1
 8008968:	42b2      	cmp	r2, r6
 800896a:	d109      	bne.n	8008980 <__gethex+0x388>
 800896c:	2201      	movs	r2, #1
 800896e:	1171      	asrs	r1, r6, #5
 8008970:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008974:	f006 061f 	and.w	r6, r6, #31
 8008978:	fa02 f606 	lsl.w	r6, r2, r6
 800897c:	421e      	tst	r6, r3
 800897e:	d13a      	bne.n	80089f6 <__gethex+0x3fe>
 8008980:	f045 0520 	orr.w	r5, r5, #32
 8008984:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008986:	601c      	str	r4, [r3, #0]
 8008988:	9b02      	ldr	r3, [sp, #8]
 800898a:	601f      	str	r7, [r3, #0]
 800898c:	e6b0      	b.n	80086f0 <__gethex+0xf8>
 800898e:	4299      	cmp	r1, r3
 8008990:	f843 cc04 	str.w	ip, [r3, #-4]
 8008994:	d8d9      	bhi.n	800894a <__gethex+0x352>
 8008996:	68a3      	ldr	r3, [r4, #8]
 8008998:	459b      	cmp	fp, r3
 800899a:	db17      	blt.n	80089cc <__gethex+0x3d4>
 800899c:	6861      	ldr	r1, [r4, #4]
 800899e:	9801      	ldr	r0, [sp, #4]
 80089a0:	3101      	adds	r1, #1
 80089a2:	f7fd fe2b 	bl	80065fc <_Balloc>
 80089a6:	4681      	mov	r9, r0
 80089a8:	b918      	cbnz	r0, 80089b2 <__gethex+0x3ba>
 80089aa:	4602      	mov	r2, r0
 80089ac:	2184      	movs	r1, #132	@ 0x84
 80089ae:	4b19      	ldr	r3, [pc, #100]	@ (8008a14 <__gethex+0x41c>)
 80089b0:	e6c5      	b.n	800873e <__gethex+0x146>
 80089b2:	6922      	ldr	r2, [r4, #16]
 80089b4:	f104 010c 	add.w	r1, r4, #12
 80089b8:	3202      	adds	r2, #2
 80089ba:	0092      	lsls	r2, r2, #2
 80089bc:	300c      	adds	r0, #12
 80089be:	f7ff fd6d 	bl	800849c <memcpy>
 80089c2:	4621      	mov	r1, r4
 80089c4:	9801      	ldr	r0, [sp, #4]
 80089c6:	f7fd fe59 	bl	800667c <_Bfree>
 80089ca:	464c      	mov	r4, r9
 80089cc:	6923      	ldr	r3, [r4, #16]
 80089ce:	1c5a      	adds	r2, r3, #1
 80089d0:	6122      	str	r2, [r4, #16]
 80089d2:	2201      	movs	r2, #1
 80089d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80089d8:	615a      	str	r2, [r3, #20]
 80089da:	e7be      	b.n	800895a <__gethex+0x362>
 80089dc:	6922      	ldr	r2, [r4, #16]
 80089de:	455a      	cmp	r2, fp
 80089e0:	dd0b      	ble.n	80089fa <__gethex+0x402>
 80089e2:	2101      	movs	r1, #1
 80089e4:	4620      	mov	r0, r4
 80089e6:	f7ff fd9f 	bl	8008528 <rshift>
 80089ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80089ee:	3701      	adds	r7, #1
 80089f0:	42bb      	cmp	r3, r7
 80089f2:	f6ff aee0 	blt.w	80087b6 <__gethex+0x1be>
 80089f6:	2501      	movs	r5, #1
 80089f8:	e7c2      	b.n	8008980 <__gethex+0x388>
 80089fa:	f016 061f 	ands.w	r6, r6, #31
 80089fe:	d0fa      	beq.n	80089f6 <__gethex+0x3fe>
 8008a00:	4453      	add	r3, sl
 8008a02:	f853 0c04 	ldr.w	r0, [r3, #-4]
 8008a06:	f7fd feeb 	bl	80067e0 <__hi0bits>
 8008a0a:	f1c6 0620 	rsb	r6, r6, #32
 8008a0e:	42b0      	cmp	r0, r6
 8008a10:	dbe7      	blt.n	80089e2 <__gethex+0x3ea>
 8008a12:	e7f0      	b.n	80089f6 <__gethex+0x3fe>
 8008a14:	080097e7 	.word	0x080097e7

08008a18 <L_shift>:
 8008a18:	f1c2 0208 	rsb	r2, r2, #8
 8008a1c:	0092      	lsls	r2, r2, #2
 8008a1e:	b570      	push	{r4, r5, r6, lr}
 8008a20:	f1c2 0620 	rsb	r6, r2, #32
 8008a24:	6843      	ldr	r3, [r0, #4]
 8008a26:	6804      	ldr	r4, [r0, #0]
 8008a28:	fa03 f506 	lsl.w	r5, r3, r6
 8008a2c:	432c      	orrs	r4, r5
 8008a2e:	40d3      	lsrs	r3, r2
 8008a30:	6004      	str	r4, [r0, #0]
 8008a32:	f840 3f04 	str.w	r3, [r0, #4]!
 8008a36:	4288      	cmp	r0, r1
 8008a38:	d3f4      	bcc.n	8008a24 <L_shift+0xc>
 8008a3a:	bd70      	pop	{r4, r5, r6, pc}

08008a3c <__match>:
 8008a3c:	b530      	push	{r4, r5, lr}
 8008a3e:	6803      	ldr	r3, [r0, #0]
 8008a40:	3301      	adds	r3, #1
 8008a42:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a46:	b914      	cbnz	r4, 8008a4e <__match+0x12>
 8008a48:	6003      	str	r3, [r0, #0]
 8008a4a:	2001      	movs	r0, #1
 8008a4c:	bd30      	pop	{r4, r5, pc}
 8008a4e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a52:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008a56:	2d19      	cmp	r5, #25
 8008a58:	bf98      	it	ls
 8008a5a:	3220      	addls	r2, #32
 8008a5c:	42a2      	cmp	r2, r4
 8008a5e:	d0f0      	beq.n	8008a42 <__match+0x6>
 8008a60:	2000      	movs	r0, #0
 8008a62:	e7f3      	b.n	8008a4c <__match+0x10>

08008a64 <__hexnan>:
 8008a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a68:	2500      	movs	r5, #0
 8008a6a:	680b      	ldr	r3, [r1, #0]
 8008a6c:	4682      	mov	sl, r0
 8008a6e:	115e      	asrs	r6, r3, #5
 8008a70:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008a74:	f013 031f 	ands.w	r3, r3, #31
 8008a78:	bf18      	it	ne
 8008a7a:	3604      	addne	r6, #4
 8008a7c:	1f37      	subs	r7, r6, #4
 8008a7e:	4690      	mov	r8, r2
 8008a80:	46b9      	mov	r9, r7
 8008a82:	463c      	mov	r4, r7
 8008a84:	46ab      	mov	fp, r5
 8008a86:	b087      	sub	sp, #28
 8008a88:	6801      	ldr	r1, [r0, #0]
 8008a8a:	9301      	str	r3, [sp, #4]
 8008a8c:	f846 5c04 	str.w	r5, [r6, #-4]
 8008a90:	9502      	str	r5, [sp, #8]
 8008a92:	784a      	ldrb	r2, [r1, #1]
 8008a94:	1c4b      	adds	r3, r1, #1
 8008a96:	9303      	str	r3, [sp, #12]
 8008a98:	b342      	cbz	r2, 8008aec <__hexnan+0x88>
 8008a9a:	4610      	mov	r0, r2
 8008a9c:	9105      	str	r1, [sp, #20]
 8008a9e:	9204      	str	r2, [sp, #16]
 8008aa0:	f7ff fd95 	bl	80085ce <__hexdig_fun>
 8008aa4:	2800      	cmp	r0, #0
 8008aa6:	d151      	bne.n	8008b4c <__hexnan+0xe8>
 8008aa8:	9a04      	ldr	r2, [sp, #16]
 8008aaa:	9905      	ldr	r1, [sp, #20]
 8008aac:	2a20      	cmp	r2, #32
 8008aae:	d818      	bhi.n	8008ae2 <__hexnan+0x7e>
 8008ab0:	9b02      	ldr	r3, [sp, #8]
 8008ab2:	459b      	cmp	fp, r3
 8008ab4:	dd13      	ble.n	8008ade <__hexnan+0x7a>
 8008ab6:	454c      	cmp	r4, r9
 8008ab8:	d206      	bcs.n	8008ac8 <__hexnan+0x64>
 8008aba:	2d07      	cmp	r5, #7
 8008abc:	dc04      	bgt.n	8008ac8 <__hexnan+0x64>
 8008abe:	462a      	mov	r2, r5
 8008ac0:	4649      	mov	r1, r9
 8008ac2:	4620      	mov	r0, r4
 8008ac4:	f7ff ffa8 	bl	8008a18 <L_shift>
 8008ac8:	4544      	cmp	r4, r8
 8008aca:	d952      	bls.n	8008b72 <__hexnan+0x10e>
 8008acc:	2300      	movs	r3, #0
 8008ace:	f1a4 0904 	sub.w	r9, r4, #4
 8008ad2:	f844 3c04 	str.w	r3, [r4, #-4]
 8008ad6:	461d      	mov	r5, r3
 8008ad8:	464c      	mov	r4, r9
 8008ada:	f8cd b008 	str.w	fp, [sp, #8]
 8008ade:	9903      	ldr	r1, [sp, #12]
 8008ae0:	e7d7      	b.n	8008a92 <__hexnan+0x2e>
 8008ae2:	2a29      	cmp	r2, #41	@ 0x29
 8008ae4:	d157      	bne.n	8008b96 <__hexnan+0x132>
 8008ae6:	3102      	adds	r1, #2
 8008ae8:	f8ca 1000 	str.w	r1, [sl]
 8008aec:	f1bb 0f00 	cmp.w	fp, #0
 8008af0:	d051      	beq.n	8008b96 <__hexnan+0x132>
 8008af2:	454c      	cmp	r4, r9
 8008af4:	d206      	bcs.n	8008b04 <__hexnan+0xa0>
 8008af6:	2d07      	cmp	r5, #7
 8008af8:	dc04      	bgt.n	8008b04 <__hexnan+0xa0>
 8008afa:	462a      	mov	r2, r5
 8008afc:	4649      	mov	r1, r9
 8008afe:	4620      	mov	r0, r4
 8008b00:	f7ff ff8a 	bl	8008a18 <L_shift>
 8008b04:	4544      	cmp	r4, r8
 8008b06:	d936      	bls.n	8008b76 <__hexnan+0x112>
 8008b08:	4623      	mov	r3, r4
 8008b0a:	f1a8 0204 	sub.w	r2, r8, #4
 8008b0e:	f853 1b04 	ldr.w	r1, [r3], #4
 8008b12:	429f      	cmp	r7, r3
 8008b14:	f842 1f04 	str.w	r1, [r2, #4]!
 8008b18:	d2f9      	bcs.n	8008b0e <__hexnan+0xaa>
 8008b1a:	1b3b      	subs	r3, r7, r4
 8008b1c:	f023 0303 	bic.w	r3, r3, #3
 8008b20:	3304      	adds	r3, #4
 8008b22:	3401      	adds	r4, #1
 8008b24:	3e03      	subs	r6, #3
 8008b26:	42b4      	cmp	r4, r6
 8008b28:	bf88      	it	hi
 8008b2a:	2304      	movhi	r3, #4
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	4443      	add	r3, r8
 8008b30:	f843 2b04 	str.w	r2, [r3], #4
 8008b34:	429f      	cmp	r7, r3
 8008b36:	d2fb      	bcs.n	8008b30 <__hexnan+0xcc>
 8008b38:	683b      	ldr	r3, [r7, #0]
 8008b3a:	b91b      	cbnz	r3, 8008b44 <__hexnan+0xe0>
 8008b3c:	4547      	cmp	r7, r8
 8008b3e:	d128      	bne.n	8008b92 <__hexnan+0x12e>
 8008b40:	2301      	movs	r3, #1
 8008b42:	603b      	str	r3, [r7, #0]
 8008b44:	2005      	movs	r0, #5
 8008b46:	b007      	add	sp, #28
 8008b48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b4c:	3501      	adds	r5, #1
 8008b4e:	2d08      	cmp	r5, #8
 8008b50:	f10b 0b01 	add.w	fp, fp, #1
 8008b54:	dd06      	ble.n	8008b64 <__hexnan+0x100>
 8008b56:	4544      	cmp	r4, r8
 8008b58:	d9c1      	bls.n	8008ade <__hexnan+0x7a>
 8008b5a:	2300      	movs	r3, #0
 8008b5c:	2501      	movs	r5, #1
 8008b5e:	f844 3c04 	str.w	r3, [r4, #-4]
 8008b62:	3c04      	subs	r4, #4
 8008b64:	6822      	ldr	r2, [r4, #0]
 8008b66:	f000 000f 	and.w	r0, r0, #15
 8008b6a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008b6e:	6020      	str	r0, [r4, #0]
 8008b70:	e7b5      	b.n	8008ade <__hexnan+0x7a>
 8008b72:	2508      	movs	r5, #8
 8008b74:	e7b3      	b.n	8008ade <__hexnan+0x7a>
 8008b76:	9b01      	ldr	r3, [sp, #4]
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d0dd      	beq.n	8008b38 <__hexnan+0xd4>
 8008b7c:	f04f 32ff 	mov.w	r2, #4294967295
 8008b80:	f1c3 0320 	rsb	r3, r3, #32
 8008b84:	40da      	lsrs	r2, r3
 8008b86:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008b8a:	4013      	ands	r3, r2
 8008b8c:	f846 3c04 	str.w	r3, [r6, #-4]
 8008b90:	e7d2      	b.n	8008b38 <__hexnan+0xd4>
 8008b92:	3f04      	subs	r7, #4
 8008b94:	e7d0      	b.n	8008b38 <__hexnan+0xd4>
 8008b96:	2004      	movs	r0, #4
 8008b98:	e7d5      	b.n	8008b46 <__hexnan+0xe2>

08008b9a <__ascii_mbtowc>:
 8008b9a:	b082      	sub	sp, #8
 8008b9c:	b901      	cbnz	r1, 8008ba0 <__ascii_mbtowc+0x6>
 8008b9e:	a901      	add	r1, sp, #4
 8008ba0:	b142      	cbz	r2, 8008bb4 <__ascii_mbtowc+0x1a>
 8008ba2:	b14b      	cbz	r3, 8008bb8 <__ascii_mbtowc+0x1e>
 8008ba4:	7813      	ldrb	r3, [r2, #0]
 8008ba6:	600b      	str	r3, [r1, #0]
 8008ba8:	7812      	ldrb	r2, [r2, #0]
 8008baa:	1e10      	subs	r0, r2, #0
 8008bac:	bf18      	it	ne
 8008bae:	2001      	movne	r0, #1
 8008bb0:	b002      	add	sp, #8
 8008bb2:	4770      	bx	lr
 8008bb4:	4610      	mov	r0, r2
 8008bb6:	e7fb      	b.n	8008bb0 <__ascii_mbtowc+0x16>
 8008bb8:	f06f 0001 	mvn.w	r0, #1
 8008bbc:	e7f8      	b.n	8008bb0 <__ascii_mbtowc+0x16>

08008bbe <_realloc_r>:
 8008bbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008bc2:	4607      	mov	r7, r0
 8008bc4:	4614      	mov	r4, r2
 8008bc6:	460d      	mov	r5, r1
 8008bc8:	b921      	cbnz	r1, 8008bd4 <_realloc_r+0x16>
 8008bca:	4611      	mov	r1, r2
 8008bcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008bd0:	f7fd bc88 	b.w	80064e4 <_malloc_r>
 8008bd4:	b92a      	cbnz	r2, 8008be2 <_realloc_r+0x24>
 8008bd6:	f7fd fc13 	bl	8006400 <_free_r>
 8008bda:	4625      	mov	r5, r4
 8008bdc:	4628      	mov	r0, r5
 8008bde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008be2:	f000 f840 	bl	8008c66 <_malloc_usable_size_r>
 8008be6:	4284      	cmp	r4, r0
 8008be8:	4606      	mov	r6, r0
 8008bea:	d802      	bhi.n	8008bf2 <_realloc_r+0x34>
 8008bec:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008bf0:	d8f4      	bhi.n	8008bdc <_realloc_r+0x1e>
 8008bf2:	4621      	mov	r1, r4
 8008bf4:	4638      	mov	r0, r7
 8008bf6:	f7fd fc75 	bl	80064e4 <_malloc_r>
 8008bfa:	4680      	mov	r8, r0
 8008bfc:	b908      	cbnz	r0, 8008c02 <_realloc_r+0x44>
 8008bfe:	4645      	mov	r5, r8
 8008c00:	e7ec      	b.n	8008bdc <_realloc_r+0x1e>
 8008c02:	42b4      	cmp	r4, r6
 8008c04:	4622      	mov	r2, r4
 8008c06:	4629      	mov	r1, r5
 8008c08:	bf28      	it	cs
 8008c0a:	4632      	movcs	r2, r6
 8008c0c:	f7ff fc46 	bl	800849c <memcpy>
 8008c10:	4629      	mov	r1, r5
 8008c12:	4638      	mov	r0, r7
 8008c14:	f7fd fbf4 	bl	8006400 <_free_r>
 8008c18:	e7f1      	b.n	8008bfe <_realloc_r+0x40>

08008c1a <__ascii_wctomb>:
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	4608      	mov	r0, r1
 8008c1e:	b141      	cbz	r1, 8008c32 <__ascii_wctomb+0x18>
 8008c20:	2aff      	cmp	r2, #255	@ 0xff
 8008c22:	d904      	bls.n	8008c2e <__ascii_wctomb+0x14>
 8008c24:	228a      	movs	r2, #138	@ 0x8a
 8008c26:	f04f 30ff 	mov.w	r0, #4294967295
 8008c2a:	601a      	str	r2, [r3, #0]
 8008c2c:	4770      	bx	lr
 8008c2e:	2001      	movs	r0, #1
 8008c30:	700a      	strb	r2, [r1, #0]
 8008c32:	4770      	bx	lr

08008c34 <fiprintf>:
 8008c34:	b40e      	push	{r1, r2, r3}
 8008c36:	b503      	push	{r0, r1, lr}
 8008c38:	4601      	mov	r1, r0
 8008c3a:	ab03      	add	r3, sp, #12
 8008c3c:	4805      	ldr	r0, [pc, #20]	@ (8008c54 <fiprintf+0x20>)
 8008c3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8008c42:	6800      	ldr	r0, [r0, #0]
 8008c44:	9301      	str	r3, [sp, #4]
 8008c46:	f7ff f975 	bl	8007f34 <_vfiprintf_r>
 8008c4a:	b002      	add	sp, #8
 8008c4c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008c50:	b003      	add	sp, #12
 8008c52:	4770      	bx	lr
 8008c54:	20000018 	.word	0x20000018

08008c58 <abort>:
 8008c58:	2006      	movs	r0, #6
 8008c5a:	b508      	push	{r3, lr}
 8008c5c:	f000 f834 	bl	8008cc8 <raise>
 8008c60:	2001      	movs	r0, #1
 8008c62:	f7f8 fcf0 	bl	8001646 <_exit>

08008c66 <_malloc_usable_size_r>:
 8008c66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c6a:	1f18      	subs	r0, r3, #4
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	bfbc      	itt	lt
 8008c70:	580b      	ldrlt	r3, [r1, r0]
 8008c72:	18c0      	addlt	r0, r0, r3
 8008c74:	4770      	bx	lr

08008c76 <_raise_r>:
 8008c76:	291f      	cmp	r1, #31
 8008c78:	b538      	push	{r3, r4, r5, lr}
 8008c7a:	4605      	mov	r5, r0
 8008c7c:	460c      	mov	r4, r1
 8008c7e:	d904      	bls.n	8008c8a <_raise_r+0x14>
 8008c80:	2316      	movs	r3, #22
 8008c82:	6003      	str	r3, [r0, #0]
 8008c84:	f04f 30ff 	mov.w	r0, #4294967295
 8008c88:	bd38      	pop	{r3, r4, r5, pc}
 8008c8a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008c8c:	b112      	cbz	r2, 8008c94 <_raise_r+0x1e>
 8008c8e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008c92:	b94b      	cbnz	r3, 8008ca8 <_raise_r+0x32>
 8008c94:	4628      	mov	r0, r5
 8008c96:	f000 f831 	bl	8008cfc <_getpid_r>
 8008c9a:	4622      	mov	r2, r4
 8008c9c:	4601      	mov	r1, r0
 8008c9e:	4628      	mov	r0, r5
 8008ca0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ca4:	f000 b818 	b.w	8008cd8 <_kill_r>
 8008ca8:	2b01      	cmp	r3, #1
 8008caa:	d00a      	beq.n	8008cc2 <_raise_r+0x4c>
 8008cac:	1c59      	adds	r1, r3, #1
 8008cae:	d103      	bne.n	8008cb8 <_raise_r+0x42>
 8008cb0:	2316      	movs	r3, #22
 8008cb2:	6003      	str	r3, [r0, #0]
 8008cb4:	2001      	movs	r0, #1
 8008cb6:	e7e7      	b.n	8008c88 <_raise_r+0x12>
 8008cb8:	2100      	movs	r1, #0
 8008cba:	4620      	mov	r0, r4
 8008cbc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008cc0:	4798      	blx	r3
 8008cc2:	2000      	movs	r0, #0
 8008cc4:	e7e0      	b.n	8008c88 <_raise_r+0x12>
	...

08008cc8 <raise>:
 8008cc8:	4b02      	ldr	r3, [pc, #8]	@ (8008cd4 <raise+0xc>)
 8008cca:	4601      	mov	r1, r0
 8008ccc:	6818      	ldr	r0, [r3, #0]
 8008cce:	f7ff bfd2 	b.w	8008c76 <_raise_r>
 8008cd2:	bf00      	nop
 8008cd4:	20000018 	.word	0x20000018

08008cd8 <_kill_r>:
 8008cd8:	b538      	push	{r3, r4, r5, lr}
 8008cda:	2300      	movs	r3, #0
 8008cdc:	4d06      	ldr	r5, [pc, #24]	@ (8008cf8 <_kill_r+0x20>)
 8008cde:	4604      	mov	r4, r0
 8008ce0:	4608      	mov	r0, r1
 8008ce2:	4611      	mov	r1, r2
 8008ce4:	602b      	str	r3, [r5, #0]
 8008ce6:	f7f8 fc9e 	bl	8001626 <_kill>
 8008cea:	1c43      	adds	r3, r0, #1
 8008cec:	d102      	bne.n	8008cf4 <_kill_r+0x1c>
 8008cee:	682b      	ldr	r3, [r5, #0]
 8008cf0:	b103      	cbz	r3, 8008cf4 <_kill_r+0x1c>
 8008cf2:	6023      	str	r3, [r4, #0]
 8008cf4:	bd38      	pop	{r3, r4, r5, pc}
 8008cf6:	bf00      	nop
 8008cf8:	200003d4 	.word	0x200003d4

08008cfc <_getpid_r>:
 8008cfc:	f7f8 bc8c 	b.w	8001618 <_getpid>

08008d00 <_init>:
 8008d00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d02:	bf00      	nop
 8008d04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d06:	bc08      	pop	{r3}
 8008d08:	469e      	mov	lr, r3
 8008d0a:	4770      	bx	lr

08008d0c <_fini>:
 8008d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d0e:	bf00      	nop
 8008d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d12:	bc08      	pop	{r3}
 8008d14:	469e      	mov	lr, r3
 8008d16:	4770      	bx	lr
