
JoyStick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004470  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  0800457c  0800457c  0000557c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800463c  0800463c  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800463c  0800463c  00006068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800463c  0800463c  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800463c  0800463c  0000563c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004640  08004640  00005640  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004644  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c8  20000068  080046ac  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000330  080046ac  00006330  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e4b1  00000000  00000000  00006091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002478  00000000  00000000  00014542  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e88  00000000  00000000  000169c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b57  00000000  00000000  00017848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019406  00000000  00000000  0001839f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000107a1  00000000  00000000  000317a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009172d  00000000  00000000  00041f46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d3673  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004428  00000000  00000000  000d36b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000d7ae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08004564 	.word	0x08004564

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08004564 	.word	0x08004564

0800014c <__io_putchar>:
#ifdef __GNUC__
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROT0TYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (ch == '\n')
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b0a      	cmp	r3, #10
 8000158:	d106      	bne.n	8000168 <__io_putchar+0x1c>
		HAL_UART_Transmit(&huart2, (uint8_t*) "\r", 1, 0xFFFF);
 800015a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800015e:	2201      	movs	r2, #1
 8000160:	4907      	ldr	r1, [pc, #28]	@ (8000180 <__io_putchar+0x34>)
 8000162:	4808      	ldr	r0, [pc, #32]	@ (8000184 <__io_putchar+0x38>)
 8000164:	f003 f894 	bl	8003290 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 8000168:	1d39      	adds	r1, r7, #4
 800016a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800016e:	2201      	movs	r2, #1
 8000170:	4804      	ldr	r0, [pc, #16]	@ (8000184 <__io_putchar+0x38>)
 8000172:	f003 f88d 	bl	8003290 <HAL_UART_Transmit>

	return ch;
 8000176:	687b      	ldr	r3, [r7, #4]
}
 8000178:	4618      	mov	r0, r3
 800017a:	3708      	adds	r7, #8
 800017c:	46bd      	mov	sp, r7
 800017e:	bd80      	pop	{r7, pc}
 8000180:	0800457c 	.word	0x0800457c
 8000184:	20000140 	.word	0x20000140

08000188 <apply_moving_average_filter>:
  * @param  new_value: 새로운 ADC 값
  * @param  filter_buffer: 필터 버퍼 포인터
  * @retval 필터링된 값
  */
uint16_t apply_moving_average_filter(uint16_t new_value, uint32_t *filter_buffer)
{
 8000188:	b480      	push	{r7}
 800018a:	b087      	sub	sp, #28
 800018c:	af00      	add	r7, sp, #0
 800018e:	4603      	mov	r3, r0
 8000190:	6039      	str	r1, [r7, #0]
 8000192:	80fb      	strh	r3, [r7, #6]
    static uint8_t x_init = 0, y_init = 0;
    uint32_t sum = 0;
 8000194:	2300      	movs	r3, #0
 8000196:	617b      	str	r3, [r7, #20]

    // 필터 버퍼 구분 (X축 또는 Y축)
    if (filter_buffer == x_filter_buffer) {
 8000198:	683b      	ldr	r3, [r7, #0]
 800019a:	4a29      	ldr	r2, [pc, #164]	@ (8000240 <apply_moving_average_filter+0xb8>)
 800019c:	4293      	cmp	r3, r2
 800019e:	d117      	bne.n	80001d0 <apply_moving_average_filter+0x48>
        if (!x_init) {
 80001a0:	4b28      	ldr	r3, [pc, #160]	@ (8000244 <apply_moving_average_filter+0xbc>)
 80001a2:	781b      	ldrb	r3, [r3, #0]
 80001a4:	2b00      	cmp	r3, #0
 80001a6:	d12b      	bne.n	8000200 <apply_moving_average_filter+0x78>
            // 초기화: 모든 버퍼를 첫 번째 값으로 채움
            for (int i = 0; i < FILTER_SIZE; i++) {
 80001a8:	2300      	movs	r3, #0
 80001aa:	613b      	str	r3, [r7, #16]
 80001ac:	e008      	b.n	80001c0 <apply_moving_average_filter+0x38>
                filter_buffer[i] = new_value;
 80001ae:	693b      	ldr	r3, [r7, #16]
 80001b0:	009b      	lsls	r3, r3, #2
 80001b2:	683a      	ldr	r2, [r7, #0]
 80001b4:	4413      	add	r3, r2
 80001b6:	88fa      	ldrh	r2, [r7, #6]
 80001b8:	601a      	str	r2, [r3, #0]
            for (int i = 0; i < FILTER_SIZE; i++) {
 80001ba:	693b      	ldr	r3, [r7, #16]
 80001bc:	3301      	adds	r3, #1
 80001be:	613b      	str	r3, [r7, #16]
 80001c0:	693b      	ldr	r3, [r7, #16]
 80001c2:	2b07      	cmp	r3, #7
 80001c4:	ddf3      	ble.n	80001ae <apply_moving_average_filter+0x26>
            }
            x_init = 1;
 80001c6:	4b1f      	ldr	r3, [pc, #124]	@ (8000244 <apply_moving_average_filter+0xbc>)
 80001c8:	2201      	movs	r2, #1
 80001ca:	701a      	strb	r2, [r3, #0]
            return new_value;
 80001cc:	88fb      	ldrh	r3, [r7, #6]
 80001ce:	e032      	b.n	8000236 <apply_moving_average_filter+0xae>
        }
    } else {
        if (!y_init) {
 80001d0:	4b1d      	ldr	r3, [pc, #116]	@ (8000248 <apply_moving_average_filter+0xc0>)
 80001d2:	781b      	ldrb	r3, [r3, #0]
 80001d4:	2b00      	cmp	r3, #0
 80001d6:	d113      	bne.n	8000200 <apply_moving_average_filter+0x78>
            // 초기화: 모든 버퍼를 첫 번째 값으로 채움
            for (int i = 0; i < FILTER_SIZE; i++) {
 80001d8:	2300      	movs	r3, #0
 80001da:	60fb      	str	r3, [r7, #12]
 80001dc:	e008      	b.n	80001f0 <apply_moving_average_filter+0x68>
                filter_buffer[i] = new_value;
 80001de:	68fb      	ldr	r3, [r7, #12]
 80001e0:	009b      	lsls	r3, r3, #2
 80001e2:	683a      	ldr	r2, [r7, #0]
 80001e4:	4413      	add	r3, r2
 80001e6:	88fa      	ldrh	r2, [r7, #6]
 80001e8:	601a      	str	r2, [r3, #0]
            for (int i = 0; i < FILTER_SIZE; i++) {
 80001ea:	68fb      	ldr	r3, [r7, #12]
 80001ec:	3301      	adds	r3, #1
 80001ee:	60fb      	str	r3, [r7, #12]
 80001f0:	68fb      	ldr	r3, [r7, #12]
 80001f2:	2b07      	cmp	r3, #7
 80001f4:	ddf3      	ble.n	80001de <apply_moving_average_filter+0x56>
            }
            y_init = 1;
 80001f6:	4b14      	ldr	r3, [pc, #80]	@ (8000248 <apply_moving_average_filter+0xc0>)
 80001f8:	2201      	movs	r2, #1
 80001fa:	701a      	strb	r2, [r3, #0]
            return new_value;
 80001fc:	88fb      	ldrh	r3, [r7, #6]
 80001fe:	e01a      	b.n	8000236 <apply_moving_average_filter+0xae>
        }
    }

    // 새로운 값을 버퍼에 추가
    filter_buffer[filter_index] = new_value;
 8000200:	4b12      	ldr	r3, [pc, #72]	@ (800024c <apply_moving_average_filter+0xc4>)
 8000202:	781b      	ldrb	r3, [r3, #0]
 8000204:	009b      	lsls	r3, r3, #2
 8000206:	683a      	ldr	r2, [r7, #0]
 8000208:	4413      	add	r3, r2
 800020a:	88fa      	ldrh	r2, [r7, #6]
 800020c:	601a      	str	r2, [r3, #0]

    // 평균 계산
    for (int i = 0; i < FILTER_SIZE; i++) {
 800020e:	2300      	movs	r3, #0
 8000210:	60bb      	str	r3, [r7, #8]
 8000212:	e00a      	b.n	800022a <apply_moving_average_filter+0xa2>
        sum += filter_buffer[i];
 8000214:	68bb      	ldr	r3, [r7, #8]
 8000216:	009b      	lsls	r3, r3, #2
 8000218:	683a      	ldr	r2, [r7, #0]
 800021a:	4413      	add	r3, r2
 800021c:	681b      	ldr	r3, [r3, #0]
 800021e:	697a      	ldr	r2, [r7, #20]
 8000220:	4413      	add	r3, r2
 8000222:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < FILTER_SIZE; i++) {
 8000224:	68bb      	ldr	r3, [r7, #8]
 8000226:	3301      	adds	r3, #1
 8000228:	60bb      	str	r3, [r7, #8]
 800022a:	68bb      	ldr	r3, [r7, #8]
 800022c:	2b07      	cmp	r3, #7
 800022e:	ddf1      	ble.n	8000214 <apply_moving_average_filter+0x8c>
    }

    return (uint16_t)(sum / FILTER_SIZE);
 8000230:	697b      	ldr	r3, [r7, #20]
 8000232:	08db      	lsrs	r3, r3, #3
 8000234:	b29b      	uxth	r3, r3
}
 8000236:	4618      	mov	r0, r3
 8000238:	371c      	adds	r7, #28
 800023a:	46bd      	mov	sp, r7
 800023c:	bc80      	pop	{r7}
 800023e:	4770      	bx	lr
 8000240:	20000190 	.word	0x20000190
 8000244:	200001da 	.word	0x200001da
 8000248:	200001db 	.word	0x200001db
 800024c:	200001d0 	.word	0x200001d0

08000250 <convert_to_percentage>:
  * @brief  ADC 값을 백분율로 변환 (-100 ~ +100)
  * @param  adc_value: ADC 값 (0 ~ 4095)
  * @retval 백분율 값
  */
int16_t convert_to_percentage(uint16_t adc_value)
{
 8000250:	b480      	push	{r7}
 8000252:	b085      	sub	sp, #20
 8000254:	af00      	add	r7, sp, #0
 8000256:	4603      	mov	r3, r0
 8000258:	80fb      	strh	r3, [r7, #6]
    // ADC 중앙값을 기준으로 -100 ~ +100으로 변환
    int16_t centered_value = (int16_t)adc_value - (ADC_MAX_VALUE / 2);
 800025a:	88fb      	ldrh	r3, [r7, #6]
 800025c:	f2a3 73ff 	subw	r3, r3, #2047	@ 0x7ff
 8000260:	b29b      	uxth	r3, r3
 8000262:	81bb      	strh	r3, [r7, #12]
    int16_t percentage = (centered_value * 100) / (ADC_MAX_VALUE / 2);
 8000264:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000268:	2264      	movs	r2, #100	@ 0x64
 800026a:	fb02 f303 	mul.w	r3, r2, r3
 800026e:	4a0e      	ldr	r2, [pc, #56]	@ (80002a8 <convert_to_percentage+0x58>)
 8000270:	fb82 1203 	smull	r1, r2, r2, r3
 8000274:	441a      	add	r2, r3
 8000276:	1292      	asrs	r2, r2, #10
 8000278:	17db      	asrs	r3, r3, #31
 800027a:	1ad3      	subs	r3, r2, r3
 800027c:	81fb      	strh	r3, [r7, #14]

    // 범위 제한
    if (percentage > 100) percentage = 100;
 800027e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000282:	2b64      	cmp	r3, #100	@ 0x64
 8000284:	dd01      	ble.n	800028a <convert_to_percentage+0x3a>
 8000286:	2364      	movs	r3, #100	@ 0x64
 8000288:	81fb      	strh	r3, [r7, #14]
    if (percentage < -100) percentage = -100;
 800028a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800028e:	f113 0f64 	cmn.w	r3, #100	@ 0x64
 8000292:	da02      	bge.n	800029a <convert_to_percentage+0x4a>
 8000294:	f64f 739c 	movw	r3, #65436	@ 0xff9c
 8000298:	81fb      	strh	r3, [r7, #14]

    return percentage;
 800029a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800029e:	4618      	mov	r0, r3
 80002a0:	3714      	adds	r7, #20
 80002a2:	46bd      	mov	sp, r7
 80002a4:	bc80      	pop	{r7}
 80002a6:	4770      	bx	lr
 80002a8:	80100201 	.word	0x80100201

080002ac <process_joystick_data>:
  * @brief  조이스틱 데이터 처리
  * @param  None
  * @retval None
  */
void process_joystick_data(void)
{
 80002ac:	b580      	push	{r7, lr}
 80002ae:	af00      	add	r7, sp, #0
    // 원시 ADC 값 읽기
    joystick_x_raw = adc_buffer[0];  // ADC Channel 0 (PA0)
 80002b0:	4b1e      	ldr	r3, [pc, #120]	@ (800032c <process_joystick_data+0x80>)
 80002b2:	881a      	ldrh	r2, [r3, #0]
 80002b4:	4b1e      	ldr	r3, [pc, #120]	@ (8000330 <process_joystick_data+0x84>)
 80002b6:	801a      	strh	r2, [r3, #0]
    joystick_y_raw = adc_buffer[1];  // ADC Channel 1 (PA1)
 80002b8:	4b1c      	ldr	r3, [pc, #112]	@ (800032c <process_joystick_data+0x80>)
 80002ba:	885a      	ldrh	r2, [r3, #2]
 80002bc:	4b1d      	ldr	r3, [pc, #116]	@ (8000334 <process_joystick_data+0x88>)
 80002be:	801a      	strh	r2, [r3, #0]

    // 이동평균 필터 적용
    joystick_x_filtered = apply_moving_average_filter(joystick_x_raw, x_filter_buffer);
 80002c0:	4b1b      	ldr	r3, [pc, #108]	@ (8000330 <process_joystick_data+0x84>)
 80002c2:	881b      	ldrh	r3, [r3, #0]
 80002c4:	491c      	ldr	r1, [pc, #112]	@ (8000338 <process_joystick_data+0x8c>)
 80002c6:	4618      	mov	r0, r3
 80002c8:	f7ff ff5e 	bl	8000188 <apply_moving_average_filter>
 80002cc:	4603      	mov	r3, r0
 80002ce:	461a      	mov	r2, r3
 80002d0:	4b1a      	ldr	r3, [pc, #104]	@ (800033c <process_joystick_data+0x90>)
 80002d2:	801a      	strh	r2, [r3, #0]
    joystick_y_filtered = apply_moving_average_filter(joystick_y_raw, y_filter_buffer);
 80002d4:	4b17      	ldr	r3, [pc, #92]	@ (8000334 <process_joystick_data+0x88>)
 80002d6:	881b      	ldrh	r3, [r3, #0]
 80002d8:	4919      	ldr	r1, [pc, #100]	@ (8000340 <process_joystick_data+0x94>)
 80002da:	4618      	mov	r0, r3
 80002dc:	f7ff ff54 	bl	8000188 <apply_moving_average_filter>
 80002e0:	4603      	mov	r3, r0
 80002e2:	461a      	mov	r2, r3
 80002e4:	4b17      	ldr	r3, [pc, #92]	@ (8000344 <process_joystick_data+0x98>)
 80002e6:	801a      	strh	r2, [r3, #0]

    // 필터 인덱스 업데이트 (두 축 공통 사용)
    filter_index = (filter_index + 1) % FILTER_SIZE;
 80002e8:	4b17      	ldr	r3, [pc, #92]	@ (8000348 <process_joystick_data+0x9c>)
 80002ea:	781b      	ldrb	r3, [r3, #0]
 80002ec:	3301      	adds	r3, #1
 80002ee:	425a      	negs	r2, r3
 80002f0:	f003 0307 	and.w	r3, r3, #7
 80002f4:	f002 0207 	and.w	r2, r2, #7
 80002f8:	bf58      	it	pl
 80002fa:	4253      	negpl	r3, r2
 80002fc:	b2da      	uxtb	r2, r3
 80002fe:	4b12      	ldr	r3, [pc, #72]	@ (8000348 <process_joystick_data+0x9c>)
 8000300:	701a      	strb	r2, [r3, #0]

    // 백분율로 변환
    joystick_x_percent = convert_to_percentage(joystick_x_filtered);
 8000302:	4b0e      	ldr	r3, [pc, #56]	@ (800033c <process_joystick_data+0x90>)
 8000304:	881b      	ldrh	r3, [r3, #0]
 8000306:	4618      	mov	r0, r3
 8000308:	f7ff ffa2 	bl	8000250 <convert_to_percentage>
 800030c:	4603      	mov	r3, r0
 800030e:	461a      	mov	r2, r3
 8000310:	4b0e      	ldr	r3, [pc, #56]	@ (800034c <process_joystick_data+0xa0>)
 8000312:	801a      	strh	r2, [r3, #0]
    joystick_y_percent = convert_to_percentage(joystick_y_filtered);
 8000314:	4b0b      	ldr	r3, [pc, #44]	@ (8000344 <process_joystick_data+0x98>)
 8000316:	881b      	ldrh	r3, [r3, #0]
 8000318:	4618      	mov	r0, r3
 800031a:	f7ff ff99 	bl	8000250 <convert_to_percentage>
 800031e:	4603      	mov	r3, r0
 8000320:	461a      	mov	r2, r3
 8000322:	4b0b      	ldr	r3, [pc, #44]	@ (8000350 <process_joystick_data+0xa4>)
 8000324:	801a      	strh	r2, [r3, #0]
}
 8000326:	bf00      	nop
 8000328:	bd80      	pop	{r7, pc}
 800032a:	bf00      	nop
 800032c:	20000188 	.word	0x20000188
 8000330:	2000018c 	.word	0x2000018c
 8000334:	2000018e 	.word	0x2000018e
 8000338:	20000190 	.word	0x20000190
 800033c:	200001d2 	.word	0x200001d2
 8000340:	200001b0 	.word	0x200001b0
 8000344:	200001d4 	.word	0x200001d4
 8000348:	200001d0 	.word	0x200001d0
 800034c:	200001d6 	.word	0x200001d6
 8000350:	200001d8 	.word	0x200001d8

08000354 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  타이머 콜백 함수 (주기적 ADC 읽기용)
  * @param  htim: 타이머 핸들
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b084      	sub	sp, #16
 8000358:	af02      	add	r7, sp, #8
 800035a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM2) {
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000364:	d113      	bne.n	800038e <HAL_TIM_PeriodElapsedCallback+0x3a>
        // 조이스틱 데이터 처리
        process_joystick_data();
 8000366:	f7ff ffa1 	bl	80002ac <process_joystick_data>

        // UART로 데이터 출력 (디버깅용)
        printf("X: %d%% (%d), Y: %d%% (%d)\n",
 800036a:	4b0b      	ldr	r3, [pc, #44]	@ (8000398 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800036c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000370:	4619      	mov	r1, r3
 8000372:	4b0a      	ldr	r3, [pc, #40]	@ (800039c <HAL_TIM_PeriodElapsedCallback+0x48>)
 8000374:	881b      	ldrh	r3, [r3, #0]
 8000376:	461a      	mov	r2, r3
 8000378:	4b09      	ldr	r3, [pc, #36]	@ (80003a0 <HAL_TIM_PeriodElapsedCallback+0x4c>)
 800037a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800037e:	4618      	mov	r0, r3
 8000380:	4b08      	ldr	r3, [pc, #32]	@ (80003a4 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8000382:	881b      	ldrh	r3, [r3, #0]
 8000384:	9300      	str	r3, [sp, #0]
 8000386:	4603      	mov	r3, r0
 8000388:	4807      	ldr	r0, [pc, #28]	@ (80003a8 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800038a:	f003 fa17 	bl	80037bc <iprintf>
                joystick_x_percent, joystick_x_filtered,
                joystick_y_percent, joystick_y_filtered);
    }
}
 800038e:	bf00      	nop
 8000390:	3708      	adds	r7, #8
 8000392:	46bd      	mov	sp, r7
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	200001d6 	.word	0x200001d6
 800039c:	200001d2 	.word	0x200001d2
 80003a0:	200001d8 	.word	0x200001d8
 80003a4:	200001d4 	.word	0x200001d4
 80003a8:	08004580 	.word	0x08004580

080003ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80003b0:	f000 fbf6 	bl	8000ba0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80003b4:	f000 f834 	bl	8000420 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80003b8:	f000 f96e 	bl	8000698 <MX_GPIO_Init>
  MX_DMA_Init();
 80003bc:	f000 f94e 	bl	800065c <MX_DMA_Init>
  MX_USART2_UART_Init();
 80003c0:	f000 f922 	bl	8000608 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 80003c4:	f000 f884 	bl	80004d0 <MX_ADC1_Init>
  MX_TIM2_Init();
 80003c8:	f000 f8d0 	bl	800056c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	 if (HAL_DMA_Init(&hdma_adc1) != HAL_OK) {
 80003cc:	480f      	ldr	r0, [pc, #60]	@ (800040c <main+0x60>)
 80003ce:	f001 f9f5 	bl	80017bc <HAL_DMA_Init>
 80003d2:	4603      	mov	r3, r0
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d001      	beq.n	80003dc <main+0x30>
	      Error_Handler();
 80003d8:	f000 f9cc 	bl	8000774 <Error_Handler>
	  }

	  // ADC1 핸들과 DMA 링크
	  __HAL_LINKDMA(&hadc1, DMA_Handle, hdma_adc1);
 80003dc:	4b0c      	ldr	r3, [pc, #48]	@ (8000410 <main+0x64>)
 80003de:	4a0b      	ldr	r2, [pc, #44]	@ (800040c <main+0x60>)
 80003e0:	621a      	str	r2, [r3, #32]
 80003e2:	4b0a      	ldr	r3, [pc, #40]	@ (800040c <main+0x60>)
 80003e4:	4a0a      	ldr	r2, [pc, #40]	@ (8000410 <main+0x64>)
 80003e6:	625a      	str	r2, [r3, #36]	@ 0x24

	  // ADC 캘리브레이션
	  HAL_ADCEx_Calibration_Start(&hadc1);
 80003e8:	4809      	ldr	r0, [pc, #36]	@ (8000410 <main+0x64>)
 80003ea:	f001 f82b 	bl	8001444 <HAL_ADCEx_Calibration_Start>

	  // DMA를 사용한 연속 ADC 변환 시작
	  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc_buffer, ADC_BUFFER_SIZE);
 80003ee:	2202      	movs	r2, #2
 80003f0:	4908      	ldr	r1, [pc, #32]	@ (8000414 <main+0x68>)
 80003f2:	4807      	ldr	r0, [pc, #28]	@ (8000410 <main+0x64>)
 80003f4:	f000 fd32 	bl	8000e5c <HAL_ADC_Start_DMA>

	  // 타이머 시작 (50ms 주기로 데이터 처리)
	  HAL_TIM_Base_Start_IT(&htim2);
 80003f8:	4807      	ldr	r0, [pc, #28]	@ (8000418 <main+0x6c>)
 80003fa:	f002 fb57 	bl	8002aac <HAL_TIM_Base_Start_IT>

	  // 시작 메시지
	  printf("STM32F103 조이스틱 ADC 읽기 시작\n");
 80003fe:	4807      	ldr	r0, [pc, #28]	@ (800041c <main+0x70>)
 8000400:	f003 fa44 	bl	800388c <puts>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		HAL_Delay(10);  // 메인 루프 딜레이
 8000404:	200a      	movs	r0, #10
 8000406:	f000 fc2d 	bl	8000c64 <HAL_Delay>
 800040a:	e7fb      	b.n	8000404 <main+0x58>
 800040c:	200000b4 	.word	0x200000b4
 8000410:	20000084 	.word	0x20000084
 8000414:	20000188 	.word	0x20000188
 8000418:	200000f8 	.word	0x200000f8
 800041c:	0800459c 	.word	0x0800459c

08000420 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b094      	sub	sp, #80	@ 0x50
 8000424:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000426:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800042a:	2228      	movs	r2, #40	@ 0x28
 800042c:	2100      	movs	r1, #0
 800042e:	4618      	mov	r0, r3
 8000430:	f003 fb0c 	bl	8003a4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000434:	f107 0314 	add.w	r3, r7, #20
 8000438:	2200      	movs	r2, #0
 800043a:	601a      	str	r2, [r3, #0]
 800043c:	605a      	str	r2, [r3, #4]
 800043e:	609a      	str	r2, [r3, #8]
 8000440:	60da      	str	r2, [r3, #12]
 8000442:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000444:	1d3b      	adds	r3, r7, #4
 8000446:	2200      	movs	r2, #0
 8000448:	601a      	str	r2, [r3, #0]
 800044a:	605a      	str	r2, [r3, #4]
 800044c:	609a      	str	r2, [r3, #8]
 800044e:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000450:	2302      	movs	r3, #2
 8000452:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000454:	2301      	movs	r3, #1
 8000456:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000458:	2310      	movs	r3, #16
 800045a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800045c:	2302      	movs	r3, #2
 800045e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000460:	2300      	movs	r3, #0
 8000462:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000464:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000468:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800046a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800046e:	4618      	mov	r0, r3
 8000470:	f001 fd50 	bl	8001f14 <HAL_RCC_OscConfig>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <SystemClock_Config+0x5e>
  {
    Error_Handler();
 800047a:	f000 f97b 	bl	8000774 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800047e:	230f      	movs	r3, #15
 8000480:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000482:	2302      	movs	r3, #2
 8000484:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000486:	2300      	movs	r3, #0
 8000488:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800048a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800048e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000490:	2300      	movs	r3, #0
 8000492:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000494:	f107 0314 	add.w	r3, r7, #20
 8000498:	2102      	movs	r1, #2
 800049a:	4618      	mov	r0, r3
 800049c:	f001 ffbc 	bl	8002418 <HAL_RCC_ClockConfig>
 80004a0:	4603      	mov	r3, r0
 80004a2:	2b00      	cmp	r3, #0
 80004a4:	d001      	beq.n	80004aa <SystemClock_Config+0x8a>
  {
    Error_Handler();
 80004a6:	f000 f965 	bl	8000774 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80004aa:	2302      	movs	r3, #2
 80004ac:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 80004ae:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80004b2:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004b4:	1d3b      	adds	r3, r7, #4
 80004b6:	4618      	mov	r0, r3
 80004b8:	f002 f93c 	bl	8002734 <HAL_RCCEx_PeriphCLKConfig>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b00      	cmp	r3, #0
 80004c0:	d001      	beq.n	80004c6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80004c2:	f000 f957 	bl	8000774 <Error_Handler>
  }
}
 80004c6:	bf00      	nop
 80004c8:	3750      	adds	r7, #80	@ 0x50
 80004ca:	46bd      	mov	sp, r7
 80004cc:	bd80      	pop	{r7, pc}
	...

080004d0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80004d0:	b580      	push	{r7, lr}
 80004d2:	b084      	sub	sp, #16
 80004d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80004d6:	1d3b      	adds	r3, r7, #4
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
 80004dc:	605a      	str	r2, [r3, #4]
 80004de:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80004e0:	4b20      	ldr	r3, [pc, #128]	@ (8000564 <MX_ADC1_Init+0x94>)
 80004e2:	4a21      	ldr	r2, [pc, #132]	@ (8000568 <MX_ADC1_Init+0x98>)
 80004e4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80004e6:	4b1f      	ldr	r3, [pc, #124]	@ (8000564 <MX_ADC1_Init+0x94>)
 80004e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80004ec:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 80004ee:	4b1d      	ldr	r3, [pc, #116]	@ (8000564 <MX_ADC1_Init+0x94>)
 80004f0:	2201      	movs	r2, #1
 80004f2:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80004f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000564 <MX_ADC1_Init+0x94>)
 80004f6:	2200      	movs	r2, #0
 80004f8:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80004fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000564 <MX_ADC1_Init+0x94>)
 80004fc:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8000500:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000502:	4b18      	ldr	r3, [pc, #96]	@ (8000564 <MX_ADC1_Init+0x94>)
 8000504:	2200      	movs	r2, #0
 8000506:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 2;
 8000508:	4b16      	ldr	r3, [pc, #88]	@ (8000564 <MX_ADC1_Init+0x94>)
 800050a:	2202      	movs	r2, #2
 800050c:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800050e:	4815      	ldr	r0, [pc, #84]	@ (8000564 <MX_ADC1_Init+0x94>)
 8000510:	f000 fbcc 	bl	8000cac <HAL_ADC_Init>
 8000514:	4603      	mov	r3, r0
 8000516:	2b00      	cmp	r3, #0
 8000518:	d001      	beq.n	800051e <MX_ADC1_Init+0x4e>
  {
    Error_Handler();
 800051a:	f000 f92b 	bl	8000774 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800051e:	2300      	movs	r3, #0
 8000520:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000522:	2301      	movs	r3, #1
 8000524:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 8000526:	2307      	movs	r3, #7
 8000528:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800052a:	1d3b      	adds	r3, r7, #4
 800052c:	4619      	mov	r1, r3
 800052e:	480d      	ldr	r0, [pc, #52]	@ (8000564 <MX_ADC1_Init+0x94>)
 8000530:	f000 fd8e 	bl	8001050 <HAL_ADC_ConfigChannel>
 8000534:	4603      	mov	r3, r0
 8000536:	2b00      	cmp	r3, #0
 8000538:	d001      	beq.n	800053e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800053a:	f000 f91b 	bl	8000774 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 800053e:	2301      	movs	r3, #1
 8000540:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000542:	2302      	movs	r3, #2
 8000544:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000546:	1d3b      	adds	r3, r7, #4
 8000548:	4619      	mov	r1, r3
 800054a:	4806      	ldr	r0, [pc, #24]	@ (8000564 <MX_ADC1_Init+0x94>)
 800054c:	f000 fd80 	bl	8001050 <HAL_ADC_ConfigChannel>
 8000550:	4603      	mov	r3, r0
 8000552:	2b00      	cmp	r3, #0
 8000554:	d001      	beq.n	800055a <MX_ADC1_Init+0x8a>
  {
    Error_Handler();
 8000556:	f000 f90d 	bl	8000774 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800055a:	bf00      	nop
 800055c:	3710      	adds	r7, #16
 800055e:	46bd      	mov	sp, r7
 8000560:	bd80      	pop	{r7, pc}
 8000562:	bf00      	nop
 8000564:	20000084 	.word	0x20000084
 8000568:	40012400 	.word	0x40012400

0800056c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b086      	sub	sp, #24
 8000570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000572:	f107 0308 	add.w	r3, r7, #8
 8000576:	2200      	movs	r2, #0
 8000578:	601a      	str	r2, [r3, #0]
 800057a:	605a      	str	r2, [r3, #4]
 800057c:	609a      	str	r2, [r3, #8]
 800057e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000580:	463b      	mov	r3, r7
 8000582:	2200      	movs	r2, #0
 8000584:	601a      	str	r2, [r3, #0]
 8000586:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000588:	4b1e      	ldr	r3, [pc, #120]	@ (8000604 <MX_TIM2_Init+0x98>)
 800058a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800058e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6400-1;
 8000590:	4b1c      	ldr	r3, [pc, #112]	@ (8000604 <MX_TIM2_Init+0x98>)
 8000592:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 8000596:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000598:	4b1a      	ldr	r3, [pc, #104]	@ (8000604 <MX_TIM2_Init+0x98>)
 800059a:	2200      	movs	r2, #0
 800059c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 500-1;
 800059e:	4b19      	ldr	r3, [pc, #100]	@ (8000604 <MX_TIM2_Init+0x98>)
 80005a0:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80005a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005a6:	4b17      	ldr	r3, [pc, #92]	@ (8000604 <MX_TIM2_Init+0x98>)
 80005a8:	2200      	movs	r2, #0
 80005aa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005ac:	4b15      	ldr	r3, [pc, #84]	@ (8000604 <MX_TIM2_Init+0x98>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80005b2:	4814      	ldr	r0, [pc, #80]	@ (8000604 <MX_TIM2_Init+0x98>)
 80005b4:	f002 fa2a 	bl	8002a0c <HAL_TIM_Base_Init>
 80005b8:	4603      	mov	r3, r0
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d001      	beq.n	80005c2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80005be:	f000 f8d9 	bl	8000774 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005c2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80005c8:	f107 0308 	add.w	r3, r7, #8
 80005cc:	4619      	mov	r1, r3
 80005ce:	480d      	ldr	r0, [pc, #52]	@ (8000604 <MX_TIM2_Init+0x98>)
 80005d0:	f002 fbae 	bl	8002d30 <HAL_TIM_ConfigClockSource>
 80005d4:	4603      	mov	r3, r0
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d001      	beq.n	80005de <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80005da:	f000 f8cb 	bl	8000774 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005de:	2300      	movs	r3, #0
 80005e0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005e2:	2300      	movs	r3, #0
 80005e4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005e6:	463b      	mov	r3, r7
 80005e8:	4619      	mov	r1, r3
 80005ea:	4806      	ldr	r0, [pc, #24]	@ (8000604 <MX_TIM2_Init+0x98>)
 80005ec:	f002 fd90 	bl	8003110 <HAL_TIMEx_MasterConfigSynchronization>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80005f6:	f000 f8bd 	bl	8000774 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80005fa:	bf00      	nop
 80005fc:	3718      	adds	r7, #24
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	200000f8 	.word	0x200000f8

08000608 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800060c:	4b11      	ldr	r3, [pc, #68]	@ (8000654 <MX_USART2_UART_Init+0x4c>)
 800060e:	4a12      	ldr	r2, [pc, #72]	@ (8000658 <MX_USART2_UART_Init+0x50>)
 8000610:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000612:	4b10      	ldr	r3, [pc, #64]	@ (8000654 <MX_USART2_UART_Init+0x4c>)
 8000614:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000618:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800061a:	4b0e      	ldr	r3, [pc, #56]	@ (8000654 <MX_USART2_UART_Init+0x4c>)
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000620:	4b0c      	ldr	r3, [pc, #48]	@ (8000654 <MX_USART2_UART_Init+0x4c>)
 8000622:	2200      	movs	r2, #0
 8000624:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000626:	4b0b      	ldr	r3, [pc, #44]	@ (8000654 <MX_USART2_UART_Init+0x4c>)
 8000628:	2200      	movs	r2, #0
 800062a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800062c:	4b09      	ldr	r3, [pc, #36]	@ (8000654 <MX_USART2_UART_Init+0x4c>)
 800062e:	220c      	movs	r2, #12
 8000630:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000632:	4b08      	ldr	r3, [pc, #32]	@ (8000654 <MX_USART2_UART_Init+0x4c>)
 8000634:	2200      	movs	r2, #0
 8000636:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000638:	4b06      	ldr	r3, [pc, #24]	@ (8000654 <MX_USART2_UART_Init+0x4c>)
 800063a:	2200      	movs	r2, #0
 800063c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800063e:	4805      	ldr	r0, [pc, #20]	@ (8000654 <MX_USART2_UART_Init+0x4c>)
 8000640:	f002 fdd6 	bl	80031f0 <HAL_UART_Init>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800064a:	f000 f893 	bl	8000774 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800064e:	bf00      	nop
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	20000140 	.word	0x20000140
 8000658:	40004400 	.word	0x40004400

0800065c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b082      	sub	sp, #8
 8000660:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000662:	4b0c      	ldr	r3, [pc, #48]	@ (8000694 <MX_DMA_Init+0x38>)
 8000664:	695b      	ldr	r3, [r3, #20]
 8000666:	4a0b      	ldr	r2, [pc, #44]	@ (8000694 <MX_DMA_Init+0x38>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	6153      	str	r3, [r2, #20]
 800066e:	4b09      	ldr	r3, [pc, #36]	@ (8000694 <MX_DMA_Init+0x38>)
 8000670:	695b      	ldr	r3, [r3, #20]
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800067a:	2200      	movs	r2, #0
 800067c:	2100      	movs	r1, #0
 800067e:	200b      	movs	r0, #11
 8000680:	f001 f865 	bl	800174e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000684:	200b      	movs	r0, #11
 8000686:	f001 f87e 	bl	8001786 <HAL_NVIC_EnableIRQ>

}
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	40021000 	.word	0x40021000

08000698 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b088      	sub	sp, #32
 800069c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069e:	f107 0310 	add.w	r3, r7, #16
 80006a2:	2200      	movs	r2, #0
 80006a4:	601a      	str	r2, [r3, #0]
 80006a6:	605a      	str	r2, [r3, #4]
 80006a8:	609a      	str	r2, [r3, #8]
 80006aa:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006ac:	4b2d      	ldr	r3, [pc, #180]	@ (8000764 <MX_GPIO_Init+0xcc>)
 80006ae:	699b      	ldr	r3, [r3, #24]
 80006b0:	4a2c      	ldr	r2, [pc, #176]	@ (8000764 <MX_GPIO_Init+0xcc>)
 80006b2:	f043 0310 	orr.w	r3, r3, #16
 80006b6:	6193      	str	r3, [r2, #24]
 80006b8:	4b2a      	ldr	r3, [pc, #168]	@ (8000764 <MX_GPIO_Init+0xcc>)
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	f003 0310 	and.w	r3, r3, #16
 80006c0:	60fb      	str	r3, [r7, #12]
 80006c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006c4:	4b27      	ldr	r3, [pc, #156]	@ (8000764 <MX_GPIO_Init+0xcc>)
 80006c6:	699b      	ldr	r3, [r3, #24]
 80006c8:	4a26      	ldr	r2, [pc, #152]	@ (8000764 <MX_GPIO_Init+0xcc>)
 80006ca:	f043 0320 	orr.w	r3, r3, #32
 80006ce:	6193      	str	r3, [r2, #24]
 80006d0:	4b24      	ldr	r3, [pc, #144]	@ (8000764 <MX_GPIO_Init+0xcc>)
 80006d2:	699b      	ldr	r3, [r3, #24]
 80006d4:	f003 0320 	and.w	r3, r3, #32
 80006d8:	60bb      	str	r3, [r7, #8]
 80006da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006dc:	4b21      	ldr	r3, [pc, #132]	@ (8000764 <MX_GPIO_Init+0xcc>)
 80006de:	699b      	ldr	r3, [r3, #24]
 80006e0:	4a20      	ldr	r2, [pc, #128]	@ (8000764 <MX_GPIO_Init+0xcc>)
 80006e2:	f043 0304 	orr.w	r3, r3, #4
 80006e6:	6193      	str	r3, [r2, #24]
 80006e8:	4b1e      	ldr	r3, [pc, #120]	@ (8000764 <MX_GPIO_Init+0xcc>)
 80006ea:	699b      	ldr	r3, [r3, #24]
 80006ec:	f003 0304 	and.w	r3, r3, #4
 80006f0:	607b      	str	r3, [r7, #4]
 80006f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000764 <MX_GPIO_Init+0xcc>)
 80006f6:	699b      	ldr	r3, [r3, #24]
 80006f8:	4a1a      	ldr	r2, [pc, #104]	@ (8000764 <MX_GPIO_Init+0xcc>)
 80006fa:	f043 0308 	orr.w	r3, r3, #8
 80006fe:	6193      	str	r3, [r2, #24]
 8000700:	4b18      	ldr	r3, [pc, #96]	@ (8000764 <MX_GPIO_Init+0xcc>)
 8000702:	699b      	ldr	r3, [r3, #24]
 8000704:	f003 0308 	and.w	r3, r3, #8
 8000708:	603b      	str	r3, [r7, #0]
 800070a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800070c:	2200      	movs	r2, #0
 800070e:	2120      	movs	r1, #32
 8000710:	4815      	ldr	r0, [pc, #84]	@ (8000768 <MX_GPIO_Init+0xd0>)
 8000712:	f001 fbc5 	bl	8001ea0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000716:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800071a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800071c:	4b13      	ldr	r3, [pc, #76]	@ (800076c <MX_GPIO_Init+0xd4>)
 800071e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000720:	2300      	movs	r3, #0
 8000722:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000724:	f107 0310 	add.w	r3, r7, #16
 8000728:	4619      	mov	r1, r3
 800072a:	4811      	ldr	r0, [pc, #68]	@ (8000770 <MX_GPIO_Init+0xd8>)
 800072c:	f001 fa34 	bl	8001b98 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000730:	2320      	movs	r3, #32
 8000732:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000734:	2301      	movs	r3, #1
 8000736:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000738:	2300      	movs	r3, #0
 800073a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800073c:	2302      	movs	r3, #2
 800073e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000740:	f107 0310 	add.w	r3, r7, #16
 8000744:	4619      	mov	r1, r3
 8000746:	4808      	ldr	r0, [pc, #32]	@ (8000768 <MX_GPIO_Init+0xd0>)
 8000748:	f001 fa26 	bl	8001b98 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800074c:	2200      	movs	r2, #0
 800074e:	2100      	movs	r1, #0
 8000750:	2028      	movs	r0, #40	@ 0x28
 8000752:	f000 fffc 	bl	800174e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000756:	2028      	movs	r0, #40	@ 0x28
 8000758:	f001 f815 	bl	8001786 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800075c:	bf00      	nop
 800075e:	3720      	adds	r7, #32
 8000760:	46bd      	mov	sp, r7
 8000762:	bd80      	pop	{r7, pc}
 8000764:	40021000 	.word	0x40021000
 8000768:	40010800 	.word	0x40010800
 800076c:	10110000 	.word	0x10110000
 8000770:	40011000 	.word	0x40011000

08000774 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000778:	b672      	cpsid	i
}
 800077a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800077c:	bf00      	nop
 800077e:	e7fd      	b.n	800077c <Error_Handler+0x8>

08000780 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000780:	b480      	push	{r7}
 8000782:	b085      	sub	sp, #20
 8000784:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000786:	4b15      	ldr	r3, [pc, #84]	@ (80007dc <HAL_MspInit+0x5c>)
 8000788:	699b      	ldr	r3, [r3, #24]
 800078a:	4a14      	ldr	r2, [pc, #80]	@ (80007dc <HAL_MspInit+0x5c>)
 800078c:	f043 0301 	orr.w	r3, r3, #1
 8000790:	6193      	str	r3, [r2, #24]
 8000792:	4b12      	ldr	r3, [pc, #72]	@ (80007dc <HAL_MspInit+0x5c>)
 8000794:	699b      	ldr	r3, [r3, #24]
 8000796:	f003 0301 	and.w	r3, r3, #1
 800079a:	60bb      	str	r3, [r7, #8]
 800079c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800079e:	4b0f      	ldr	r3, [pc, #60]	@ (80007dc <HAL_MspInit+0x5c>)
 80007a0:	69db      	ldr	r3, [r3, #28]
 80007a2:	4a0e      	ldr	r2, [pc, #56]	@ (80007dc <HAL_MspInit+0x5c>)
 80007a4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80007a8:	61d3      	str	r3, [r2, #28]
 80007aa:	4b0c      	ldr	r3, [pc, #48]	@ (80007dc <HAL_MspInit+0x5c>)
 80007ac:	69db      	ldr	r3, [r3, #28]
 80007ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80007b6:	4b0a      	ldr	r3, [pc, #40]	@ (80007e0 <HAL_MspInit+0x60>)
 80007b8:	685b      	ldr	r3, [r3, #4]
 80007ba:	60fb      	str	r3, [r7, #12]
 80007bc:	68fb      	ldr	r3, [r7, #12]
 80007be:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	68fb      	ldr	r3, [r7, #12]
 80007c6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	4a04      	ldr	r2, [pc, #16]	@ (80007e0 <HAL_MspInit+0x60>)
 80007ce:	68fb      	ldr	r3, [r7, #12]
 80007d0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007d2:	bf00      	nop
 80007d4:	3714      	adds	r7, #20
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bc80      	pop	{r7}
 80007da:	4770      	bx	lr
 80007dc:	40021000 	.word	0x40021000
 80007e0:	40010000 	.word	0x40010000

080007e4 <HAL_ADC_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hadc: ADC handle pointer
  * @retval None
  */
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b088      	sub	sp, #32
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ec:	f107 0310 	add.w	r3, r7, #16
 80007f0:	2200      	movs	r2, #0
 80007f2:	601a      	str	r2, [r3, #0]
 80007f4:	605a      	str	r2, [r3, #4]
 80007f6:	609a      	str	r2, [r3, #8]
 80007f8:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	4a28      	ldr	r2, [pc, #160]	@ (80008a0 <HAL_ADC_MspInit+0xbc>)
 8000800:	4293      	cmp	r3, r2
 8000802:	d149      	bne.n	8000898 <HAL_ADC_MspInit+0xb4>
  {
    /* USER CODE BEGIN ADC1_MspInit 0 */

    /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000804:	4b27      	ldr	r3, [pc, #156]	@ (80008a4 <HAL_ADC_MspInit+0xc0>)
 8000806:	699b      	ldr	r3, [r3, #24]
 8000808:	4a26      	ldr	r2, [pc, #152]	@ (80008a4 <HAL_ADC_MspInit+0xc0>)
 800080a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800080e:	6193      	str	r3, [r2, #24]
 8000810:	4b24      	ldr	r3, [pc, #144]	@ (80008a4 <HAL_ADC_MspInit+0xc0>)
 8000812:	699b      	ldr	r3, [r3, #24]
 8000814:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000818:	60fb      	str	r3, [r7, #12]
 800081a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800081c:	4b21      	ldr	r3, [pc, #132]	@ (80008a4 <HAL_ADC_MspInit+0xc0>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	4a20      	ldr	r2, [pc, #128]	@ (80008a4 <HAL_ADC_MspInit+0xc0>)
 8000822:	f043 0304 	orr.w	r3, r3, #4
 8000826:	6193      	str	r3, [r2, #24]
 8000828:	4b1e      	ldr	r3, [pc, #120]	@ (80008a4 <HAL_ADC_MspInit+0xc0>)
 800082a:	699b      	ldr	r3, [r3, #24]
 800082c:	f003 0304 	and.w	r3, r3, #4
 8000830:	60bb      	str	r3, [r7, #8]
 8000832:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000834:	2303      	movs	r3, #3
 8000836:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000838:	2303      	movs	r3, #3
 800083a:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083c:	f107 0310 	add.w	r3, r7, #16
 8000840:	4619      	mov	r1, r3
 8000842:	4819      	ldr	r0, [pc, #100]	@ (80008a8 <HAL_ADC_MspInit+0xc4>)
 8000844:	f001 f9a8 	bl	8001b98 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000848:	4b18      	ldr	r3, [pc, #96]	@ (80008ac <HAL_ADC_MspInit+0xc8>)
 800084a:	4a19      	ldr	r2, [pc, #100]	@ (80008b0 <HAL_ADC_MspInit+0xcc>)
 800084c:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800084e:	4b17      	ldr	r3, [pc, #92]	@ (80008ac <HAL_ADC_MspInit+0xc8>)
 8000850:	2200      	movs	r2, #0
 8000852:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000854:	4b15      	ldr	r3, [pc, #84]	@ (80008ac <HAL_ADC_MspInit+0xc8>)
 8000856:	2200      	movs	r2, #0
 8000858:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800085a:	4b14      	ldr	r3, [pc, #80]	@ (80008ac <HAL_ADC_MspInit+0xc8>)
 800085c:	2280      	movs	r2, #128	@ 0x80
 800085e:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000860:	4b12      	ldr	r3, [pc, #72]	@ (80008ac <HAL_ADC_MspInit+0xc8>)
 8000862:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000866:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000868:	4b10      	ldr	r3, [pc, #64]	@ (80008ac <HAL_ADC_MspInit+0xc8>)
 800086a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800086e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000870:	4b0e      	ldr	r3, [pc, #56]	@ (80008ac <HAL_ADC_MspInit+0xc8>)
 8000872:	2220      	movs	r2, #32
 8000874:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000876:	4b0d      	ldr	r3, [pc, #52]	@ (80008ac <HAL_ADC_MspInit+0xc8>)
 8000878:	2200      	movs	r2, #0
 800087a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800087c:	480b      	ldr	r0, [pc, #44]	@ (80008ac <HAL_ADC_MspInit+0xc8>)
 800087e:	f000 ff9d 	bl	80017bc <HAL_DMA_Init>
 8000882:	4603      	mov	r3, r0
 8000884:	2b00      	cmp	r3, #0
 8000886:	d001      	beq.n	800088c <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8000888:	f7ff ff74 	bl	8000774 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	4a07      	ldr	r2, [pc, #28]	@ (80008ac <HAL_ADC_MspInit+0xc8>)
 8000890:	621a      	str	r2, [r3, #32]
 8000892:	4a06      	ldr	r2, [pc, #24]	@ (80008ac <HAL_ADC_MspInit+0xc8>)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USER CODE END ADC1_MspInit 1 */

  }

}
 8000898:	bf00      	nop
 800089a:	3720      	adds	r7, #32
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	40012400 	.word	0x40012400
 80008a4:	40021000 	.word	0x40021000
 80008a8:	40010800 	.word	0x40010800
 80008ac:	200000b4 	.word	0x200000b4
 80008b0:	40020008 	.word	0x40020008

080008b4 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80008b4:	b580      	push	{r7, lr}
 80008b6:	b084      	sub	sp, #16
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80008c4:	d113      	bne.n	80008ee <HAL_TIM_Base_MspInit+0x3a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80008c6:	4b0c      	ldr	r3, [pc, #48]	@ (80008f8 <HAL_TIM_Base_MspInit+0x44>)
 80008c8:	69db      	ldr	r3, [r3, #28]
 80008ca:	4a0b      	ldr	r2, [pc, #44]	@ (80008f8 <HAL_TIM_Base_MspInit+0x44>)
 80008cc:	f043 0301 	orr.w	r3, r3, #1
 80008d0:	61d3      	str	r3, [r2, #28]
 80008d2:	4b09      	ldr	r3, [pc, #36]	@ (80008f8 <HAL_TIM_Base_MspInit+0x44>)
 80008d4:	69db      	ldr	r3, [r3, #28]
 80008d6:	f003 0301 	and.w	r3, r3, #1
 80008da:	60fb      	str	r3, [r7, #12]
 80008dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80008de:	2200      	movs	r2, #0
 80008e0:	2100      	movs	r1, #0
 80008e2:	201c      	movs	r0, #28
 80008e4:	f000 ff33 	bl	800174e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80008e8:	201c      	movs	r0, #28
 80008ea:	f000 ff4c 	bl	8001786 <HAL_NVIC_EnableIRQ>

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 80008ee:	bf00      	nop
 80008f0:	3710      	adds	r7, #16
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	40021000 	.word	0x40021000

080008fc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b088      	sub	sp, #32
 8000900:	af00      	add	r7, sp, #0
 8000902:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000904:	f107 0310 	add.w	r3, r7, #16
 8000908:	2200      	movs	r2, #0
 800090a:	601a      	str	r2, [r3, #0]
 800090c:	605a      	str	r2, [r3, #4]
 800090e:	609a      	str	r2, [r3, #8]
 8000910:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	4a15      	ldr	r2, [pc, #84]	@ (800096c <HAL_UART_MspInit+0x70>)
 8000918:	4293      	cmp	r3, r2
 800091a:	d123      	bne.n	8000964 <HAL_UART_MspInit+0x68>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800091c:	4b14      	ldr	r3, [pc, #80]	@ (8000970 <HAL_UART_MspInit+0x74>)
 800091e:	69db      	ldr	r3, [r3, #28]
 8000920:	4a13      	ldr	r2, [pc, #76]	@ (8000970 <HAL_UART_MspInit+0x74>)
 8000922:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000926:	61d3      	str	r3, [r2, #28]
 8000928:	4b11      	ldr	r3, [pc, #68]	@ (8000970 <HAL_UART_MspInit+0x74>)
 800092a:	69db      	ldr	r3, [r3, #28]
 800092c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000934:	4b0e      	ldr	r3, [pc, #56]	@ (8000970 <HAL_UART_MspInit+0x74>)
 8000936:	699b      	ldr	r3, [r3, #24]
 8000938:	4a0d      	ldr	r2, [pc, #52]	@ (8000970 <HAL_UART_MspInit+0x74>)
 800093a:	f043 0304 	orr.w	r3, r3, #4
 800093e:	6193      	str	r3, [r2, #24]
 8000940:	4b0b      	ldr	r3, [pc, #44]	@ (8000970 <HAL_UART_MspInit+0x74>)
 8000942:	699b      	ldr	r3, [r3, #24]
 8000944:	f003 0304 	and.w	r3, r3, #4
 8000948:	60bb      	str	r3, [r7, #8]
 800094a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800094c:	230c      	movs	r3, #12
 800094e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000950:	2302      	movs	r3, #2
 8000952:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000954:	2302      	movs	r3, #2
 8000956:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000958:	f107 0310 	add.w	r3, r7, #16
 800095c:	4619      	mov	r1, r3
 800095e:	4805      	ldr	r0, [pc, #20]	@ (8000974 <HAL_UART_MspInit+0x78>)
 8000960:	f001 f91a 	bl	8001b98 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000964:	bf00      	nop
 8000966:	3720      	adds	r7, #32
 8000968:	46bd      	mov	sp, r7
 800096a:	bd80      	pop	{r7, pc}
 800096c:	40004400 	.word	0x40004400
 8000970:	40021000 	.word	0x40021000
 8000974:	40010800 	.word	0x40010800

08000978 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000978:	b480      	push	{r7}
 800097a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800097c:	bf00      	nop
 800097e:	e7fd      	b.n	800097c <NMI_Handler+0x4>

08000980 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000980:	b480      	push	{r7}
 8000982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000984:	bf00      	nop
 8000986:	e7fd      	b.n	8000984 <HardFault_Handler+0x4>

08000988 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800098c:	bf00      	nop
 800098e:	e7fd      	b.n	800098c <MemManage_Handler+0x4>

08000990 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000990:	b480      	push	{r7}
 8000992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000994:	bf00      	nop
 8000996:	e7fd      	b.n	8000994 <BusFault_Handler+0x4>

08000998 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800099c:	bf00      	nop
 800099e:	e7fd      	b.n	800099c <UsageFault_Handler+0x4>

080009a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009a4:	bf00      	nop
 80009a6:	46bd      	mov	sp, r7
 80009a8:	bc80      	pop	{r7}
 80009aa:	4770      	bx	lr

080009ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bc80      	pop	{r7}
 80009b6:	4770      	bx	lr

080009b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	bc80      	pop	{r7}
 80009c2:	4770      	bx	lr

080009c4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c4:	b580      	push	{r7, lr}
 80009c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009c8:	f000 f930 	bl	8000c2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009cc:	bf00      	nop
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80009d4:	4802      	ldr	r0, [pc, #8]	@ (80009e0 <DMA1_Channel1_IRQHandler+0x10>)
 80009d6:	f000 ffab 	bl	8001930 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80009da:	bf00      	nop
 80009dc:	bd80      	pop	{r7, pc}
 80009de:	bf00      	nop
 80009e0:	200000b4 	.word	0x200000b4

080009e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80009e8:	4802      	ldr	r0, [pc, #8]	@ (80009f4 <TIM2_IRQHandler+0x10>)
 80009ea:	f002 f8b1 	bl	8002b50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80009ee:	bf00      	nop
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	200000f8 	.word	0x200000f8

080009f8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80009fc:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000a00:	f001 fa66 	bl	8001ed0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a04:	bf00      	nop
 8000a06:	bd80      	pop	{r7, pc}

08000a08 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b086      	sub	sp, #24
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	60f8      	str	r0, [r7, #12]
 8000a10:	60b9      	str	r1, [r7, #8]
 8000a12:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a14:	2300      	movs	r3, #0
 8000a16:	617b      	str	r3, [r7, #20]
 8000a18:	e00a      	b.n	8000a30 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a1a:	f3af 8000 	nop.w
 8000a1e:	4601      	mov	r1, r0
 8000a20:	68bb      	ldr	r3, [r7, #8]
 8000a22:	1c5a      	adds	r2, r3, #1
 8000a24:	60ba      	str	r2, [r7, #8]
 8000a26:	b2ca      	uxtb	r2, r1
 8000a28:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a2a:	697b      	ldr	r3, [r7, #20]
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	617b      	str	r3, [r7, #20]
 8000a30:	697a      	ldr	r2, [r7, #20]
 8000a32:	687b      	ldr	r3, [r7, #4]
 8000a34:	429a      	cmp	r2, r3
 8000a36:	dbf0      	blt.n	8000a1a <_read+0x12>
  }

  return len;
 8000a38:	687b      	ldr	r3, [r7, #4]
}
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	3718      	adds	r7, #24
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}

08000a42 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a42:	b580      	push	{r7, lr}
 8000a44:	b086      	sub	sp, #24
 8000a46:	af00      	add	r7, sp, #0
 8000a48:	60f8      	str	r0, [r7, #12]
 8000a4a:	60b9      	str	r1, [r7, #8]
 8000a4c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a4e:	2300      	movs	r3, #0
 8000a50:	617b      	str	r3, [r7, #20]
 8000a52:	e009      	b.n	8000a68 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a54:	68bb      	ldr	r3, [r7, #8]
 8000a56:	1c5a      	adds	r2, r3, #1
 8000a58:	60ba      	str	r2, [r7, #8]
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f7ff fb75 	bl	800014c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a62:	697b      	ldr	r3, [r7, #20]
 8000a64:	3301      	adds	r3, #1
 8000a66:	617b      	str	r3, [r7, #20]
 8000a68:	697a      	ldr	r2, [r7, #20]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	429a      	cmp	r2, r3
 8000a6e:	dbf1      	blt.n	8000a54 <_write+0x12>
  }
  return len;
 8000a70:	687b      	ldr	r3, [r7, #4]
}
 8000a72:	4618      	mov	r0, r3
 8000a74:	3718      	adds	r7, #24
 8000a76:	46bd      	mov	sp, r7
 8000a78:	bd80      	pop	{r7, pc}

08000a7a <_close>:

int _close(int file)
{
 8000a7a:	b480      	push	{r7}
 8000a7c:	b083      	sub	sp, #12
 8000a7e:	af00      	add	r7, sp, #0
 8000a80:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a82:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bc80      	pop	{r7}
 8000a8e:	4770      	bx	lr

08000a90 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b083      	sub	sp, #12
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	6078      	str	r0, [r7, #4]
 8000a98:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a9a:	683b      	ldr	r3, [r7, #0]
 8000a9c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000aa0:	605a      	str	r2, [r3, #4]
  return 0;
 8000aa2:	2300      	movs	r3, #0
}
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	370c      	adds	r7, #12
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	bc80      	pop	{r7}
 8000aac:	4770      	bx	lr

08000aae <_isatty>:

int _isatty(int file)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	b083      	sub	sp, #12
 8000ab2:	af00      	add	r7, sp, #0
 8000ab4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000ab6:	2301      	movs	r3, #1
}
 8000ab8:	4618      	mov	r0, r3
 8000aba:	370c      	adds	r7, #12
 8000abc:	46bd      	mov	sp, r7
 8000abe:	bc80      	pop	{r7}
 8000ac0:	4770      	bx	lr

08000ac2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ac2:	b480      	push	{r7}
 8000ac4:	b085      	sub	sp, #20
 8000ac6:	af00      	add	r7, sp, #0
 8000ac8:	60f8      	str	r0, [r7, #12]
 8000aca:	60b9      	str	r1, [r7, #8]
 8000acc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ace:	2300      	movs	r3, #0
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3714      	adds	r7, #20
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bc80      	pop	{r7}
 8000ad8:	4770      	bx	lr
	...

08000adc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b086      	sub	sp, #24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ae4:	4a14      	ldr	r2, [pc, #80]	@ (8000b38 <_sbrk+0x5c>)
 8000ae6:	4b15      	ldr	r3, [pc, #84]	@ (8000b3c <_sbrk+0x60>)
 8000ae8:	1ad3      	subs	r3, r2, r3
 8000aea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000af0:	4b13      	ldr	r3, [pc, #76]	@ (8000b40 <_sbrk+0x64>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d102      	bne.n	8000afe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000af8:	4b11      	ldr	r3, [pc, #68]	@ (8000b40 <_sbrk+0x64>)
 8000afa:	4a12      	ldr	r2, [pc, #72]	@ (8000b44 <_sbrk+0x68>)
 8000afc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000afe:	4b10      	ldr	r3, [pc, #64]	@ (8000b40 <_sbrk+0x64>)
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4413      	add	r3, r2
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d207      	bcs.n	8000b1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b0c:	f002 ffec 	bl	8003ae8 <__errno>
 8000b10:	4603      	mov	r3, r0
 8000b12:	220c      	movs	r2, #12
 8000b14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b16:	f04f 33ff 	mov.w	r3, #4294967295
 8000b1a:	e009      	b.n	8000b30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b1c:	4b08      	ldr	r3, [pc, #32]	@ (8000b40 <_sbrk+0x64>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b22:	4b07      	ldr	r3, [pc, #28]	@ (8000b40 <_sbrk+0x64>)
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4413      	add	r3, r2
 8000b2a:	4a05      	ldr	r2, [pc, #20]	@ (8000b40 <_sbrk+0x64>)
 8000b2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b2e:	68fb      	ldr	r3, [r7, #12]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3718      	adds	r7, #24
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20005000 	.word	0x20005000
 8000b3c:	00000400 	.word	0x00000400
 8000b40:	200001dc 	.word	0x200001dc
 8000b44:	20000330 	.word	0x20000330

08000b48 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bc80      	pop	{r7}
 8000b52:	4770      	bx	lr

08000b54 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b54:	f7ff fff8 	bl	8000b48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b58:	480b      	ldr	r0, [pc, #44]	@ (8000b88 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b5a:	490c      	ldr	r1, [pc, #48]	@ (8000b8c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b5c:	4a0c      	ldr	r2, [pc, #48]	@ (8000b90 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b60:	e002      	b.n	8000b68 <LoopCopyDataInit>

08000b62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b66:	3304      	adds	r3, #4

08000b68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b6c:	d3f9      	bcc.n	8000b62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b6e:	4a09      	ldr	r2, [pc, #36]	@ (8000b94 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b70:	4c09      	ldr	r4, [pc, #36]	@ (8000b98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b74:	e001      	b.n	8000b7a <LoopFillZerobss>

08000b76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b78:	3204      	adds	r2, #4

08000b7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b7c:	d3fb      	bcc.n	8000b76 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b7e:	f002 ffb9 	bl	8003af4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b82:	f7ff fc13 	bl	80003ac <main>
  bx lr
 8000b86:	4770      	bx	lr
  ldr r0, =_sdata
 8000b88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b8c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000b90:	08004644 	.word	0x08004644
  ldr r2, =_sbss
 8000b94:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000b98:	20000330 	.word	0x20000330

08000b9c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b9c:	e7fe      	b.n	8000b9c <ADC1_2_IRQHandler>
	...

08000ba0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000ba4:	4b08      	ldr	r3, [pc, #32]	@ (8000bc8 <HAL_Init+0x28>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	4a07      	ldr	r2, [pc, #28]	@ (8000bc8 <HAL_Init+0x28>)
 8000baa:	f043 0310 	orr.w	r3, r3, #16
 8000bae:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb0:	2003      	movs	r0, #3
 8000bb2:	f000 fdc1 	bl	8001738 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	f000 f808 	bl	8000bcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bbc:	f7ff fde0 	bl	8000780 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000bc0:	2300      	movs	r3, #0
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	40022000 	.word	0x40022000

08000bcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bd4:	4b12      	ldr	r3, [pc, #72]	@ (8000c20 <HAL_InitTick+0x54>)
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	4b12      	ldr	r3, [pc, #72]	@ (8000c24 <HAL_InitTick+0x58>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	4619      	mov	r1, r3
 8000bde:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000be2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bea:	4618      	mov	r0, r3
 8000bec:	f000 fdd9 	bl	80017a2 <HAL_SYSTICK_Config>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e00e      	b.n	8000c18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2b0f      	cmp	r3, #15
 8000bfe:	d80a      	bhi.n	8000c16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c00:	2200      	movs	r2, #0
 8000c02:	6879      	ldr	r1, [r7, #4]
 8000c04:	f04f 30ff 	mov.w	r0, #4294967295
 8000c08:	f000 fda1 	bl	800174e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c0c:	4a06      	ldr	r2, [pc, #24]	@ (8000c28 <HAL_InitTick+0x5c>)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c12:	2300      	movs	r3, #0
 8000c14:	e000      	b.n	8000c18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20000000 	.word	0x20000000
 8000c24:	20000008 	.word	0x20000008
 8000c28:	20000004 	.word	0x20000004

08000c2c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c30:	4b05      	ldr	r3, [pc, #20]	@ (8000c48 <HAL_IncTick+0x1c>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	461a      	mov	r2, r3
 8000c36:	4b05      	ldr	r3, [pc, #20]	@ (8000c4c <HAL_IncTick+0x20>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	4a03      	ldr	r2, [pc, #12]	@ (8000c4c <HAL_IncTick+0x20>)
 8000c3e:	6013      	str	r3, [r2, #0]
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bc80      	pop	{r7}
 8000c46:	4770      	bx	lr
 8000c48:	20000008 	.word	0x20000008
 8000c4c:	200001e0 	.word	0x200001e0

08000c50 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  return uwTick;
 8000c54:	4b02      	ldr	r3, [pc, #8]	@ (8000c60 <HAL_GetTick+0x10>)
 8000c56:	681b      	ldr	r3, [r3, #0]
}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bc80      	pop	{r7}
 8000c5e:	4770      	bx	lr
 8000c60:	200001e0 	.word	0x200001e0

08000c64 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b084      	sub	sp, #16
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c6c:	f7ff fff0 	bl	8000c50 <HAL_GetTick>
 8000c70:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c76:	68fb      	ldr	r3, [r7, #12]
 8000c78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c7c:	d005      	beq.n	8000c8a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c7e:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca8 <HAL_Delay+0x44>)
 8000c80:	781b      	ldrb	r3, [r3, #0]
 8000c82:	461a      	mov	r2, r3
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	4413      	add	r3, r2
 8000c88:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c8a:	bf00      	nop
 8000c8c:	f7ff ffe0 	bl	8000c50 <HAL_GetTick>
 8000c90:	4602      	mov	r2, r0
 8000c92:	68bb      	ldr	r3, [r7, #8]
 8000c94:	1ad3      	subs	r3, r2, r3
 8000c96:	68fa      	ldr	r2, [r7, #12]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d8f7      	bhi.n	8000c8c <HAL_Delay+0x28>
  {
  }
}
 8000c9c:	bf00      	nop
 8000c9e:	bf00      	nop
 8000ca0:	3710      	adds	r7, #16
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop
 8000ca8:	20000008 	.word	0x20000008

08000cac <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b086      	sub	sp, #24
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000cb8:	2300      	movs	r3, #0
 8000cba:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d101      	bne.n	8000cce <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e0be      	b.n	8000e4c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	689b      	ldr	r3, [r3, #8]
 8000cd2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	d109      	bne.n	8000cf0 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2200      	movs	r2, #0
 8000ce0:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000cea:	6878      	ldr	r0, [r7, #4]
 8000cec:	f7ff fd7a 	bl	80007e4 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f000 faff 	bl	80012f4 <ADC_ConversionStop_Disable>
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cfe:	f003 0310 	and.w	r3, r3, #16
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	f040 8099 	bne.w	8000e3a <HAL_ADC_Init+0x18e>
 8000d08:	7dfb      	ldrb	r3, [r7, #23]
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	f040 8095 	bne.w	8000e3a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d14:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000d18:	f023 0302 	bic.w	r3, r3, #2
 8000d1c:	f043 0202 	orr.w	r2, r3, #2
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d2c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000d2e:	687b      	ldr	r3, [r7, #4]
 8000d30:	7b1b      	ldrb	r3, [r3, #12]
 8000d32:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000d34:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000d36:	68ba      	ldr	r2, [r7, #8]
 8000d38:	4313      	orrs	r3, r2
 8000d3a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	689b      	ldr	r3, [r3, #8]
 8000d40:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000d44:	d003      	beq.n	8000d4e <HAL_ADC_Init+0xa2>
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	689b      	ldr	r3, [r3, #8]
 8000d4a:	2b01      	cmp	r3, #1
 8000d4c:	d102      	bne.n	8000d54 <HAL_ADC_Init+0xa8>
 8000d4e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d52:	e000      	b.n	8000d56 <HAL_ADC_Init+0xaa>
 8000d54:	2300      	movs	r3, #0
 8000d56:	693a      	ldr	r2, [r7, #16]
 8000d58:	4313      	orrs	r3, r2
 8000d5a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	7d1b      	ldrb	r3, [r3, #20]
 8000d60:	2b01      	cmp	r3, #1
 8000d62:	d119      	bne.n	8000d98 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	7b1b      	ldrb	r3, [r3, #12]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d109      	bne.n	8000d80 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	699b      	ldr	r3, [r3, #24]
 8000d70:	3b01      	subs	r3, #1
 8000d72:	035a      	lsls	r2, r3, #13
 8000d74:	693b      	ldr	r3, [r7, #16]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000d7c:	613b      	str	r3, [r7, #16]
 8000d7e:	e00b      	b.n	8000d98 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d84:	f043 0220 	orr.w	r2, r3, #32
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d90:	f043 0201 	orr.w	r2, r3, #1
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	681b      	ldr	r3, [r3, #0]
 8000d9c:	685b      	ldr	r3, [r3, #4]
 8000d9e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	693a      	ldr	r2, [r7, #16]
 8000da8:	430a      	orrs	r2, r1
 8000daa:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	689a      	ldr	r2, [r3, #8]
 8000db2:	4b28      	ldr	r3, [pc, #160]	@ (8000e54 <HAL_ADC_Init+0x1a8>)
 8000db4:	4013      	ands	r3, r2
 8000db6:	687a      	ldr	r2, [r7, #4]
 8000db8:	6812      	ldr	r2, [r2, #0]
 8000dba:	68b9      	ldr	r1, [r7, #8]
 8000dbc:	430b      	orrs	r3, r1
 8000dbe:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	689b      	ldr	r3, [r3, #8]
 8000dc4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000dc8:	d003      	beq.n	8000dd2 <HAL_ADC_Init+0x126>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	689b      	ldr	r3, [r3, #8]
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d104      	bne.n	8000ddc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	691b      	ldr	r3, [r3, #16]
 8000dd6:	3b01      	subs	r3, #1
 8000dd8:	051b      	lsls	r3, r3, #20
 8000dda:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000de2:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	68fa      	ldr	r2, [r7, #12]
 8000dec:	430a      	orrs	r2, r1
 8000dee:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	689a      	ldr	r2, [r3, #8]
 8000df6:	4b18      	ldr	r3, [pc, #96]	@ (8000e58 <HAL_ADC_Init+0x1ac>)
 8000df8:	4013      	ands	r3, r2
 8000dfa:	68ba      	ldr	r2, [r7, #8]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d10b      	bne.n	8000e18 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	2200      	movs	r2, #0
 8000e04:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e0a:	f023 0303 	bic.w	r3, r3, #3
 8000e0e:	f043 0201 	orr.w	r2, r3, #1
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e16:	e018      	b.n	8000e4a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e1c:	f023 0312 	bic.w	r3, r3, #18
 8000e20:	f043 0210 	orr.w	r2, r3, #16
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e2c:	f043 0201 	orr.w	r2, r3, #1
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000e34:	2301      	movs	r3, #1
 8000e36:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000e38:	e007      	b.n	8000e4a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e3e:	f043 0210 	orr.w	r2, r3, #16
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000e46:	2301      	movs	r3, #1
 8000e48:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000e4a:	7dfb      	ldrb	r3, [r7, #23]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3718      	adds	r7, #24
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	ffe1f7fd 	.word	0xffe1f7fd
 8000e58:	ff1f0efe 	.word	0xff1f0efe

08000e5c <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	4a64      	ldr	r2, [pc, #400]	@ (8001004 <HAL_ADC_Start_DMA+0x1a8>)
 8000e72:	4293      	cmp	r3, r2
 8000e74:	d004      	beq.n	8000e80 <HAL_ADC_Start_DMA+0x24>
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a63      	ldr	r2, [pc, #396]	@ (8001008 <HAL_ADC_Start_DMA+0x1ac>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d106      	bne.n	8000e8e <HAL_ADC_Start_DMA+0x32>
 8000e80:	4b60      	ldr	r3, [pc, #384]	@ (8001004 <HAL_ADC_Start_DMA+0x1a8>)
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8000e88:	2b00      	cmp	r3, #0
 8000e8a:	f040 80b3 	bne.w	8000ff4 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d101      	bne.n	8000e9c <HAL_ADC_Start_DMA+0x40>
 8000e98:	2302      	movs	r3, #2
 8000e9a:	e0ae      	b.n	8000ffa <HAL_ADC_Start_DMA+0x19e>
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000ea4:	68f8      	ldr	r0, [r7, #12]
 8000ea6:	f000 f9cb 	bl	8001240 <ADC_Enable>
 8000eaa:	4603      	mov	r3, r0
 8000eac:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000eae:	7dfb      	ldrb	r3, [r7, #23]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	f040 809a 	bne.w	8000fea <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000eba:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000ebe:	f023 0301 	bic.w	r3, r3, #1
 8000ec2:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000ec6:	68fb      	ldr	r3, [r7, #12]
 8000ec8:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a4e      	ldr	r2, [pc, #312]	@ (8001008 <HAL_ADC_Start_DMA+0x1ac>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d105      	bne.n	8000ee0 <HAL_ADC_Start_DMA+0x84>
 8000ed4:	4b4b      	ldr	r3, [pc, #300]	@ (8001004 <HAL_ADC_Start_DMA+0x1a8>)
 8000ed6:	685b      	ldr	r3, [r3, #4]
 8000ed8:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d115      	bne.n	8000f0c <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ee4:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d026      	beq.n	8000f48 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000efa:	68fb      	ldr	r3, [r7, #12]
 8000efc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000efe:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000f02:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000f06:	68fb      	ldr	r3, [r7, #12]
 8000f08:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000f0a:	e01d      	b.n	8000f48 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f10:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000f18:	68fb      	ldr	r3, [r7, #12]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a39      	ldr	r2, [pc, #228]	@ (8001004 <HAL_ADC_Start_DMA+0x1a8>)
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d004      	beq.n	8000f2c <HAL_ADC_Start_DMA+0xd0>
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	4a38      	ldr	r2, [pc, #224]	@ (8001008 <HAL_ADC_Start_DMA+0x1ac>)
 8000f28:	4293      	cmp	r3, r2
 8000f2a:	d10d      	bne.n	8000f48 <HAL_ADC_Start_DMA+0xec>
 8000f2c:	4b35      	ldr	r3, [pc, #212]	@ (8001004 <HAL_ADC_Start_DMA+0x1a8>)
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d007      	beq.n	8000f48 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f3c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000f40:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f4c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d006      	beq.n	8000f62 <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000f58:	f023 0206 	bic.w	r2, r3, #6
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000f60:	e002      	b.n	8000f68 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000f62:	68fb      	ldr	r3, [r7, #12]
 8000f64:	2200      	movs	r2, #0
 8000f66:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000f68:	68fb      	ldr	r3, [r7, #12]
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	6a1b      	ldr	r3, [r3, #32]
 8000f74:	4a25      	ldr	r2, [pc, #148]	@ (800100c <HAL_ADC_Start_DMA+0x1b0>)
 8000f76:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	6a1b      	ldr	r3, [r3, #32]
 8000f7c:	4a24      	ldr	r2, [pc, #144]	@ (8001010 <HAL_ADC_Start_DMA+0x1b4>)
 8000f7e:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000f80:	68fb      	ldr	r3, [r7, #12]
 8000f82:	6a1b      	ldr	r3, [r3, #32]
 8000f84:	4a23      	ldr	r2, [pc, #140]	@ (8001014 <HAL_ADC_Start_DMA+0x1b8>)
 8000f86:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000f88:	68fb      	ldr	r3, [r7, #12]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f06f 0202 	mvn.w	r2, #2
 8000f90:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	689a      	ldr	r2, [r3, #8]
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000fa0:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000fa2:	68fb      	ldr	r3, [r7, #12]
 8000fa4:	6a18      	ldr	r0, [r3, #32]
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	334c      	adds	r3, #76	@ 0x4c
 8000fac:	4619      	mov	r1, r3
 8000fae:	68ba      	ldr	r2, [r7, #8]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	f000 fc5d 	bl	8001870 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	689b      	ldr	r3, [r3, #8]
 8000fbc:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000fc0:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000fc4:	d108      	bne.n	8000fd8 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	689a      	ldr	r2, [r3, #8]
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8000fd4:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000fd6:	e00f      	b.n	8000ff8 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	689a      	ldr	r2, [r3, #8]
 8000fde:	68fb      	ldr	r3, [r7, #12]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8000fe6:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000fe8:	e006      	b.n	8000ff8 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000fea:	68fb      	ldr	r3, [r7, #12]
 8000fec:	2200      	movs	r2, #0
 8000fee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8000ff2:	e001      	b.n	8000ff8 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000ff4:	2301      	movs	r3, #1
 8000ff6:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000ff8:	7dfb      	ldrb	r3, [r7, #23]
}
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	3718      	adds	r7, #24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40012400 	.word	0x40012400
 8001008:	40012800 	.word	0x40012800
 800100c:	08001377 	.word	0x08001377
 8001010:	080013f3 	.word	0x080013f3
 8001014:	0800140f 	.word	0x0800140f

08001018 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	bc80      	pop	{r7}
 8001028:	4770      	bx	lr

0800102a <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800102a:	b480      	push	{r7}
 800102c:	b083      	sub	sp, #12
 800102e:	af00      	add	r7, sp, #0
 8001030:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8001032:	bf00      	nop
 8001034:	370c      	adds	r7, #12
 8001036:	46bd      	mov	sp, r7
 8001038:	bc80      	pop	{r7}
 800103a:	4770      	bx	lr

0800103c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001044:	bf00      	nop
 8001046:	370c      	adds	r7, #12
 8001048:	46bd      	mov	sp, r7
 800104a:	bc80      	pop	{r7}
 800104c:	4770      	bx	lr
	...

08001050 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8001050:	b480      	push	{r7}
 8001052:	b085      	sub	sp, #20
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
 8001058:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800105a:	2300      	movs	r3, #0
 800105c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800105e:	2300      	movs	r3, #0
 8001060:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001068:	2b01      	cmp	r3, #1
 800106a:	d101      	bne.n	8001070 <HAL_ADC_ConfigChannel+0x20>
 800106c:	2302      	movs	r3, #2
 800106e:	e0dc      	b.n	800122a <HAL_ADC_ConfigChannel+0x1da>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2201      	movs	r2, #1
 8001074:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	685b      	ldr	r3, [r3, #4]
 800107c:	2b06      	cmp	r3, #6
 800107e:	d81c      	bhi.n	80010ba <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685a      	ldr	r2, [r3, #4]
 800108a:	4613      	mov	r3, r2
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	4413      	add	r3, r2
 8001090:	3b05      	subs	r3, #5
 8001092:	221f      	movs	r2, #31
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	43db      	mvns	r3, r3
 800109a:	4019      	ands	r1, r3
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	6818      	ldr	r0, [r3, #0]
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685a      	ldr	r2, [r3, #4]
 80010a4:	4613      	mov	r3, r2
 80010a6:	009b      	lsls	r3, r3, #2
 80010a8:	4413      	add	r3, r2
 80010aa:	3b05      	subs	r3, #5
 80010ac:	fa00 f203 	lsl.w	r2, r0, r3
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	430a      	orrs	r2, r1
 80010b6:	635a      	str	r2, [r3, #52]	@ 0x34
 80010b8:	e03c      	b.n	8001134 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	2b0c      	cmp	r3, #12
 80010c0:	d81c      	bhi.n	80010fc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	685a      	ldr	r2, [r3, #4]
 80010cc:	4613      	mov	r3, r2
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	4413      	add	r3, r2
 80010d2:	3b23      	subs	r3, #35	@ 0x23
 80010d4:	221f      	movs	r2, #31
 80010d6:	fa02 f303 	lsl.w	r3, r2, r3
 80010da:	43db      	mvns	r3, r3
 80010dc:	4019      	ands	r1, r3
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	6818      	ldr	r0, [r3, #0]
 80010e2:	683b      	ldr	r3, [r7, #0]
 80010e4:	685a      	ldr	r2, [r3, #4]
 80010e6:	4613      	mov	r3, r2
 80010e8:	009b      	lsls	r3, r3, #2
 80010ea:	4413      	add	r3, r2
 80010ec:	3b23      	subs	r3, #35	@ 0x23
 80010ee:	fa00 f203 	lsl.w	r2, r0, r3
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	430a      	orrs	r2, r1
 80010f8:	631a      	str	r2, [r3, #48]	@ 0x30
 80010fa:	e01b      	b.n	8001134 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685a      	ldr	r2, [r3, #4]
 8001106:	4613      	mov	r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4413      	add	r3, r2
 800110c:	3b41      	subs	r3, #65	@ 0x41
 800110e:	221f      	movs	r2, #31
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	43db      	mvns	r3, r3
 8001116:	4019      	ands	r1, r3
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	6818      	ldr	r0, [r3, #0]
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	685a      	ldr	r2, [r3, #4]
 8001120:	4613      	mov	r3, r2
 8001122:	009b      	lsls	r3, r3, #2
 8001124:	4413      	add	r3, r2
 8001126:	3b41      	subs	r3, #65	@ 0x41
 8001128:	fa00 f203 	lsl.w	r2, r0, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	430a      	orrs	r2, r1
 8001132:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2b09      	cmp	r3, #9
 800113a:	d91c      	bls.n	8001176 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	68d9      	ldr	r1, [r3, #12]
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	681a      	ldr	r2, [r3, #0]
 8001146:	4613      	mov	r3, r2
 8001148:	005b      	lsls	r3, r3, #1
 800114a:	4413      	add	r3, r2
 800114c:	3b1e      	subs	r3, #30
 800114e:	2207      	movs	r2, #7
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	4019      	ands	r1, r3
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	6898      	ldr	r0, [r3, #8]
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	681a      	ldr	r2, [r3, #0]
 8001160:	4613      	mov	r3, r2
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	4413      	add	r3, r2
 8001166:	3b1e      	subs	r3, #30
 8001168:	fa00 f203 	lsl.w	r2, r0, r3
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	430a      	orrs	r2, r1
 8001172:	60da      	str	r2, [r3, #12]
 8001174:	e019      	b.n	80011aa <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	681b      	ldr	r3, [r3, #0]
 800117a:	6919      	ldr	r1, [r3, #16]
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	681a      	ldr	r2, [r3, #0]
 8001180:	4613      	mov	r3, r2
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	4413      	add	r3, r2
 8001186:	2207      	movs	r2, #7
 8001188:	fa02 f303 	lsl.w	r3, r2, r3
 800118c:	43db      	mvns	r3, r3
 800118e:	4019      	ands	r1, r3
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	6898      	ldr	r0, [r3, #8]
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	681a      	ldr	r2, [r3, #0]
 8001198:	4613      	mov	r3, r2
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	4413      	add	r3, r2
 800119e:	fa00 f203 	lsl.w	r2, r0, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	430a      	orrs	r2, r1
 80011a8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	2b10      	cmp	r3, #16
 80011b0:	d003      	beq.n	80011ba <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80011b6:	2b11      	cmp	r3, #17
 80011b8:	d132      	bne.n	8001220 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	4a1d      	ldr	r2, [pc, #116]	@ (8001234 <HAL_ADC_ConfigChannel+0x1e4>)
 80011c0:	4293      	cmp	r3, r2
 80011c2:	d125      	bne.n	8001210 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d126      	bne.n	8001220 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	689a      	ldr	r2, [r3, #8]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80011e0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2b10      	cmp	r3, #16
 80011e8:	d11a      	bne.n	8001220 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80011ea:	4b13      	ldr	r3, [pc, #76]	@ (8001238 <HAL_ADC_ConfigChannel+0x1e8>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	4a13      	ldr	r2, [pc, #76]	@ (800123c <HAL_ADC_ConfigChannel+0x1ec>)
 80011f0:	fba2 2303 	umull	r2, r3, r2, r3
 80011f4:	0c9a      	lsrs	r2, r3, #18
 80011f6:	4613      	mov	r3, r2
 80011f8:	009b      	lsls	r3, r3, #2
 80011fa:	4413      	add	r3, r2
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001200:	e002      	b.n	8001208 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001202:	68bb      	ldr	r3, [r7, #8]
 8001204:	3b01      	subs	r3, #1
 8001206:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d1f9      	bne.n	8001202 <HAL_ADC_ConfigChannel+0x1b2>
 800120e:	e007      	b.n	8001220 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001214:	f043 0220 	orr.w	r2, r3, #32
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 800121c:	2301      	movs	r3, #1
 800121e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	2200      	movs	r2, #0
 8001224:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001228:	7bfb      	ldrb	r3, [r7, #15]
}
 800122a:	4618      	mov	r0, r3
 800122c:	3714      	adds	r7, #20
 800122e:	46bd      	mov	sp, r7
 8001230:	bc80      	pop	{r7}
 8001232:	4770      	bx	lr
 8001234:	40012400 	.word	0x40012400
 8001238:	20000000 	.word	0x20000000
 800123c:	431bde83 	.word	0x431bde83

08001240 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001248:	2300      	movs	r3, #0
 800124a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800124c:	2300      	movs	r3, #0
 800124e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	689b      	ldr	r3, [r3, #8]
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	2b01      	cmp	r3, #1
 800125c:	d040      	beq.n	80012e0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	689a      	ldr	r2, [r3, #8]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	f042 0201 	orr.w	r2, r2, #1
 800126c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800126e:	4b1f      	ldr	r3, [pc, #124]	@ (80012ec <ADC_Enable+0xac>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a1f      	ldr	r2, [pc, #124]	@ (80012f0 <ADC_Enable+0xb0>)
 8001274:	fba2 2303 	umull	r2, r3, r2, r3
 8001278:	0c9b      	lsrs	r3, r3, #18
 800127a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800127c:	e002      	b.n	8001284 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800127e:	68bb      	ldr	r3, [r7, #8]
 8001280:	3b01      	subs	r3, #1
 8001282:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001284:	68bb      	ldr	r3, [r7, #8]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d1f9      	bne.n	800127e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800128a:	f7ff fce1 	bl	8000c50 <HAL_GetTick>
 800128e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001290:	e01f      	b.n	80012d2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001292:	f7ff fcdd 	bl	8000c50 <HAL_GetTick>
 8001296:	4602      	mov	r2, r0
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	2b02      	cmp	r3, #2
 800129e:	d918      	bls.n	80012d2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	689b      	ldr	r3, [r3, #8]
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	2b01      	cmp	r3, #1
 80012ac:	d011      	beq.n	80012d2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012b2:	f043 0210 	orr.w	r2, r3, #16
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012be:	f043 0201 	orr.w	r2, r3, #1
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2200      	movs	r2, #0
 80012ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e007      	b.n	80012e2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	689b      	ldr	r3, [r3, #8]
 80012d8:	f003 0301 	and.w	r3, r3, #1
 80012dc:	2b01      	cmp	r3, #1
 80012de:	d1d8      	bne.n	8001292 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80012e0:	2300      	movs	r3, #0
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3710      	adds	r7, #16
 80012e6:	46bd      	mov	sp, r7
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000000 	.word	0x20000000
 80012f0:	431bde83 	.word	0x431bde83

080012f4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b084      	sub	sp, #16
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80012fc:	2300      	movs	r3, #0
 80012fe:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	2b01      	cmp	r3, #1
 800130c:	d12e      	bne.n	800136c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	689a      	ldr	r2, [r3, #8]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	f022 0201 	bic.w	r2, r2, #1
 800131c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800131e:	f7ff fc97 	bl	8000c50 <HAL_GetTick>
 8001322:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001324:	e01b      	b.n	800135e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001326:	f7ff fc93 	bl	8000c50 <HAL_GetTick>
 800132a:	4602      	mov	r2, r0
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	2b02      	cmp	r3, #2
 8001332:	d914      	bls.n	800135e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	689b      	ldr	r3, [r3, #8]
 800133a:	f003 0301 	and.w	r3, r3, #1
 800133e:	2b01      	cmp	r3, #1
 8001340:	d10d      	bne.n	800135e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001346:	f043 0210 	orr.w	r2, r3, #16
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001352:	f043 0201 	orr.w	r2, r3, #1
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800135a:	2301      	movs	r3, #1
 800135c:	e007      	b.n	800136e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	689b      	ldr	r3, [r3, #8]
 8001364:	f003 0301 	and.w	r3, r3, #1
 8001368:	2b01      	cmp	r3, #1
 800136a:	d0dc      	beq.n	8001326 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	3710      	adds	r7, #16
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}

08001376 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001376:	b580      	push	{r7, lr}
 8001378:	b084      	sub	sp, #16
 800137a:	af00      	add	r7, sp, #0
 800137c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001382:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001388:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800138c:	2b00      	cmp	r3, #0
 800138e:	d127      	bne.n	80013e0 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001394:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	689b      	ldr	r3, [r3, #8]
 80013a2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80013a6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80013aa:	d115      	bne.n	80013d8 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d111      	bne.n	80013d8 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d105      	bne.n	80013d8 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013d0:	f043 0201 	orr.w	r2, r3, #1
 80013d4:	68fb      	ldr	r3, [r7, #12]
 80013d6:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80013d8:	68f8      	ldr	r0, [r7, #12]
 80013da:	f7ff fe1d 	bl	8001018 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80013de:	e004      	b.n	80013ea <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	6a1b      	ldr	r3, [r3, #32]
 80013e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	4798      	blx	r3
}
 80013ea:	bf00      	nop
 80013ec:	3710      	adds	r7, #16
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}

080013f2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80013f2:	b580      	push	{r7, lr}
 80013f4:	b084      	sub	sp, #16
 80013f6:	af00      	add	r7, sp, #0
 80013f8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013fe:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001400:	68f8      	ldr	r0, [r7, #12]
 8001402:	f7ff fe12 	bl	800102a <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001406:	bf00      	nop
 8001408:	3710      	adds	r7, #16
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800140e:	b580      	push	{r7, lr}
 8001410:	b084      	sub	sp, #16
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800141a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001420:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800142c:	f043 0204 	orr.w	r2, r3, #4
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001434:	68f8      	ldr	r0, [r7, #12]
 8001436:	f7ff fe01 	bl	800103c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800143a:	bf00      	nop
 800143c:	3710      	adds	r7, #16
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}
	...

08001444 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8001444:	b590      	push	{r4, r7, lr}
 8001446:	b087      	sub	sp, #28
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800144c:	2300      	movs	r3, #0
 800144e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8001450:	2300      	movs	r3, #0
 8001452:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800145a:	2b01      	cmp	r3, #1
 800145c:	d101      	bne.n	8001462 <HAL_ADCEx_Calibration_Start+0x1e>
 800145e:	2302      	movs	r3, #2
 8001460:	e097      	b.n	8001592 <HAL_ADCEx_Calibration_Start+0x14e>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	2201      	movs	r2, #1
 8001466:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 800146a:	6878      	ldr	r0, [r7, #4]
 800146c:	f7ff ff42 	bl	80012f4 <ADC_ConversionStop_Disable>
 8001470:	4603      	mov	r3, r0
 8001472:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f7ff fee3 	bl	8001240 <ADC_Enable>
 800147a:	4603      	mov	r3, r0
 800147c:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 800147e:	7dfb      	ldrb	r3, [r7, #23]
 8001480:	2b00      	cmp	r3, #0
 8001482:	f040 8081 	bne.w	8001588 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800148a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 800148e:	f023 0302 	bic.w	r3, r3, #2
 8001492:	f043 0202 	orr.w	r2, r3, #2
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800149a:	4b40      	ldr	r3, [pc, #256]	@ (800159c <HAL_ADCEx_Calibration_Start+0x158>)
 800149c:	681c      	ldr	r4, [r3, #0]
 800149e:	2002      	movs	r0, #2
 80014a0:	f001 f9fe 	bl	80028a0 <HAL_RCCEx_GetPeriphCLKFreq>
 80014a4:	4603      	mov	r3, r0
 80014a6:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 80014aa:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 80014ac:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 80014ae:	e002      	b.n	80014b6 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	3b01      	subs	r3, #1
 80014b4:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d1f9      	bne.n	80014b0 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	689a      	ldr	r2, [r3, #8]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f042 0208 	orr.w	r2, r2, #8
 80014ca:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 80014cc:	f7ff fbc0 	bl	8000c50 <HAL_GetTick>
 80014d0:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80014d2:	e01b      	b.n	800150c <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 80014d4:	f7ff fbbc 	bl	8000c50 <HAL_GetTick>
 80014d8:	4602      	mov	r2, r0
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	1ad3      	subs	r3, r2, r3
 80014de:	2b0a      	cmp	r3, #10
 80014e0:	d914      	bls.n	800150c <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	f003 0308 	and.w	r3, r3, #8
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d00d      	beq.n	800150c <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014f4:	f023 0312 	bic.w	r3, r3, #18
 80014f8:	f043 0210 	orr.w	r2, r3, #16
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2200      	movs	r2, #0
 8001504:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e042      	b.n	8001592 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	f003 0308 	and.w	r3, r3, #8
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1dc      	bne.n	80014d4 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	689a      	ldr	r2, [r3, #8]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f042 0204 	orr.w	r2, r2, #4
 8001528:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 800152a:	f7ff fb91 	bl	8000c50 <HAL_GetTick>
 800152e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001530:	e01b      	b.n	800156a <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8001532:	f7ff fb8d 	bl	8000c50 <HAL_GetTick>
 8001536:	4602      	mov	r2, r0
 8001538:	693b      	ldr	r3, [r7, #16]
 800153a:	1ad3      	subs	r3, r2, r3
 800153c:	2b0a      	cmp	r3, #10
 800153e:	d914      	bls.n	800156a <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	f003 0304 	and.w	r3, r3, #4
 800154a:	2b00      	cmp	r3, #0
 800154c:	d00d      	beq.n	800156a <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001552:	f023 0312 	bic.w	r3, r3, #18
 8001556:	f043 0210 	orr.w	r2, r3, #16
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2200      	movs	r2, #0
 8001562:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8001566:	2301      	movs	r3, #1
 8001568:	e013      	b.n	8001592 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	689b      	ldr	r3, [r3, #8]
 8001570:	f003 0304 	and.w	r3, r3, #4
 8001574:	2b00      	cmp	r3, #0
 8001576:	d1dc      	bne.n	8001532 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800157c:	f023 0303 	bic.w	r3, r3, #3
 8001580:	f043 0201 	orr.w	r2, r3, #1
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2200      	movs	r2, #0
 800158c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001590:	7dfb      	ldrb	r3, [r7, #23]
}
 8001592:	4618      	mov	r0, r3
 8001594:	371c      	adds	r7, #28
 8001596:	46bd      	mov	sp, r7
 8001598:	bd90      	pop	{r4, r7, pc}
 800159a:	bf00      	nop
 800159c:	20000000 	.word	0x20000000

080015a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	f003 0307 	and.w	r3, r3, #7
 80015ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015b0:	4b0c      	ldr	r3, [pc, #48]	@ (80015e4 <__NVIC_SetPriorityGrouping+0x44>)
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015b6:	68ba      	ldr	r2, [r7, #8]
 80015b8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80015bc:	4013      	ands	r3, r2
 80015be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015c4:	68bb      	ldr	r3, [r7, #8]
 80015c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80015cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80015d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015d2:	4a04      	ldr	r2, [pc, #16]	@ (80015e4 <__NVIC_SetPriorityGrouping+0x44>)
 80015d4:	68bb      	ldr	r3, [r7, #8]
 80015d6:	60d3      	str	r3, [r2, #12]
}
 80015d8:	bf00      	nop
 80015da:	3714      	adds	r7, #20
 80015dc:	46bd      	mov	sp, r7
 80015de:	bc80      	pop	{r7}
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	e000ed00 	.word	0xe000ed00

080015e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015ec:	4b04      	ldr	r3, [pc, #16]	@ (8001600 <__NVIC_GetPriorityGrouping+0x18>)
 80015ee:	68db      	ldr	r3, [r3, #12]
 80015f0:	0a1b      	lsrs	r3, r3, #8
 80015f2:	f003 0307 	and.w	r3, r3, #7
}
 80015f6:	4618      	mov	r0, r3
 80015f8:	46bd      	mov	sp, r7
 80015fa:	bc80      	pop	{r7}
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	4603      	mov	r3, r0
 800160c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800160e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001612:	2b00      	cmp	r3, #0
 8001614:	db0b      	blt.n	800162e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001616:	79fb      	ldrb	r3, [r7, #7]
 8001618:	f003 021f 	and.w	r2, r3, #31
 800161c:	4906      	ldr	r1, [pc, #24]	@ (8001638 <__NVIC_EnableIRQ+0x34>)
 800161e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001622:	095b      	lsrs	r3, r3, #5
 8001624:	2001      	movs	r0, #1
 8001626:	fa00 f202 	lsl.w	r2, r0, r2
 800162a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr
 8001638:	e000e100 	.word	0xe000e100

0800163c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	4603      	mov	r3, r0
 8001644:	6039      	str	r1, [r7, #0]
 8001646:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001648:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800164c:	2b00      	cmp	r3, #0
 800164e:	db0a      	blt.n	8001666 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	b2da      	uxtb	r2, r3
 8001654:	490c      	ldr	r1, [pc, #48]	@ (8001688 <__NVIC_SetPriority+0x4c>)
 8001656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165a:	0112      	lsls	r2, r2, #4
 800165c:	b2d2      	uxtb	r2, r2
 800165e:	440b      	add	r3, r1
 8001660:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001664:	e00a      	b.n	800167c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	b2da      	uxtb	r2, r3
 800166a:	4908      	ldr	r1, [pc, #32]	@ (800168c <__NVIC_SetPriority+0x50>)
 800166c:	79fb      	ldrb	r3, [r7, #7]
 800166e:	f003 030f 	and.w	r3, r3, #15
 8001672:	3b04      	subs	r3, #4
 8001674:	0112      	lsls	r2, r2, #4
 8001676:	b2d2      	uxtb	r2, r2
 8001678:	440b      	add	r3, r1
 800167a:	761a      	strb	r2, [r3, #24]
}
 800167c:	bf00      	nop
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	bc80      	pop	{r7}
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	e000e100 	.word	0xe000e100
 800168c:	e000ed00 	.word	0xe000ed00

08001690 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001690:	b480      	push	{r7}
 8001692:	b089      	sub	sp, #36	@ 0x24
 8001694:	af00      	add	r7, sp, #0
 8001696:	60f8      	str	r0, [r7, #12]
 8001698:	60b9      	str	r1, [r7, #8]
 800169a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f003 0307 	and.w	r3, r3, #7
 80016a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016a4:	69fb      	ldr	r3, [r7, #28]
 80016a6:	f1c3 0307 	rsb	r3, r3, #7
 80016aa:	2b04      	cmp	r3, #4
 80016ac:	bf28      	it	cs
 80016ae:	2304      	movcs	r3, #4
 80016b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016b2:	69fb      	ldr	r3, [r7, #28]
 80016b4:	3304      	adds	r3, #4
 80016b6:	2b06      	cmp	r3, #6
 80016b8:	d902      	bls.n	80016c0 <NVIC_EncodePriority+0x30>
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	3b03      	subs	r3, #3
 80016be:	e000      	b.n	80016c2 <NVIC_EncodePriority+0x32>
 80016c0:	2300      	movs	r3, #0
 80016c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016c4:	f04f 32ff 	mov.w	r2, #4294967295
 80016c8:	69bb      	ldr	r3, [r7, #24]
 80016ca:	fa02 f303 	lsl.w	r3, r2, r3
 80016ce:	43da      	mvns	r2, r3
 80016d0:	68bb      	ldr	r3, [r7, #8]
 80016d2:	401a      	ands	r2, r3
 80016d4:	697b      	ldr	r3, [r7, #20]
 80016d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016d8:	f04f 31ff 	mov.w	r1, #4294967295
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	fa01 f303 	lsl.w	r3, r1, r3
 80016e2:	43d9      	mvns	r1, r3
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016e8:	4313      	orrs	r3, r2
         );
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	3724      	adds	r7, #36	@ 0x24
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bc80      	pop	{r7}
 80016f2:	4770      	bx	lr

080016f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	3b01      	subs	r3, #1
 8001700:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001704:	d301      	bcc.n	800170a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001706:	2301      	movs	r3, #1
 8001708:	e00f      	b.n	800172a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800170a:	4a0a      	ldr	r2, [pc, #40]	@ (8001734 <SysTick_Config+0x40>)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	3b01      	subs	r3, #1
 8001710:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001712:	210f      	movs	r1, #15
 8001714:	f04f 30ff 	mov.w	r0, #4294967295
 8001718:	f7ff ff90 	bl	800163c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800171c:	4b05      	ldr	r3, [pc, #20]	@ (8001734 <SysTick_Config+0x40>)
 800171e:	2200      	movs	r2, #0
 8001720:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001722:	4b04      	ldr	r3, [pc, #16]	@ (8001734 <SysTick_Config+0x40>)
 8001724:	2207      	movs	r2, #7
 8001726:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001728:	2300      	movs	r3, #0
}
 800172a:	4618      	mov	r0, r3
 800172c:	3708      	adds	r7, #8
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	e000e010 	.word	0xe000e010

08001738 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001740:	6878      	ldr	r0, [r7, #4]
 8001742:	f7ff ff2d 	bl	80015a0 <__NVIC_SetPriorityGrouping>
}
 8001746:	bf00      	nop
 8001748:	3708      	adds	r7, #8
 800174a:	46bd      	mov	sp, r7
 800174c:	bd80      	pop	{r7, pc}

0800174e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800174e:	b580      	push	{r7, lr}
 8001750:	b086      	sub	sp, #24
 8001752:	af00      	add	r7, sp, #0
 8001754:	4603      	mov	r3, r0
 8001756:	60b9      	str	r1, [r7, #8]
 8001758:	607a      	str	r2, [r7, #4]
 800175a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800175c:	2300      	movs	r3, #0
 800175e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001760:	f7ff ff42 	bl	80015e8 <__NVIC_GetPriorityGrouping>
 8001764:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001766:	687a      	ldr	r2, [r7, #4]
 8001768:	68b9      	ldr	r1, [r7, #8]
 800176a:	6978      	ldr	r0, [r7, #20]
 800176c:	f7ff ff90 	bl	8001690 <NVIC_EncodePriority>
 8001770:	4602      	mov	r2, r0
 8001772:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001776:	4611      	mov	r1, r2
 8001778:	4618      	mov	r0, r3
 800177a:	f7ff ff5f 	bl	800163c <__NVIC_SetPriority>
}
 800177e:	bf00      	nop
 8001780:	3718      	adds	r7, #24
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}

08001786 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001786:	b580      	push	{r7, lr}
 8001788:	b082      	sub	sp, #8
 800178a:	af00      	add	r7, sp, #0
 800178c:	4603      	mov	r3, r0
 800178e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001794:	4618      	mov	r0, r3
 8001796:	f7ff ff35 	bl	8001604 <__NVIC_EnableIRQ>
}
 800179a:	bf00      	nop
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b082      	sub	sp, #8
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017aa:	6878      	ldr	r0, [r7, #4]
 80017ac:	f7ff ffa2 	bl	80016f4 <SysTick_Config>
 80017b0:	4603      	mov	r3, r0
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
	...

080017bc <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017bc:	b480      	push	{r7}
 80017be:	b085      	sub	sp, #20
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80017c4:	2300      	movs	r3, #0
 80017c6:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d101      	bne.n	80017d2 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e043      	b.n	800185a <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	461a      	mov	r2, r3
 80017d8:	4b22      	ldr	r3, [pc, #136]	@ (8001864 <HAL_DMA_Init+0xa8>)
 80017da:	4413      	add	r3, r2
 80017dc:	4a22      	ldr	r2, [pc, #136]	@ (8001868 <HAL_DMA_Init+0xac>)
 80017de:	fba2 2303 	umull	r2, r3, r2, r3
 80017e2:	091b      	lsrs	r3, r3, #4
 80017e4:	009a      	lsls	r2, r3, #2
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	4a1f      	ldr	r2, [pc, #124]	@ (800186c <HAL_DMA_Init+0xb0>)
 80017ee:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2202      	movs	r2, #2
 80017f4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001806:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800180a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001814:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001820:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	695b      	ldr	r3, [r3, #20]
 8001826:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800182c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	69db      	ldr	r3, [r3, #28]
 8001832:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001834:	68fa      	ldr	r2, [r7, #12]
 8001836:	4313      	orrs	r3, r2
 8001838:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	68fa      	ldr	r2, [r7, #12]
 8001840:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2200      	movs	r2, #0
 8001846:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2201      	movs	r2, #1
 800184c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	2200      	movs	r2, #0
 8001854:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8001858:	2300      	movs	r3, #0
}
 800185a:	4618      	mov	r0, r3
 800185c:	3714      	adds	r7, #20
 800185e:	46bd      	mov	sp, r7
 8001860:	bc80      	pop	{r7}
 8001862:	4770      	bx	lr
 8001864:	bffdfff8 	.word	0xbffdfff8
 8001868:	cccccccd 	.word	0xcccccccd
 800186c:	40020000 	.word	0x40020000

08001870 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b086      	sub	sp, #24
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
 800187c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800187e:	2300      	movs	r3, #0
 8001880:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001888:	2b01      	cmp	r3, #1
 800188a:	d101      	bne.n	8001890 <HAL_DMA_Start_IT+0x20>
 800188c:	2302      	movs	r3, #2
 800188e:	e04b      	b.n	8001928 <HAL_DMA_Start_IT+0xb8>
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2201      	movs	r2, #1
 8001894:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800189e:	b2db      	uxtb	r3, r3
 80018a0:	2b01      	cmp	r3, #1
 80018a2:	d13a      	bne.n	800191a <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	2202      	movs	r2, #2
 80018a8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2200      	movs	r2, #0
 80018b0:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	681a      	ldr	r2, [r3, #0]
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f022 0201 	bic.w	r2, r2, #1
 80018c0:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	687a      	ldr	r2, [r7, #4]
 80018c6:	68b9      	ldr	r1, [r7, #8]
 80018c8:	68f8      	ldr	r0, [r7, #12]
 80018ca:	f000 f937 	bl	8001b3c <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d008      	beq.n	80018e8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f042 020e 	orr.w	r2, r2, #14
 80018e4:	601a      	str	r2, [r3, #0]
 80018e6:	e00f      	b.n	8001908 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	681a      	ldr	r2, [r3, #0]
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f022 0204 	bic.w	r2, r2, #4
 80018f6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	681a      	ldr	r2, [r3, #0]
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	f042 020a 	orr.w	r2, r2, #10
 8001906:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	f042 0201 	orr.w	r2, r2, #1
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	e005      	b.n	8001926 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	2200      	movs	r2, #0
 800191e:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001922:	2302      	movs	r3, #2
 8001924:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8001926:	7dfb      	ldrb	r3, [r7, #23]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3718      	adds	r7, #24
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194c:	2204      	movs	r2, #4
 800194e:	409a      	lsls	r2, r3
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	4013      	ands	r3, r2
 8001954:	2b00      	cmp	r3, #0
 8001956:	d04f      	beq.n	80019f8 <HAL_DMA_IRQHandler+0xc8>
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	f003 0304 	and.w	r3, r3, #4
 800195e:	2b00      	cmp	r3, #0
 8001960:	d04a      	beq.n	80019f8 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0320 	and.w	r3, r3, #32
 800196c:	2b00      	cmp	r3, #0
 800196e:	d107      	bne.n	8001980 <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	f022 0204 	bic.w	r2, r2, #4
 800197e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a66      	ldr	r2, [pc, #408]	@ (8001b20 <HAL_DMA_IRQHandler+0x1f0>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d029      	beq.n	80019de <HAL_DMA_IRQHandler+0xae>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a65      	ldr	r2, [pc, #404]	@ (8001b24 <HAL_DMA_IRQHandler+0x1f4>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d022      	beq.n	80019da <HAL_DMA_IRQHandler+0xaa>
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a63      	ldr	r2, [pc, #396]	@ (8001b28 <HAL_DMA_IRQHandler+0x1f8>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d01a      	beq.n	80019d4 <HAL_DMA_IRQHandler+0xa4>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	4a62      	ldr	r2, [pc, #392]	@ (8001b2c <HAL_DMA_IRQHandler+0x1fc>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d012      	beq.n	80019ce <HAL_DMA_IRQHandler+0x9e>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a60      	ldr	r2, [pc, #384]	@ (8001b30 <HAL_DMA_IRQHandler+0x200>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d00a      	beq.n	80019c8 <HAL_DMA_IRQHandler+0x98>
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a5f      	ldr	r2, [pc, #380]	@ (8001b34 <HAL_DMA_IRQHandler+0x204>)
 80019b8:	4293      	cmp	r3, r2
 80019ba:	d102      	bne.n	80019c2 <HAL_DMA_IRQHandler+0x92>
 80019bc:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80019c0:	e00e      	b.n	80019e0 <HAL_DMA_IRQHandler+0xb0>
 80019c2:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80019c6:	e00b      	b.n	80019e0 <HAL_DMA_IRQHandler+0xb0>
 80019c8:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80019cc:	e008      	b.n	80019e0 <HAL_DMA_IRQHandler+0xb0>
 80019ce:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80019d2:	e005      	b.n	80019e0 <HAL_DMA_IRQHandler+0xb0>
 80019d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80019d8:	e002      	b.n	80019e0 <HAL_DMA_IRQHandler+0xb0>
 80019da:	2340      	movs	r3, #64	@ 0x40
 80019dc:	e000      	b.n	80019e0 <HAL_DMA_IRQHandler+0xb0>
 80019de:	2304      	movs	r3, #4
 80019e0:	4a55      	ldr	r2, [pc, #340]	@ (8001b38 <HAL_DMA_IRQHandler+0x208>)
 80019e2:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	f000 8094 	beq.w	8001b16 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019f2:	6878      	ldr	r0, [r7, #4]
 80019f4:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80019f6:	e08e      	b.n	8001b16 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fc:	2202      	movs	r2, #2
 80019fe:	409a      	lsls	r2, r3
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	4013      	ands	r3, r2
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d056      	beq.n	8001ab6 <HAL_DMA_IRQHandler+0x186>
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	f003 0302 	and.w	r3, r3, #2
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d051      	beq.n	8001ab6 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0320 	and.w	r3, r3, #32
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d10b      	bne.n	8001a38 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f022 020a 	bic.w	r2, r2, #10
 8001a2e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4a38      	ldr	r2, [pc, #224]	@ (8001b20 <HAL_DMA_IRQHandler+0x1f0>)
 8001a3e:	4293      	cmp	r3, r2
 8001a40:	d029      	beq.n	8001a96 <HAL_DMA_IRQHandler+0x166>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4a37      	ldr	r2, [pc, #220]	@ (8001b24 <HAL_DMA_IRQHandler+0x1f4>)
 8001a48:	4293      	cmp	r3, r2
 8001a4a:	d022      	beq.n	8001a92 <HAL_DMA_IRQHandler+0x162>
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a35      	ldr	r2, [pc, #212]	@ (8001b28 <HAL_DMA_IRQHandler+0x1f8>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d01a      	beq.n	8001a8c <HAL_DMA_IRQHandler+0x15c>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a34      	ldr	r2, [pc, #208]	@ (8001b2c <HAL_DMA_IRQHandler+0x1fc>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d012      	beq.n	8001a86 <HAL_DMA_IRQHandler+0x156>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	4a32      	ldr	r2, [pc, #200]	@ (8001b30 <HAL_DMA_IRQHandler+0x200>)
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d00a      	beq.n	8001a80 <HAL_DMA_IRQHandler+0x150>
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a31      	ldr	r2, [pc, #196]	@ (8001b34 <HAL_DMA_IRQHandler+0x204>)
 8001a70:	4293      	cmp	r3, r2
 8001a72:	d102      	bne.n	8001a7a <HAL_DMA_IRQHandler+0x14a>
 8001a74:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001a78:	e00e      	b.n	8001a98 <HAL_DMA_IRQHandler+0x168>
 8001a7a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001a7e:	e00b      	b.n	8001a98 <HAL_DMA_IRQHandler+0x168>
 8001a80:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001a84:	e008      	b.n	8001a98 <HAL_DMA_IRQHandler+0x168>
 8001a86:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a8a:	e005      	b.n	8001a98 <HAL_DMA_IRQHandler+0x168>
 8001a8c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a90:	e002      	b.n	8001a98 <HAL_DMA_IRQHandler+0x168>
 8001a92:	2320      	movs	r3, #32
 8001a94:	e000      	b.n	8001a98 <HAL_DMA_IRQHandler+0x168>
 8001a96:	2302      	movs	r3, #2
 8001a98:	4a27      	ldr	r2, [pc, #156]	@ (8001b38 <HAL_DMA_IRQHandler+0x208>)
 8001a9a:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d034      	beq.n	8001b16 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001ab4:	e02f      	b.n	8001b16 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aba:	2208      	movs	r2, #8
 8001abc:	409a      	lsls	r2, r3
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d028      	beq.n	8001b18 <HAL_DMA_IRQHandler+0x1e8>
 8001ac6:	68bb      	ldr	r3, [r7, #8]
 8001ac8:	f003 0308 	and.w	r3, r3, #8
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d023      	beq.n	8001b18 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	681a      	ldr	r2, [r3, #0]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f022 020e 	bic.w	r2, r2, #14
 8001ade:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ae8:	2101      	movs	r1, #1
 8001aea:	fa01 f202 	lsl.w	r2, r1, r2
 8001aee:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2201      	movs	r2, #1
 8001af4:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2201      	movs	r2, #1
 8001afa:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d004      	beq.n	8001b18 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	4798      	blx	r3
    }
  }
  return;
 8001b16:	bf00      	nop
 8001b18:	bf00      	nop
}
 8001b1a:	3710      	adds	r7, #16
 8001b1c:	46bd      	mov	sp, r7
 8001b1e:	bd80      	pop	{r7, pc}
 8001b20:	40020008 	.word	0x40020008
 8001b24:	4002001c 	.word	0x4002001c
 8001b28:	40020030 	.word	0x40020030
 8001b2c:	40020044 	.word	0x40020044
 8001b30:	40020058 	.word	0x40020058
 8001b34:	4002006c 	.word	0x4002006c
 8001b38:	40020000 	.word	0x40020000

08001b3c <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b085      	sub	sp, #20
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	60f8      	str	r0, [r7, #12]
 8001b44:	60b9      	str	r1, [r7, #8]
 8001b46:	607a      	str	r2, [r7, #4]
 8001b48:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b52:	2101      	movs	r1, #1
 8001b54:	fa01 f202 	lsl.w	r2, r1, r2
 8001b58:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	683a      	ldr	r2, [r7, #0]
 8001b60:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	2b10      	cmp	r3, #16
 8001b68:	d108      	bne.n	8001b7c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	687a      	ldr	r2, [r7, #4]
 8001b70:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	68ba      	ldr	r2, [r7, #8]
 8001b78:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001b7a:	e007      	b.n	8001b8c <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	68ba      	ldr	r2, [r7, #8]
 8001b82:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	60da      	str	r2, [r3, #12]
}
 8001b8c:	bf00      	nop
 8001b8e:	3714      	adds	r7, #20
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bc80      	pop	{r7}
 8001b94:	4770      	bx	lr
	...

08001b98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b08b      	sub	sp, #44	@ 0x2c
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
 8001ba0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001baa:	e169      	b.n	8001e80 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001bac:	2201      	movs	r2, #1
 8001bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	69fa      	ldr	r2, [r7, #28]
 8001bbc:	4013      	ands	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	f040 8158 	bne.w	8001e7a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	4a9a      	ldr	r2, [pc, #616]	@ (8001e38 <HAL_GPIO_Init+0x2a0>)
 8001bd0:	4293      	cmp	r3, r2
 8001bd2:	d05e      	beq.n	8001c92 <HAL_GPIO_Init+0xfa>
 8001bd4:	4a98      	ldr	r2, [pc, #608]	@ (8001e38 <HAL_GPIO_Init+0x2a0>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d875      	bhi.n	8001cc6 <HAL_GPIO_Init+0x12e>
 8001bda:	4a98      	ldr	r2, [pc, #608]	@ (8001e3c <HAL_GPIO_Init+0x2a4>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d058      	beq.n	8001c92 <HAL_GPIO_Init+0xfa>
 8001be0:	4a96      	ldr	r2, [pc, #600]	@ (8001e3c <HAL_GPIO_Init+0x2a4>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d86f      	bhi.n	8001cc6 <HAL_GPIO_Init+0x12e>
 8001be6:	4a96      	ldr	r2, [pc, #600]	@ (8001e40 <HAL_GPIO_Init+0x2a8>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d052      	beq.n	8001c92 <HAL_GPIO_Init+0xfa>
 8001bec:	4a94      	ldr	r2, [pc, #592]	@ (8001e40 <HAL_GPIO_Init+0x2a8>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d869      	bhi.n	8001cc6 <HAL_GPIO_Init+0x12e>
 8001bf2:	4a94      	ldr	r2, [pc, #592]	@ (8001e44 <HAL_GPIO_Init+0x2ac>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d04c      	beq.n	8001c92 <HAL_GPIO_Init+0xfa>
 8001bf8:	4a92      	ldr	r2, [pc, #584]	@ (8001e44 <HAL_GPIO_Init+0x2ac>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d863      	bhi.n	8001cc6 <HAL_GPIO_Init+0x12e>
 8001bfe:	4a92      	ldr	r2, [pc, #584]	@ (8001e48 <HAL_GPIO_Init+0x2b0>)
 8001c00:	4293      	cmp	r3, r2
 8001c02:	d046      	beq.n	8001c92 <HAL_GPIO_Init+0xfa>
 8001c04:	4a90      	ldr	r2, [pc, #576]	@ (8001e48 <HAL_GPIO_Init+0x2b0>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d85d      	bhi.n	8001cc6 <HAL_GPIO_Init+0x12e>
 8001c0a:	2b12      	cmp	r3, #18
 8001c0c:	d82a      	bhi.n	8001c64 <HAL_GPIO_Init+0xcc>
 8001c0e:	2b12      	cmp	r3, #18
 8001c10:	d859      	bhi.n	8001cc6 <HAL_GPIO_Init+0x12e>
 8001c12:	a201      	add	r2, pc, #4	@ (adr r2, 8001c18 <HAL_GPIO_Init+0x80>)
 8001c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c18:	08001c93 	.word	0x08001c93
 8001c1c:	08001c6d 	.word	0x08001c6d
 8001c20:	08001c7f 	.word	0x08001c7f
 8001c24:	08001cc1 	.word	0x08001cc1
 8001c28:	08001cc7 	.word	0x08001cc7
 8001c2c:	08001cc7 	.word	0x08001cc7
 8001c30:	08001cc7 	.word	0x08001cc7
 8001c34:	08001cc7 	.word	0x08001cc7
 8001c38:	08001cc7 	.word	0x08001cc7
 8001c3c:	08001cc7 	.word	0x08001cc7
 8001c40:	08001cc7 	.word	0x08001cc7
 8001c44:	08001cc7 	.word	0x08001cc7
 8001c48:	08001cc7 	.word	0x08001cc7
 8001c4c:	08001cc7 	.word	0x08001cc7
 8001c50:	08001cc7 	.word	0x08001cc7
 8001c54:	08001cc7 	.word	0x08001cc7
 8001c58:	08001cc7 	.word	0x08001cc7
 8001c5c:	08001c75 	.word	0x08001c75
 8001c60:	08001c89 	.word	0x08001c89
 8001c64:	4a79      	ldr	r2, [pc, #484]	@ (8001e4c <HAL_GPIO_Init+0x2b4>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d013      	beq.n	8001c92 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c6a:	e02c      	b.n	8001cc6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	623b      	str	r3, [r7, #32]
          break;
 8001c72:	e029      	b.n	8001cc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	68db      	ldr	r3, [r3, #12]
 8001c78:	3304      	adds	r3, #4
 8001c7a:	623b      	str	r3, [r7, #32]
          break;
 8001c7c:	e024      	b.n	8001cc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	68db      	ldr	r3, [r3, #12]
 8001c82:	3308      	adds	r3, #8
 8001c84:	623b      	str	r3, [r7, #32]
          break;
 8001c86:	e01f      	b.n	8001cc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	330c      	adds	r3, #12
 8001c8e:	623b      	str	r3, [r7, #32]
          break;
 8001c90:	e01a      	b.n	8001cc8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d102      	bne.n	8001ca0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c9a:	2304      	movs	r3, #4
 8001c9c:	623b      	str	r3, [r7, #32]
          break;
 8001c9e:	e013      	b.n	8001cc8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d105      	bne.n	8001cb4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001ca8:	2308      	movs	r3, #8
 8001caa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	69fa      	ldr	r2, [r7, #28]
 8001cb0:	611a      	str	r2, [r3, #16]
          break;
 8001cb2:	e009      	b.n	8001cc8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001cb4:	2308      	movs	r3, #8
 8001cb6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	69fa      	ldr	r2, [r7, #28]
 8001cbc:	615a      	str	r2, [r3, #20]
          break;
 8001cbe:	e003      	b.n	8001cc8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	623b      	str	r3, [r7, #32]
          break;
 8001cc4:	e000      	b.n	8001cc8 <HAL_GPIO_Init+0x130>
          break;
 8001cc6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	2bff      	cmp	r3, #255	@ 0xff
 8001ccc:	d801      	bhi.n	8001cd2 <HAL_GPIO_Init+0x13a>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	e001      	b.n	8001cd6 <HAL_GPIO_Init+0x13e>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	3304      	adds	r3, #4
 8001cd6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001cd8:	69bb      	ldr	r3, [r7, #24]
 8001cda:	2bff      	cmp	r3, #255	@ 0xff
 8001cdc:	d802      	bhi.n	8001ce4 <HAL_GPIO_Init+0x14c>
 8001cde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce0:	009b      	lsls	r3, r3, #2
 8001ce2:	e002      	b.n	8001cea <HAL_GPIO_Init+0x152>
 8001ce4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce6:	3b08      	subs	r3, #8
 8001ce8:	009b      	lsls	r3, r3, #2
 8001cea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001cec:	697b      	ldr	r3, [r7, #20]
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	210f      	movs	r1, #15
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8001cf8:	43db      	mvns	r3, r3
 8001cfa:	401a      	ands	r2, r3
 8001cfc:	6a39      	ldr	r1, [r7, #32]
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	fa01 f303 	lsl.w	r3, r1, r3
 8001d04:	431a      	orrs	r2, r3
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	f000 80b1 	beq.w	8001e7a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001d18:	4b4d      	ldr	r3, [pc, #308]	@ (8001e50 <HAL_GPIO_Init+0x2b8>)
 8001d1a:	699b      	ldr	r3, [r3, #24]
 8001d1c:	4a4c      	ldr	r2, [pc, #304]	@ (8001e50 <HAL_GPIO_Init+0x2b8>)
 8001d1e:	f043 0301 	orr.w	r3, r3, #1
 8001d22:	6193      	str	r3, [r2, #24]
 8001d24:	4b4a      	ldr	r3, [pc, #296]	@ (8001e50 <HAL_GPIO_Init+0x2b8>)
 8001d26:	699b      	ldr	r3, [r3, #24]
 8001d28:	f003 0301 	and.w	r3, r3, #1
 8001d2c:	60bb      	str	r3, [r7, #8]
 8001d2e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001d30:	4a48      	ldr	r2, [pc, #288]	@ (8001e54 <HAL_GPIO_Init+0x2bc>)
 8001d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d34:	089b      	lsrs	r3, r3, #2
 8001d36:	3302      	adds	r3, #2
 8001d38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d3c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001d3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d40:	f003 0303 	and.w	r3, r3, #3
 8001d44:	009b      	lsls	r3, r3, #2
 8001d46:	220f      	movs	r2, #15
 8001d48:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4c:	43db      	mvns	r3, r3
 8001d4e:	68fa      	ldr	r2, [r7, #12]
 8001d50:	4013      	ands	r3, r2
 8001d52:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	4a40      	ldr	r2, [pc, #256]	@ (8001e58 <HAL_GPIO_Init+0x2c0>)
 8001d58:	4293      	cmp	r3, r2
 8001d5a:	d013      	beq.n	8001d84 <HAL_GPIO_Init+0x1ec>
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	4a3f      	ldr	r2, [pc, #252]	@ (8001e5c <HAL_GPIO_Init+0x2c4>)
 8001d60:	4293      	cmp	r3, r2
 8001d62:	d00d      	beq.n	8001d80 <HAL_GPIO_Init+0x1e8>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	4a3e      	ldr	r2, [pc, #248]	@ (8001e60 <HAL_GPIO_Init+0x2c8>)
 8001d68:	4293      	cmp	r3, r2
 8001d6a:	d007      	beq.n	8001d7c <HAL_GPIO_Init+0x1e4>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	4a3d      	ldr	r2, [pc, #244]	@ (8001e64 <HAL_GPIO_Init+0x2cc>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d101      	bne.n	8001d78 <HAL_GPIO_Init+0x1e0>
 8001d74:	2303      	movs	r3, #3
 8001d76:	e006      	b.n	8001d86 <HAL_GPIO_Init+0x1ee>
 8001d78:	2304      	movs	r3, #4
 8001d7a:	e004      	b.n	8001d86 <HAL_GPIO_Init+0x1ee>
 8001d7c:	2302      	movs	r3, #2
 8001d7e:	e002      	b.n	8001d86 <HAL_GPIO_Init+0x1ee>
 8001d80:	2301      	movs	r3, #1
 8001d82:	e000      	b.n	8001d86 <HAL_GPIO_Init+0x1ee>
 8001d84:	2300      	movs	r3, #0
 8001d86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d88:	f002 0203 	and.w	r2, r2, #3
 8001d8c:	0092      	lsls	r2, r2, #2
 8001d8e:	4093      	lsls	r3, r2
 8001d90:	68fa      	ldr	r2, [r7, #12]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d96:	492f      	ldr	r1, [pc, #188]	@ (8001e54 <HAL_GPIO_Init+0x2bc>)
 8001d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d9a:	089b      	lsrs	r3, r3, #2
 8001d9c:	3302      	adds	r3, #2
 8001d9e:	68fa      	ldr	r2, [r7, #12]
 8001da0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d006      	beq.n	8001dbe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001db0:	4b2d      	ldr	r3, [pc, #180]	@ (8001e68 <HAL_GPIO_Init+0x2d0>)
 8001db2:	689a      	ldr	r2, [r3, #8]
 8001db4:	492c      	ldr	r1, [pc, #176]	@ (8001e68 <HAL_GPIO_Init+0x2d0>)
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	608b      	str	r3, [r1, #8]
 8001dbc:	e006      	b.n	8001dcc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001dbe:	4b2a      	ldr	r3, [pc, #168]	@ (8001e68 <HAL_GPIO_Init+0x2d0>)
 8001dc0:	689a      	ldr	r2, [r3, #8]
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	4928      	ldr	r1, [pc, #160]	@ (8001e68 <HAL_GPIO_Init+0x2d0>)
 8001dc8:	4013      	ands	r3, r2
 8001dca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d006      	beq.n	8001de6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001dd8:	4b23      	ldr	r3, [pc, #140]	@ (8001e68 <HAL_GPIO_Init+0x2d0>)
 8001dda:	68da      	ldr	r2, [r3, #12]
 8001ddc:	4922      	ldr	r1, [pc, #136]	@ (8001e68 <HAL_GPIO_Init+0x2d0>)
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	60cb      	str	r3, [r1, #12]
 8001de4:	e006      	b.n	8001df4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001de6:	4b20      	ldr	r3, [pc, #128]	@ (8001e68 <HAL_GPIO_Init+0x2d0>)
 8001de8:	68da      	ldr	r2, [r3, #12]
 8001dea:	69bb      	ldr	r3, [r7, #24]
 8001dec:	43db      	mvns	r3, r3
 8001dee:	491e      	ldr	r1, [pc, #120]	@ (8001e68 <HAL_GPIO_Init+0x2d0>)
 8001df0:	4013      	ands	r3, r2
 8001df2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d006      	beq.n	8001e0e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001e00:	4b19      	ldr	r3, [pc, #100]	@ (8001e68 <HAL_GPIO_Init+0x2d0>)
 8001e02:	685a      	ldr	r2, [r3, #4]
 8001e04:	4918      	ldr	r1, [pc, #96]	@ (8001e68 <HAL_GPIO_Init+0x2d0>)
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	4313      	orrs	r3, r2
 8001e0a:	604b      	str	r3, [r1, #4]
 8001e0c:	e006      	b.n	8001e1c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001e0e:	4b16      	ldr	r3, [pc, #88]	@ (8001e68 <HAL_GPIO_Init+0x2d0>)
 8001e10:	685a      	ldr	r2, [r3, #4]
 8001e12:	69bb      	ldr	r3, [r7, #24]
 8001e14:	43db      	mvns	r3, r3
 8001e16:	4914      	ldr	r1, [pc, #80]	@ (8001e68 <HAL_GPIO_Init+0x2d0>)
 8001e18:	4013      	ands	r3, r2
 8001e1a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d021      	beq.n	8001e6c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001e28:	4b0f      	ldr	r3, [pc, #60]	@ (8001e68 <HAL_GPIO_Init+0x2d0>)
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	490e      	ldr	r1, [pc, #56]	@ (8001e68 <HAL_GPIO_Init+0x2d0>)
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	600b      	str	r3, [r1, #0]
 8001e34:	e021      	b.n	8001e7a <HAL_GPIO_Init+0x2e2>
 8001e36:	bf00      	nop
 8001e38:	10320000 	.word	0x10320000
 8001e3c:	10310000 	.word	0x10310000
 8001e40:	10220000 	.word	0x10220000
 8001e44:	10210000 	.word	0x10210000
 8001e48:	10120000 	.word	0x10120000
 8001e4c:	10110000 	.word	0x10110000
 8001e50:	40021000 	.word	0x40021000
 8001e54:	40010000 	.word	0x40010000
 8001e58:	40010800 	.word	0x40010800
 8001e5c:	40010c00 	.word	0x40010c00
 8001e60:	40011000 	.word	0x40011000
 8001e64:	40011400 	.word	0x40011400
 8001e68:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e9c <HAL_GPIO_Init+0x304>)
 8001e6e:	681a      	ldr	r2, [r3, #0]
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	43db      	mvns	r3, r3
 8001e74:	4909      	ldr	r1, [pc, #36]	@ (8001e9c <HAL_GPIO_Init+0x304>)
 8001e76:	4013      	ands	r3, r2
 8001e78:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e7c:	3301      	adds	r3, #1
 8001e7e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e86:	fa22 f303 	lsr.w	r3, r2, r3
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	f47f ae8e 	bne.w	8001bac <HAL_GPIO_Init+0x14>
  }
}
 8001e90:	bf00      	nop
 8001e92:	bf00      	nop
 8001e94:	372c      	adds	r7, #44	@ 0x2c
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bc80      	pop	{r7}
 8001e9a:	4770      	bx	lr
 8001e9c:	40010400 	.word	0x40010400

08001ea0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	b083      	sub	sp, #12
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	807b      	strh	r3, [r7, #2]
 8001eac:	4613      	mov	r3, r2
 8001eae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001eb0:	787b      	ldrb	r3, [r7, #1]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d003      	beq.n	8001ebe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eb6:	887a      	ldrh	r2, [r7, #2]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001ebc:	e003      	b.n	8001ec6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001ebe:	887b      	ldrh	r3, [r7, #2]
 8001ec0:	041a      	lsls	r2, r3, #16
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	611a      	str	r2, [r3, #16]
}
 8001ec6:	bf00      	nop
 8001ec8:	370c      	adds	r7, #12
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bc80      	pop	{r7}
 8001ece:	4770      	bx	lr

08001ed0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b082      	sub	sp, #8
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001eda:	4b08      	ldr	r3, [pc, #32]	@ (8001efc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001edc:	695a      	ldr	r2, [r3, #20]
 8001ede:	88fb      	ldrh	r3, [r7, #6]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d006      	beq.n	8001ef4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001ee6:	4a05      	ldr	r2, [pc, #20]	@ (8001efc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ee8:	88fb      	ldrh	r3, [r7, #6]
 8001eea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001eec:	88fb      	ldrh	r3, [r7, #6]
 8001eee:	4618      	mov	r0, r3
 8001ef0:	f000 f806 	bl	8001f00 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ef4:	bf00      	nop
 8001ef6:	3708      	adds	r7, #8
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bd80      	pop	{r7, pc}
 8001efc:	40010400 	.word	0x40010400

08001f00 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	4603      	mov	r3, r0
 8001f08:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001f0a:	bf00      	nop
 8001f0c:	370c      	adds	r7, #12
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bc80      	pop	{r7}
 8001f12:	4770      	bx	lr

08001f14 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b086      	sub	sp, #24
 8001f18:	af00      	add	r7, sp, #0
 8001f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d101      	bne.n	8001f26 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e272      	b.n	800240c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	f000 8087 	beq.w	8002042 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001f34:	4b92      	ldr	r3, [pc, #584]	@ (8002180 <HAL_RCC_OscConfig+0x26c>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f003 030c 	and.w	r3, r3, #12
 8001f3c:	2b04      	cmp	r3, #4
 8001f3e:	d00c      	beq.n	8001f5a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001f40:	4b8f      	ldr	r3, [pc, #572]	@ (8002180 <HAL_RCC_OscConfig+0x26c>)
 8001f42:	685b      	ldr	r3, [r3, #4]
 8001f44:	f003 030c 	and.w	r3, r3, #12
 8001f48:	2b08      	cmp	r3, #8
 8001f4a:	d112      	bne.n	8001f72 <HAL_RCC_OscConfig+0x5e>
 8001f4c:	4b8c      	ldr	r3, [pc, #560]	@ (8002180 <HAL_RCC_OscConfig+0x26c>)
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f58:	d10b      	bne.n	8001f72 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f5a:	4b89      	ldr	r3, [pc, #548]	@ (8002180 <HAL_RCC_OscConfig+0x26c>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d06c      	beq.n	8002040 <HAL_RCC_OscConfig+0x12c>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d168      	bne.n	8002040 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e24c      	b.n	800240c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f7a:	d106      	bne.n	8001f8a <HAL_RCC_OscConfig+0x76>
 8001f7c:	4b80      	ldr	r3, [pc, #512]	@ (8002180 <HAL_RCC_OscConfig+0x26c>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a7f      	ldr	r2, [pc, #508]	@ (8002180 <HAL_RCC_OscConfig+0x26c>)
 8001f82:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f86:	6013      	str	r3, [r2, #0]
 8001f88:	e02e      	b.n	8001fe8 <HAL_RCC_OscConfig+0xd4>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d10c      	bne.n	8001fac <HAL_RCC_OscConfig+0x98>
 8001f92:	4b7b      	ldr	r3, [pc, #492]	@ (8002180 <HAL_RCC_OscConfig+0x26c>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	4a7a      	ldr	r2, [pc, #488]	@ (8002180 <HAL_RCC_OscConfig+0x26c>)
 8001f98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f9c:	6013      	str	r3, [r2, #0]
 8001f9e:	4b78      	ldr	r3, [pc, #480]	@ (8002180 <HAL_RCC_OscConfig+0x26c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a77      	ldr	r2, [pc, #476]	@ (8002180 <HAL_RCC_OscConfig+0x26c>)
 8001fa4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fa8:	6013      	str	r3, [r2, #0]
 8001faa:	e01d      	b.n	8001fe8 <HAL_RCC_OscConfig+0xd4>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001fb4:	d10c      	bne.n	8001fd0 <HAL_RCC_OscConfig+0xbc>
 8001fb6:	4b72      	ldr	r3, [pc, #456]	@ (8002180 <HAL_RCC_OscConfig+0x26c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a71      	ldr	r2, [pc, #452]	@ (8002180 <HAL_RCC_OscConfig+0x26c>)
 8001fbc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001fc0:	6013      	str	r3, [r2, #0]
 8001fc2:	4b6f      	ldr	r3, [pc, #444]	@ (8002180 <HAL_RCC_OscConfig+0x26c>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a6e      	ldr	r2, [pc, #440]	@ (8002180 <HAL_RCC_OscConfig+0x26c>)
 8001fc8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001fcc:	6013      	str	r3, [r2, #0]
 8001fce:	e00b      	b.n	8001fe8 <HAL_RCC_OscConfig+0xd4>
 8001fd0:	4b6b      	ldr	r3, [pc, #428]	@ (8002180 <HAL_RCC_OscConfig+0x26c>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a6a      	ldr	r2, [pc, #424]	@ (8002180 <HAL_RCC_OscConfig+0x26c>)
 8001fd6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001fda:	6013      	str	r3, [r2, #0]
 8001fdc:	4b68      	ldr	r3, [pc, #416]	@ (8002180 <HAL_RCC_OscConfig+0x26c>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a67      	ldr	r2, [pc, #412]	@ (8002180 <HAL_RCC_OscConfig+0x26c>)
 8001fe2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001fe6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d013      	beq.n	8002018 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff0:	f7fe fe2e 	bl	8000c50 <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ff8:	f7fe fe2a 	bl	8000c50 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b64      	cmp	r3, #100	@ 0x64
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e200      	b.n	800240c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800200a:	4b5d      	ldr	r3, [pc, #372]	@ (8002180 <HAL_RCC_OscConfig+0x26c>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d0f0      	beq.n	8001ff8 <HAL_RCC_OscConfig+0xe4>
 8002016:	e014      	b.n	8002042 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002018:	f7fe fe1a 	bl	8000c50 <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002020:	f7fe fe16 	bl	8000c50 <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b64      	cmp	r3, #100	@ 0x64
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e1ec      	b.n	800240c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002032:	4b53      	ldr	r3, [pc, #332]	@ (8002180 <HAL_RCC_OscConfig+0x26c>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1f0      	bne.n	8002020 <HAL_RCC_OscConfig+0x10c>
 800203e:	e000      	b.n	8002042 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002040:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d063      	beq.n	8002116 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800204e:	4b4c      	ldr	r3, [pc, #304]	@ (8002180 <HAL_RCC_OscConfig+0x26c>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f003 030c 	and.w	r3, r3, #12
 8002056:	2b00      	cmp	r3, #0
 8002058:	d00b      	beq.n	8002072 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800205a:	4b49      	ldr	r3, [pc, #292]	@ (8002180 <HAL_RCC_OscConfig+0x26c>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f003 030c 	and.w	r3, r3, #12
 8002062:	2b08      	cmp	r3, #8
 8002064:	d11c      	bne.n	80020a0 <HAL_RCC_OscConfig+0x18c>
 8002066:	4b46      	ldr	r3, [pc, #280]	@ (8002180 <HAL_RCC_OscConfig+0x26c>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d116      	bne.n	80020a0 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002072:	4b43      	ldr	r3, [pc, #268]	@ (8002180 <HAL_RCC_OscConfig+0x26c>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d005      	beq.n	800208a <HAL_RCC_OscConfig+0x176>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	691b      	ldr	r3, [r3, #16]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d001      	beq.n	800208a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e1c0      	b.n	800240c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800208a:	4b3d      	ldr	r3, [pc, #244]	@ (8002180 <HAL_RCC_OscConfig+0x26c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	695b      	ldr	r3, [r3, #20]
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	4939      	ldr	r1, [pc, #228]	@ (8002180 <HAL_RCC_OscConfig+0x26c>)
 800209a:	4313      	orrs	r3, r2
 800209c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800209e:	e03a      	b.n	8002116 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	691b      	ldr	r3, [r3, #16]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d020      	beq.n	80020ea <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020a8:	4b36      	ldr	r3, [pc, #216]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 80020aa:	2201      	movs	r2, #1
 80020ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020ae:	f7fe fdcf 	bl	8000c50 <HAL_GetTick>
 80020b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020b4:	e008      	b.n	80020c8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020b6:	f7fe fdcb 	bl	8000c50 <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d901      	bls.n	80020c8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e1a1      	b.n	800240c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020c8:	4b2d      	ldr	r3, [pc, #180]	@ (8002180 <HAL_RCC_OscConfig+0x26c>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d0f0      	beq.n	80020b6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020d4:	4b2a      	ldr	r3, [pc, #168]	@ (8002180 <HAL_RCC_OscConfig+0x26c>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	695b      	ldr	r3, [r3, #20]
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	4927      	ldr	r1, [pc, #156]	@ (8002180 <HAL_RCC_OscConfig+0x26c>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	600b      	str	r3, [r1, #0]
 80020e8:	e015      	b.n	8002116 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020ea:	4b26      	ldr	r3, [pc, #152]	@ (8002184 <HAL_RCC_OscConfig+0x270>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f0:	f7fe fdae 	bl	8000c50 <HAL_GetTick>
 80020f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020f6:	e008      	b.n	800210a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80020f8:	f7fe fdaa 	bl	8000c50 <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b02      	cmp	r3, #2
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e180      	b.n	800240c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800210a:	4b1d      	ldr	r3, [pc, #116]	@ (8002180 <HAL_RCC_OscConfig+0x26c>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1f0      	bne.n	80020f8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0308 	and.w	r3, r3, #8
 800211e:	2b00      	cmp	r3, #0
 8002120:	d03a      	beq.n	8002198 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	699b      	ldr	r3, [r3, #24]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d019      	beq.n	800215e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800212a:	4b17      	ldr	r3, [pc, #92]	@ (8002188 <HAL_RCC_OscConfig+0x274>)
 800212c:	2201      	movs	r2, #1
 800212e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002130:	f7fe fd8e 	bl	8000c50 <HAL_GetTick>
 8002134:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002136:	e008      	b.n	800214a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002138:	f7fe fd8a 	bl	8000c50 <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b02      	cmp	r3, #2
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e160      	b.n	800240c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800214a:	4b0d      	ldr	r3, [pc, #52]	@ (8002180 <HAL_RCC_OscConfig+0x26c>)
 800214c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d0f0      	beq.n	8002138 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002156:	2001      	movs	r0, #1
 8002158:	f000 face 	bl	80026f8 <RCC_Delay>
 800215c:	e01c      	b.n	8002198 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800215e:	4b0a      	ldr	r3, [pc, #40]	@ (8002188 <HAL_RCC_OscConfig+0x274>)
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002164:	f7fe fd74 	bl	8000c50 <HAL_GetTick>
 8002168:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800216a:	e00f      	b.n	800218c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800216c:	f7fe fd70 	bl	8000c50 <HAL_GetTick>
 8002170:	4602      	mov	r2, r0
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	1ad3      	subs	r3, r2, r3
 8002176:	2b02      	cmp	r3, #2
 8002178:	d908      	bls.n	800218c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800217a:	2303      	movs	r3, #3
 800217c:	e146      	b.n	800240c <HAL_RCC_OscConfig+0x4f8>
 800217e:	bf00      	nop
 8002180:	40021000 	.word	0x40021000
 8002184:	42420000 	.word	0x42420000
 8002188:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800218c:	4b92      	ldr	r3, [pc, #584]	@ (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 800218e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002190:	f003 0302 	and.w	r3, r3, #2
 8002194:	2b00      	cmp	r3, #0
 8002196:	d1e9      	bne.n	800216c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f003 0304 	and.w	r3, r3, #4
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	f000 80a6 	beq.w	80022f2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021a6:	2300      	movs	r3, #0
 80021a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021aa:	4b8b      	ldr	r3, [pc, #556]	@ (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 80021ac:	69db      	ldr	r3, [r3, #28]
 80021ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d10d      	bne.n	80021d2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021b6:	4b88      	ldr	r3, [pc, #544]	@ (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 80021b8:	69db      	ldr	r3, [r3, #28]
 80021ba:	4a87      	ldr	r2, [pc, #540]	@ (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 80021bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021c0:	61d3      	str	r3, [r2, #28]
 80021c2:	4b85      	ldr	r3, [pc, #532]	@ (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 80021c4:	69db      	ldr	r3, [r3, #28]
 80021c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021ca:	60bb      	str	r3, [r7, #8]
 80021cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021ce:	2301      	movs	r3, #1
 80021d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021d2:	4b82      	ldr	r3, [pc, #520]	@ (80023dc <HAL_RCC_OscConfig+0x4c8>)
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d118      	bne.n	8002210 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021de:	4b7f      	ldr	r3, [pc, #508]	@ (80023dc <HAL_RCC_OscConfig+0x4c8>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4a7e      	ldr	r2, [pc, #504]	@ (80023dc <HAL_RCC_OscConfig+0x4c8>)
 80021e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80021e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ea:	f7fe fd31 	bl	8000c50 <HAL_GetTick>
 80021ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021f0:	e008      	b.n	8002204 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021f2:	f7fe fd2d 	bl	8000c50 <HAL_GetTick>
 80021f6:	4602      	mov	r2, r0
 80021f8:	693b      	ldr	r3, [r7, #16]
 80021fa:	1ad3      	subs	r3, r2, r3
 80021fc:	2b64      	cmp	r3, #100	@ 0x64
 80021fe:	d901      	bls.n	8002204 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e103      	b.n	800240c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002204:	4b75      	ldr	r3, [pc, #468]	@ (80023dc <HAL_RCC_OscConfig+0x4c8>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800220c:	2b00      	cmp	r3, #0
 800220e:	d0f0      	beq.n	80021f2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	68db      	ldr	r3, [r3, #12]
 8002214:	2b01      	cmp	r3, #1
 8002216:	d106      	bne.n	8002226 <HAL_RCC_OscConfig+0x312>
 8002218:	4b6f      	ldr	r3, [pc, #444]	@ (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 800221a:	6a1b      	ldr	r3, [r3, #32]
 800221c:	4a6e      	ldr	r2, [pc, #440]	@ (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 800221e:	f043 0301 	orr.w	r3, r3, #1
 8002222:	6213      	str	r3, [r2, #32]
 8002224:	e02d      	b.n	8002282 <HAL_RCC_OscConfig+0x36e>
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	68db      	ldr	r3, [r3, #12]
 800222a:	2b00      	cmp	r3, #0
 800222c:	d10c      	bne.n	8002248 <HAL_RCC_OscConfig+0x334>
 800222e:	4b6a      	ldr	r3, [pc, #424]	@ (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 8002230:	6a1b      	ldr	r3, [r3, #32]
 8002232:	4a69      	ldr	r2, [pc, #420]	@ (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 8002234:	f023 0301 	bic.w	r3, r3, #1
 8002238:	6213      	str	r3, [r2, #32]
 800223a:	4b67      	ldr	r3, [pc, #412]	@ (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 800223c:	6a1b      	ldr	r3, [r3, #32]
 800223e:	4a66      	ldr	r2, [pc, #408]	@ (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 8002240:	f023 0304 	bic.w	r3, r3, #4
 8002244:	6213      	str	r3, [r2, #32]
 8002246:	e01c      	b.n	8002282 <HAL_RCC_OscConfig+0x36e>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	2b05      	cmp	r3, #5
 800224e:	d10c      	bne.n	800226a <HAL_RCC_OscConfig+0x356>
 8002250:	4b61      	ldr	r3, [pc, #388]	@ (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 8002252:	6a1b      	ldr	r3, [r3, #32]
 8002254:	4a60      	ldr	r2, [pc, #384]	@ (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 8002256:	f043 0304 	orr.w	r3, r3, #4
 800225a:	6213      	str	r3, [r2, #32]
 800225c:	4b5e      	ldr	r3, [pc, #376]	@ (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 800225e:	6a1b      	ldr	r3, [r3, #32]
 8002260:	4a5d      	ldr	r2, [pc, #372]	@ (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 8002262:	f043 0301 	orr.w	r3, r3, #1
 8002266:	6213      	str	r3, [r2, #32]
 8002268:	e00b      	b.n	8002282 <HAL_RCC_OscConfig+0x36e>
 800226a:	4b5b      	ldr	r3, [pc, #364]	@ (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 800226c:	6a1b      	ldr	r3, [r3, #32]
 800226e:	4a5a      	ldr	r2, [pc, #360]	@ (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 8002270:	f023 0301 	bic.w	r3, r3, #1
 8002274:	6213      	str	r3, [r2, #32]
 8002276:	4b58      	ldr	r3, [pc, #352]	@ (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 8002278:	6a1b      	ldr	r3, [r3, #32]
 800227a:	4a57      	ldr	r2, [pc, #348]	@ (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 800227c:	f023 0304 	bic.w	r3, r3, #4
 8002280:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	68db      	ldr	r3, [r3, #12]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d015      	beq.n	80022b6 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800228a:	f7fe fce1 	bl	8000c50 <HAL_GetTick>
 800228e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002290:	e00a      	b.n	80022a8 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002292:	f7fe fcdd 	bl	8000c50 <HAL_GetTick>
 8002296:	4602      	mov	r2, r0
 8002298:	693b      	ldr	r3, [r7, #16]
 800229a:	1ad3      	subs	r3, r2, r3
 800229c:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d901      	bls.n	80022a8 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80022a4:	2303      	movs	r3, #3
 80022a6:	e0b1      	b.n	800240c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80022a8:	4b4b      	ldr	r3, [pc, #300]	@ (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 80022aa:	6a1b      	ldr	r3, [r3, #32]
 80022ac:	f003 0302 	and.w	r3, r3, #2
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d0ee      	beq.n	8002292 <HAL_RCC_OscConfig+0x37e>
 80022b4:	e014      	b.n	80022e0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80022b6:	f7fe fccb 	bl	8000c50 <HAL_GetTick>
 80022ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022bc:	e00a      	b.n	80022d4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80022be:	f7fe fcc7 	bl	8000c50 <HAL_GetTick>
 80022c2:	4602      	mov	r2, r0
 80022c4:	693b      	ldr	r3, [r7, #16]
 80022c6:	1ad3      	subs	r3, r2, r3
 80022c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022cc:	4293      	cmp	r3, r2
 80022ce:	d901      	bls.n	80022d4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80022d0:	2303      	movs	r3, #3
 80022d2:	e09b      	b.n	800240c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022d4:	4b40      	ldr	r3, [pc, #256]	@ (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 80022d6:	6a1b      	ldr	r3, [r3, #32]
 80022d8:	f003 0302 	and.w	r3, r3, #2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d1ee      	bne.n	80022be <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80022e0:	7dfb      	ldrb	r3, [r7, #23]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d105      	bne.n	80022f2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022e6:	4b3c      	ldr	r3, [pc, #240]	@ (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 80022e8:	69db      	ldr	r3, [r3, #28]
 80022ea:	4a3b      	ldr	r2, [pc, #236]	@ (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 80022ec:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80022f0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	69db      	ldr	r3, [r3, #28]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	f000 8087 	beq.w	800240a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80022fc:	4b36      	ldr	r3, [pc, #216]	@ (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	f003 030c 	and.w	r3, r3, #12
 8002304:	2b08      	cmp	r3, #8
 8002306:	d061      	beq.n	80023cc <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	69db      	ldr	r3, [r3, #28]
 800230c:	2b02      	cmp	r3, #2
 800230e:	d146      	bne.n	800239e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002310:	4b33      	ldr	r3, [pc, #204]	@ (80023e0 <HAL_RCC_OscConfig+0x4cc>)
 8002312:	2200      	movs	r2, #0
 8002314:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002316:	f7fe fc9b 	bl	8000c50 <HAL_GetTick>
 800231a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800231c:	e008      	b.n	8002330 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800231e:	f7fe fc97 	bl	8000c50 <HAL_GetTick>
 8002322:	4602      	mov	r2, r0
 8002324:	693b      	ldr	r3, [r7, #16]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	2b02      	cmp	r3, #2
 800232a:	d901      	bls.n	8002330 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800232c:	2303      	movs	r3, #3
 800232e:	e06d      	b.n	800240c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002330:	4b29      	ldr	r3, [pc, #164]	@ (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d1f0      	bne.n	800231e <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6a1b      	ldr	r3, [r3, #32]
 8002340:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002344:	d108      	bne.n	8002358 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002346:	4b24      	ldr	r3, [pc, #144]	@ (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	4921      	ldr	r1, [pc, #132]	@ (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 8002354:	4313      	orrs	r3, r2
 8002356:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002358:	4b1f      	ldr	r3, [pc, #124]	@ (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 800235a:	685b      	ldr	r3, [r3, #4]
 800235c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6a19      	ldr	r1, [r3, #32]
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002368:	430b      	orrs	r3, r1
 800236a:	491b      	ldr	r1, [pc, #108]	@ (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 800236c:	4313      	orrs	r3, r2
 800236e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002370:	4b1b      	ldr	r3, [pc, #108]	@ (80023e0 <HAL_RCC_OscConfig+0x4cc>)
 8002372:	2201      	movs	r2, #1
 8002374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002376:	f7fe fc6b 	bl	8000c50 <HAL_GetTick>
 800237a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800237c:	e008      	b.n	8002390 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800237e:	f7fe fc67 	bl	8000c50 <HAL_GetTick>
 8002382:	4602      	mov	r2, r0
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	1ad3      	subs	r3, r2, r3
 8002388:	2b02      	cmp	r3, #2
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e03d      	b.n	800240c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002390:	4b11      	ldr	r3, [pc, #68]	@ (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d0f0      	beq.n	800237e <HAL_RCC_OscConfig+0x46a>
 800239c:	e035      	b.n	800240a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800239e:	4b10      	ldr	r3, [pc, #64]	@ (80023e0 <HAL_RCC_OscConfig+0x4cc>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a4:	f7fe fc54 	bl	8000c50 <HAL_GetTick>
 80023a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023aa:	e008      	b.n	80023be <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023ac:	f7fe fc50 	bl	8000c50 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e026      	b.n	800240c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023be:	4b06      	ldr	r3, [pc, #24]	@ (80023d8 <HAL_RCC_OscConfig+0x4c4>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d1f0      	bne.n	80023ac <HAL_RCC_OscConfig+0x498>
 80023ca:	e01e      	b.n	800240a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	69db      	ldr	r3, [r3, #28]
 80023d0:	2b01      	cmp	r3, #1
 80023d2:	d107      	bne.n	80023e4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80023d4:	2301      	movs	r3, #1
 80023d6:	e019      	b.n	800240c <HAL_RCC_OscConfig+0x4f8>
 80023d8:	40021000 	.word	0x40021000
 80023dc:	40007000 	.word	0x40007000
 80023e0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80023e4:	4b0b      	ldr	r3, [pc, #44]	@ (8002414 <HAL_RCC_OscConfig+0x500>)
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6a1b      	ldr	r3, [r3, #32]
 80023f4:	429a      	cmp	r2, r3
 80023f6:	d106      	bne.n	8002406 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002402:	429a      	cmp	r2, r3
 8002404:	d001      	beq.n	800240a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e000      	b.n	800240c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	3718      	adds	r7, #24
 8002410:	46bd      	mov	sp, r7
 8002412:	bd80      	pop	{r7, pc}
 8002414:	40021000 	.word	0x40021000

08002418 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d101      	bne.n	800242c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e0d0      	b.n	80025ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800242c:	4b6a      	ldr	r3, [pc, #424]	@ (80025d8 <HAL_RCC_ClockConfig+0x1c0>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0307 	and.w	r3, r3, #7
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	429a      	cmp	r2, r3
 8002438:	d910      	bls.n	800245c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800243a:	4b67      	ldr	r3, [pc, #412]	@ (80025d8 <HAL_RCC_ClockConfig+0x1c0>)
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f023 0207 	bic.w	r2, r3, #7
 8002442:	4965      	ldr	r1, [pc, #404]	@ (80025d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	4313      	orrs	r3, r2
 8002448:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800244a:	4b63      	ldr	r3, [pc, #396]	@ (80025d8 <HAL_RCC_ClockConfig+0x1c0>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f003 0307 	and.w	r3, r3, #7
 8002452:	683a      	ldr	r2, [r7, #0]
 8002454:	429a      	cmp	r2, r3
 8002456:	d001      	beq.n	800245c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e0b8      	b.n	80025ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0302 	and.w	r3, r3, #2
 8002464:	2b00      	cmp	r3, #0
 8002466:	d020      	beq.n	80024aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0304 	and.w	r3, r3, #4
 8002470:	2b00      	cmp	r3, #0
 8002472:	d005      	beq.n	8002480 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002474:	4b59      	ldr	r3, [pc, #356]	@ (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 8002476:	685b      	ldr	r3, [r3, #4]
 8002478:	4a58      	ldr	r2, [pc, #352]	@ (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 800247a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800247e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 0308 	and.w	r3, r3, #8
 8002488:	2b00      	cmp	r3, #0
 800248a:	d005      	beq.n	8002498 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800248c:	4b53      	ldr	r3, [pc, #332]	@ (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	4a52      	ldr	r2, [pc, #328]	@ (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 8002492:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002496:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002498:	4b50      	ldr	r3, [pc, #320]	@ (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 800249a:	685b      	ldr	r3, [r3, #4]
 800249c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	494d      	ldr	r1, [pc, #308]	@ (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d040      	beq.n	8002538 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	2b01      	cmp	r3, #1
 80024bc:	d107      	bne.n	80024ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024be:	4b47      	ldr	r3, [pc, #284]	@ (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d115      	bne.n	80024f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ca:	2301      	movs	r3, #1
 80024cc:	e07f      	b.n	80025ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
 80024d2:	2b02      	cmp	r3, #2
 80024d4:	d107      	bne.n	80024e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024d6:	4b41      	ldr	r3, [pc, #260]	@ (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d109      	bne.n	80024f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e073      	b.n	80025ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024e6:	4b3d      	ldr	r3, [pc, #244]	@ (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e06b      	b.n	80025ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024f6:	4b39      	ldr	r3, [pc, #228]	@ (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f023 0203 	bic.w	r2, r3, #3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	4936      	ldr	r1, [pc, #216]	@ (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 8002504:	4313      	orrs	r3, r2
 8002506:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002508:	f7fe fba2 	bl	8000c50 <HAL_GetTick>
 800250c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800250e:	e00a      	b.n	8002526 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002510:	f7fe fb9e 	bl	8000c50 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800251e:	4293      	cmp	r3, r2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e053      	b.n	80025ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002526:	4b2d      	ldr	r3, [pc, #180]	@ (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f003 020c 	and.w	r2, r3, #12
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	429a      	cmp	r2, r3
 8002536:	d1eb      	bne.n	8002510 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002538:	4b27      	ldr	r3, [pc, #156]	@ (80025d8 <HAL_RCC_ClockConfig+0x1c0>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0307 	and.w	r3, r3, #7
 8002540:	683a      	ldr	r2, [r7, #0]
 8002542:	429a      	cmp	r2, r3
 8002544:	d210      	bcs.n	8002568 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002546:	4b24      	ldr	r3, [pc, #144]	@ (80025d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f023 0207 	bic.w	r2, r3, #7
 800254e:	4922      	ldr	r1, [pc, #136]	@ (80025d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	4313      	orrs	r3, r2
 8002554:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002556:	4b20      	ldr	r3, [pc, #128]	@ (80025d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 0307 	and.w	r3, r3, #7
 800255e:	683a      	ldr	r2, [r7, #0]
 8002560:	429a      	cmp	r2, r3
 8002562:	d001      	beq.n	8002568 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	e032      	b.n	80025ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f003 0304 	and.w	r3, r3, #4
 8002570:	2b00      	cmp	r3, #0
 8002572:	d008      	beq.n	8002586 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002574:	4b19      	ldr	r3, [pc, #100]	@ (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	68db      	ldr	r3, [r3, #12]
 8002580:	4916      	ldr	r1, [pc, #88]	@ (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 8002582:	4313      	orrs	r3, r2
 8002584:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f003 0308 	and.w	r3, r3, #8
 800258e:	2b00      	cmp	r3, #0
 8002590:	d009      	beq.n	80025a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002592:	4b12      	ldr	r3, [pc, #72]	@ (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	691b      	ldr	r3, [r3, #16]
 800259e:	00db      	lsls	r3, r3, #3
 80025a0:	490e      	ldr	r1, [pc, #56]	@ (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 80025a2:	4313      	orrs	r3, r2
 80025a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80025a6:	f000 f821 	bl	80025ec <HAL_RCC_GetSysClockFreq>
 80025aa:	4602      	mov	r2, r0
 80025ac:	4b0b      	ldr	r3, [pc, #44]	@ (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	091b      	lsrs	r3, r3, #4
 80025b2:	f003 030f 	and.w	r3, r3, #15
 80025b6:	490a      	ldr	r1, [pc, #40]	@ (80025e0 <HAL_RCC_ClockConfig+0x1c8>)
 80025b8:	5ccb      	ldrb	r3, [r1, r3]
 80025ba:	fa22 f303 	lsr.w	r3, r2, r3
 80025be:	4a09      	ldr	r2, [pc, #36]	@ (80025e4 <HAL_RCC_ClockConfig+0x1cc>)
 80025c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80025c2:	4b09      	ldr	r3, [pc, #36]	@ (80025e8 <HAL_RCC_ClockConfig+0x1d0>)
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7fe fb00 	bl	8000bcc <HAL_InitTick>

  return HAL_OK;
 80025cc:	2300      	movs	r3, #0
}
 80025ce:	4618      	mov	r0, r3
 80025d0:	3710      	adds	r7, #16
 80025d2:	46bd      	mov	sp, r7
 80025d4:	bd80      	pop	{r7, pc}
 80025d6:	bf00      	nop
 80025d8:	40022000 	.word	0x40022000
 80025dc:	40021000 	.word	0x40021000
 80025e0:	080045c8 	.word	0x080045c8
 80025e4:	20000000 	.word	0x20000000
 80025e8:	20000004 	.word	0x20000004

080025ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025ec:	b480      	push	{r7}
 80025ee:	b087      	sub	sp, #28
 80025f0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025f2:	2300      	movs	r3, #0
 80025f4:	60fb      	str	r3, [r7, #12]
 80025f6:	2300      	movs	r3, #0
 80025f8:	60bb      	str	r3, [r7, #8]
 80025fa:	2300      	movs	r3, #0
 80025fc:	617b      	str	r3, [r7, #20]
 80025fe:	2300      	movs	r3, #0
 8002600:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002602:	2300      	movs	r3, #0
 8002604:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002606:	4b1e      	ldr	r3, [pc, #120]	@ (8002680 <HAL_RCC_GetSysClockFreq+0x94>)
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f003 030c 	and.w	r3, r3, #12
 8002612:	2b04      	cmp	r3, #4
 8002614:	d002      	beq.n	800261c <HAL_RCC_GetSysClockFreq+0x30>
 8002616:	2b08      	cmp	r3, #8
 8002618:	d003      	beq.n	8002622 <HAL_RCC_GetSysClockFreq+0x36>
 800261a:	e027      	b.n	800266c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800261c:	4b19      	ldr	r3, [pc, #100]	@ (8002684 <HAL_RCC_GetSysClockFreq+0x98>)
 800261e:	613b      	str	r3, [r7, #16]
      break;
 8002620:	e027      	b.n	8002672 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	0c9b      	lsrs	r3, r3, #18
 8002626:	f003 030f 	and.w	r3, r3, #15
 800262a:	4a17      	ldr	r2, [pc, #92]	@ (8002688 <HAL_RCC_GetSysClockFreq+0x9c>)
 800262c:	5cd3      	ldrb	r3, [r2, r3]
 800262e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d010      	beq.n	800265c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800263a:	4b11      	ldr	r3, [pc, #68]	@ (8002680 <HAL_RCC_GetSysClockFreq+0x94>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	0c5b      	lsrs	r3, r3, #17
 8002640:	f003 0301 	and.w	r3, r3, #1
 8002644:	4a11      	ldr	r2, [pc, #68]	@ (800268c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002646:	5cd3      	ldrb	r3, [r2, r3]
 8002648:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a0d      	ldr	r2, [pc, #52]	@ (8002684 <HAL_RCC_GetSysClockFreq+0x98>)
 800264e:	fb03 f202 	mul.w	r2, r3, r2
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	fbb2 f3f3 	udiv	r3, r2, r3
 8002658:	617b      	str	r3, [r7, #20]
 800265a:	e004      	b.n	8002666 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	4a0c      	ldr	r2, [pc, #48]	@ (8002690 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002660:	fb02 f303 	mul.w	r3, r2, r3
 8002664:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	613b      	str	r3, [r7, #16]
      break;
 800266a:	e002      	b.n	8002672 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800266c:	4b05      	ldr	r3, [pc, #20]	@ (8002684 <HAL_RCC_GetSysClockFreq+0x98>)
 800266e:	613b      	str	r3, [r7, #16]
      break;
 8002670:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002672:	693b      	ldr	r3, [r7, #16]
}
 8002674:	4618      	mov	r0, r3
 8002676:	371c      	adds	r7, #28
 8002678:	46bd      	mov	sp, r7
 800267a:	bc80      	pop	{r7}
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	40021000 	.word	0x40021000
 8002684:	007a1200 	.word	0x007a1200
 8002688:	080045e0 	.word	0x080045e0
 800268c:	080045f0 	.word	0x080045f0
 8002690:	003d0900 	.word	0x003d0900

08002694 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002694:	b480      	push	{r7}
 8002696:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002698:	4b02      	ldr	r3, [pc, #8]	@ (80026a4 <HAL_RCC_GetHCLKFreq+0x10>)
 800269a:	681b      	ldr	r3, [r3, #0]
}
 800269c:	4618      	mov	r0, r3
 800269e:	46bd      	mov	sp, r7
 80026a0:	bc80      	pop	{r7}
 80026a2:	4770      	bx	lr
 80026a4:	20000000 	.word	0x20000000

080026a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80026ac:	f7ff fff2 	bl	8002694 <HAL_RCC_GetHCLKFreq>
 80026b0:	4602      	mov	r2, r0
 80026b2:	4b05      	ldr	r3, [pc, #20]	@ (80026c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026b4:	685b      	ldr	r3, [r3, #4]
 80026b6:	0a1b      	lsrs	r3, r3, #8
 80026b8:	f003 0307 	and.w	r3, r3, #7
 80026bc:	4903      	ldr	r1, [pc, #12]	@ (80026cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80026be:	5ccb      	ldrb	r3, [r1, r3]
 80026c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026c4:	4618      	mov	r0, r3
 80026c6:	bd80      	pop	{r7, pc}
 80026c8:	40021000 	.word	0x40021000
 80026cc:	080045d8 	.word	0x080045d8

080026d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80026d4:	f7ff ffde 	bl	8002694 <HAL_RCC_GetHCLKFreq>
 80026d8:	4602      	mov	r2, r0
 80026da:	4b05      	ldr	r3, [pc, #20]	@ (80026f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	0adb      	lsrs	r3, r3, #11
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	4903      	ldr	r1, [pc, #12]	@ (80026f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80026e6:	5ccb      	ldrb	r3, [r1, r3]
 80026e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	40021000 	.word	0x40021000
 80026f4:	080045d8 	.word	0x080045d8

080026f8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80026f8:	b480      	push	{r7}
 80026fa:	b085      	sub	sp, #20
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002700:	4b0a      	ldr	r3, [pc, #40]	@ (800272c <RCC_Delay+0x34>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a0a      	ldr	r2, [pc, #40]	@ (8002730 <RCC_Delay+0x38>)
 8002706:	fba2 2303 	umull	r2, r3, r2, r3
 800270a:	0a5b      	lsrs	r3, r3, #9
 800270c:	687a      	ldr	r2, [r7, #4]
 800270e:	fb02 f303 	mul.w	r3, r2, r3
 8002712:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002714:	bf00      	nop
  }
  while (Delay --);
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	1e5a      	subs	r2, r3, #1
 800271a:	60fa      	str	r2, [r7, #12]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d1f9      	bne.n	8002714 <RCC_Delay+0x1c>
}
 8002720:	bf00      	nop
 8002722:	bf00      	nop
 8002724:	3714      	adds	r7, #20
 8002726:	46bd      	mov	sp, r7
 8002728:	bc80      	pop	{r7}
 800272a:	4770      	bx	lr
 800272c:	20000000 	.word	0x20000000
 8002730:	10624dd3 	.word	0x10624dd3

08002734 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b086      	sub	sp, #24
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800273c:	2300      	movs	r3, #0
 800273e:	613b      	str	r3, [r7, #16]
 8002740:	2300      	movs	r3, #0
 8002742:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	2b00      	cmp	r3, #0
 800274e:	d07d      	beq.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002750:	2300      	movs	r3, #0
 8002752:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002754:	4b4f      	ldr	r3, [pc, #316]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002756:	69db      	ldr	r3, [r3, #28]
 8002758:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d10d      	bne.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002760:	4b4c      	ldr	r3, [pc, #304]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002762:	69db      	ldr	r3, [r3, #28]
 8002764:	4a4b      	ldr	r2, [pc, #300]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002766:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800276a:	61d3      	str	r3, [r2, #28]
 800276c:	4b49      	ldr	r3, [pc, #292]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800276e:	69db      	ldr	r3, [r3, #28]
 8002770:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002774:	60bb      	str	r3, [r7, #8]
 8002776:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002778:	2301      	movs	r3, #1
 800277a:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800277c:	4b46      	ldr	r3, [pc, #280]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002784:	2b00      	cmp	r3, #0
 8002786:	d118      	bne.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002788:	4b43      	ldr	r3, [pc, #268]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a42      	ldr	r2, [pc, #264]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800278e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002792:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002794:	f7fe fa5c 	bl	8000c50 <HAL_GetTick>
 8002798:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800279a:	e008      	b.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800279c:	f7fe fa58 	bl	8000c50 <HAL_GetTick>
 80027a0:	4602      	mov	r2, r0
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	2b64      	cmp	r3, #100	@ 0x64
 80027a8:	d901      	bls.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80027aa:	2303      	movs	r3, #3
 80027ac:	e06d      	b.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ae:	4b3a      	ldr	r3, [pc, #232]	@ (8002898 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d0f0      	beq.n	800279c <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80027ba:	4b36      	ldr	r3, [pc, #216]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027bc:	6a1b      	ldr	r3, [r3, #32]
 80027be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027c2:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d02e      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	685b      	ldr	r3, [r3, #4]
 80027ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	429a      	cmp	r2, r3
 80027d6:	d027      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027d8:	4b2e      	ldr	r3, [pc, #184]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027da:	6a1b      	ldr	r3, [r3, #32]
 80027dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027e0:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80027e2:	4b2e      	ldr	r3, [pc, #184]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80027e4:	2201      	movs	r2, #1
 80027e6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80027e8:	4b2c      	ldr	r3, [pc, #176]	@ (800289c <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80027ea:	2200      	movs	r2, #0
 80027ec:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80027ee:	4a29      	ldr	r2, [pc, #164]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	f003 0301 	and.w	r3, r3, #1
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d014      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027fe:	f7fe fa27 	bl	8000c50 <HAL_GetTick>
 8002802:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002804:	e00a      	b.n	800281c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002806:	f7fe fa23 	bl	8000c50 <HAL_GetTick>
 800280a:	4602      	mov	r2, r0
 800280c:	693b      	ldr	r3, [r7, #16]
 800280e:	1ad3      	subs	r3, r2, r3
 8002810:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002814:	4293      	cmp	r3, r2
 8002816:	d901      	bls.n	800281c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e036      	b.n	800288a <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800281c:	4b1d      	ldr	r3, [pc, #116]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800281e:	6a1b      	ldr	r3, [r3, #32]
 8002820:	f003 0302 	and.w	r3, r3, #2
 8002824:	2b00      	cmp	r3, #0
 8002826:	d0ee      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002828:	4b1a      	ldr	r3, [pc, #104]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800282a:	6a1b      	ldr	r3, [r3, #32]
 800282c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	685b      	ldr	r3, [r3, #4]
 8002834:	4917      	ldr	r1, [pc, #92]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002836:	4313      	orrs	r3, r2
 8002838:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800283a:	7dfb      	ldrb	r3, [r7, #23]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d105      	bne.n	800284c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002840:	4b14      	ldr	r3, [pc, #80]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002842:	69db      	ldr	r3, [r3, #28]
 8002844:	4a13      	ldr	r2, [pc, #76]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002846:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800284a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f003 0302 	and.w	r3, r3, #2
 8002854:	2b00      	cmp	r3, #0
 8002856:	d008      	beq.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002858:	4b0e      	ldr	r3, [pc, #56]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800285a:	685b      	ldr	r3, [r3, #4]
 800285c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	490b      	ldr	r1, [pc, #44]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002866:	4313      	orrs	r3, r2
 8002868:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	f003 0310 	and.w	r3, r3, #16
 8002872:	2b00      	cmp	r3, #0
 8002874:	d008      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002876:	4b07      	ldr	r3, [pc, #28]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	68db      	ldr	r3, [r3, #12]
 8002882:	4904      	ldr	r1, [pc, #16]	@ (8002894 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002884:	4313      	orrs	r3, r2
 8002886:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002888:	2300      	movs	r3, #0
}
 800288a:	4618      	mov	r0, r3
 800288c:	3718      	adds	r7, #24
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	40021000 	.word	0x40021000
 8002898:	40007000 	.word	0x40007000
 800289c:	42420440 	.word	0x42420440

080028a0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b088      	sub	sp, #32
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80028a8:	2300      	movs	r3, #0
 80028aa:	617b      	str	r3, [r7, #20]
 80028ac:	2300      	movs	r3, #0
 80028ae:	61fb      	str	r3, [r7, #28]
 80028b0:	2300      	movs	r3, #0
 80028b2:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 80028b4:	2300      	movs	r3, #0
 80028b6:	60fb      	str	r3, [r7, #12]
 80028b8:	2300      	movs	r3, #0
 80028ba:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2b10      	cmp	r3, #16
 80028c0:	d00a      	beq.n	80028d8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2b10      	cmp	r3, #16
 80028c6:	f200 808a 	bhi.w	80029de <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d045      	beq.n	800295c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2b02      	cmp	r3, #2
 80028d4:	d075      	beq.n	80029c2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 80028d6:	e082      	b.n	80029de <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 80028d8:	4b46      	ldr	r3, [pc, #280]	@ (80029f4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 80028de:	4b45      	ldr	r3, [pc, #276]	@ (80029f4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d07b      	beq.n	80029e2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	0c9b      	lsrs	r3, r3, #18
 80028ee:	f003 030f 	and.w	r3, r3, #15
 80028f2:	4a41      	ldr	r2, [pc, #260]	@ (80029f8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 80028f4:	5cd3      	ldrb	r3, [r2, r3]
 80028f6:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d015      	beq.n	800292e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002902:	4b3c      	ldr	r3, [pc, #240]	@ (80029f4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	0c5b      	lsrs	r3, r3, #17
 8002908:	f003 0301 	and.w	r3, r3, #1
 800290c:	4a3b      	ldr	r2, [pc, #236]	@ (80029fc <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800290e:	5cd3      	ldrb	r3, [r2, r3]
 8002910:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002918:	2b00      	cmp	r3, #0
 800291a:	d00d      	beq.n	8002938 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800291c:	4a38      	ldr	r2, [pc, #224]	@ (8002a00 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800291e:	697b      	ldr	r3, [r7, #20]
 8002920:	fbb2 f2f3 	udiv	r2, r2, r3
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	fb02 f303 	mul.w	r3, r2, r3
 800292a:	61fb      	str	r3, [r7, #28]
 800292c:	e004      	b.n	8002938 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	4a34      	ldr	r2, [pc, #208]	@ (8002a04 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002932:	fb02 f303 	mul.w	r3, r2, r3
 8002936:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002938:	4b2e      	ldr	r3, [pc, #184]	@ (80029f4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002940:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002944:	d102      	bne.n	800294c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	61bb      	str	r3, [r7, #24]
      break;
 800294a:	e04a      	b.n	80029e2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	005b      	lsls	r3, r3, #1
 8002950:	4a2d      	ldr	r2, [pc, #180]	@ (8002a08 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002952:	fba2 2303 	umull	r2, r3, r2, r3
 8002956:	085b      	lsrs	r3, r3, #1
 8002958:	61bb      	str	r3, [r7, #24]
      break;
 800295a:	e042      	b.n	80029e2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 800295c:	4b25      	ldr	r3, [pc, #148]	@ (80029f4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800295e:	6a1b      	ldr	r3, [r3, #32]
 8002960:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002968:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800296c:	d108      	bne.n	8002980 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	f003 0302 	and.w	r3, r3, #2
 8002974:	2b00      	cmp	r3, #0
 8002976:	d003      	beq.n	8002980 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002978:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800297c:	61bb      	str	r3, [r7, #24]
 800297e:	e01f      	b.n	80029c0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002986:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800298a:	d109      	bne.n	80029a0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 800298c:	4b19      	ldr	r3, [pc, #100]	@ (80029f4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800298e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002990:	f003 0302 	and.w	r3, r3, #2
 8002994:	2b00      	cmp	r3, #0
 8002996:	d003      	beq.n	80029a0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002998:	f649 4340 	movw	r3, #40000	@ 0x9c40
 800299c:	61bb      	str	r3, [r7, #24]
 800299e:	e00f      	b.n	80029c0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80029a6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80029aa:	d11c      	bne.n	80029e6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80029ac:	4b11      	ldr	r3, [pc, #68]	@ (80029f4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d016      	beq.n	80029e6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 80029b8:	f24f 4324 	movw	r3, #62500	@ 0xf424
 80029bc:	61bb      	str	r3, [r7, #24]
      break;
 80029be:	e012      	b.n	80029e6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80029c0:	e011      	b.n	80029e6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 80029c2:	f7ff fe85 	bl	80026d0 <HAL_RCC_GetPCLK2Freq>
 80029c6:	4602      	mov	r2, r0
 80029c8:	4b0a      	ldr	r3, [pc, #40]	@ (80029f4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	0b9b      	lsrs	r3, r3, #14
 80029ce:	f003 0303 	and.w	r3, r3, #3
 80029d2:	3301      	adds	r3, #1
 80029d4:	005b      	lsls	r3, r3, #1
 80029d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80029da:	61bb      	str	r3, [r7, #24]
      break;
 80029dc:	e004      	b.n	80029e8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80029de:	bf00      	nop
 80029e0:	e002      	b.n	80029e8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80029e2:	bf00      	nop
 80029e4:	e000      	b.n	80029e8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 80029e6:	bf00      	nop
    }
  }
  return (frequency);
 80029e8:	69bb      	ldr	r3, [r7, #24]
}
 80029ea:	4618      	mov	r0, r3
 80029ec:	3720      	adds	r7, #32
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	bf00      	nop
 80029f4:	40021000 	.word	0x40021000
 80029f8:	080045f4 	.word	0x080045f4
 80029fc:	08004604 	.word	0x08004604
 8002a00:	007a1200 	.word	0x007a1200
 8002a04:	003d0900 	.word	0x003d0900
 8002a08:	aaaaaaab 	.word	0xaaaaaaab

08002a0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d101      	bne.n	8002a1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e041      	b.n	8002aa2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a24:	b2db      	uxtb	r3, r3
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d106      	bne.n	8002a38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a32:	6878      	ldr	r0, [r7, #4]
 8002a34:	f7fd ff3e 	bl	80008b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	3304      	adds	r3, #4
 8002a48:	4619      	mov	r1, r3
 8002a4a:	4610      	mov	r0, r2
 8002a4c:	f000 fa5c 	bl	8002f08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
	...

08002aac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002aba:	b2db      	uxtb	r3, r3
 8002abc:	2b01      	cmp	r3, #1
 8002abe:	d001      	beq.n	8002ac4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	e03a      	b.n	8002b3a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	2202      	movs	r2, #2
 8002ac8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68da      	ldr	r2, [r3, #12]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f042 0201 	orr.w	r2, r2, #1
 8002ada:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4a18      	ldr	r2, [pc, #96]	@ (8002b44 <HAL_TIM_Base_Start_IT+0x98>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d00e      	beq.n	8002b04 <HAL_TIM_Base_Start_IT+0x58>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002aee:	d009      	beq.n	8002b04 <HAL_TIM_Base_Start_IT+0x58>
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4a14      	ldr	r2, [pc, #80]	@ (8002b48 <HAL_TIM_Base_Start_IT+0x9c>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d004      	beq.n	8002b04 <HAL_TIM_Base_Start_IT+0x58>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a13      	ldr	r2, [pc, #76]	@ (8002b4c <HAL_TIM_Base_Start_IT+0xa0>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d111      	bne.n	8002b28 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 0307 	and.w	r3, r3, #7
 8002b0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2b06      	cmp	r3, #6
 8002b14:	d010      	beq.n	8002b38 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f042 0201 	orr.w	r2, r2, #1
 8002b24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b26:	e007      	b.n	8002b38 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	681a      	ldr	r2, [r3, #0]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f042 0201 	orr.w	r2, r2, #1
 8002b36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002b38:	2300      	movs	r3, #0
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3714      	adds	r7, #20
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bc80      	pop	{r7}
 8002b42:	4770      	bx	lr
 8002b44:	40012c00 	.word	0x40012c00
 8002b48:	40000400 	.word	0x40000400
 8002b4c:	40000800 	.word	0x40000800

08002b50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b50:	b580      	push	{r7, lr}
 8002b52:	b084      	sub	sp, #16
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	f003 0302 	and.w	r3, r3, #2
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d020      	beq.n	8002bb4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f003 0302 	and.w	r3, r3, #2
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d01b      	beq.n	8002bb4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f06f 0202 	mvn.w	r2, #2
 8002b84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	699b      	ldr	r3, [r3, #24]
 8002b92:	f003 0303 	and.w	r3, r3, #3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d003      	beq.n	8002ba2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 f998 	bl	8002ed0 <HAL_TIM_IC_CaptureCallback>
 8002ba0:	e005      	b.n	8002bae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 f98b 	bl	8002ebe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f000 f99a 	bl	8002ee2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002bb4:	68bb      	ldr	r3, [r7, #8]
 8002bb6:	f003 0304 	and.w	r3, r3, #4
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d020      	beq.n	8002c00 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	f003 0304 	and.w	r3, r3, #4
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d01b      	beq.n	8002c00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f06f 0204 	mvn.w	r2, #4
 8002bd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	2202      	movs	r2, #2
 8002bd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	699b      	ldr	r3, [r3, #24]
 8002bde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d003      	beq.n	8002bee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002be6:	6878      	ldr	r0, [r7, #4]
 8002be8:	f000 f972 	bl	8002ed0 <HAL_TIM_IC_CaptureCallback>
 8002bec:	e005      	b.n	8002bfa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f000 f965 	bl	8002ebe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	f000 f974 	bl	8002ee2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002c00:	68bb      	ldr	r3, [r7, #8]
 8002c02:	f003 0308 	and.w	r3, r3, #8
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d020      	beq.n	8002c4c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	f003 0308 	and.w	r3, r3, #8
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d01b      	beq.n	8002c4c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	f06f 0208 	mvn.w	r2, #8
 8002c1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	2204      	movs	r2, #4
 8002c22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	69db      	ldr	r3, [r3, #28]
 8002c2a:	f003 0303 	and.w	r3, r3, #3
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d003      	beq.n	8002c3a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 f94c 	bl	8002ed0 <HAL_TIM_IC_CaptureCallback>
 8002c38:	e005      	b.n	8002c46 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 f93f 	bl	8002ebe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 f94e 	bl	8002ee2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	f003 0310 	and.w	r3, r3, #16
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d020      	beq.n	8002c98 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f003 0310 	and.w	r3, r3, #16
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d01b      	beq.n	8002c98 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f06f 0210 	mvn.w	r2, #16
 8002c68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	2208      	movs	r2, #8
 8002c6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	69db      	ldr	r3, [r3, #28]
 8002c76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d003      	beq.n	8002c86 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c7e:	6878      	ldr	r0, [r7, #4]
 8002c80:	f000 f926 	bl	8002ed0 <HAL_TIM_IC_CaptureCallback>
 8002c84:	e005      	b.n	8002c92 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f000 f919 	bl	8002ebe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c8c:	6878      	ldr	r0, [r7, #4]
 8002c8e:	f000 f928 	bl	8002ee2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2200      	movs	r2, #0
 8002c96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	f003 0301 	and.w	r3, r3, #1
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d00c      	beq.n	8002cbc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	f003 0301 	and.w	r3, r3, #1
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d007      	beq.n	8002cbc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f06f 0201 	mvn.w	r2, #1
 8002cb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f7fd fb4c 	bl	8000354 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00c      	beq.n	8002ce0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d007      	beq.n	8002ce0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002cd8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 fa7f 	bl	80031de <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00c      	beq.n	8002d04 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d007      	beq.n	8002d04 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002cfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 f8f8 	bl	8002ef4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002d04:	68bb      	ldr	r3, [r7, #8]
 8002d06:	f003 0320 	and.w	r3, r3, #32
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00c      	beq.n	8002d28 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	f003 0320 	and.w	r3, r3, #32
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d007      	beq.n	8002d28 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f06f 0220 	mvn.w	r2, #32
 8002d20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f000 fa52 	bl	80031cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d28:	bf00      	nop
 8002d2a:	3710      	adds	r7, #16
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	bd80      	pop	{r7, pc}

08002d30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	b084      	sub	sp, #16
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
 8002d38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002d44:	2b01      	cmp	r3, #1
 8002d46:	d101      	bne.n	8002d4c <HAL_TIM_ConfigClockSource+0x1c>
 8002d48:	2302      	movs	r3, #2
 8002d4a:	e0b4      	b.n	8002eb6 <HAL_TIM_ConfigClockSource+0x186>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2202      	movs	r2, #2
 8002d58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	689b      	ldr	r3, [r3, #8]
 8002d62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002d6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d6c:	68bb      	ldr	r3, [r7, #8]
 8002d6e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002d72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	68ba      	ldr	r2, [r7, #8]
 8002d7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d7c:	683b      	ldr	r3, [r7, #0]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d84:	d03e      	beq.n	8002e04 <HAL_TIM_ConfigClockSource+0xd4>
 8002d86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002d8a:	f200 8087 	bhi.w	8002e9c <HAL_TIM_ConfigClockSource+0x16c>
 8002d8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d92:	f000 8086 	beq.w	8002ea2 <HAL_TIM_ConfigClockSource+0x172>
 8002d96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d9a:	d87f      	bhi.n	8002e9c <HAL_TIM_ConfigClockSource+0x16c>
 8002d9c:	2b70      	cmp	r3, #112	@ 0x70
 8002d9e:	d01a      	beq.n	8002dd6 <HAL_TIM_ConfigClockSource+0xa6>
 8002da0:	2b70      	cmp	r3, #112	@ 0x70
 8002da2:	d87b      	bhi.n	8002e9c <HAL_TIM_ConfigClockSource+0x16c>
 8002da4:	2b60      	cmp	r3, #96	@ 0x60
 8002da6:	d050      	beq.n	8002e4a <HAL_TIM_ConfigClockSource+0x11a>
 8002da8:	2b60      	cmp	r3, #96	@ 0x60
 8002daa:	d877      	bhi.n	8002e9c <HAL_TIM_ConfigClockSource+0x16c>
 8002dac:	2b50      	cmp	r3, #80	@ 0x50
 8002dae:	d03c      	beq.n	8002e2a <HAL_TIM_ConfigClockSource+0xfa>
 8002db0:	2b50      	cmp	r3, #80	@ 0x50
 8002db2:	d873      	bhi.n	8002e9c <HAL_TIM_ConfigClockSource+0x16c>
 8002db4:	2b40      	cmp	r3, #64	@ 0x40
 8002db6:	d058      	beq.n	8002e6a <HAL_TIM_ConfigClockSource+0x13a>
 8002db8:	2b40      	cmp	r3, #64	@ 0x40
 8002dba:	d86f      	bhi.n	8002e9c <HAL_TIM_ConfigClockSource+0x16c>
 8002dbc:	2b30      	cmp	r3, #48	@ 0x30
 8002dbe:	d064      	beq.n	8002e8a <HAL_TIM_ConfigClockSource+0x15a>
 8002dc0:	2b30      	cmp	r3, #48	@ 0x30
 8002dc2:	d86b      	bhi.n	8002e9c <HAL_TIM_ConfigClockSource+0x16c>
 8002dc4:	2b20      	cmp	r3, #32
 8002dc6:	d060      	beq.n	8002e8a <HAL_TIM_ConfigClockSource+0x15a>
 8002dc8:	2b20      	cmp	r3, #32
 8002dca:	d867      	bhi.n	8002e9c <HAL_TIM_ConfigClockSource+0x16c>
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d05c      	beq.n	8002e8a <HAL_TIM_ConfigClockSource+0x15a>
 8002dd0:	2b10      	cmp	r3, #16
 8002dd2:	d05a      	beq.n	8002e8a <HAL_TIM_ConfigClockSource+0x15a>
 8002dd4:	e062      	b.n	8002e9c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002de6:	f000 f974 	bl	80030d2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	689b      	ldr	r3, [r3, #8]
 8002df0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002df8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68ba      	ldr	r2, [r7, #8]
 8002e00:	609a      	str	r2, [r3, #8]
      break;
 8002e02:	e04f      	b.n	8002ea4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002e14:	f000 f95d 	bl	80030d2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	689a      	ldr	r2, [r3, #8]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002e26:	609a      	str	r2, [r3, #8]
      break;
 8002e28:	e03c      	b.n	8002ea4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e36:	461a      	mov	r2, r3
 8002e38:	f000 f8d4 	bl	8002fe4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2150      	movs	r1, #80	@ 0x50
 8002e42:	4618      	mov	r0, r3
 8002e44:	f000 f92b 	bl	800309e <TIM_ITRx_SetConfig>
      break;
 8002e48:	e02c      	b.n	8002ea4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e56:	461a      	mov	r2, r3
 8002e58:	f000 f8f2 	bl	8003040 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	2160      	movs	r1, #96	@ 0x60
 8002e62:	4618      	mov	r0, r3
 8002e64:	f000 f91b 	bl	800309e <TIM_ITRx_SetConfig>
      break;
 8002e68:	e01c      	b.n	8002ea4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e76:	461a      	mov	r2, r3
 8002e78:	f000 f8b4 	bl	8002fe4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	2140      	movs	r1, #64	@ 0x40
 8002e82:	4618      	mov	r0, r3
 8002e84:	f000 f90b 	bl	800309e <TIM_ITRx_SetConfig>
      break;
 8002e88:	e00c      	b.n	8002ea4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4619      	mov	r1, r3
 8002e94:	4610      	mov	r0, r2
 8002e96:	f000 f902 	bl	800309e <TIM_ITRx_SetConfig>
      break;
 8002e9a:	e003      	b.n	8002ea4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	73fb      	strb	r3, [r7, #15]
      break;
 8002ea0:	e000      	b.n	8002ea4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002ea2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2200      	movs	r2, #0
 8002eb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3710      	adds	r7, #16
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ebe:	b480      	push	{r7}
 8002ec0:	b083      	sub	sp, #12
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ec6:	bf00      	nop
 8002ec8:	370c      	adds	r7, #12
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bc80      	pop	{r7}
 8002ece:	4770      	bx	lr

08002ed0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ed8:	bf00      	nop
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	bc80      	pop	{r7}
 8002ee0:	4770      	bx	lr

08002ee2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	b083      	sub	sp, #12
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002eea:	bf00      	nop
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bc80      	pop	{r7}
 8002ef2:	4770      	bx	lr

08002ef4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002efc:	bf00      	nop
 8002efe:	370c      	adds	r7, #12
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bc80      	pop	{r7}
 8002f04:	4770      	bx	lr
	...

08002f08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b085      	sub	sp, #20
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4a2f      	ldr	r2, [pc, #188]	@ (8002fd8 <TIM_Base_SetConfig+0xd0>)
 8002f1c:	4293      	cmp	r3, r2
 8002f1e:	d00b      	beq.n	8002f38 <TIM_Base_SetConfig+0x30>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f26:	d007      	beq.n	8002f38 <TIM_Base_SetConfig+0x30>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	4a2c      	ldr	r2, [pc, #176]	@ (8002fdc <TIM_Base_SetConfig+0xd4>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d003      	beq.n	8002f38 <TIM_Base_SetConfig+0x30>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	4a2b      	ldr	r2, [pc, #172]	@ (8002fe0 <TIM_Base_SetConfig+0xd8>)
 8002f34:	4293      	cmp	r3, r2
 8002f36:	d108      	bne.n	8002f4a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002f3e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	68fa      	ldr	r2, [r7, #12]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	4a22      	ldr	r2, [pc, #136]	@ (8002fd8 <TIM_Base_SetConfig+0xd0>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d00b      	beq.n	8002f6a <TIM_Base_SetConfig+0x62>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f58:	d007      	beq.n	8002f6a <TIM_Base_SetConfig+0x62>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	4a1f      	ldr	r2, [pc, #124]	@ (8002fdc <TIM_Base_SetConfig+0xd4>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d003      	beq.n	8002f6a <TIM_Base_SetConfig+0x62>
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	4a1e      	ldr	r2, [pc, #120]	@ (8002fe0 <TIM_Base_SetConfig+0xd8>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d108      	bne.n	8002f7c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002f70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	68db      	ldr	r3, [r3, #12]
 8002f76:	68fa      	ldr	r2, [r7, #12]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	695b      	ldr	r3, [r3, #20]
 8002f86:	4313      	orrs	r3, r2
 8002f88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	689a      	ldr	r2, [r3, #8]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	681a      	ldr	r2, [r3, #0]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	4a0d      	ldr	r2, [pc, #52]	@ (8002fd8 <TIM_Base_SetConfig+0xd0>)
 8002fa4:	4293      	cmp	r3, r2
 8002fa6:	d103      	bne.n	8002fb0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	691a      	ldr	r2, [r3, #16]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	2201      	movs	r2, #1
 8002fb4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	691b      	ldr	r3, [r3, #16]
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d005      	beq.n	8002fce <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	691b      	ldr	r3, [r3, #16]
 8002fc6:	f023 0201 	bic.w	r2, r3, #1
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	611a      	str	r2, [r3, #16]
  }
}
 8002fce:	bf00      	nop
 8002fd0:	3714      	adds	r7, #20
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	bc80      	pop	{r7}
 8002fd6:	4770      	bx	lr
 8002fd8:	40012c00 	.word	0x40012c00
 8002fdc:	40000400 	.word	0x40000400
 8002fe0:	40000800 	.word	0x40000800

08002fe4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b087      	sub	sp, #28
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	6a1b      	ldr	r3, [r3, #32]
 8002ff4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	6a1b      	ldr	r3, [r3, #32]
 8002ffa:	f023 0201 	bic.w	r2, r3, #1
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800300e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	011b      	lsls	r3, r3, #4
 8003014:	693a      	ldr	r2, [r7, #16]
 8003016:	4313      	orrs	r3, r2
 8003018:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	f023 030a 	bic.w	r3, r3, #10
 8003020:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003022:	697a      	ldr	r2, [r7, #20]
 8003024:	68bb      	ldr	r3, [r7, #8]
 8003026:	4313      	orrs	r3, r2
 8003028:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	693a      	ldr	r2, [r7, #16]
 800302e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	697a      	ldr	r2, [r7, #20]
 8003034:	621a      	str	r2, [r3, #32]
}
 8003036:	bf00      	nop
 8003038:	371c      	adds	r7, #28
 800303a:	46bd      	mov	sp, r7
 800303c:	bc80      	pop	{r7}
 800303e:	4770      	bx	lr

08003040 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003040:	b480      	push	{r7}
 8003042:	b087      	sub	sp, #28
 8003044:	af00      	add	r7, sp, #0
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	60b9      	str	r1, [r7, #8]
 800304a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6a1b      	ldr	r3, [r3, #32]
 8003050:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	6a1b      	ldr	r3, [r3, #32]
 8003056:	f023 0210 	bic.w	r2, r3, #16
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	699b      	ldr	r3, [r3, #24]
 8003062:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003064:	693b      	ldr	r3, [r7, #16]
 8003066:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800306a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	031b      	lsls	r3, r3, #12
 8003070:	693a      	ldr	r2, [r7, #16]
 8003072:	4313      	orrs	r3, r2
 8003074:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800307c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800307e:	68bb      	ldr	r3, [r7, #8]
 8003080:	011b      	lsls	r3, r3, #4
 8003082:	697a      	ldr	r2, [r7, #20]
 8003084:	4313      	orrs	r3, r2
 8003086:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	693a      	ldr	r2, [r7, #16]
 800308c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	697a      	ldr	r2, [r7, #20]
 8003092:	621a      	str	r2, [r3, #32]
}
 8003094:	bf00      	nop
 8003096:	371c      	adds	r7, #28
 8003098:	46bd      	mov	sp, r7
 800309a:	bc80      	pop	{r7}
 800309c:	4770      	bx	lr

0800309e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800309e:	b480      	push	{r7}
 80030a0:	b085      	sub	sp, #20
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
 80030a6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80030b4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80030b6:	683a      	ldr	r2, [r7, #0]
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	f043 0307 	orr.w	r3, r3, #7
 80030c0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	68fa      	ldr	r2, [r7, #12]
 80030c6:	609a      	str	r2, [r3, #8]
}
 80030c8:	bf00      	nop
 80030ca:	3714      	adds	r7, #20
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bc80      	pop	{r7}
 80030d0:	4770      	bx	lr

080030d2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80030d2:	b480      	push	{r7}
 80030d4:	b087      	sub	sp, #28
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	60f8      	str	r0, [r7, #12]
 80030da:	60b9      	str	r1, [r7, #8]
 80030dc:	607a      	str	r2, [r7, #4]
 80030de:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80030ec:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	021a      	lsls	r2, r3, #8
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	431a      	orrs	r2, r3
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	697a      	ldr	r2, [r7, #20]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	697a      	ldr	r2, [r7, #20]
 8003104:	609a      	str	r2, [r3, #8]
}
 8003106:	bf00      	nop
 8003108:	371c      	adds	r7, #28
 800310a:	46bd      	mov	sp, r7
 800310c:	bc80      	pop	{r7}
 800310e:	4770      	bx	lr

08003110 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003110:	b480      	push	{r7}
 8003112:	b085      	sub	sp, #20
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
 8003118:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003120:	2b01      	cmp	r3, #1
 8003122:	d101      	bne.n	8003128 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003124:	2302      	movs	r3, #2
 8003126:	e046      	b.n	80031b6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2201      	movs	r2, #1
 800312c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2202      	movs	r2, #2
 8003134:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800314e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	68fa      	ldr	r2, [r7, #12]
 8003156:	4313      	orrs	r3, r2
 8003158:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68fa      	ldr	r2, [r7, #12]
 8003160:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a16      	ldr	r2, [pc, #88]	@ (80031c0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d00e      	beq.n	800318a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003174:	d009      	beq.n	800318a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a12      	ldr	r2, [pc, #72]	@ (80031c4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d004      	beq.n	800318a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	4a10      	ldr	r2, [pc, #64]	@ (80031c8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003186:	4293      	cmp	r3, r2
 8003188:	d10c      	bne.n	80031a4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003190:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	68ba      	ldr	r2, [r7, #8]
 8003198:	4313      	orrs	r3, r2
 800319a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68ba      	ldr	r2, [r7, #8]
 80031a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2201      	movs	r2, #1
 80031a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2200      	movs	r2, #0
 80031b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3714      	adds	r7, #20
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bc80      	pop	{r7}
 80031be:	4770      	bx	lr
 80031c0:	40012c00 	.word	0x40012c00
 80031c4:	40000400 	.word	0x40000400
 80031c8:	40000800 	.word	0x40000800

080031cc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	bc80      	pop	{r7}
 80031dc:	4770      	bx	lr

080031de <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031de:	b480      	push	{r7}
 80031e0:	b083      	sub	sp, #12
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031e6:	bf00      	nop
 80031e8:	370c      	adds	r7, #12
 80031ea:	46bd      	mov	sp, r7
 80031ec:	bc80      	pop	{r7}
 80031ee:	4770      	bx	lr

080031f0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e042      	b.n	8003288 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b00      	cmp	r3, #0
 800320c:	d106      	bne.n	800321c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f7fd fb70 	bl	80008fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2224      	movs	r2, #36	@ 0x24
 8003220:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	68da      	ldr	r2, [r3, #12]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003232:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003234:	6878      	ldr	r0, [r7, #4]
 8003236:	f000 f971 	bl	800351c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	691a      	ldr	r2, [r3, #16]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003248:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	695a      	ldr	r2, [r3, #20]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003258:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	68da      	ldr	r2, [r3, #12]
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003268:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2200      	movs	r2, #0
 800326e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2220      	movs	r2, #32
 8003274:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2220      	movs	r2, #32
 800327c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	3708      	adds	r7, #8
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b08a      	sub	sp, #40	@ 0x28
 8003294:	af02      	add	r7, sp, #8
 8003296:	60f8      	str	r0, [r7, #12]
 8003298:	60b9      	str	r1, [r7, #8]
 800329a:	603b      	str	r3, [r7, #0]
 800329c:	4613      	mov	r3, r2
 800329e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80032a0:	2300      	movs	r3, #0
 80032a2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032aa:	b2db      	uxtb	r3, r3
 80032ac:	2b20      	cmp	r3, #32
 80032ae:	d175      	bne.n	800339c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80032b0:	68bb      	ldr	r3, [r7, #8]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d002      	beq.n	80032bc <HAL_UART_Transmit+0x2c>
 80032b6:	88fb      	ldrh	r3, [r7, #6]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d101      	bne.n	80032c0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e06e      	b.n	800339e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	2200      	movs	r2, #0
 80032c4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	2221      	movs	r2, #33	@ 0x21
 80032ca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80032ce:	f7fd fcbf 	bl	8000c50 <HAL_GetTick>
 80032d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	88fa      	ldrh	r2, [r7, #6]
 80032d8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	88fa      	ldrh	r2, [r7, #6]
 80032de:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80032e8:	d108      	bne.n	80032fc <HAL_UART_Transmit+0x6c>
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	691b      	ldr	r3, [r3, #16]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d104      	bne.n	80032fc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80032f2:	2300      	movs	r3, #0
 80032f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	61bb      	str	r3, [r7, #24]
 80032fa:	e003      	b.n	8003304 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003300:	2300      	movs	r3, #0
 8003302:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003304:	e02e      	b.n	8003364 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	9300      	str	r3, [sp, #0]
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	2200      	movs	r2, #0
 800330e:	2180      	movs	r1, #128	@ 0x80
 8003310:	68f8      	ldr	r0, [r7, #12]
 8003312:	f000 f848 	bl	80033a6 <UART_WaitOnFlagUntilTimeout>
 8003316:	4603      	mov	r3, r0
 8003318:	2b00      	cmp	r3, #0
 800331a:	d005      	beq.n	8003328 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	2220      	movs	r2, #32
 8003320:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003324:	2303      	movs	r3, #3
 8003326:	e03a      	b.n	800339e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003328:	69fb      	ldr	r3, [r7, #28]
 800332a:	2b00      	cmp	r3, #0
 800332c:	d10b      	bne.n	8003346 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800332e:	69bb      	ldr	r3, [r7, #24]
 8003330:	881b      	ldrh	r3, [r3, #0]
 8003332:	461a      	mov	r2, r3
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800333c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	3302      	adds	r3, #2
 8003342:	61bb      	str	r3, [r7, #24]
 8003344:	e007      	b.n	8003356 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003346:	69fb      	ldr	r3, [r7, #28]
 8003348:	781a      	ldrb	r2, [r3, #0]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	3301      	adds	r3, #1
 8003354:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800335a:	b29b      	uxth	r3, r3
 800335c:	3b01      	subs	r3, #1
 800335e:	b29a      	uxth	r2, r3
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003368:	b29b      	uxth	r3, r3
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1cb      	bne.n	8003306 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	9300      	str	r3, [sp, #0]
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	2200      	movs	r2, #0
 8003376:	2140      	movs	r1, #64	@ 0x40
 8003378:	68f8      	ldr	r0, [r7, #12]
 800337a:	f000 f814 	bl	80033a6 <UART_WaitOnFlagUntilTimeout>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d005      	beq.n	8003390 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	2220      	movs	r2, #32
 8003388:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800338c:	2303      	movs	r3, #3
 800338e:	e006      	b.n	800339e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2220      	movs	r2, #32
 8003394:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003398:	2300      	movs	r3, #0
 800339a:	e000      	b.n	800339e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800339c:	2302      	movs	r3, #2
  }
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3720      	adds	r7, #32
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}

080033a6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80033a6:	b580      	push	{r7, lr}
 80033a8:	b086      	sub	sp, #24
 80033aa:	af00      	add	r7, sp, #0
 80033ac:	60f8      	str	r0, [r7, #12]
 80033ae:	60b9      	str	r1, [r7, #8]
 80033b0:	603b      	str	r3, [r7, #0]
 80033b2:	4613      	mov	r3, r2
 80033b4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033b6:	e03b      	b.n	8003430 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80033b8:	6a3b      	ldr	r3, [r7, #32]
 80033ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033be:	d037      	beq.n	8003430 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80033c0:	f7fd fc46 	bl	8000c50 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	6a3a      	ldr	r2, [r7, #32]
 80033cc:	429a      	cmp	r2, r3
 80033ce:	d302      	bcc.n	80033d6 <UART_WaitOnFlagUntilTimeout+0x30>
 80033d0:	6a3b      	ldr	r3, [r7, #32]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80033d6:	2303      	movs	r3, #3
 80033d8:	e03a      	b.n	8003450 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	f003 0304 	and.w	r3, r3, #4
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	d023      	beq.n	8003430 <UART_WaitOnFlagUntilTimeout+0x8a>
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	2b80      	cmp	r3, #128	@ 0x80
 80033ec:	d020      	beq.n	8003430 <UART_WaitOnFlagUntilTimeout+0x8a>
 80033ee:	68bb      	ldr	r3, [r7, #8]
 80033f0:	2b40      	cmp	r3, #64	@ 0x40
 80033f2:	d01d      	beq.n	8003430 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0308 	and.w	r3, r3, #8
 80033fe:	2b08      	cmp	r3, #8
 8003400:	d116      	bne.n	8003430 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003402:	2300      	movs	r3, #0
 8003404:	617b      	str	r3, [r7, #20]
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	617b      	str	r3, [r7, #20]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	685b      	ldr	r3, [r3, #4]
 8003414:	617b      	str	r3, [r7, #20]
 8003416:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003418:	68f8      	ldr	r0, [r7, #12]
 800341a:	f000 f81d 	bl	8003458 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2208      	movs	r2, #8
 8003422:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2200      	movs	r2, #0
 8003428:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800342c:	2301      	movs	r3, #1
 800342e:	e00f      	b.n	8003450 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	4013      	ands	r3, r2
 800343a:	68ba      	ldr	r2, [r7, #8]
 800343c:	429a      	cmp	r2, r3
 800343e:	bf0c      	ite	eq
 8003440:	2301      	moveq	r3, #1
 8003442:	2300      	movne	r3, #0
 8003444:	b2db      	uxtb	r3, r3
 8003446:	461a      	mov	r2, r3
 8003448:	79fb      	ldrb	r3, [r7, #7]
 800344a:	429a      	cmp	r2, r3
 800344c:	d0b4      	beq.n	80033b8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800344e:	2300      	movs	r3, #0
}
 8003450:	4618      	mov	r0, r3
 8003452:	3718      	adds	r7, #24
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}

08003458 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003458:	b480      	push	{r7}
 800345a:	b095      	sub	sp, #84	@ 0x54
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	330c      	adds	r3, #12
 8003466:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003468:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800346a:	e853 3f00 	ldrex	r3, [r3]
 800346e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003470:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003472:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003476:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	330c      	adds	r3, #12
 800347e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003480:	643a      	str	r2, [r7, #64]	@ 0x40
 8003482:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003484:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003486:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003488:	e841 2300 	strex	r3, r2, [r1]
 800348c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800348e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003490:	2b00      	cmp	r3, #0
 8003492:	d1e5      	bne.n	8003460 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	3314      	adds	r3, #20
 800349a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800349c:	6a3b      	ldr	r3, [r7, #32]
 800349e:	e853 3f00 	ldrex	r3, [r3]
 80034a2:	61fb      	str	r3, [r7, #28]
   return(result);
 80034a4:	69fb      	ldr	r3, [r7, #28]
 80034a6:	f023 0301 	bic.w	r3, r3, #1
 80034aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	3314      	adds	r3, #20
 80034b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80034b4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80034b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034b8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80034ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034bc:	e841 2300 	strex	r3, r2, [r1]
 80034c0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80034c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d1e5      	bne.n	8003494 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d119      	bne.n	8003504 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	330c      	adds	r3, #12
 80034d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	e853 3f00 	ldrex	r3, [r3]
 80034de:	60bb      	str	r3, [r7, #8]
   return(result);
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	f023 0310 	bic.w	r3, r3, #16
 80034e6:	647b      	str	r3, [r7, #68]	@ 0x44
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	330c      	adds	r3, #12
 80034ee:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80034f0:	61ba      	str	r2, [r7, #24]
 80034f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f4:	6979      	ldr	r1, [r7, #20]
 80034f6:	69ba      	ldr	r2, [r7, #24]
 80034f8:	e841 2300 	strex	r3, r2, [r1]
 80034fc:	613b      	str	r3, [r7, #16]
   return(result);
 80034fe:	693b      	ldr	r3, [r7, #16]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d1e5      	bne.n	80034d0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2220      	movs	r2, #32
 8003508:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2200      	movs	r2, #0
 8003510:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003512:	bf00      	nop
 8003514:	3754      	adds	r7, #84	@ 0x54
 8003516:	46bd      	mov	sp, r7
 8003518:	bc80      	pop	{r7}
 800351a:	4770      	bx	lr

0800351c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b084      	sub	sp, #16
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	691b      	ldr	r3, [r3, #16]
 800352a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	68da      	ldr	r2, [r3, #12]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	430a      	orrs	r2, r1
 8003538:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	689a      	ldr	r2, [r3, #8]
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	431a      	orrs	r2, r3
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	695b      	ldr	r3, [r3, #20]
 8003548:	4313      	orrs	r3, r2
 800354a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	68db      	ldr	r3, [r3, #12]
 8003552:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8003556:	f023 030c 	bic.w	r3, r3, #12
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	6812      	ldr	r2, [r2, #0]
 800355e:	68b9      	ldr	r1, [r7, #8]
 8003560:	430b      	orrs	r3, r1
 8003562:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	699a      	ldr	r2, [r3, #24]
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	430a      	orrs	r2, r1
 8003578:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a2c      	ldr	r2, [pc, #176]	@ (8003630 <UART_SetConfig+0x114>)
 8003580:	4293      	cmp	r3, r2
 8003582:	d103      	bne.n	800358c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003584:	f7ff f8a4 	bl	80026d0 <HAL_RCC_GetPCLK2Freq>
 8003588:	60f8      	str	r0, [r7, #12]
 800358a:	e002      	b.n	8003592 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800358c:	f7ff f88c 	bl	80026a8 <HAL_RCC_GetPCLK1Freq>
 8003590:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003592:	68fa      	ldr	r2, [r7, #12]
 8003594:	4613      	mov	r3, r2
 8003596:	009b      	lsls	r3, r3, #2
 8003598:	4413      	add	r3, r2
 800359a:	009a      	lsls	r2, r3, #2
 800359c:	441a      	add	r2, r3
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	685b      	ldr	r3, [r3, #4]
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a8:	4a22      	ldr	r2, [pc, #136]	@ (8003634 <UART_SetConfig+0x118>)
 80035aa:	fba2 2303 	umull	r2, r3, r2, r3
 80035ae:	095b      	lsrs	r3, r3, #5
 80035b0:	0119      	lsls	r1, r3, #4
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	4613      	mov	r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	4413      	add	r3, r2
 80035ba:	009a      	lsls	r2, r3, #2
 80035bc:	441a      	add	r2, r3
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	fbb2 f2f3 	udiv	r2, r2, r3
 80035c8:	4b1a      	ldr	r3, [pc, #104]	@ (8003634 <UART_SetConfig+0x118>)
 80035ca:	fba3 0302 	umull	r0, r3, r3, r2
 80035ce:	095b      	lsrs	r3, r3, #5
 80035d0:	2064      	movs	r0, #100	@ 0x64
 80035d2:	fb00 f303 	mul.w	r3, r0, r3
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	011b      	lsls	r3, r3, #4
 80035da:	3332      	adds	r3, #50	@ 0x32
 80035dc:	4a15      	ldr	r2, [pc, #84]	@ (8003634 <UART_SetConfig+0x118>)
 80035de:	fba2 2303 	umull	r2, r3, r2, r3
 80035e2:	095b      	lsrs	r3, r3, #5
 80035e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80035e8:	4419      	add	r1, r3
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	4613      	mov	r3, r2
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	4413      	add	r3, r2
 80035f2:	009a      	lsls	r2, r3, #2
 80035f4:	441a      	add	r2, r3
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	685b      	ldr	r3, [r3, #4]
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	fbb2 f2f3 	udiv	r2, r2, r3
 8003600:	4b0c      	ldr	r3, [pc, #48]	@ (8003634 <UART_SetConfig+0x118>)
 8003602:	fba3 0302 	umull	r0, r3, r3, r2
 8003606:	095b      	lsrs	r3, r3, #5
 8003608:	2064      	movs	r0, #100	@ 0x64
 800360a:	fb00 f303 	mul.w	r3, r0, r3
 800360e:	1ad3      	subs	r3, r2, r3
 8003610:	011b      	lsls	r3, r3, #4
 8003612:	3332      	adds	r3, #50	@ 0x32
 8003614:	4a07      	ldr	r2, [pc, #28]	@ (8003634 <UART_SetConfig+0x118>)
 8003616:	fba2 2303 	umull	r2, r3, r2, r3
 800361a:	095b      	lsrs	r3, r3, #5
 800361c:	f003 020f 	and.w	r2, r3, #15
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	440a      	add	r2, r1
 8003626:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003628:	bf00      	nop
 800362a:	3710      	adds	r7, #16
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}
 8003630:	40013800 	.word	0x40013800
 8003634:	51eb851f 	.word	0x51eb851f

08003638 <std>:
 8003638:	2300      	movs	r3, #0
 800363a:	b510      	push	{r4, lr}
 800363c:	4604      	mov	r4, r0
 800363e:	e9c0 3300 	strd	r3, r3, [r0]
 8003642:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003646:	6083      	str	r3, [r0, #8]
 8003648:	8181      	strh	r1, [r0, #12]
 800364a:	6643      	str	r3, [r0, #100]	@ 0x64
 800364c:	81c2      	strh	r2, [r0, #14]
 800364e:	6183      	str	r3, [r0, #24]
 8003650:	4619      	mov	r1, r3
 8003652:	2208      	movs	r2, #8
 8003654:	305c      	adds	r0, #92	@ 0x5c
 8003656:	f000 f9f9 	bl	8003a4c <memset>
 800365a:	4b0d      	ldr	r3, [pc, #52]	@ (8003690 <std+0x58>)
 800365c:	6224      	str	r4, [r4, #32]
 800365e:	6263      	str	r3, [r4, #36]	@ 0x24
 8003660:	4b0c      	ldr	r3, [pc, #48]	@ (8003694 <std+0x5c>)
 8003662:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003664:	4b0c      	ldr	r3, [pc, #48]	@ (8003698 <std+0x60>)
 8003666:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003668:	4b0c      	ldr	r3, [pc, #48]	@ (800369c <std+0x64>)
 800366a:	6323      	str	r3, [r4, #48]	@ 0x30
 800366c:	4b0c      	ldr	r3, [pc, #48]	@ (80036a0 <std+0x68>)
 800366e:	429c      	cmp	r4, r3
 8003670:	d006      	beq.n	8003680 <std+0x48>
 8003672:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003676:	4294      	cmp	r4, r2
 8003678:	d002      	beq.n	8003680 <std+0x48>
 800367a:	33d0      	adds	r3, #208	@ 0xd0
 800367c:	429c      	cmp	r4, r3
 800367e:	d105      	bne.n	800368c <std+0x54>
 8003680:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003684:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003688:	f000 ba58 	b.w	8003b3c <__retarget_lock_init_recursive>
 800368c:	bd10      	pop	{r4, pc}
 800368e:	bf00      	nop
 8003690:	0800389d 	.word	0x0800389d
 8003694:	080038bf 	.word	0x080038bf
 8003698:	080038f7 	.word	0x080038f7
 800369c:	0800391b 	.word	0x0800391b
 80036a0:	200001e4 	.word	0x200001e4

080036a4 <stdio_exit_handler>:
 80036a4:	4a02      	ldr	r2, [pc, #8]	@ (80036b0 <stdio_exit_handler+0xc>)
 80036a6:	4903      	ldr	r1, [pc, #12]	@ (80036b4 <stdio_exit_handler+0x10>)
 80036a8:	4803      	ldr	r0, [pc, #12]	@ (80036b8 <stdio_exit_handler+0x14>)
 80036aa:	f000 b869 	b.w	8003780 <_fwalk_sglue>
 80036ae:	bf00      	nop
 80036b0:	2000000c 	.word	0x2000000c
 80036b4:	080043d1 	.word	0x080043d1
 80036b8:	2000001c 	.word	0x2000001c

080036bc <cleanup_stdio>:
 80036bc:	6841      	ldr	r1, [r0, #4]
 80036be:	4b0c      	ldr	r3, [pc, #48]	@ (80036f0 <cleanup_stdio+0x34>)
 80036c0:	b510      	push	{r4, lr}
 80036c2:	4299      	cmp	r1, r3
 80036c4:	4604      	mov	r4, r0
 80036c6:	d001      	beq.n	80036cc <cleanup_stdio+0x10>
 80036c8:	f000 fe82 	bl	80043d0 <_fflush_r>
 80036cc:	68a1      	ldr	r1, [r4, #8]
 80036ce:	4b09      	ldr	r3, [pc, #36]	@ (80036f4 <cleanup_stdio+0x38>)
 80036d0:	4299      	cmp	r1, r3
 80036d2:	d002      	beq.n	80036da <cleanup_stdio+0x1e>
 80036d4:	4620      	mov	r0, r4
 80036d6:	f000 fe7b 	bl	80043d0 <_fflush_r>
 80036da:	68e1      	ldr	r1, [r4, #12]
 80036dc:	4b06      	ldr	r3, [pc, #24]	@ (80036f8 <cleanup_stdio+0x3c>)
 80036de:	4299      	cmp	r1, r3
 80036e0:	d004      	beq.n	80036ec <cleanup_stdio+0x30>
 80036e2:	4620      	mov	r0, r4
 80036e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80036e8:	f000 be72 	b.w	80043d0 <_fflush_r>
 80036ec:	bd10      	pop	{r4, pc}
 80036ee:	bf00      	nop
 80036f0:	200001e4 	.word	0x200001e4
 80036f4:	2000024c 	.word	0x2000024c
 80036f8:	200002b4 	.word	0x200002b4

080036fc <global_stdio_init.part.0>:
 80036fc:	b510      	push	{r4, lr}
 80036fe:	4b0b      	ldr	r3, [pc, #44]	@ (800372c <global_stdio_init.part.0+0x30>)
 8003700:	4c0b      	ldr	r4, [pc, #44]	@ (8003730 <global_stdio_init.part.0+0x34>)
 8003702:	4a0c      	ldr	r2, [pc, #48]	@ (8003734 <global_stdio_init.part.0+0x38>)
 8003704:	4620      	mov	r0, r4
 8003706:	601a      	str	r2, [r3, #0]
 8003708:	2104      	movs	r1, #4
 800370a:	2200      	movs	r2, #0
 800370c:	f7ff ff94 	bl	8003638 <std>
 8003710:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003714:	2201      	movs	r2, #1
 8003716:	2109      	movs	r1, #9
 8003718:	f7ff ff8e 	bl	8003638 <std>
 800371c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003720:	2202      	movs	r2, #2
 8003722:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003726:	2112      	movs	r1, #18
 8003728:	f7ff bf86 	b.w	8003638 <std>
 800372c:	2000031c 	.word	0x2000031c
 8003730:	200001e4 	.word	0x200001e4
 8003734:	080036a5 	.word	0x080036a5

08003738 <__sfp_lock_acquire>:
 8003738:	4801      	ldr	r0, [pc, #4]	@ (8003740 <__sfp_lock_acquire+0x8>)
 800373a:	f000 ba00 	b.w	8003b3e <__retarget_lock_acquire_recursive>
 800373e:	bf00      	nop
 8003740:	20000325 	.word	0x20000325

08003744 <__sfp_lock_release>:
 8003744:	4801      	ldr	r0, [pc, #4]	@ (800374c <__sfp_lock_release+0x8>)
 8003746:	f000 b9fb 	b.w	8003b40 <__retarget_lock_release_recursive>
 800374a:	bf00      	nop
 800374c:	20000325 	.word	0x20000325

08003750 <__sinit>:
 8003750:	b510      	push	{r4, lr}
 8003752:	4604      	mov	r4, r0
 8003754:	f7ff fff0 	bl	8003738 <__sfp_lock_acquire>
 8003758:	6a23      	ldr	r3, [r4, #32]
 800375a:	b11b      	cbz	r3, 8003764 <__sinit+0x14>
 800375c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003760:	f7ff bff0 	b.w	8003744 <__sfp_lock_release>
 8003764:	4b04      	ldr	r3, [pc, #16]	@ (8003778 <__sinit+0x28>)
 8003766:	6223      	str	r3, [r4, #32]
 8003768:	4b04      	ldr	r3, [pc, #16]	@ (800377c <__sinit+0x2c>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d1f5      	bne.n	800375c <__sinit+0xc>
 8003770:	f7ff ffc4 	bl	80036fc <global_stdio_init.part.0>
 8003774:	e7f2      	b.n	800375c <__sinit+0xc>
 8003776:	bf00      	nop
 8003778:	080036bd 	.word	0x080036bd
 800377c:	2000031c 	.word	0x2000031c

08003780 <_fwalk_sglue>:
 8003780:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003784:	4607      	mov	r7, r0
 8003786:	4688      	mov	r8, r1
 8003788:	4614      	mov	r4, r2
 800378a:	2600      	movs	r6, #0
 800378c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003790:	f1b9 0901 	subs.w	r9, r9, #1
 8003794:	d505      	bpl.n	80037a2 <_fwalk_sglue+0x22>
 8003796:	6824      	ldr	r4, [r4, #0]
 8003798:	2c00      	cmp	r4, #0
 800379a:	d1f7      	bne.n	800378c <_fwalk_sglue+0xc>
 800379c:	4630      	mov	r0, r6
 800379e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80037a2:	89ab      	ldrh	r3, [r5, #12]
 80037a4:	2b01      	cmp	r3, #1
 80037a6:	d907      	bls.n	80037b8 <_fwalk_sglue+0x38>
 80037a8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80037ac:	3301      	adds	r3, #1
 80037ae:	d003      	beq.n	80037b8 <_fwalk_sglue+0x38>
 80037b0:	4629      	mov	r1, r5
 80037b2:	4638      	mov	r0, r7
 80037b4:	47c0      	blx	r8
 80037b6:	4306      	orrs	r6, r0
 80037b8:	3568      	adds	r5, #104	@ 0x68
 80037ba:	e7e9      	b.n	8003790 <_fwalk_sglue+0x10>

080037bc <iprintf>:
 80037bc:	b40f      	push	{r0, r1, r2, r3}
 80037be:	b507      	push	{r0, r1, r2, lr}
 80037c0:	4906      	ldr	r1, [pc, #24]	@ (80037dc <iprintf+0x20>)
 80037c2:	ab04      	add	r3, sp, #16
 80037c4:	6808      	ldr	r0, [r1, #0]
 80037c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80037ca:	6881      	ldr	r1, [r0, #8]
 80037cc:	9301      	str	r3, [sp, #4]
 80037ce:	f000 fad7 	bl	8003d80 <_vfiprintf_r>
 80037d2:	b003      	add	sp, #12
 80037d4:	f85d eb04 	ldr.w	lr, [sp], #4
 80037d8:	b004      	add	sp, #16
 80037da:	4770      	bx	lr
 80037dc:	20000018 	.word	0x20000018

080037e0 <_puts_r>:
 80037e0:	6a03      	ldr	r3, [r0, #32]
 80037e2:	b570      	push	{r4, r5, r6, lr}
 80037e4:	4605      	mov	r5, r0
 80037e6:	460e      	mov	r6, r1
 80037e8:	6884      	ldr	r4, [r0, #8]
 80037ea:	b90b      	cbnz	r3, 80037f0 <_puts_r+0x10>
 80037ec:	f7ff ffb0 	bl	8003750 <__sinit>
 80037f0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80037f2:	07db      	lsls	r3, r3, #31
 80037f4:	d405      	bmi.n	8003802 <_puts_r+0x22>
 80037f6:	89a3      	ldrh	r3, [r4, #12]
 80037f8:	0598      	lsls	r0, r3, #22
 80037fa:	d402      	bmi.n	8003802 <_puts_r+0x22>
 80037fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80037fe:	f000 f99e 	bl	8003b3e <__retarget_lock_acquire_recursive>
 8003802:	89a3      	ldrh	r3, [r4, #12]
 8003804:	0719      	lsls	r1, r3, #28
 8003806:	d502      	bpl.n	800380e <_puts_r+0x2e>
 8003808:	6923      	ldr	r3, [r4, #16]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d135      	bne.n	800387a <_puts_r+0x9a>
 800380e:	4621      	mov	r1, r4
 8003810:	4628      	mov	r0, r5
 8003812:	f000 f8c5 	bl	80039a0 <__swsetup_r>
 8003816:	b380      	cbz	r0, 800387a <_puts_r+0x9a>
 8003818:	f04f 35ff 	mov.w	r5, #4294967295
 800381c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800381e:	07da      	lsls	r2, r3, #31
 8003820:	d405      	bmi.n	800382e <_puts_r+0x4e>
 8003822:	89a3      	ldrh	r3, [r4, #12]
 8003824:	059b      	lsls	r3, r3, #22
 8003826:	d402      	bmi.n	800382e <_puts_r+0x4e>
 8003828:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800382a:	f000 f989 	bl	8003b40 <__retarget_lock_release_recursive>
 800382e:	4628      	mov	r0, r5
 8003830:	bd70      	pop	{r4, r5, r6, pc}
 8003832:	2b00      	cmp	r3, #0
 8003834:	da04      	bge.n	8003840 <_puts_r+0x60>
 8003836:	69a2      	ldr	r2, [r4, #24]
 8003838:	429a      	cmp	r2, r3
 800383a:	dc17      	bgt.n	800386c <_puts_r+0x8c>
 800383c:	290a      	cmp	r1, #10
 800383e:	d015      	beq.n	800386c <_puts_r+0x8c>
 8003840:	6823      	ldr	r3, [r4, #0]
 8003842:	1c5a      	adds	r2, r3, #1
 8003844:	6022      	str	r2, [r4, #0]
 8003846:	7019      	strb	r1, [r3, #0]
 8003848:	68a3      	ldr	r3, [r4, #8]
 800384a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800384e:	3b01      	subs	r3, #1
 8003850:	60a3      	str	r3, [r4, #8]
 8003852:	2900      	cmp	r1, #0
 8003854:	d1ed      	bne.n	8003832 <_puts_r+0x52>
 8003856:	2b00      	cmp	r3, #0
 8003858:	da11      	bge.n	800387e <_puts_r+0x9e>
 800385a:	4622      	mov	r2, r4
 800385c:	210a      	movs	r1, #10
 800385e:	4628      	mov	r0, r5
 8003860:	f000 f85f 	bl	8003922 <__swbuf_r>
 8003864:	3001      	adds	r0, #1
 8003866:	d0d7      	beq.n	8003818 <_puts_r+0x38>
 8003868:	250a      	movs	r5, #10
 800386a:	e7d7      	b.n	800381c <_puts_r+0x3c>
 800386c:	4622      	mov	r2, r4
 800386e:	4628      	mov	r0, r5
 8003870:	f000 f857 	bl	8003922 <__swbuf_r>
 8003874:	3001      	adds	r0, #1
 8003876:	d1e7      	bne.n	8003848 <_puts_r+0x68>
 8003878:	e7ce      	b.n	8003818 <_puts_r+0x38>
 800387a:	3e01      	subs	r6, #1
 800387c:	e7e4      	b.n	8003848 <_puts_r+0x68>
 800387e:	6823      	ldr	r3, [r4, #0]
 8003880:	1c5a      	adds	r2, r3, #1
 8003882:	6022      	str	r2, [r4, #0]
 8003884:	220a      	movs	r2, #10
 8003886:	701a      	strb	r2, [r3, #0]
 8003888:	e7ee      	b.n	8003868 <_puts_r+0x88>
	...

0800388c <puts>:
 800388c:	4b02      	ldr	r3, [pc, #8]	@ (8003898 <puts+0xc>)
 800388e:	4601      	mov	r1, r0
 8003890:	6818      	ldr	r0, [r3, #0]
 8003892:	f7ff bfa5 	b.w	80037e0 <_puts_r>
 8003896:	bf00      	nop
 8003898:	20000018 	.word	0x20000018

0800389c <__sread>:
 800389c:	b510      	push	{r4, lr}
 800389e:	460c      	mov	r4, r1
 80038a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038a4:	f000 f8fc 	bl	8003aa0 <_read_r>
 80038a8:	2800      	cmp	r0, #0
 80038aa:	bfab      	itete	ge
 80038ac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80038ae:	89a3      	ldrhlt	r3, [r4, #12]
 80038b0:	181b      	addge	r3, r3, r0
 80038b2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80038b6:	bfac      	ite	ge
 80038b8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80038ba:	81a3      	strhlt	r3, [r4, #12]
 80038bc:	bd10      	pop	{r4, pc}

080038be <__swrite>:
 80038be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038c2:	461f      	mov	r7, r3
 80038c4:	898b      	ldrh	r3, [r1, #12]
 80038c6:	4605      	mov	r5, r0
 80038c8:	05db      	lsls	r3, r3, #23
 80038ca:	460c      	mov	r4, r1
 80038cc:	4616      	mov	r6, r2
 80038ce:	d505      	bpl.n	80038dc <__swrite+0x1e>
 80038d0:	2302      	movs	r3, #2
 80038d2:	2200      	movs	r2, #0
 80038d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038d8:	f000 f8d0 	bl	8003a7c <_lseek_r>
 80038dc:	89a3      	ldrh	r3, [r4, #12]
 80038de:	4632      	mov	r2, r6
 80038e0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80038e4:	81a3      	strh	r3, [r4, #12]
 80038e6:	4628      	mov	r0, r5
 80038e8:	463b      	mov	r3, r7
 80038ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80038ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80038f2:	f000 b8e7 	b.w	8003ac4 <_write_r>

080038f6 <__sseek>:
 80038f6:	b510      	push	{r4, lr}
 80038f8:	460c      	mov	r4, r1
 80038fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038fe:	f000 f8bd 	bl	8003a7c <_lseek_r>
 8003902:	1c43      	adds	r3, r0, #1
 8003904:	89a3      	ldrh	r3, [r4, #12]
 8003906:	bf15      	itete	ne
 8003908:	6560      	strne	r0, [r4, #84]	@ 0x54
 800390a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800390e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003912:	81a3      	strheq	r3, [r4, #12]
 8003914:	bf18      	it	ne
 8003916:	81a3      	strhne	r3, [r4, #12]
 8003918:	bd10      	pop	{r4, pc}

0800391a <__sclose>:
 800391a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800391e:	f000 b89d 	b.w	8003a5c <_close_r>

08003922 <__swbuf_r>:
 8003922:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003924:	460e      	mov	r6, r1
 8003926:	4614      	mov	r4, r2
 8003928:	4605      	mov	r5, r0
 800392a:	b118      	cbz	r0, 8003934 <__swbuf_r+0x12>
 800392c:	6a03      	ldr	r3, [r0, #32]
 800392e:	b90b      	cbnz	r3, 8003934 <__swbuf_r+0x12>
 8003930:	f7ff ff0e 	bl	8003750 <__sinit>
 8003934:	69a3      	ldr	r3, [r4, #24]
 8003936:	60a3      	str	r3, [r4, #8]
 8003938:	89a3      	ldrh	r3, [r4, #12]
 800393a:	071a      	lsls	r2, r3, #28
 800393c:	d501      	bpl.n	8003942 <__swbuf_r+0x20>
 800393e:	6923      	ldr	r3, [r4, #16]
 8003940:	b943      	cbnz	r3, 8003954 <__swbuf_r+0x32>
 8003942:	4621      	mov	r1, r4
 8003944:	4628      	mov	r0, r5
 8003946:	f000 f82b 	bl	80039a0 <__swsetup_r>
 800394a:	b118      	cbz	r0, 8003954 <__swbuf_r+0x32>
 800394c:	f04f 37ff 	mov.w	r7, #4294967295
 8003950:	4638      	mov	r0, r7
 8003952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003954:	6823      	ldr	r3, [r4, #0]
 8003956:	6922      	ldr	r2, [r4, #16]
 8003958:	b2f6      	uxtb	r6, r6
 800395a:	1a98      	subs	r0, r3, r2
 800395c:	6963      	ldr	r3, [r4, #20]
 800395e:	4637      	mov	r7, r6
 8003960:	4283      	cmp	r3, r0
 8003962:	dc05      	bgt.n	8003970 <__swbuf_r+0x4e>
 8003964:	4621      	mov	r1, r4
 8003966:	4628      	mov	r0, r5
 8003968:	f000 fd32 	bl	80043d0 <_fflush_r>
 800396c:	2800      	cmp	r0, #0
 800396e:	d1ed      	bne.n	800394c <__swbuf_r+0x2a>
 8003970:	68a3      	ldr	r3, [r4, #8]
 8003972:	3b01      	subs	r3, #1
 8003974:	60a3      	str	r3, [r4, #8]
 8003976:	6823      	ldr	r3, [r4, #0]
 8003978:	1c5a      	adds	r2, r3, #1
 800397a:	6022      	str	r2, [r4, #0]
 800397c:	701e      	strb	r6, [r3, #0]
 800397e:	6962      	ldr	r2, [r4, #20]
 8003980:	1c43      	adds	r3, r0, #1
 8003982:	429a      	cmp	r2, r3
 8003984:	d004      	beq.n	8003990 <__swbuf_r+0x6e>
 8003986:	89a3      	ldrh	r3, [r4, #12]
 8003988:	07db      	lsls	r3, r3, #31
 800398a:	d5e1      	bpl.n	8003950 <__swbuf_r+0x2e>
 800398c:	2e0a      	cmp	r6, #10
 800398e:	d1df      	bne.n	8003950 <__swbuf_r+0x2e>
 8003990:	4621      	mov	r1, r4
 8003992:	4628      	mov	r0, r5
 8003994:	f000 fd1c 	bl	80043d0 <_fflush_r>
 8003998:	2800      	cmp	r0, #0
 800399a:	d0d9      	beq.n	8003950 <__swbuf_r+0x2e>
 800399c:	e7d6      	b.n	800394c <__swbuf_r+0x2a>
	...

080039a0 <__swsetup_r>:
 80039a0:	b538      	push	{r3, r4, r5, lr}
 80039a2:	4b29      	ldr	r3, [pc, #164]	@ (8003a48 <__swsetup_r+0xa8>)
 80039a4:	4605      	mov	r5, r0
 80039a6:	6818      	ldr	r0, [r3, #0]
 80039a8:	460c      	mov	r4, r1
 80039aa:	b118      	cbz	r0, 80039b4 <__swsetup_r+0x14>
 80039ac:	6a03      	ldr	r3, [r0, #32]
 80039ae:	b90b      	cbnz	r3, 80039b4 <__swsetup_r+0x14>
 80039b0:	f7ff fece 	bl	8003750 <__sinit>
 80039b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039b8:	0719      	lsls	r1, r3, #28
 80039ba:	d422      	bmi.n	8003a02 <__swsetup_r+0x62>
 80039bc:	06da      	lsls	r2, r3, #27
 80039be:	d407      	bmi.n	80039d0 <__swsetup_r+0x30>
 80039c0:	2209      	movs	r2, #9
 80039c2:	602a      	str	r2, [r5, #0]
 80039c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80039c8:	f04f 30ff 	mov.w	r0, #4294967295
 80039cc:	81a3      	strh	r3, [r4, #12]
 80039ce:	e033      	b.n	8003a38 <__swsetup_r+0x98>
 80039d0:	0758      	lsls	r0, r3, #29
 80039d2:	d512      	bpl.n	80039fa <__swsetup_r+0x5a>
 80039d4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80039d6:	b141      	cbz	r1, 80039ea <__swsetup_r+0x4a>
 80039d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80039dc:	4299      	cmp	r1, r3
 80039de:	d002      	beq.n	80039e6 <__swsetup_r+0x46>
 80039e0:	4628      	mov	r0, r5
 80039e2:	f000 f8af 	bl	8003b44 <_free_r>
 80039e6:	2300      	movs	r3, #0
 80039e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80039ea:	89a3      	ldrh	r3, [r4, #12]
 80039ec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80039f0:	81a3      	strh	r3, [r4, #12]
 80039f2:	2300      	movs	r3, #0
 80039f4:	6063      	str	r3, [r4, #4]
 80039f6:	6923      	ldr	r3, [r4, #16]
 80039f8:	6023      	str	r3, [r4, #0]
 80039fa:	89a3      	ldrh	r3, [r4, #12]
 80039fc:	f043 0308 	orr.w	r3, r3, #8
 8003a00:	81a3      	strh	r3, [r4, #12]
 8003a02:	6923      	ldr	r3, [r4, #16]
 8003a04:	b94b      	cbnz	r3, 8003a1a <__swsetup_r+0x7a>
 8003a06:	89a3      	ldrh	r3, [r4, #12]
 8003a08:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003a0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a10:	d003      	beq.n	8003a1a <__swsetup_r+0x7a>
 8003a12:	4621      	mov	r1, r4
 8003a14:	4628      	mov	r0, r5
 8003a16:	f000 fd28 	bl	800446a <__smakebuf_r>
 8003a1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a1e:	f013 0201 	ands.w	r2, r3, #1
 8003a22:	d00a      	beq.n	8003a3a <__swsetup_r+0x9a>
 8003a24:	2200      	movs	r2, #0
 8003a26:	60a2      	str	r2, [r4, #8]
 8003a28:	6962      	ldr	r2, [r4, #20]
 8003a2a:	4252      	negs	r2, r2
 8003a2c:	61a2      	str	r2, [r4, #24]
 8003a2e:	6922      	ldr	r2, [r4, #16]
 8003a30:	b942      	cbnz	r2, 8003a44 <__swsetup_r+0xa4>
 8003a32:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003a36:	d1c5      	bne.n	80039c4 <__swsetup_r+0x24>
 8003a38:	bd38      	pop	{r3, r4, r5, pc}
 8003a3a:	0799      	lsls	r1, r3, #30
 8003a3c:	bf58      	it	pl
 8003a3e:	6962      	ldrpl	r2, [r4, #20]
 8003a40:	60a2      	str	r2, [r4, #8]
 8003a42:	e7f4      	b.n	8003a2e <__swsetup_r+0x8e>
 8003a44:	2000      	movs	r0, #0
 8003a46:	e7f7      	b.n	8003a38 <__swsetup_r+0x98>
 8003a48:	20000018 	.word	0x20000018

08003a4c <memset>:
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	4402      	add	r2, r0
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d100      	bne.n	8003a56 <memset+0xa>
 8003a54:	4770      	bx	lr
 8003a56:	f803 1b01 	strb.w	r1, [r3], #1
 8003a5a:	e7f9      	b.n	8003a50 <memset+0x4>

08003a5c <_close_r>:
 8003a5c:	b538      	push	{r3, r4, r5, lr}
 8003a5e:	2300      	movs	r3, #0
 8003a60:	4d05      	ldr	r5, [pc, #20]	@ (8003a78 <_close_r+0x1c>)
 8003a62:	4604      	mov	r4, r0
 8003a64:	4608      	mov	r0, r1
 8003a66:	602b      	str	r3, [r5, #0]
 8003a68:	f7fd f807 	bl	8000a7a <_close>
 8003a6c:	1c43      	adds	r3, r0, #1
 8003a6e:	d102      	bne.n	8003a76 <_close_r+0x1a>
 8003a70:	682b      	ldr	r3, [r5, #0]
 8003a72:	b103      	cbz	r3, 8003a76 <_close_r+0x1a>
 8003a74:	6023      	str	r3, [r4, #0]
 8003a76:	bd38      	pop	{r3, r4, r5, pc}
 8003a78:	20000320 	.word	0x20000320

08003a7c <_lseek_r>:
 8003a7c:	b538      	push	{r3, r4, r5, lr}
 8003a7e:	4604      	mov	r4, r0
 8003a80:	4608      	mov	r0, r1
 8003a82:	4611      	mov	r1, r2
 8003a84:	2200      	movs	r2, #0
 8003a86:	4d05      	ldr	r5, [pc, #20]	@ (8003a9c <_lseek_r+0x20>)
 8003a88:	602a      	str	r2, [r5, #0]
 8003a8a:	461a      	mov	r2, r3
 8003a8c:	f7fd f819 	bl	8000ac2 <_lseek>
 8003a90:	1c43      	adds	r3, r0, #1
 8003a92:	d102      	bne.n	8003a9a <_lseek_r+0x1e>
 8003a94:	682b      	ldr	r3, [r5, #0]
 8003a96:	b103      	cbz	r3, 8003a9a <_lseek_r+0x1e>
 8003a98:	6023      	str	r3, [r4, #0]
 8003a9a:	bd38      	pop	{r3, r4, r5, pc}
 8003a9c:	20000320 	.word	0x20000320

08003aa0 <_read_r>:
 8003aa0:	b538      	push	{r3, r4, r5, lr}
 8003aa2:	4604      	mov	r4, r0
 8003aa4:	4608      	mov	r0, r1
 8003aa6:	4611      	mov	r1, r2
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	4d05      	ldr	r5, [pc, #20]	@ (8003ac0 <_read_r+0x20>)
 8003aac:	602a      	str	r2, [r5, #0]
 8003aae:	461a      	mov	r2, r3
 8003ab0:	f7fc ffaa 	bl	8000a08 <_read>
 8003ab4:	1c43      	adds	r3, r0, #1
 8003ab6:	d102      	bne.n	8003abe <_read_r+0x1e>
 8003ab8:	682b      	ldr	r3, [r5, #0]
 8003aba:	b103      	cbz	r3, 8003abe <_read_r+0x1e>
 8003abc:	6023      	str	r3, [r4, #0]
 8003abe:	bd38      	pop	{r3, r4, r5, pc}
 8003ac0:	20000320 	.word	0x20000320

08003ac4 <_write_r>:
 8003ac4:	b538      	push	{r3, r4, r5, lr}
 8003ac6:	4604      	mov	r4, r0
 8003ac8:	4608      	mov	r0, r1
 8003aca:	4611      	mov	r1, r2
 8003acc:	2200      	movs	r2, #0
 8003ace:	4d05      	ldr	r5, [pc, #20]	@ (8003ae4 <_write_r+0x20>)
 8003ad0:	602a      	str	r2, [r5, #0]
 8003ad2:	461a      	mov	r2, r3
 8003ad4:	f7fc ffb5 	bl	8000a42 <_write>
 8003ad8:	1c43      	adds	r3, r0, #1
 8003ada:	d102      	bne.n	8003ae2 <_write_r+0x1e>
 8003adc:	682b      	ldr	r3, [r5, #0]
 8003ade:	b103      	cbz	r3, 8003ae2 <_write_r+0x1e>
 8003ae0:	6023      	str	r3, [r4, #0]
 8003ae2:	bd38      	pop	{r3, r4, r5, pc}
 8003ae4:	20000320 	.word	0x20000320

08003ae8 <__errno>:
 8003ae8:	4b01      	ldr	r3, [pc, #4]	@ (8003af0 <__errno+0x8>)
 8003aea:	6818      	ldr	r0, [r3, #0]
 8003aec:	4770      	bx	lr
 8003aee:	bf00      	nop
 8003af0:	20000018 	.word	0x20000018

08003af4 <__libc_init_array>:
 8003af4:	b570      	push	{r4, r5, r6, lr}
 8003af6:	2600      	movs	r6, #0
 8003af8:	4d0c      	ldr	r5, [pc, #48]	@ (8003b2c <__libc_init_array+0x38>)
 8003afa:	4c0d      	ldr	r4, [pc, #52]	@ (8003b30 <__libc_init_array+0x3c>)
 8003afc:	1b64      	subs	r4, r4, r5
 8003afe:	10a4      	asrs	r4, r4, #2
 8003b00:	42a6      	cmp	r6, r4
 8003b02:	d109      	bne.n	8003b18 <__libc_init_array+0x24>
 8003b04:	f000 fd2e 	bl	8004564 <_init>
 8003b08:	2600      	movs	r6, #0
 8003b0a:	4d0a      	ldr	r5, [pc, #40]	@ (8003b34 <__libc_init_array+0x40>)
 8003b0c:	4c0a      	ldr	r4, [pc, #40]	@ (8003b38 <__libc_init_array+0x44>)
 8003b0e:	1b64      	subs	r4, r4, r5
 8003b10:	10a4      	asrs	r4, r4, #2
 8003b12:	42a6      	cmp	r6, r4
 8003b14:	d105      	bne.n	8003b22 <__libc_init_array+0x2e>
 8003b16:	bd70      	pop	{r4, r5, r6, pc}
 8003b18:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b1c:	4798      	blx	r3
 8003b1e:	3601      	adds	r6, #1
 8003b20:	e7ee      	b.n	8003b00 <__libc_init_array+0xc>
 8003b22:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b26:	4798      	blx	r3
 8003b28:	3601      	adds	r6, #1
 8003b2a:	e7f2      	b.n	8003b12 <__libc_init_array+0x1e>
 8003b2c:	0800463c 	.word	0x0800463c
 8003b30:	0800463c 	.word	0x0800463c
 8003b34:	0800463c 	.word	0x0800463c
 8003b38:	08004640 	.word	0x08004640

08003b3c <__retarget_lock_init_recursive>:
 8003b3c:	4770      	bx	lr

08003b3e <__retarget_lock_acquire_recursive>:
 8003b3e:	4770      	bx	lr

08003b40 <__retarget_lock_release_recursive>:
 8003b40:	4770      	bx	lr
	...

08003b44 <_free_r>:
 8003b44:	b538      	push	{r3, r4, r5, lr}
 8003b46:	4605      	mov	r5, r0
 8003b48:	2900      	cmp	r1, #0
 8003b4a:	d040      	beq.n	8003bce <_free_r+0x8a>
 8003b4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003b50:	1f0c      	subs	r4, r1, #4
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	bfb8      	it	lt
 8003b56:	18e4      	addlt	r4, r4, r3
 8003b58:	f000 f8de 	bl	8003d18 <__malloc_lock>
 8003b5c:	4a1c      	ldr	r2, [pc, #112]	@ (8003bd0 <_free_r+0x8c>)
 8003b5e:	6813      	ldr	r3, [r2, #0]
 8003b60:	b933      	cbnz	r3, 8003b70 <_free_r+0x2c>
 8003b62:	6063      	str	r3, [r4, #4]
 8003b64:	6014      	str	r4, [r2, #0]
 8003b66:	4628      	mov	r0, r5
 8003b68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003b6c:	f000 b8da 	b.w	8003d24 <__malloc_unlock>
 8003b70:	42a3      	cmp	r3, r4
 8003b72:	d908      	bls.n	8003b86 <_free_r+0x42>
 8003b74:	6820      	ldr	r0, [r4, #0]
 8003b76:	1821      	adds	r1, r4, r0
 8003b78:	428b      	cmp	r3, r1
 8003b7a:	bf01      	itttt	eq
 8003b7c:	6819      	ldreq	r1, [r3, #0]
 8003b7e:	685b      	ldreq	r3, [r3, #4]
 8003b80:	1809      	addeq	r1, r1, r0
 8003b82:	6021      	streq	r1, [r4, #0]
 8003b84:	e7ed      	b.n	8003b62 <_free_r+0x1e>
 8003b86:	461a      	mov	r2, r3
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	b10b      	cbz	r3, 8003b90 <_free_r+0x4c>
 8003b8c:	42a3      	cmp	r3, r4
 8003b8e:	d9fa      	bls.n	8003b86 <_free_r+0x42>
 8003b90:	6811      	ldr	r1, [r2, #0]
 8003b92:	1850      	adds	r0, r2, r1
 8003b94:	42a0      	cmp	r0, r4
 8003b96:	d10b      	bne.n	8003bb0 <_free_r+0x6c>
 8003b98:	6820      	ldr	r0, [r4, #0]
 8003b9a:	4401      	add	r1, r0
 8003b9c:	1850      	adds	r0, r2, r1
 8003b9e:	4283      	cmp	r3, r0
 8003ba0:	6011      	str	r1, [r2, #0]
 8003ba2:	d1e0      	bne.n	8003b66 <_free_r+0x22>
 8003ba4:	6818      	ldr	r0, [r3, #0]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	4408      	add	r0, r1
 8003baa:	6010      	str	r0, [r2, #0]
 8003bac:	6053      	str	r3, [r2, #4]
 8003bae:	e7da      	b.n	8003b66 <_free_r+0x22>
 8003bb0:	d902      	bls.n	8003bb8 <_free_r+0x74>
 8003bb2:	230c      	movs	r3, #12
 8003bb4:	602b      	str	r3, [r5, #0]
 8003bb6:	e7d6      	b.n	8003b66 <_free_r+0x22>
 8003bb8:	6820      	ldr	r0, [r4, #0]
 8003bba:	1821      	adds	r1, r4, r0
 8003bbc:	428b      	cmp	r3, r1
 8003bbe:	bf01      	itttt	eq
 8003bc0:	6819      	ldreq	r1, [r3, #0]
 8003bc2:	685b      	ldreq	r3, [r3, #4]
 8003bc4:	1809      	addeq	r1, r1, r0
 8003bc6:	6021      	streq	r1, [r4, #0]
 8003bc8:	6063      	str	r3, [r4, #4]
 8003bca:	6054      	str	r4, [r2, #4]
 8003bcc:	e7cb      	b.n	8003b66 <_free_r+0x22>
 8003bce:	bd38      	pop	{r3, r4, r5, pc}
 8003bd0:	2000032c 	.word	0x2000032c

08003bd4 <sbrk_aligned>:
 8003bd4:	b570      	push	{r4, r5, r6, lr}
 8003bd6:	4e0f      	ldr	r6, [pc, #60]	@ (8003c14 <sbrk_aligned+0x40>)
 8003bd8:	460c      	mov	r4, r1
 8003bda:	6831      	ldr	r1, [r6, #0]
 8003bdc:	4605      	mov	r5, r0
 8003bde:	b911      	cbnz	r1, 8003be6 <sbrk_aligned+0x12>
 8003be0:	f000 fca2 	bl	8004528 <_sbrk_r>
 8003be4:	6030      	str	r0, [r6, #0]
 8003be6:	4621      	mov	r1, r4
 8003be8:	4628      	mov	r0, r5
 8003bea:	f000 fc9d 	bl	8004528 <_sbrk_r>
 8003bee:	1c43      	adds	r3, r0, #1
 8003bf0:	d103      	bne.n	8003bfa <sbrk_aligned+0x26>
 8003bf2:	f04f 34ff 	mov.w	r4, #4294967295
 8003bf6:	4620      	mov	r0, r4
 8003bf8:	bd70      	pop	{r4, r5, r6, pc}
 8003bfa:	1cc4      	adds	r4, r0, #3
 8003bfc:	f024 0403 	bic.w	r4, r4, #3
 8003c00:	42a0      	cmp	r0, r4
 8003c02:	d0f8      	beq.n	8003bf6 <sbrk_aligned+0x22>
 8003c04:	1a21      	subs	r1, r4, r0
 8003c06:	4628      	mov	r0, r5
 8003c08:	f000 fc8e 	bl	8004528 <_sbrk_r>
 8003c0c:	3001      	adds	r0, #1
 8003c0e:	d1f2      	bne.n	8003bf6 <sbrk_aligned+0x22>
 8003c10:	e7ef      	b.n	8003bf2 <sbrk_aligned+0x1e>
 8003c12:	bf00      	nop
 8003c14:	20000328 	.word	0x20000328

08003c18 <_malloc_r>:
 8003c18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c1c:	1ccd      	adds	r5, r1, #3
 8003c1e:	f025 0503 	bic.w	r5, r5, #3
 8003c22:	3508      	adds	r5, #8
 8003c24:	2d0c      	cmp	r5, #12
 8003c26:	bf38      	it	cc
 8003c28:	250c      	movcc	r5, #12
 8003c2a:	2d00      	cmp	r5, #0
 8003c2c:	4606      	mov	r6, r0
 8003c2e:	db01      	blt.n	8003c34 <_malloc_r+0x1c>
 8003c30:	42a9      	cmp	r1, r5
 8003c32:	d904      	bls.n	8003c3e <_malloc_r+0x26>
 8003c34:	230c      	movs	r3, #12
 8003c36:	6033      	str	r3, [r6, #0]
 8003c38:	2000      	movs	r0, #0
 8003c3a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c3e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003d14 <_malloc_r+0xfc>
 8003c42:	f000 f869 	bl	8003d18 <__malloc_lock>
 8003c46:	f8d8 3000 	ldr.w	r3, [r8]
 8003c4a:	461c      	mov	r4, r3
 8003c4c:	bb44      	cbnz	r4, 8003ca0 <_malloc_r+0x88>
 8003c4e:	4629      	mov	r1, r5
 8003c50:	4630      	mov	r0, r6
 8003c52:	f7ff ffbf 	bl	8003bd4 <sbrk_aligned>
 8003c56:	1c43      	adds	r3, r0, #1
 8003c58:	4604      	mov	r4, r0
 8003c5a:	d158      	bne.n	8003d0e <_malloc_r+0xf6>
 8003c5c:	f8d8 4000 	ldr.w	r4, [r8]
 8003c60:	4627      	mov	r7, r4
 8003c62:	2f00      	cmp	r7, #0
 8003c64:	d143      	bne.n	8003cee <_malloc_r+0xd6>
 8003c66:	2c00      	cmp	r4, #0
 8003c68:	d04b      	beq.n	8003d02 <_malloc_r+0xea>
 8003c6a:	6823      	ldr	r3, [r4, #0]
 8003c6c:	4639      	mov	r1, r7
 8003c6e:	4630      	mov	r0, r6
 8003c70:	eb04 0903 	add.w	r9, r4, r3
 8003c74:	f000 fc58 	bl	8004528 <_sbrk_r>
 8003c78:	4581      	cmp	r9, r0
 8003c7a:	d142      	bne.n	8003d02 <_malloc_r+0xea>
 8003c7c:	6821      	ldr	r1, [r4, #0]
 8003c7e:	4630      	mov	r0, r6
 8003c80:	1a6d      	subs	r5, r5, r1
 8003c82:	4629      	mov	r1, r5
 8003c84:	f7ff ffa6 	bl	8003bd4 <sbrk_aligned>
 8003c88:	3001      	adds	r0, #1
 8003c8a:	d03a      	beq.n	8003d02 <_malloc_r+0xea>
 8003c8c:	6823      	ldr	r3, [r4, #0]
 8003c8e:	442b      	add	r3, r5
 8003c90:	6023      	str	r3, [r4, #0]
 8003c92:	f8d8 3000 	ldr.w	r3, [r8]
 8003c96:	685a      	ldr	r2, [r3, #4]
 8003c98:	bb62      	cbnz	r2, 8003cf4 <_malloc_r+0xdc>
 8003c9a:	f8c8 7000 	str.w	r7, [r8]
 8003c9e:	e00f      	b.n	8003cc0 <_malloc_r+0xa8>
 8003ca0:	6822      	ldr	r2, [r4, #0]
 8003ca2:	1b52      	subs	r2, r2, r5
 8003ca4:	d420      	bmi.n	8003ce8 <_malloc_r+0xd0>
 8003ca6:	2a0b      	cmp	r2, #11
 8003ca8:	d917      	bls.n	8003cda <_malloc_r+0xc2>
 8003caa:	1961      	adds	r1, r4, r5
 8003cac:	42a3      	cmp	r3, r4
 8003cae:	6025      	str	r5, [r4, #0]
 8003cb0:	bf18      	it	ne
 8003cb2:	6059      	strne	r1, [r3, #4]
 8003cb4:	6863      	ldr	r3, [r4, #4]
 8003cb6:	bf08      	it	eq
 8003cb8:	f8c8 1000 	streq.w	r1, [r8]
 8003cbc:	5162      	str	r2, [r4, r5]
 8003cbe:	604b      	str	r3, [r1, #4]
 8003cc0:	4630      	mov	r0, r6
 8003cc2:	f000 f82f 	bl	8003d24 <__malloc_unlock>
 8003cc6:	f104 000b 	add.w	r0, r4, #11
 8003cca:	1d23      	adds	r3, r4, #4
 8003ccc:	f020 0007 	bic.w	r0, r0, #7
 8003cd0:	1ac2      	subs	r2, r0, r3
 8003cd2:	bf1c      	itt	ne
 8003cd4:	1a1b      	subne	r3, r3, r0
 8003cd6:	50a3      	strne	r3, [r4, r2]
 8003cd8:	e7af      	b.n	8003c3a <_malloc_r+0x22>
 8003cda:	6862      	ldr	r2, [r4, #4]
 8003cdc:	42a3      	cmp	r3, r4
 8003cde:	bf0c      	ite	eq
 8003ce0:	f8c8 2000 	streq.w	r2, [r8]
 8003ce4:	605a      	strne	r2, [r3, #4]
 8003ce6:	e7eb      	b.n	8003cc0 <_malloc_r+0xa8>
 8003ce8:	4623      	mov	r3, r4
 8003cea:	6864      	ldr	r4, [r4, #4]
 8003cec:	e7ae      	b.n	8003c4c <_malloc_r+0x34>
 8003cee:	463c      	mov	r4, r7
 8003cf0:	687f      	ldr	r7, [r7, #4]
 8003cf2:	e7b6      	b.n	8003c62 <_malloc_r+0x4a>
 8003cf4:	461a      	mov	r2, r3
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	42a3      	cmp	r3, r4
 8003cfa:	d1fb      	bne.n	8003cf4 <_malloc_r+0xdc>
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	6053      	str	r3, [r2, #4]
 8003d00:	e7de      	b.n	8003cc0 <_malloc_r+0xa8>
 8003d02:	230c      	movs	r3, #12
 8003d04:	4630      	mov	r0, r6
 8003d06:	6033      	str	r3, [r6, #0]
 8003d08:	f000 f80c 	bl	8003d24 <__malloc_unlock>
 8003d0c:	e794      	b.n	8003c38 <_malloc_r+0x20>
 8003d0e:	6005      	str	r5, [r0, #0]
 8003d10:	e7d6      	b.n	8003cc0 <_malloc_r+0xa8>
 8003d12:	bf00      	nop
 8003d14:	2000032c 	.word	0x2000032c

08003d18 <__malloc_lock>:
 8003d18:	4801      	ldr	r0, [pc, #4]	@ (8003d20 <__malloc_lock+0x8>)
 8003d1a:	f7ff bf10 	b.w	8003b3e <__retarget_lock_acquire_recursive>
 8003d1e:	bf00      	nop
 8003d20:	20000324 	.word	0x20000324

08003d24 <__malloc_unlock>:
 8003d24:	4801      	ldr	r0, [pc, #4]	@ (8003d2c <__malloc_unlock+0x8>)
 8003d26:	f7ff bf0b 	b.w	8003b40 <__retarget_lock_release_recursive>
 8003d2a:	bf00      	nop
 8003d2c:	20000324 	.word	0x20000324

08003d30 <__sfputc_r>:
 8003d30:	6893      	ldr	r3, [r2, #8]
 8003d32:	b410      	push	{r4}
 8003d34:	3b01      	subs	r3, #1
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	6093      	str	r3, [r2, #8]
 8003d3a:	da07      	bge.n	8003d4c <__sfputc_r+0x1c>
 8003d3c:	6994      	ldr	r4, [r2, #24]
 8003d3e:	42a3      	cmp	r3, r4
 8003d40:	db01      	blt.n	8003d46 <__sfputc_r+0x16>
 8003d42:	290a      	cmp	r1, #10
 8003d44:	d102      	bne.n	8003d4c <__sfputc_r+0x1c>
 8003d46:	bc10      	pop	{r4}
 8003d48:	f7ff bdeb 	b.w	8003922 <__swbuf_r>
 8003d4c:	6813      	ldr	r3, [r2, #0]
 8003d4e:	1c58      	adds	r0, r3, #1
 8003d50:	6010      	str	r0, [r2, #0]
 8003d52:	7019      	strb	r1, [r3, #0]
 8003d54:	4608      	mov	r0, r1
 8003d56:	bc10      	pop	{r4}
 8003d58:	4770      	bx	lr

08003d5a <__sfputs_r>:
 8003d5a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d5c:	4606      	mov	r6, r0
 8003d5e:	460f      	mov	r7, r1
 8003d60:	4614      	mov	r4, r2
 8003d62:	18d5      	adds	r5, r2, r3
 8003d64:	42ac      	cmp	r4, r5
 8003d66:	d101      	bne.n	8003d6c <__sfputs_r+0x12>
 8003d68:	2000      	movs	r0, #0
 8003d6a:	e007      	b.n	8003d7c <__sfputs_r+0x22>
 8003d6c:	463a      	mov	r2, r7
 8003d6e:	4630      	mov	r0, r6
 8003d70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003d74:	f7ff ffdc 	bl	8003d30 <__sfputc_r>
 8003d78:	1c43      	adds	r3, r0, #1
 8003d7a:	d1f3      	bne.n	8003d64 <__sfputs_r+0xa>
 8003d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003d80 <_vfiprintf_r>:
 8003d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d84:	460d      	mov	r5, r1
 8003d86:	4614      	mov	r4, r2
 8003d88:	4698      	mov	r8, r3
 8003d8a:	4606      	mov	r6, r0
 8003d8c:	b09d      	sub	sp, #116	@ 0x74
 8003d8e:	b118      	cbz	r0, 8003d98 <_vfiprintf_r+0x18>
 8003d90:	6a03      	ldr	r3, [r0, #32]
 8003d92:	b90b      	cbnz	r3, 8003d98 <_vfiprintf_r+0x18>
 8003d94:	f7ff fcdc 	bl	8003750 <__sinit>
 8003d98:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003d9a:	07d9      	lsls	r1, r3, #31
 8003d9c:	d405      	bmi.n	8003daa <_vfiprintf_r+0x2a>
 8003d9e:	89ab      	ldrh	r3, [r5, #12]
 8003da0:	059a      	lsls	r2, r3, #22
 8003da2:	d402      	bmi.n	8003daa <_vfiprintf_r+0x2a>
 8003da4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003da6:	f7ff feca 	bl	8003b3e <__retarget_lock_acquire_recursive>
 8003daa:	89ab      	ldrh	r3, [r5, #12]
 8003dac:	071b      	lsls	r3, r3, #28
 8003dae:	d501      	bpl.n	8003db4 <_vfiprintf_r+0x34>
 8003db0:	692b      	ldr	r3, [r5, #16]
 8003db2:	b99b      	cbnz	r3, 8003ddc <_vfiprintf_r+0x5c>
 8003db4:	4629      	mov	r1, r5
 8003db6:	4630      	mov	r0, r6
 8003db8:	f7ff fdf2 	bl	80039a0 <__swsetup_r>
 8003dbc:	b170      	cbz	r0, 8003ddc <_vfiprintf_r+0x5c>
 8003dbe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003dc0:	07dc      	lsls	r4, r3, #31
 8003dc2:	d504      	bpl.n	8003dce <_vfiprintf_r+0x4e>
 8003dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8003dc8:	b01d      	add	sp, #116	@ 0x74
 8003dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dce:	89ab      	ldrh	r3, [r5, #12]
 8003dd0:	0598      	lsls	r0, r3, #22
 8003dd2:	d4f7      	bmi.n	8003dc4 <_vfiprintf_r+0x44>
 8003dd4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003dd6:	f7ff feb3 	bl	8003b40 <__retarget_lock_release_recursive>
 8003dda:	e7f3      	b.n	8003dc4 <_vfiprintf_r+0x44>
 8003ddc:	2300      	movs	r3, #0
 8003dde:	9309      	str	r3, [sp, #36]	@ 0x24
 8003de0:	2320      	movs	r3, #32
 8003de2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003de6:	2330      	movs	r3, #48	@ 0x30
 8003de8:	f04f 0901 	mov.w	r9, #1
 8003dec:	f8cd 800c 	str.w	r8, [sp, #12]
 8003df0:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8003f9c <_vfiprintf_r+0x21c>
 8003df4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003df8:	4623      	mov	r3, r4
 8003dfa:	469a      	mov	sl, r3
 8003dfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003e00:	b10a      	cbz	r2, 8003e06 <_vfiprintf_r+0x86>
 8003e02:	2a25      	cmp	r2, #37	@ 0x25
 8003e04:	d1f9      	bne.n	8003dfa <_vfiprintf_r+0x7a>
 8003e06:	ebba 0b04 	subs.w	fp, sl, r4
 8003e0a:	d00b      	beq.n	8003e24 <_vfiprintf_r+0xa4>
 8003e0c:	465b      	mov	r3, fp
 8003e0e:	4622      	mov	r2, r4
 8003e10:	4629      	mov	r1, r5
 8003e12:	4630      	mov	r0, r6
 8003e14:	f7ff ffa1 	bl	8003d5a <__sfputs_r>
 8003e18:	3001      	adds	r0, #1
 8003e1a:	f000 80a7 	beq.w	8003f6c <_vfiprintf_r+0x1ec>
 8003e1e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003e20:	445a      	add	r2, fp
 8003e22:	9209      	str	r2, [sp, #36]	@ 0x24
 8003e24:	f89a 3000 	ldrb.w	r3, [sl]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	f000 809f 	beq.w	8003f6c <_vfiprintf_r+0x1ec>
 8003e2e:	2300      	movs	r3, #0
 8003e30:	f04f 32ff 	mov.w	r2, #4294967295
 8003e34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003e38:	f10a 0a01 	add.w	sl, sl, #1
 8003e3c:	9304      	str	r3, [sp, #16]
 8003e3e:	9307      	str	r3, [sp, #28]
 8003e40:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003e44:	931a      	str	r3, [sp, #104]	@ 0x68
 8003e46:	4654      	mov	r4, sl
 8003e48:	2205      	movs	r2, #5
 8003e4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003e4e:	4853      	ldr	r0, [pc, #332]	@ (8003f9c <_vfiprintf_r+0x21c>)
 8003e50:	f000 fb7a 	bl	8004548 <memchr>
 8003e54:	9a04      	ldr	r2, [sp, #16]
 8003e56:	b9d8      	cbnz	r0, 8003e90 <_vfiprintf_r+0x110>
 8003e58:	06d1      	lsls	r1, r2, #27
 8003e5a:	bf44      	itt	mi
 8003e5c:	2320      	movmi	r3, #32
 8003e5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003e62:	0713      	lsls	r3, r2, #28
 8003e64:	bf44      	itt	mi
 8003e66:	232b      	movmi	r3, #43	@ 0x2b
 8003e68:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003e6c:	f89a 3000 	ldrb.w	r3, [sl]
 8003e70:	2b2a      	cmp	r3, #42	@ 0x2a
 8003e72:	d015      	beq.n	8003ea0 <_vfiprintf_r+0x120>
 8003e74:	4654      	mov	r4, sl
 8003e76:	2000      	movs	r0, #0
 8003e78:	f04f 0c0a 	mov.w	ip, #10
 8003e7c:	9a07      	ldr	r2, [sp, #28]
 8003e7e:	4621      	mov	r1, r4
 8003e80:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003e84:	3b30      	subs	r3, #48	@ 0x30
 8003e86:	2b09      	cmp	r3, #9
 8003e88:	d94b      	bls.n	8003f22 <_vfiprintf_r+0x1a2>
 8003e8a:	b1b0      	cbz	r0, 8003eba <_vfiprintf_r+0x13a>
 8003e8c:	9207      	str	r2, [sp, #28]
 8003e8e:	e014      	b.n	8003eba <_vfiprintf_r+0x13a>
 8003e90:	eba0 0308 	sub.w	r3, r0, r8
 8003e94:	fa09 f303 	lsl.w	r3, r9, r3
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	46a2      	mov	sl, r4
 8003e9c:	9304      	str	r3, [sp, #16]
 8003e9e:	e7d2      	b.n	8003e46 <_vfiprintf_r+0xc6>
 8003ea0:	9b03      	ldr	r3, [sp, #12]
 8003ea2:	1d19      	adds	r1, r3, #4
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	9103      	str	r1, [sp, #12]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	bfbb      	ittet	lt
 8003eac:	425b      	neglt	r3, r3
 8003eae:	f042 0202 	orrlt.w	r2, r2, #2
 8003eb2:	9307      	strge	r3, [sp, #28]
 8003eb4:	9307      	strlt	r3, [sp, #28]
 8003eb6:	bfb8      	it	lt
 8003eb8:	9204      	strlt	r2, [sp, #16]
 8003eba:	7823      	ldrb	r3, [r4, #0]
 8003ebc:	2b2e      	cmp	r3, #46	@ 0x2e
 8003ebe:	d10a      	bne.n	8003ed6 <_vfiprintf_r+0x156>
 8003ec0:	7863      	ldrb	r3, [r4, #1]
 8003ec2:	2b2a      	cmp	r3, #42	@ 0x2a
 8003ec4:	d132      	bne.n	8003f2c <_vfiprintf_r+0x1ac>
 8003ec6:	9b03      	ldr	r3, [sp, #12]
 8003ec8:	3402      	adds	r4, #2
 8003eca:	1d1a      	adds	r2, r3, #4
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	9203      	str	r2, [sp, #12]
 8003ed0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8003ed4:	9305      	str	r3, [sp, #20]
 8003ed6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8003fa0 <_vfiprintf_r+0x220>
 8003eda:	2203      	movs	r2, #3
 8003edc:	4650      	mov	r0, sl
 8003ede:	7821      	ldrb	r1, [r4, #0]
 8003ee0:	f000 fb32 	bl	8004548 <memchr>
 8003ee4:	b138      	cbz	r0, 8003ef6 <_vfiprintf_r+0x176>
 8003ee6:	2240      	movs	r2, #64	@ 0x40
 8003ee8:	9b04      	ldr	r3, [sp, #16]
 8003eea:	eba0 000a 	sub.w	r0, r0, sl
 8003eee:	4082      	lsls	r2, r0
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	3401      	adds	r4, #1
 8003ef4:	9304      	str	r3, [sp, #16]
 8003ef6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003efa:	2206      	movs	r2, #6
 8003efc:	4829      	ldr	r0, [pc, #164]	@ (8003fa4 <_vfiprintf_r+0x224>)
 8003efe:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003f02:	f000 fb21 	bl	8004548 <memchr>
 8003f06:	2800      	cmp	r0, #0
 8003f08:	d03f      	beq.n	8003f8a <_vfiprintf_r+0x20a>
 8003f0a:	4b27      	ldr	r3, [pc, #156]	@ (8003fa8 <_vfiprintf_r+0x228>)
 8003f0c:	bb1b      	cbnz	r3, 8003f56 <_vfiprintf_r+0x1d6>
 8003f0e:	9b03      	ldr	r3, [sp, #12]
 8003f10:	3307      	adds	r3, #7
 8003f12:	f023 0307 	bic.w	r3, r3, #7
 8003f16:	3308      	adds	r3, #8
 8003f18:	9303      	str	r3, [sp, #12]
 8003f1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003f1c:	443b      	add	r3, r7
 8003f1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003f20:	e76a      	b.n	8003df8 <_vfiprintf_r+0x78>
 8003f22:	460c      	mov	r4, r1
 8003f24:	2001      	movs	r0, #1
 8003f26:	fb0c 3202 	mla	r2, ip, r2, r3
 8003f2a:	e7a8      	b.n	8003e7e <_vfiprintf_r+0xfe>
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	f04f 0c0a 	mov.w	ip, #10
 8003f32:	4619      	mov	r1, r3
 8003f34:	3401      	adds	r4, #1
 8003f36:	9305      	str	r3, [sp, #20]
 8003f38:	4620      	mov	r0, r4
 8003f3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003f3e:	3a30      	subs	r2, #48	@ 0x30
 8003f40:	2a09      	cmp	r2, #9
 8003f42:	d903      	bls.n	8003f4c <_vfiprintf_r+0x1cc>
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d0c6      	beq.n	8003ed6 <_vfiprintf_r+0x156>
 8003f48:	9105      	str	r1, [sp, #20]
 8003f4a:	e7c4      	b.n	8003ed6 <_vfiprintf_r+0x156>
 8003f4c:	4604      	mov	r4, r0
 8003f4e:	2301      	movs	r3, #1
 8003f50:	fb0c 2101 	mla	r1, ip, r1, r2
 8003f54:	e7f0      	b.n	8003f38 <_vfiprintf_r+0x1b8>
 8003f56:	ab03      	add	r3, sp, #12
 8003f58:	9300      	str	r3, [sp, #0]
 8003f5a:	462a      	mov	r2, r5
 8003f5c:	4630      	mov	r0, r6
 8003f5e:	4b13      	ldr	r3, [pc, #76]	@ (8003fac <_vfiprintf_r+0x22c>)
 8003f60:	a904      	add	r1, sp, #16
 8003f62:	f3af 8000 	nop.w
 8003f66:	4607      	mov	r7, r0
 8003f68:	1c78      	adds	r0, r7, #1
 8003f6a:	d1d6      	bne.n	8003f1a <_vfiprintf_r+0x19a>
 8003f6c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003f6e:	07d9      	lsls	r1, r3, #31
 8003f70:	d405      	bmi.n	8003f7e <_vfiprintf_r+0x1fe>
 8003f72:	89ab      	ldrh	r3, [r5, #12]
 8003f74:	059a      	lsls	r2, r3, #22
 8003f76:	d402      	bmi.n	8003f7e <_vfiprintf_r+0x1fe>
 8003f78:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003f7a:	f7ff fde1 	bl	8003b40 <__retarget_lock_release_recursive>
 8003f7e:	89ab      	ldrh	r3, [r5, #12]
 8003f80:	065b      	lsls	r3, r3, #25
 8003f82:	f53f af1f 	bmi.w	8003dc4 <_vfiprintf_r+0x44>
 8003f86:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8003f88:	e71e      	b.n	8003dc8 <_vfiprintf_r+0x48>
 8003f8a:	ab03      	add	r3, sp, #12
 8003f8c:	9300      	str	r3, [sp, #0]
 8003f8e:	462a      	mov	r2, r5
 8003f90:	4630      	mov	r0, r6
 8003f92:	4b06      	ldr	r3, [pc, #24]	@ (8003fac <_vfiprintf_r+0x22c>)
 8003f94:	a904      	add	r1, sp, #16
 8003f96:	f000 f87d 	bl	8004094 <_printf_i>
 8003f9a:	e7e4      	b.n	8003f66 <_vfiprintf_r+0x1e6>
 8003f9c:	08004606 	.word	0x08004606
 8003fa0:	0800460c 	.word	0x0800460c
 8003fa4:	08004610 	.word	0x08004610
 8003fa8:	00000000 	.word	0x00000000
 8003fac:	08003d5b 	.word	0x08003d5b

08003fb0 <_printf_common>:
 8003fb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fb4:	4616      	mov	r6, r2
 8003fb6:	4698      	mov	r8, r3
 8003fb8:	688a      	ldr	r2, [r1, #8]
 8003fba:	690b      	ldr	r3, [r1, #16]
 8003fbc:	4607      	mov	r7, r0
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	bfb8      	it	lt
 8003fc2:	4613      	movlt	r3, r2
 8003fc4:	6033      	str	r3, [r6, #0]
 8003fc6:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003fca:	460c      	mov	r4, r1
 8003fcc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003fd0:	b10a      	cbz	r2, 8003fd6 <_printf_common+0x26>
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	6033      	str	r3, [r6, #0]
 8003fd6:	6823      	ldr	r3, [r4, #0]
 8003fd8:	0699      	lsls	r1, r3, #26
 8003fda:	bf42      	ittt	mi
 8003fdc:	6833      	ldrmi	r3, [r6, #0]
 8003fde:	3302      	addmi	r3, #2
 8003fe0:	6033      	strmi	r3, [r6, #0]
 8003fe2:	6825      	ldr	r5, [r4, #0]
 8003fe4:	f015 0506 	ands.w	r5, r5, #6
 8003fe8:	d106      	bne.n	8003ff8 <_printf_common+0x48>
 8003fea:	f104 0a19 	add.w	sl, r4, #25
 8003fee:	68e3      	ldr	r3, [r4, #12]
 8003ff0:	6832      	ldr	r2, [r6, #0]
 8003ff2:	1a9b      	subs	r3, r3, r2
 8003ff4:	42ab      	cmp	r3, r5
 8003ff6:	dc2b      	bgt.n	8004050 <_printf_common+0xa0>
 8003ff8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003ffc:	6822      	ldr	r2, [r4, #0]
 8003ffe:	3b00      	subs	r3, #0
 8004000:	bf18      	it	ne
 8004002:	2301      	movne	r3, #1
 8004004:	0692      	lsls	r2, r2, #26
 8004006:	d430      	bmi.n	800406a <_printf_common+0xba>
 8004008:	4641      	mov	r1, r8
 800400a:	4638      	mov	r0, r7
 800400c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004010:	47c8      	blx	r9
 8004012:	3001      	adds	r0, #1
 8004014:	d023      	beq.n	800405e <_printf_common+0xae>
 8004016:	6823      	ldr	r3, [r4, #0]
 8004018:	6922      	ldr	r2, [r4, #16]
 800401a:	f003 0306 	and.w	r3, r3, #6
 800401e:	2b04      	cmp	r3, #4
 8004020:	bf14      	ite	ne
 8004022:	2500      	movne	r5, #0
 8004024:	6833      	ldreq	r3, [r6, #0]
 8004026:	f04f 0600 	mov.w	r6, #0
 800402a:	bf08      	it	eq
 800402c:	68e5      	ldreq	r5, [r4, #12]
 800402e:	f104 041a 	add.w	r4, r4, #26
 8004032:	bf08      	it	eq
 8004034:	1aed      	subeq	r5, r5, r3
 8004036:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800403a:	bf08      	it	eq
 800403c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004040:	4293      	cmp	r3, r2
 8004042:	bfc4      	itt	gt
 8004044:	1a9b      	subgt	r3, r3, r2
 8004046:	18ed      	addgt	r5, r5, r3
 8004048:	42b5      	cmp	r5, r6
 800404a:	d11a      	bne.n	8004082 <_printf_common+0xd2>
 800404c:	2000      	movs	r0, #0
 800404e:	e008      	b.n	8004062 <_printf_common+0xb2>
 8004050:	2301      	movs	r3, #1
 8004052:	4652      	mov	r2, sl
 8004054:	4641      	mov	r1, r8
 8004056:	4638      	mov	r0, r7
 8004058:	47c8      	blx	r9
 800405a:	3001      	adds	r0, #1
 800405c:	d103      	bne.n	8004066 <_printf_common+0xb6>
 800405e:	f04f 30ff 	mov.w	r0, #4294967295
 8004062:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004066:	3501      	adds	r5, #1
 8004068:	e7c1      	b.n	8003fee <_printf_common+0x3e>
 800406a:	2030      	movs	r0, #48	@ 0x30
 800406c:	18e1      	adds	r1, r4, r3
 800406e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004072:	1c5a      	adds	r2, r3, #1
 8004074:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004078:	4422      	add	r2, r4
 800407a:	3302      	adds	r3, #2
 800407c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004080:	e7c2      	b.n	8004008 <_printf_common+0x58>
 8004082:	2301      	movs	r3, #1
 8004084:	4622      	mov	r2, r4
 8004086:	4641      	mov	r1, r8
 8004088:	4638      	mov	r0, r7
 800408a:	47c8      	blx	r9
 800408c:	3001      	adds	r0, #1
 800408e:	d0e6      	beq.n	800405e <_printf_common+0xae>
 8004090:	3601      	adds	r6, #1
 8004092:	e7d9      	b.n	8004048 <_printf_common+0x98>

08004094 <_printf_i>:
 8004094:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004098:	7e0f      	ldrb	r7, [r1, #24]
 800409a:	4691      	mov	r9, r2
 800409c:	2f78      	cmp	r7, #120	@ 0x78
 800409e:	4680      	mov	r8, r0
 80040a0:	460c      	mov	r4, r1
 80040a2:	469a      	mov	sl, r3
 80040a4:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80040a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80040aa:	d807      	bhi.n	80040bc <_printf_i+0x28>
 80040ac:	2f62      	cmp	r7, #98	@ 0x62
 80040ae:	d80a      	bhi.n	80040c6 <_printf_i+0x32>
 80040b0:	2f00      	cmp	r7, #0
 80040b2:	f000 80d1 	beq.w	8004258 <_printf_i+0x1c4>
 80040b6:	2f58      	cmp	r7, #88	@ 0x58
 80040b8:	f000 80b8 	beq.w	800422c <_printf_i+0x198>
 80040bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80040c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80040c4:	e03a      	b.n	800413c <_printf_i+0xa8>
 80040c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80040ca:	2b15      	cmp	r3, #21
 80040cc:	d8f6      	bhi.n	80040bc <_printf_i+0x28>
 80040ce:	a101      	add	r1, pc, #4	@ (adr r1, 80040d4 <_printf_i+0x40>)
 80040d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80040d4:	0800412d 	.word	0x0800412d
 80040d8:	08004141 	.word	0x08004141
 80040dc:	080040bd 	.word	0x080040bd
 80040e0:	080040bd 	.word	0x080040bd
 80040e4:	080040bd 	.word	0x080040bd
 80040e8:	080040bd 	.word	0x080040bd
 80040ec:	08004141 	.word	0x08004141
 80040f0:	080040bd 	.word	0x080040bd
 80040f4:	080040bd 	.word	0x080040bd
 80040f8:	080040bd 	.word	0x080040bd
 80040fc:	080040bd 	.word	0x080040bd
 8004100:	0800423f 	.word	0x0800423f
 8004104:	0800416b 	.word	0x0800416b
 8004108:	080041f9 	.word	0x080041f9
 800410c:	080040bd 	.word	0x080040bd
 8004110:	080040bd 	.word	0x080040bd
 8004114:	08004261 	.word	0x08004261
 8004118:	080040bd 	.word	0x080040bd
 800411c:	0800416b 	.word	0x0800416b
 8004120:	080040bd 	.word	0x080040bd
 8004124:	080040bd 	.word	0x080040bd
 8004128:	08004201 	.word	0x08004201
 800412c:	6833      	ldr	r3, [r6, #0]
 800412e:	1d1a      	adds	r2, r3, #4
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	6032      	str	r2, [r6, #0]
 8004134:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004138:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800413c:	2301      	movs	r3, #1
 800413e:	e09c      	b.n	800427a <_printf_i+0x1e6>
 8004140:	6833      	ldr	r3, [r6, #0]
 8004142:	6820      	ldr	r0, [r4, #0]
 8004144:	1d19      	adds	r1, r3, #4
 8004146:	6031      	str	r1, [r6, #0]
 8004148:	0606      	lsls	r6, r0, #24
 800414a:	d501      	bpl.n	8004150 <_printf_i+0xbc>
 800414c:	681d      	ldr	r5, [r3, #0]
 800414e:	e003      	b.n	8004158 <_printf_i+0xc4>
 8004150:	0645      	lsls	r5, r0, #25
 8004152:	d5fb      	bpl.n	800414c <_printf_i+0xb8>
 8004154:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004158:	2d00      	cmp	r5, #0
 800415a:	da03      	bge.n	8004164 <_printf_i+0xd0>
 800415c:	232d      	movs	r3, #45	@ 0x2d
 800415e:	426d      	negs	r5, r5
 8004160:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004164:	230a      	movs	r3, #10
 8004166:	4858      	ldr	r0, [pc, #352]	@ (80042c8 <_printf_i+0x234>)
 8004168:	e011      	b.n	800418e <_printf_i+0xfa>
 800416a:	6821      	ldr	r1, [r4, #0]
 800416c:	6833      	ldr	r3, [r6, #0]
 800416e:	0608      	lsls	r0, r1, #24
 8004170:	f853 5b04 	ldr.w	r5, [r3], #4
 8004174:	d402      	bmi.n	800417c <_printf_i+0xe8>
 8004176:	0649      	lsls	r1, r1, #25
 8004178:	bf48      	it	mi
 800417a:	b2ad      	uxthmi	r5, r5
 800417c:	2f6f      	cmp	r7, #111	@ 0x6f
 800417e:	6033      	str	r3, [r6, #0]
 8004180:	bf14      	ite	ne
 8004182:	230a      	movne	r3, #10
 8004184:	2308      	moveq	r3, #8
 8004186:	4850      	ldr	r0, [pc, #320]	@ (80042c8 <_printf_i+0x234>)
 8004188:	2100      	movs	r1, #0
 800418a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800418e:	6866      	ldr	r6, [r4, #4]
 8004190:	2e00      	cmp	r6, #0
 8004192:	60a6      	str	r6, [r4, #8]
 8004194:	db05      	blt.n	80041a2 <_printf_i+0x10e>
 8004196:	6821      	ldr	r1, [r4, #0]
 8004198:	432e      	orrs	r6, r5
 800419a:	f021 0104 	bic.w	r1, r1, #4
 800419e:	6021      	str	r1, [r4, #0]
 80041a0:	d04b      	beq.n	800423a <_printf_i+0x1a6>
 80041a2:	4616      	mov	r6, r2
 80041a4:	fbb5 f1f3 	udiv	r1, r5, r3
 80041a8:	fb03 5711 	mls	r7, r3, r1, r5
 80041ac:	5dc7      	ldrb	r7, [r0, r7]
 80041ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80041b2:	462f      	mov	r7, r5
 80041b4:	42bb      	cmp	r3, r7
 80041b6:	460d      	mov	r5, r1
 80041b8:	d9f4      	bls.n	80041a4 <_printf_i+0x110>
 80041ba:	2b08      	cmp	r3, #8
 80041bc:	d10b      	bne.n	80041d6 <_printf_i+0x142>
 80041be:	6823      	ldr	r3, [r4, #0]
 80041c0:	07df      	lsls	r7, r3, #31
 80041c2:	d508      	bpl.n	80041d6 <_printf_i+0x142>
 80041c4:	6923      	ldr	r3, [r4, #16]
 80041c6:	6861      	ldr	r1, [r4, #4]
 80041c8:	4299      	cmp	r1, r3
 80041ca:	bfde      	ittt	le
 80041cc:	2330      	movle	r3, #48	@ 0x30
 80041ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 80041d2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80041d6:	1b92      	subs	r2, r2, r6
 80041d8:	6122      	str	r2, [r4, #16]
 80041da:	464b      	mov	r3, r9
 80041dc:	4621      	mov	r1, r4
 80041de:	4640      	mov	r0, r8
 80041e0:	f8cd a000 	str.w	sl, [sp]
 80041e4:	aa03      	add	r2, sp, #12
 80041e6:	f7ff fee3 	bl	8003fb0 <_printf_common>
 80041ea:	3001      	adds	r0, #1
 80041ec:	d14a      	bne.n	8004284 <_printf_i+0x1f0>
 80041ee:	f04f 30ff 	mov.w	r0, #4294967295
 80041f2:	b004      	add	sp, #16
 80041f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80041f8:	6823      	ldr	r3, [r4, #0]
 80041fa:	f043 0320 	orr.w	r3, r3, #32
 80041fe:	6023      	str	r3, [r4, #0]
 8004200:	2778      	movs	r7, #120	@ 0x78
 8004202:	4832      	ldr	r0, [pc, #200]	@ (80042cc <_printf_i+0x238>)
 8004204:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004208:	6823      	ldr	r3, [r4, #0]
 800420a:	6831      	ldr	r1, [r6, #0]
 800420c:	061f      	lsls	r7, r3, #24
 800420e:	f851 5b04 	ldr.w	r5, [r1], #4
 8004212:	d402      	bmi.n	800421a <_printf_i+0x186>
 8004214:	065f      	lsls	r7, r3, #25
 8004216:	bf48      	it	mi
 8004218:	b2ad      	uxthmi	r5, r5
 800421a:	6031      	str	r1, [r6, #0]
 800421c:	07d9      	lsls	r1, r3, #31
 800421e:	bf44      	itt	mi
 8004220:	f043 0320 	orrmi.w	r3, r3, #32
 8004224:	6023      	strmi	r3, [r4, #0]
 8004226:	b11d      	cbz	r5, 8004230 <_printf_i+0x19c>
 8004228:	2310      	movs	r3, #16
 800422a:	e7ad      	b.n	8004188 <_printf_i+0xf4>
 800422c:	4826      	ldr	r0, [pc, #152]	@ (80042c8 <_printf_i+0x234>)
 800422e:	e7e9      	b.n	8004204 <_printf_i+0x170>
 8004230:	6823      	ldr	r3, [r4, #0]
 8004232:	f023 0320 	bic.w	r3, r3, #32
 8004236:	6023      	str	r3, [r4, #0]
 8004238:	e7f6      	b.n	8004228 <_printf_i+0x194>
 800423a:	4616      	mov	r6, r2
 800423c:	e7bd      	b.n	80041ba <_printf_i+0x126>
 800423e:	6833      	ldr	r3, [r6, #0]
 8004240:	6825      	ldr	r5, [r4, #0]
 8004242:	1d18      	adds	r0, r3, #4
 8004244:	6961      	ldr	r1, [r4, #20]
 8004246:	6030      	str	r0, [r6, #0]
 8004248:	062e      	lsls	r6, r5, #24
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	d501      	bpl.n	8004252 <_printf_i+0x1be>
 800424e:	6019      	str	r1, [r3, #0]
 8004250:	e002      	b.n	8004258 <_printf_i+0x1c4>
 8004252:	0668      	lsls	r0, r5, #25
 8004254:	d5fb      	bpl.n	800424e <_printf_i+0x1ba>
 8004256:	8019      	strh	r1, [r3, #0]
 8004258:	2300      	movs	r3, #0
 800425a:	4616      	mov	r6, r2
 800425c:	6123      	str	r3, [r4, #16]
 800425e:	e7bc      	b.n	80041da <_printf_i+0x146>
 8004260:	6833      	ldr	r3, [r6, #0]
 8004262:	2100      	movs	r1, #0
 8004264:	1d1a      	adds	r2, r3, #4
 8004266:	6032      	str	r2, [r6, #0]
 8004268:	681e      	ldr	r6, [r3, #0]
 800426a:	6862      	ldr	r2, [r4, #4]
 800426c:	4630      	mov	r0, r6
 800426e:	f000 f96b 	bl	8004548 <memchr>
 8004272:	b108      	cbz	r0, 8004278 <_printf_i+0x1e4>
 8004274:	1b80      	subs	r0, r0, r6
 8004276:	6060      	str	r0, [r4, #4]
 8004278:	6863      	ldr	r3, [r4, #4]
 800427a:	6123      	str	r3, [r4, #16]
 800427c:	2300      	movs	r3, #0
 800427e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004282:	e7aa      	b.n	80041da <_printf_i+0x146>
 8004284:	4632      	mov	r2, r6
 8004286:	4649      	mov	r1, r9
 8004288:	4640      	mov	r0, r8
 800428a:	6923      	ldr	r3, [r4, #16]
 800428c:	47d0      	blx	sl
 800428e:	3001      	adds	r0, #1
 8004290:	d0ad      	beq.n	80041ee <_printf_i+0x15a>
 8004292:	6823      	ldr	r3, [r4, #0]
 8004294:	079b      	lsls	r3, r3, #30
 8004296:	d413      	bmi.n	80042c0 <_printf_i+0x22c>
 8004298:	68e0      	ldr	r0, [r4, #12]
 800429a:	9b03      	ldr	r3, [sp, #12]
 800429c:	4298      	cmp	r0, r3
 800429e:	bfb8      	it	lt
 80042a0:	4618      	movlt	r0, r3
 80042a2:	e7a6      	b.n	80041f2 <_printf_i+0x15e>
 80042a4:	2301      	movs	r3, #1
 80042a6:	4632      	mov	r2, r6
 80042a8:	4649      	mov	r1, r9
 80042aa:	4640      	mov	r0, r8
 80042ac:	47d0      	blx	sl
 80042ae:	3001      	adds	r0, #1
 80042b0:	d09d      	beq.n	80041ee <_printf_i+0x15a>
 80042b2:	3501      	adds	r5, #1
 80042b4:	68e3      	ldr	r3, [r4, #12]
 80042b6:	9903      	ldr	r1, [sp, #12]
 80042b8:	1a5b      	subs	r3, r3, r1
 80042ba:	42ab      	cmp	r3, r5
 80042bc:	dcf2      	bgt.n	80042a4 <_printf_i+0x210>
 80042be:	e7eb      	b.n	8004298 <_printf_i+0x204>
 80042c0:	2500      	movs	r5, #0
 80042c2:	f104 0619 	add.w	r6, r4, #25
 80042c6:	e7f5      	b.n	80042b4 <_printf_i+0x220>
 80042c8:	08004617 	.word	0x08004617
 80042cc:	08004628 	.word	0x08004628

080042d0 <__sflush_r>:
 80042d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80042d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042d6:	0716      	lsls	r6, r2, #28
 80042d8:	4605      	mov	r5, r0
 80042da:	460c      	mov	r4, r1
 80042dc:	d454      	bmi.n	8004388 <__sflush_r+0xb8>
 80042de:	684b      	ldr	r3, [r1, #4]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	dc02      	bgt.n	80042ea <__sflush_r+0x1a>
 80042e4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	dd48      	ble.n	800437c <__sflush_r+0xac>
 80042ea:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80042ec:	2e00      	cmp	r6, #0
 80042ee:	d045      	beq.n	800437c <__sflush_r+0xac>
 80042f0:	2300      	movs	r3, #0
 80042f2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80042f6:	682f      	ldr	r7, [r5, #0]
 80042f8:	6a21      	ldr	r1, [r4, #32]
 80042fa:	602b      	str	r3, [r5, #0]
 80042fc:	d030      	beq.n	8004360 <__sflush_r+0x90>
 80042fe:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004300:	89a3      	ldrh	r3, [r4, #12]
 8004302:	0759      	lsls	r1, r3, #29
 8004304:	d505      	bpl.n	8004312 <__sflush_r+0x42>
 8004306:	6863      	ldr	r3, [r4, #4]
 8004308:	1ad2      	subs	r2, r2, r3
 800430a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800430c:	b10b      	cbz	r3, 8004312 <__sflush_r+0x42>
 800430e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004310:	1ad2      	subs	r2, r2, r3
 8004312:	2300      	movs	r3, #0
 8004314:	4628      	mov	r0, r5
 8004316:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004318:	6a21      	ldr	r1, [r4, #32]
 800431a:	47b0      	blx	r6
 800431c:	1c43      	adds	r3, r0, #1
 800431e:	89a3      	ldrh	r3, [r4, #12]
 8004320:	d106      	bne.n	8004330 <__sflush_r+0x60>
 8004322:	6829      	ldr	r1, [r5, #0]
 8004324:	291d      	cmp	r1, #29
 8004326:	d82b      	bhi.n	8004380 <__sflush_r+0xb0>
 8004328:	4a28      	ldr	r2, [pc, #160]	@ (80043cc <__sflush_r+0xfc>)
 800432a:	40ca      	lsrs	r2, r1
 800432c:	07d6      	lsls	r6, r2, #31
 800432e:	d527      	bpl.n	8004380 <__sflush_r+0xb0>
 8004330:	2200      	movs	r2, #0
 8004332:	6062      	str	r2, [r4, #4]
 8004334:	6922      	ldr	r2, [r4, #16]
 8004336:	04d9      	lsls	r1, r3, #19
 8004338:	6022      	str	r2, [r4, #0]
 800433a:	d504      	bpl.n	8004346 <__sflush_r+0x76>
 800433c:	1c42      	adds	r2, r0, #1
 800433e:	d101      	bne.n	8004344 <__sflush_r+0x74>
 8004340:	682b      	ldr	r3, [r5, #0]
 8004342:	b903      	cbnz	r3, 8004346 <__sflush_r+0x76>
 8004344:	6560      	str	r0, [r4, #84]	@ 0x54
 8004346:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004348:	602f      	str	r7, [r5, #0]
 800434a:	b1b9      	cbz	r1, 800437c <__sflush_r+0xac>
 800434c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004350:	4299      	cmp	r1, r3
 8004352:	d002      	beq.n	800435a <__sflush_r+0x8a>
 8004354:	4628      	mov	r0, r5
 8004356:	f7ff fbf5 	bl	8003b44 <_free_r>
 800435a:	2300      	movs	r3, #0
 800435c:	6363      	str	r3, [r4, #52]	@ 0x34
 800435e:	e00d      	b.n	800437c <__sflush_r+0xac>
 8004360:	2301      	movs	r3, #1
 8004362:	4628      	mov	r0, r5
 8004364:	47b0      	blx	r6
 8004366:	4602      	mov	r2, r0
 8004368:	1c50      	adds	r0, r2, #1
 800436a:	d1c9      	bne.n	8004300 <__sflush_r+0x30>
 800436c:	682b      	ldr	r3, [r5, #0]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d0c6      	beq.n	8004300 <__sflush_r+0x30>
 8004372:	2b1d      	cmp	r3, #29
 8004374:	d001      	beq.n	800437a <__sflush_r+0xaa>
 8004376:	2b16      	cmp	r3, #22
 8004378:	d11d      	bne.n	80043b6 <__sflush_r+0xe6>
 800437a:	602f      	str	r7, [r5, #0]
 800437c:	2000      	movs	r0, #0
 800437e:	e021      	b.n	80043c4 <__sflush_r+0xf4>
 8004380:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004384:	b21b      	sxth	r3, r3
 8004386:	e01a      	b.n	80043be <__sflush_r+0xee>
 8004388:	690f      	ldr	r7, [r1, #16]
 800438a:	2f00      	cmp	r7, #0
 800438c:	d0f6      	beq.n	800437c <__sflush_r+0xac>
 800438e:	0793      	lsls	r3, r2, #30
 8004390:	bf18      	it	ne
 8004392:	2300      	movne	r3, #0
 8004394:	680e      	ldr	r6, [r1, #0]
 8004396:	bf08      	it	eq
 8004398:	694b      	ldreq	r3, [r1, #20]
 800439a:	1bf6      	subs	r6, r6, r7
 800439c:	600f      	str	r7, [r1, #0]
 800439e:	608b      	str	r3, [r1, #8]
 80043a0:	2e00      	cmp	r6, #0
 80043a2:	ddeb      	ble.n	800437c <__sflush_r+0xac>
 80043a4:	4633      	mov	r3, r6
 80043a6:	463a      	mov	r2, r7
 80043a8:	4628      	mov	r0, r5
 80043aa:	6a21      	ldr	r1, [r4, #32]
 80043ac:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 80043b0:	47e0      	blx	ip
 80043b2:	2800      	cmp	r0, #0
 80043b4:	dc07      	bgt.n	80043c6 <__sflush_r+0xf6>
 80043b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80043be:	f04f 30ff 	mov.w	r0, #4294967295
 80043c2:	81a3      	strh	r3, [r4, #12]
 80043c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043c6:	4407      	add	r7, r0
 80043c8:	1a36      	subs	r6, r6, r0
 80043ca:	e7e9      	b.n	80043a0 <__sflush_r+0xd0>
 80043cc:	20400001 	.word	0x20400001

080043d0 <_fflush_r>:
 80043d0:	b538      	push	{r3, r4, r5, lr}
 80043d2:	690b      	ldr	r3, [r1, #16]
 80043d4:	4605      	mov	r5, r0
 80043d6:	460c      	mov	r4, r1
 80043d8:	b913      	cbnz	r3, 80043e0 <_fflush_r+0x10>
 80043da:	2500      	movs	r5, #0
 80043dc:	4628      	mov	r0, r5
 80043de:	bd38      	pop	{r3, r4, r5, pc}
 80043e0:	b118      	cbz	r0, 80043ea <_fflush_r+0x1a>
 80043e2:	6a03      	ldr	r3, [r0, #32]
 80043e4:	b90b      	cbnz	r3, 80043ea <_fflush_r+0x1a>
 80043e6:	f7ff f9b3 	bl	8003750 <__sinit>
 80043ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d0f3      	beq.n	80043da <_fflush_r+0xa>
 80043f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80043f4:	07d0      	lsls	r0, r2, #31
 80043f6:	d404      	bmi.n	8004402 <_fflush_r+0x32>
 80043f8:	0599      	lsls	r1, r3, #22
 80043fa:	d402      	bmi.n	8004402 <_fflush_r+0x32>
 80043fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80043fe:	f7ff fb9e 	bl	8003b3e <__retarget_lock_acquire_recursive>
 8004402:	4628      	mov	r0, r5
 8004404:	4621      	mov	r1, r4
 8004406:	f7ff ff63 	bl	80042d0 <__sflush_r>
 800440a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800440c:	4605      	mov	r5, r0
 800440e:	07da      	lsls	r2, r3, #31
 8004410:	d4e4      	bmi.n	80043dc <_fflush_r+0xc>
 8004412:	89a3      	ldrh	r3, [r4, #12]
 8004414:	059b      	lsls	r3, r3, #22
 8004416:	d4e1      	bmi.n	80043dc <_fflush_r+0xc>
 8004418:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800441a:	f7ff fb91 	bl	8003b40 <__retarget_lock_release_recursive>
 800441e:	e7dd      	b.n	80043dc <_fflush_r+0xc>

08004420 <__swhatbuf_r>:
 8004420:	b570      	push	{r4, r5, r6, lr}
 8004422:	460c      	mov	r4, r1
 8004424:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004428:	4615      	mov	r5, r2
 800442a:	2900      	cmp	r1, #0
 800442c:	461e      	mov	r6, r3
 800442e:	b096      	sub	sp, #88	@ 0x58
 8004430:	da0c      	bge.n	800444c <__swhatbuf_r+0x2c>
 8004432:	89a3      	ldrh	r3, [r4, #12]
 8004434:	2100      	movs	r1, #0
 8004436:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800443a:	bf14      	ite	ne
 800443c:	2340      	movne	r3, #64	@ 0x40
 800443e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004442:	2000      	movs	r0, #0
 8004444:	6031      	str	r1, [r6, #0]
 8004446:	602b      	str	r3, [r5, #0]
 8004448:	b016      	add	sp, #88	@ 0x58
 800444a:	bd70      	pop	{r4, r5, r6, pc}
 800444c:	466a      	mov	r2, sp
 800444e:	f000 f849 	bl	80044e4 <_fstat_r>
 8004452:	2800      	cmp	r0, #0
 8004454:	dbed      	blt.n	8004432 <__swhatbuf_r+0x12>
 8004456:	9901      	ldr	r1, [sp, #4]
 8004458:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800445c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004460:	4259      	negs	r1, r3
 8004462:	4159      	adcs	r1, r3
 8004464:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004468:	e7eb      	b.n	8004442 <__swhatbuf_r+0x22>

0800446a <__smakebuf_r>:
 800446a:	898b      	ldrh	r3, [r1, #12]
 800446c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800446e:	079d      	lsls	r5, r3, #30
 8004470:	4606      	mov	r6, r0
 8004472:	460c      	mov	r4, r1
 8004474:	d507      	bpl.n	8004486 <__smakebuf_r+0x1c>
 8004476:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800447a:	6023      	str	r3, [r4, #0]
 800447c:	6123      	str	r3, [r4, #16]
 800447e:	2301      	movs	r3, #1
 8004480:	6163      	str	r3, [r4, #20]
 8004482:	b003      	add	sp, #12
 8004484:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004486:	466a      	mov	r2, sp
 8004488:	ab01      	add	r3, sp, #4
 800448a:	f7ff ffc9 	bl	8004420 <__swhatbuf_r>
 800448e:	9f00      	ldr	r7, [sp, #0]
 8004490:	4605      	mov	r5, r0
 8004492:	4639      	mov	r1, r7
 8004494:	4630      	mov	r0, r6
 8004496:	f7ff fbbf 	bl	8003c18 <_malloc_r>
 800449a:	b948      	cbnz	r0, 80044b0 <__smakebuf_r+0x46>
 800449c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044a0:	059a      	lsls	r2, r3, #22
 80044a2:	d4ee      	bmi.n	8004482 <__smakebuf_r+0x18>
 80044a4:	f023 0303 	bic.w	r3, r3, #3
 80044a8:	f043 0302 	orr.w	r3, r3, #2
 80044ac:	81a3      	strh	r3, [r4, #12]
 80044ae:	e7e2      	b.n	8004476 <__smakebuf_r+0xc>
 80044b0:	89a3      	ldrh	r3, [r4, #12]
 80044b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80044b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80044ba:	81a3      	strh	r3, [r4, #12]
 80044bc:	9b01      	ldr	r3, [sp, #4]
 80044be:	6020      	str	r0, [r4, #0]
 80044c0:	b15b      	cbz	r3, 80044da <__smakebuf_r+0x70>
 80044c2:	4630      	mov	r0, r6
 80044c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80044c8:	f000 f81e 	bl	8004508 <_isatty_r>
 80044cc:	b128      	cbz	r0, 80044da <__smakebuf_r+0x70>
 80044ce:	89a3      	ldrh	r3, [r4, #12]
 80044d0:	f023 0303 	bic.w	r3, r3, #3
 80044d4:	f043 0301 	orr.w	r3, r3, #1
 80044d8:	81a3      	strh	r3, [r4, #12]
 80044da:	89a3      	ldrh	r3, [r4, #12]
 80044dc:	431d      	orrs	r5, r3
 80044de:	81a5      	strh	r5, [r4, #12]
 80044e0:	e7cf      	b.n	8004482 <__smakebuf_r+0x18>
	...

080044e4 <_fstat_r>:
 80044e4:	b538      	push	{r3, r4, r5, lr}
 80044e6:	2300      	movs	r3, #0
 80044e8:	4d06      	ldr	r5, [pc, #24]	@ (8004504 <_fstat_r+0x20>)
 80044ea:	4604      	mov	r4, r0
 80044ec:	4608      	mov	r0, r1
 80044ee:	4611      	mov	r1, r2
 80044f0:	602b      	str	r3, [r5, #0]
 80044f2:	f7fc facd 	bl	8000a90 <_fstat>
 80044f6:	1c43      	adds	r3, r0, #1
 80044f8:	d102      	bne.n	8004500 <_fstat_r+0x1c>
 80044fa:	682b      	ldr	r3, [r5, #0]
 80044fc:	b103      	cbz	r3, 8004500 <_fstat_r+0x1c>
 80044fe:	6023      	str	r3, [r4, #0]
 8004500:	bd38      	pop	{r3, r4, r5, pc}
 8004502:	bf00      	nop
 8004504:	20000320 	.word	0x20000320

08004508 <_isatty_r>:
 8004508:	b538      	push	{r3, r4, r5, lr}
 800450a:	2300      	movs	r3, #0
 800450c:	4d05      	ldr	r5, [pc, #20]	@ (8004524 <_isatty_r+0x1c>)
 800450e:	4604      	mov	r4, r0
 8004510:	4608      	mov	r0, r1
 8004512:	602b      	str	r3, [r5, #0]
 8004514:	f7fc facb 	bl	8000aae <_isatty>
 8004518:	1c43      	adds	r3, r0, #1
 800451a:	d102      	bne.n	8004522 <_isatty_r+0x1a>
 800451c:	682b      	ldr	r3, [r5, #0]
 800451e:	b103      	cbz	r3, 8004522 <_isatty_r+0x1a>
 8004520:	6023      	str	r3, [r4, #0]
 8004522:	bd38      	pop	{r3, r4, r5, pc}
 8004524:	20000320 	.word	0x20000320

08004528 <_sbrk_r>:
 8004528:	b538      	push	{r3, r4, r5, lr}
 800452a:	2300      	movs	r3, #0
 800452c:	4d05      	ldr	r5, [pc, #20]	@ (8004544 <_sbrk_r+0x1c>)
 800452e:	4604      	mov	r4, r0
 8004530:	4608      	mov	r0, r1
 8004532:	602b      	str	r3, [r5, #0]
 8004534:	f7fc fad2 	bl	8000adc <_sbrk>
 8004538:	1c43      	adds	r3, r0, #1
 800453a:	d102      	bne.n	8004542 <_sbrk_r+0x1a>
 800453c:	682b      	ldr	r3, [r5, #0]
 800453e:	b103      	cbz	r3, 8004542 <_sbrk_r+0x1a>
 8004540:	6023      	str	r3, [r4, #0]
 8004542:	bd38      	pop	{r3, r4, r5, pc}
 8004544:	20000320 	.word	0x20000320

08004548 <memchr>:
 8004548:	4603      	mov	r3, r0
 800454a:	b510      	push	{r4, lr}
 800454c:	b2c9      	uxtb	r1, r1
 800454e:	4402      	add	r2, r0
 8004550:	4293      	cmp	r3, r2
 8004552:	4618      	mov	r0, r3
 8004554:	d101      	bne.n	800455a <memchr+0x12>
 8004556:	2000      	movs	r0, #0
 8004558:	e003      	b.n	8004562 <memchr+0x1a>
 800455a:	7804      	ldrb	r4, [r0, #0]
 800455c:	3301      	adds	r3, #1
 800455e:	428c      	cmp	r4, r1
 8004560:	d1f6      	bne.n	8004550 <memchr+0x8>
 8004562:	bd10      	pop	{r4, pc}

08004564 <_init>:
 8004564:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004566:	bf00      	nop
 8004568:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800456a:	bc08      	pop	{r3}
 800456c:	469e      	mov	lr, r3
 800456e:	4770      	bx	lr

08004570 <_fini>:
 8004570:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004572:	bf00      	nop
 8004574:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004576:	bc08      	pop	{r3}
 8004578:	469e      	mov	lr, r3
 800457a:	4770      	bx	lr
