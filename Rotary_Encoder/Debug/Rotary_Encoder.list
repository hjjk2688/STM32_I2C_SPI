
Rotary_Encoder.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000301c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  08003128  08003128  00004128  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080032ac  080032ac  00005068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080032ac  080032ac  00005068  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080032ac  080032ac  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080032ac  080032ac  000042ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080032b0  080032b0  000042b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  080032b4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000020c  20000068  0800331c  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000274  0800331c  00005274  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b4a8  00000000  00000000  00005091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001ac2  00000000  00000000  00010539  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c38  00000000  00000000  00012000  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000098b  00000000  00000000  00012c38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000185a6  00000000  00000000  000135c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000cf7f  00000000  00000000  0002bb69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c1a8  00000000  00000000  00038ae8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c4c90  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ac8  00000000  00000000  000c4cd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000067  00000000  00000000  000c879c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08003110 	.word	0x08003110

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08003110 	.word	0x08003110

0800014c <__io_putchar>:
#ifdef __GNUC__
#define PUTCHAR_PROTOTYPE int __io_putchar(int ch)
#else
#define PUTCHAR_PROT0TYPE int fputc(int ch, FILE *f)
#endif
PUTCHAR_PROTOTYPE {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	6078      	str	r0, [r7, #4]
	if (ch == '\n')
 8000154:	687b      	ldr	r3, [r7, #4]
 8000156:	2b0a      	cmp	r3, #10
 8000158:	d106      	bne.n	8000168 <__io_putchar+0x1c>
		HAL_UART_Transmit(&huart2, (uint8_t*) "\r", 1, 0xFFFF);
 800015a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800015e:	2201      	movs	r2, #1
 8000160:	4907      	ldr	r1, [pc, #28]	@ (8000180 <__io_putchar+0x34>)
 8000162:	4808      	ldr	r0, [pc, #32]	@ (8000184 <__io_putchar+0x38>)
 8000164:	f001 fe6a 	bl	8001e3c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, (uint8_t*) &ch, 1, 0xFFFF);
 8000168:	1d39      	adds	r1, r7, #4
 800016a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800016e:	2201      	movs	r2, #1
 8000170:	4804      	ldr	r0, [pc, #16]	@ (8000184 <__io_putchar+0x38>)
 8000172:	f001 fe63 	bl	8001e3c <HAL_UART_Transmit>

	return ch;
 8000176:	687b      	ldr	r3, [r7, #4]
}
 8000178:	4618      	mov	r0, r3
 800017a:	3708      	adds	r7, #8
 800017c:	46bd      	mov	sp, r7
 800017e:	bd80      	pop	{r7, pc}
 8000180:	08003128 	.word	0x08003128
 8000184:	200000cc 	.word	0x200000cc

08000188 <Encoder_Init>:

void Encoder_Init(void) {
 8000188:	b580      	push	{r7, lr}
 800018a:	b082      	sub	sp, #8
 800018c:	af00      	add	r7, sp, #0
	// 초기 상태 읽기
	uint8_t clk = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 800018e:	2101      	movs	r1, #1
 8000190:	480e      	ldr	r0, [pc, #56]	@ (80001cc <Encoder_Init+0x44>)
 8000192:	f000 fee7 	bl	8000f64 <HAL_GPIO_ReadPin>
 8000196:	4603      	mov	r3, r0
 8000198:	71fb      	strb	r3, [r7, #7]
	uint8_t dt = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
 800019a:	2102      	movs	r1, #2
 800019c:	480b      	ldr	r0, [pc, #44]	@ (80001cc <Encoder_Init+0x44>)
 800019e:	f000 fee1 	bl	8000f64 <HAL_GPIO_ReadPin>
 80001a2:	4603      	mov	r3, r0
 80001a4:	71bb      	strb	r3, [r7, #6]
	encoder_last_encoded = (clk << 1) | dt;
 80001a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80001aa:	005b      	lsls	r3, r3, #1
 80001ac:	b25a      	sxtb	r2, r3
 80001ae:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80001b2:	4313      	orrs	r3, r2
 80001b4:	b25b      	sxtb	r3, r3
 80001b6:	b2da      	uxtb	r2, r3
 80001b8:	4b05      	ldr	r3, [pc, #20]	@ (80001d0 <Encoder_Init+0x48>)
 80001ba:	701a      	strb	r2, [r3, #0]
	encoder_count = 0;
 80001bc:	4b05      	ldr	r3, [pc, #20]	@ (80001d4 <Encoder_Init+0x4c>)
 80001be:	2200      	movs	r2, #0
 80001c0:	601a      	str	r2, [r3, #0]
}
 80001c2:	bf00      	nop
 80001c4:	3708      	adds	r7, #8
 80001c6:	46bd      	mov	sp, r7
 80001c8:	bd80      	pop	{r7, pc}
 80001ca:	bf00      	nop
 80001cc:	40010800 	.word	0x40010800
 80001d0:	20000118 	.word	0x20000118
 80001d4:	20000114 	.word	0x20000114

080001d8 <HAL_GPIO_EXTI_Callback>:

/**
 * @brief GPIO 외부 인터럽트 콜백 함수 (그레이 코드 방식)
 * 안정적인 로터리 인코더 감지
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80001d8:	b580      	push	{r7, lr}
 80001da:	b084      	sub	sp, #16
 80001dc:	af00      	add	r7, sp, #0
 80001de:	4603      	mov	r3, r0
 80001e0:	80fb      	strh	r3, [r7, #6]
	uint32_t current_time = HAL_GetTick();
 80001e2:	f000 fbff 	bl	80009e4 <HAL_GetTick>
 80001e6:	60f8      	str	r0, [r7, #12]

	// 디바운스 처리
	if (current_time - last_interrupt_time < DEBOUNCE_DELAY) {
 80001e8:	4b2c      	ldr	r3, [pc, #176]	@ (800029c <HAL_GPIO_EXTI_Callback+0xc4>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	68fa      	ldr	r2, [r7, #12]
 80001ee:	1ad3      	subs	r3, r2, r3
 80001f0:	2b04      	cmp	r3, #4
 80001f2:	d94e      	bls.n	8000292 <HAL_GPIO_EXTI_Callback+0xba>
		return;
	}
	last_interrupt_time = current_time;
 80001f4:	4a29      	ldr	r2, [pc, #164]	@ (800029c <HAL_GPIO_EXTI_Callback+0xc4>)
 80001f6:	68fb      	ldr	r3, [r7, #12]
 80001f8:	6013      	str	r3, [r2, #0]

	// 인코더 핀들 처리 (PA0, PA1)
	if (GPIO_Pin == GPIO_PIN_0 || GPIO_Pin == GPIO_PIN_1) {
 80001fa:	88fb      	ldrh	r3, [r7, #6]
 80001fc:	2b01      	cmp	r3, #1
 80001fe:	d002      	beq.n	8000206 <HAL_GPIO_EXTI_Callback+0x2e>
 8000200:	88fb      	ldrh	r3, [r7, #6]
 8000202:	2b02      	cmp	r3, #2
 8000204:	d146      	bne.n	8000294 <HAL_GPIO_EXTI_Callback+0xbc>
		// 현재 상태 읽기
		uint8_t clk = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0);
 8000206:	2101      	movs	r1, #1
 8000208:	4825      	ldr	r0, [pc, #148]	@ (80002a0 <HAL_GPIO_EXTI_Callback+0xc8>)
 800020a:	f000 feab 	bl	8000f64 <HAL_GPIO_ReadPin>
 800020e:	4603      	mov	r3, r0
 8000210:	72fb      	strb	r3, [r7, #11]
		uint8_t dt = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_1);
 8000212:	2102      	movs	r1, #2
 8000214:	4822      	ldr	r0, [pc, #136]	@ (80002a0 <HAL_GPIO_EXTI_Callback+0xc8>)
 8000216:	f000 fea5 	bl	8000f64 <HAL_GPIO_ReadPin>
 800021a:	4603      	mov	r3, r0
 800021c:	72bb      	strb	r3, [r7, #10]
		uint8_t encoded = (clk << 1) | dt;  // 2비트 상태 생성
 800021e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8000222:	005b      	lsls	r3, r3, #1
 8000224:	b25a      	sxtb	r2, r3
 8000226:	f997 300a 	ldrsb.w	r3, [r7, #10]
 800022a:	4313      	orrs	r3, r2
 800022c:	b25b      	sxtb	r3, r3
 800022e:	727b      	strb	r3, [r7, #9]

		uint8_t sum = (encoder_last_encoded << 2) | encoded;  // 이전 상태와 현재 상태 결합
 8000230:	4b1c      	ldr	r3, [pc, #112]	@ (80002a4 <HAL_GPIO_EXTI_Callback+0xcc>)
 8000232:	781b      	ldrb	r3, [r3, #0]
 8000234:	b2db      	uxtb	r3, r3
 8000236:	b25b      	sxtb	r3, r3
 8000238:	009b      	lsls	r3, r3, #2
 800023a:	b25a      	sxtb	r2, r3
 800023c:	f997 3009 	ldrsb.w	r3, [r7, #9]
 8000240:	4313      	orrs	r3, r2
 8000242:	b25b      	sxtb	r3, r3
 8000244:	723b      	strb	r3, [r7, #8]

		// 회전 방향 결정 (그레이 코드 기반)
		if (sum == 0b1101 || sum == 0b0100 || sum == 0b0010 || sum == 0b1011) {
 8000246:	7a3b      	ldrb	r3, [r7, #8]
 8000248:	2b0d      	cmp	r3, #13
 800024a:	d008      	beq.n	800025e <HAL_GPIO_EXTI_Callback+0x86>
 800024c:	7a3b      	ldrb	r3, [r7, #8]
 800024e:	2b04      	cmp	r3, #4
 8000250:	d005      	beq.n	800025e <HAL_GPIO_EXTI_Callback+0x86>
 8000252:	7a3b      	ldrb	r3, [r7, #8]
 8000254:	2b02      	cmp	r3, #2
 8000256:	d002      	beq.n	800025e <HAL_GPIO_EXTI_Callback+0x86>
 8000258:	7a3b      	ldrb	r3, [r7, #8]
 800025a:	2b0b      	cmp	r3, #11
 800025c:	d104      	bne.n	8000268 <HAL_GPIO_EXTI_Callback+0x90>
			encoder_count++;  // 시계방향
 800025e:	4b12      	ldr	r3, [pc, #72]	@ (80002a8 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	3301      	adds	r3, #1
 8000264:	4a10      	ldr	r2, [pc, #64]	@ (80002a8 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000266:	6013      	str	r3, [r2, #0]
		}
		if (sum == 0b1110 || sum == 0b0111 || sum == 0b0001 || sum == 0b1000) {
 8000268:	7a3b      	ldrb	r3, [r7, #8]
 800026a:	2b0e      	cmp	r3, #14
 800026c:	d008      	beq.n	8000280 <HAL_GPIO_EXTI_Callback+0xa8>
 800026e:	7a3b      	ldrb	r3, [r7, #8]
 8000270:	2b07      	cmp	r3, #7
 8000272:	d005      	beq.n	8000280 <HAL_GPIO_EXTI_Callback+0xa8>
 8000274:	7a3b      	ldrb	r3, [r7, #8]
 8000276:	2b01      	cmp	r3, #1
 8000278:	d002      	beq.n	8000280 <HAL_GPIO_EXTI_Callback+0xa8>
 800027a:	7a3b      	ldrb	r3, [r7, #8]
 800027c:	2b08      	cmp	r3, #8
 800027e:	d104      	bne.n	800028a <HAL_GPIO_EXTI_Callback+0xb2>
			encoder_count--;  // 반시계방향
 8000280:	4b09      	ldr	r3, [pc, #36]	@ (80002a8 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	3b01      	subs	r3, #1
 8000286:	4a08      	ldr	r2, [pc, #32]	@ (80002a8 <HAL_GPIO_EXTI_Callback+0xd0>)
 8000288:	6013      	str	r3, [r2, #0]
		}

		encoder_last_encoded = encoded;
 800028a:	4a06      	ldr	r2, [pc, #24]	@ (80002a4 <HAL_GPIO_EXTI_Callback+0xcc>)
 800028c:	7a7b      	ldrb	r3, [r7, #9]
 800028e:	7013      	strb	r3, [r2, #0]
 8000290:	e000      	b.n	8000294 <HAL_GPIO_EXTI_Callback+0xbc>
		return;
 8000292:	bf00      	nop
	}
}
 8000294:	3710      	adds	r7, #16
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
 800029a:	bf00      	nop
 800029c:	2000011c 	.word	0x2000011c
 80002a0:	40010800 	.word	0x40010800
 80002a4:	20000118 	.word	0x20000118
 80002a8:	20000114 	.word	0x20000114

080002ac <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80002ac:	b580      	push	{r7, lr}
 80002ae:	b082      	sub	sp, #8
 80002b0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN 1 */
	int32_t last_encoder_count = 0;
 80002b2:	2300      	movs	r3, #0
 80002b4:	607b      	str	r3, [r7, #4]
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80002b6:	f000 fb3d 	bl	8000934 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80002ba:	f000 f855 	bl	8000368 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80002be:	f000 f90d 	bl	80004dc <MX_GPIO_Init>
	MX_USART2_UART_Init();
 80002c2:	f000 f8e1 	bl	8000488 <MX_USART2_UART_Init>
	MX_TIM2_Init();
 80002c6:	f000 f891 	bl	80003ec <MX_TIM2_Init>
	/* USER CODE BEGIN 2 */
	// 로터리 인코더 초기화
	Encoder_Init();
 80002ca:	f7ff ff5d 	bl	8000188 <Encoder_Init>

	// 타이머 시작 (시간 측정용)
	HAL_TIM_Base_Start(&htim2);
 80002ce:	481b      	ldr	r0, [pc, #108]	@ (800033c <main+0x90>)
 80002d0:	f001 faf0 	bl	80018b4 <HAL_TIM_Base_Start>

	printf("=============================\r\n");
 80002d4:	481a      	ldr	r0, [pc, #104]	@ (8000340 <main+0x94>)
 80002d6:	f002 f8af 	bl	8002438 <puts>
	printf("STM32F103 로터리 인코더 테스트 시작\r\n");
 80002da:	481a      	ldr	r0, [pc, #104]	@ (8000344 <main+0x98>)
 80002dc:	f002 f8ac 	bl	8002438 <puts>
	printf("시스템 클록: %lu Hz\r\n", SystemCoreClock);
 80002e0:	4b19      	ldr	r3, [pc, #100]	@ (8000348 <main+0x9c>)
 80002e2:	681b      	ldr	r3, [r3, #0]
 80002e4:	4619      	mov	r1, r3
 80002e6:	4819      	ldr	r0, [pc, #100]	@ (800034c <main+0xa0>)
 80002e8:	f002 f83e 	bl	8002368 <iprintf>
	printf("그레이 코드 기반 안정적 감지 방식 적용\r\n");
 80002ec:	4818      	ldr	r0, [pc, #96]	@ (8000350 <main+0xa4>)
 80002ee:	f002 f8a3 	bl	8002438 <puts>
	printf("인코더 카운트 변화를 모니터링합니다...\r\n");
 80002f2:	4818      	ldr	r0, [pc, #96]	@ (8000354 <main+0xa8>)
 80002f4:	f002 f8a0 	bl	8002438 <puts>
	printf("=============================\r\n");
 80002f8:	4811      	ldr	r0, [pc, #68]	@ (8000340 <main+0x94>)
 80002fa:	f002 f89d 	bl	8002438 <puts>

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		// 인코더 값 변화 감지 및 출력
		if (encoder_count != last_encoder_count) {
 80002fe:	4b16      	ldr	r3, [pc, #88]	@ (8000358 <main+0xac>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	687a      	ldr	r2, [r7, #4]
 8000304:	429a      	cmp	r2, r3
 8000306:	d014      	beq.n	8000332 <main+0x86>
			printf("인코더 카운트: %ld", encoder_count);
 8000308:	4b13      	ldr	r3, [pc, #76]	@ (8000358 <main+0xac>)
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	4619      	mov	r1, r3
 800030e:	4813      	ldr	r0, [pc, #76]	@ (800035c <main+0xb0>)
 8000310:	f002 f82a 	bl	8002368 <iprintf>

			if (encoder_count > last_encoder_count) {
 8000314:	4b10      	ldr	r3, [pc, #64]	@ (8000358 <main+0xac>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	687a      	ldr	r2, [r7, #4]
 800031a:	429a      	cmp	r2, r3
 800031c:	da03      	bge.n	8000326 <main+0x7a>
				printf(" (시계방향)\r\n");
 800031e:	4810      	ldr	r0, [pc, #64]	@ (8000360 <main+0xb4>)
 8000320:	f002 f88a 	bl	8002438 <puts>
 8000324:	e002      	b.n	800032c <main+0x80>
			} else {
				printf(" (반시계방향)\r\n");
 8000326:	480f      	ldr	r0, [pc, #60]	@ (8000364 <main+0xb8>)
 8000328:	f002 f886 	bl	8002438 <puts>
			}

			last_encoder_count = encoder_count;
 800032c:	4b0a      	ldr	r3, [pc, #40]	@ (8000358 <main+0xac>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	607b      	str	r3, [r7, #4]
		}

		HAL_Delay(1);  // CPU 부하 감소
 8000332:	2001      	movs	r0, #1
 8000334:	f000 fb60 	bl	80009f8 <HAL_Delay>
		if (encoder_count != last_encoder_count) {
 8000338:	e7e1      	b.n	80002fe <main+0x52>
 800033a:	bf00      	nop
 800033c:	20000084 	.word	0x20000084
 8000340:	0800312c 	.word	0x0800312c
 8000344:	0800314c 	.word	0x0800314c
 8000348:	20000000 	.word	0x20000000
 800034c:	0800317c 	.word	0x0800317c
 8000350:	08003198 	.word	0x08003198
 8000354:	080031d0 	.word	0x080031d0
 8000358:	20000114 	.word	0x20000114
 800035c:	08003208 	.word	0x08003208
 8000360:	08003224 	.word	0x08003224
 8000364:	08003238 	.word	0x08003238

08000368 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000368:	b580      	push	{r7, lr}
 800036a:	b090      	sub	sp, #64	@ 0x40
 800036c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800036e:	f107 0318 	add.w	r3, r7, #24
 8000372:	2228      	movs	r2, #40	@ 0x28
 8000374:	2100      	movs	r1, #0
 8000376:	4618      	mov	r0, r3
 8000378:	f002 f93e 	bl	80025f8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 800037c:	1d3b      	adds	r3, r7, #4
 800037e:	2200      	movs	r2, #0
 8000380:	601a      	str	r2, [r3, #0]
 8000382:	605a      	str	r2, [r3, #4]
 8000384:	609a      	str	r2, [r3, #8]
 8000386:	60da      	str	r2, [r3, #12]
 8000388:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800038a:	2302      	movs	r3, #2
 800038c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800038e:	2301      	movs	r3, #1
 8000390:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000392:	2310      	movs	r3, #16
 8000394:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000396:	2302      	movs	r3, #2
 8000398:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800039a:	2300      	movs	r3, #0
 800039c:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800039e:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80003a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 80003a4:	f107 0318 	add.w	r3, r7, #24
 80003a8:	4618      	mov	r0, r3
 80003aa:	f000 fe23 	bl	8000ff4 <HAL_RCC_OscConfig>
 80003ae:	4603      	mov	r3, r0
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d001      	beq.n	80003b8 <SystemClock_Config+0x50>
		Error_Handler();
 80003b4:	f000 f91e 	bl	80005f4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 80003b8:	230f      	movs	r3, #15
 80003ba:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80003bc:	2302      	movs	r3, #2
 80003be:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80003c0:	2300      	movs	r3, #0
 80003c2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80003c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80003c8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80003ca:	2300      	movs	r3, #0
 80003cc:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 80003ce:	1d3b      	adds	r3, r7, #4
 80003d0:	2102      	movs	r1, #2
 80003d2:	4618      	mov	r0, r3
 80003d4:	f001 f890 	bl	80014f8 <HAL_RCC_ClockConfig>
 80003d8:	4603      	mov	r3, r0
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d001      	beq.n	80003e2 <SystemClock_Config+0x7a>
		Error_Handler();
 80003de:	f000 f909 	bl	80005f4 <Error_Handler>
	}
}
 80003e2:	bf00      	nop
 80003e4:	3740      	adds	r7, #64	@ 0x40
 80003e6:	46bd      	mov	sp, r7
 80003e8:	bd80      	pop	{r7, pc}
	...

080003ec <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 80003ec:	b580      	push	{r7, lr}
 80003ee:	b086      	sub	sp, #24
 80003f0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 80003f2:	f107 0308 	add.w	r3, r7, #8
 80003f6:	2200      	movs	r2, #0
 80003f8:	601a      	str	r2, [r3, #0]
 80003fa:	605a      	str	r2, [r3, #4]
 80003fc:	609a      	str	r2, [r3, #8]
 80003fe:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000400:	463b      	mov	r3, r7
 8000402:	2200      	movs	r2, #0
 8000404:	601a      	str	r2, [r3, #0]
 8000406:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000408:	4b1e      	ldr	r3, [pc, #120]	@ (8000484 <MX_TIM2_Init+0x98>)
 800040a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800040e:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 64000 - 1;
 8000410:	4b1c      	ldr	r3, [pc, #112]	@ (8000484 <MX_TIM2_Init+0x98>)
 8000412:	f64f 12ff 	movw	r2, #63999	@ 0xf9ff
 8000416:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000418:	4b1a      	ldr	r3, [pc, #104]	@ (8000484 <MX_TIM2_Init+0x98>)
 800041a:	2200      	movs	r2, #0
 800041c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 1000 - 1;
 800041e:	4b19      	ldr	r3, [pc, #100]	@ (8000484 <MX_TIM2_Init+0x98>)
 8000420:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000424:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000426:	4b17      	ldr	r3, [pc, #92]	@ (8000484 <MX_TIM2_Init+0x98>)
 8000428:	2200      	movs	r2, #0
 800042a:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800042c:	4b15      	ldr	r3, [pc, #84]	@ (8000484 <MX_TIM2_Init+0x98>)
 800042e:	2200      	movs	r2, #0
 8000430:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000432:	4814      	ldr	r0, [pc, #80]	@ (8000484 <MX_TIM2_Init+0x98>)
 8000434:	f001 f9ee 	bl	8001814 <HAL_TIM_Base_Init>
 8000438:	4603      	mov	r3, r0
 800043a:	2b00      	cmp	r3, #0
 800043c:	d001      	beq.n	8000442 <MX_TIM2_Init+0x56>
		Error_Handler();
 800043e:	f000 f8d9 	bl	80005f4 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000442:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000446:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000448:	f107 0308 	add.w	r3, r7, #8
 800044c:	4619      	mov	r1, r3
 800044e:	480d      	ldr	r0, [pc, #52]	@ (8000484 <MX_TIM2_Init+0x98>)
 8000450:	f001 fa7a 	bl	8001948 <HAL_TIM_ConfigClockSource>
 8000454:	4603      	mov	r3, r0
 8000456:	2b00      	cmp	r3, #0
 8000458:	d001      	beq.n	800045e <MX_TIM2_Init+0x72>
		Error_Handler();
 800045a:	f000 f8cb 	bl	80005f4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800045e:	2300      	movs	r3, #0
 8000460:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000462:	2300      	movs	r3, #0
 8000464:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000466:	463b      	mov	r3, r7
 8000468:	4619      	mov	r1, r3
 800046a:	4806      	ldr	r0, [pc, #24]	@ (8000484 <MX_TIM2_Init+0x98>)
 800046c:	f001 fc38 	bl	8001ce0 <HAL_TIMEx_MasterConfigSynchronization>
 8000470:	4603      	mov	r3, r0
 8000472:	2b00      	cmp	r3, #0
 8000474:	d001      	beq.n	800047a <MX_TIM2_Init+0x8e>
			!= HAL_OK) {
		Error_Handler();
 8000476:	f000 f8bd 	bl	80005f4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 800047a:	bf00      	nop
 800047c:	3718      	adds	r7, #24
 800047e:	46bd      	mov	sp, r7
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	20000084 	.word	0x20000084

08000488 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 800048c:	4b11      	ldr	r3, [pc, #68]	@ (80004d4 <MX_USART2_UART_Init+0x4c>)
 800048e:	4a12      	ldr	r2, [pc, #72]	@ (80004d8 <MX_USART2_UART_Init+0x50>)
 8000490:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000492:	4b10      	ldr	r3, [pc, #64]	@ (80004d4 <MX_USART2_UART_Init+0x4c>)
 8000494:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000498:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800049a:	4b0e      	ldr	r3, [pc, #56]	@ (80004d4 <MX_USART2_UART_Init+0x4c>)
 800049c:	2200      	movs	r2, #0
 800049e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80004a0:	4b0c      	ldr	r3, [pc, #48]	@ (80004d4 <MX_USART2_UART_Init+0x4c>)
 80004a2:	2200      	movs	r2, #0
 80004a4:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80004a6:	4b0b      	ldr	r3, [pc, #44]	@ (80004d4 <MX_USART2_UART_Init+0x4c>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80004ac:	4b09      	ldr	r3, [pc, #36]	@ (80004d4 <MX_USART2_UART_Init+0x4c>)
 80004ae:	220c      	movs	r2, #12
 80004b0:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004b2:	4b08      	ldr	r3, [pc, #32]	@ (80004d4 <MX_USART2_UART_Init+0x4c>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004b8:	4b06      	ldr	r3, [pc, #24]	@ (80004d4 <MX_USART2_UART_Init+0x4c>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 80004be:	4805      	ldr	r0, [pc, #20]	@ (80004d4 <MX_USART2_UART_Init+0x4c>)
 80004c0:	f001 fc6c 	bl	8001d9c <HAL_UART_Init>
 80004c4:	4603      	mov	r3, r0
 80004c6:	2b00      	cmp	r3, #0
 80004c8:	d001      	beq.n	80004ce <MX_USART2_UART_Init+0x46>
		Error_Handler();
 80004ca:	f000 f893 	bl	80005f4 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80004ce:	bf00      	nop
 80004d0:	bd80      	pop	{r7, pc}
 80004d2:	bf00      	nop
 80004d4:	200000cc 	.word	0x200000cc
 80004d8:	40004400 	.word	0x40004400

080004dc <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	b088      	sub	sp, #32
 80004e0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80004e2:	f107 0310 	add.w	r3, r7, #16
 80004e6:	2200      	movs	r2, #0
 80004e8:	601a      	str	r2, [r3, #0]
 80004ea:	605a      	str	r2, [r3, #4]
 80004ec:	609a      	str	r2, [r3, #8]
 80004ee:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80004f0:	4b3b      	ldr	r3, [pc, #236]	@ (80005e0 <MX_GPIO_Init+0x104>)
 80004f2:	699b      	ldr	r3, [r3, #24]
 80004f4:	4a3a      	ldr	r2, [pc, #232]	@ (80005e0 <MX_GPIO_Init+0x104>)
 80004f6:	f043 0310 	orr.w	r3, r3, #16
 80004fa:	6193      	str	r3, [r2, #24]
 80004fc:	4b38      	ldr	r3, [pc, #224]	@ (80005e0 <MX_GPIO_Init+0x104>)
 80004fe:	699b      	ldr	r3, [r3, #24]
 8000500:	f003 0310 	and.w	r3, r3, #16
 8000504:	60fb      	str	r3, [r7, #12]
 8000506:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000508:	4b35      	ldr	r3, [pc, #212]	@ (80005e0 <MX_GPIO_Init+0x104>)
 800050a:	699b      	ldr	r3, [r3, #24]
 800050c:	4a34      	ldr	r2, [pc, #208]	@ (80005e0 <MX_GPIO_Init+0x104>)
 800050e:	f043 0320 	orr.w	r3, r3, #32
 8000512:	6193      	str	r3, [r2, #24]
 8000514:	4b32      	ldr	r3, [pc, #200]	@ (80005e0 <MX_GPIO_Init+0x104>)
 8000516:	699b      	ldr	r3, [r3, #24]
 8000518:	f003 0320 	and.w	r3, r3, #32
 800051c:	60bb      	str	r3, [r7, #8]
 800051e:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000520:	4b2f      	ldr	r3, [pc, #188]	@ (80005e0 <MX_GPIO_Init+0x104>)
 8000522:	699b      	ldr	r3, [r3, #24]
 8000524:	4a2e      	ldr	r2, [pc, #184]	@ (80005e0 <MX_GPIO_Init+0x104>)
 8000526:	f043 0304 	orr.w	r3, r3, #4
 800052a:	6193      	str	r3, [r2, #24]
 800052c:	4b2c      	ldr	r3, [pc, #176]	@ (80005e0 <MX_GPIO_Init+0x104>)
 800052e:	699b      	ldr	r3, [r3, #24]
 8000530:	f003 0304 	and.w	r3, r3, #4
 8000534:	607b      	str	r3, [r7, #4]
 8000536:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000538:	4b29      	ldr	r3, [pc, #164]	@ (80005e0 <MX_GPIO_Init+0x104>)
 800053a:	699b      	ldr	r3, [r3, #24]
 800053c:	4a28      	ldr	r2, [pc, #160]	@ (80005e0 <MX_GPIO_Init+0x104>)
 800053e:	f043 0308 	orr.w	r3, r3, #8
 8000542:	6193      	str	r3, [r2, #24]
 8000544:	4b26      	ldr	r3, [pc, #152]	@ (80005e0 <MX_GPIO_Init+0x104>)
 8000546:	699b      	ldr	r3, [r3, #24]
 8000548:	f003 0308 	and.w	r3, r3, #8
 800054c:	603b      	str	r3, [r7, #0]
 800054e:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000550:	2200      	movs	r2, #0
 8000552:	2120      	movs	r1, #32
 8000554:	4823      	ldr	r0, [pc, #140]	@ (80005e4 <MX_GPIO_Init+0x108>)
 8000556:	f000 fd1c 	bl	8000f92 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800055a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800055e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000560:	4b21      	ldr	r3, [pc, #132]	@ (80005e8 <MX_GPIO_Init+0x10c>)
 8000562:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000564:	2300      	movs	r3, #0
 8000566:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000568:	f107 0310 	add.w	r3, r7, #16
 800056c:	4619      	mov	r1, r3
 800056e:	481f      	ldr	r0, [pc, #124]	@ (80005ec <MX_GPIO_Init+0x110>)
 8000570:	f000 fb74 	bl	8000c5c <HAL_GPIO_Init>

	/*Configure GPIO pins : CLK_Pin_Pin DT_Pin_Pin */
	GPIO_InitStruct.Pin = CLK_Pin_Pin | DT_Pin_Pin;
 8000574:	2303      	movs	r3, #3
 8000576:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000578:	4b1d      	ldr	r3, [pc, #116]	@ (80005f0 <MX_GPIO_Init+0x114>)
 800057a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 800057c:	2301      	movs	r3, #1
 800057e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000580:	f107 0310 	add.w	r3, r7, #16
 8000584:	4619      	mov	r1, r3
 8000586:	4817      	ldr	r0, [pc, #92]	@ (80005e4 <MX_GPIO_Init+0x108>)
 8000588:	f000 fb68 	bl	8000c5c <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 800058c:	2320      	movs	r3, #32
 800058e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000590:	2301      	movs	r3, #1
 8000592:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000594:	2300      	movs	r3, #0
 8000596:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000598:	2302      	movs	r3, #2
 800059a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800059c:	f107 0310 	add.w	r3, r7, #16
 80005a0:	4619      	mov	r1, r3
 80005a2:	4810      	ldr	r0, [pc, #64]	@ (80005e4 <MX_GPIO_Init+0x108>)
 80005a4:	f000 fb5a 	bl	8000c5c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI0_IRQn, 1, 0);
 80005a8:	2200      	movs	r2, #0
 80005aa:	2101      	movs	r1, #1
 80005ac:	2006      	movs	r0, #6
 80005ae:	f000 fb1e 	bl	8000bee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80005b2:	2006      	movs	r0, #6
 80005b4:	f000 fb37 	bl	8000c26 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI1_IRQn, 1, 0);
 80005b8:	2200      	movs	r2, #0
 80005ba:	2101      	movs	r1, #1
 80005bc:	2007      	movs	r0, #7
 80005be:	f000 fb16 	bl	8000bee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80005c2:	2007      	movs	r0, #7
 80005c4:	f000 fb2f 	bl	8000c26 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 2, 0);
 80005c8:	2200      	movs	r2, #0
 80005ca:	2102      	movs	r1, #2
 80005cc:	2028      	movs	r0, #40	@ 0x28
 80005ce:	f000 fb0e 	bl	8000bee <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80005d2:	2028      	movs	r0, #40	@ 0x28
 80005d4:	f000 fb27 	bl	8000c26 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 80005d8:	bf00      	nop
 80005da:	3720      	adds	r7, #32
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	40021000 	.word	0x40021000
 80005e4:	40010800 	.word	0x40010800
 80005e8:	10110000 	.word	0x10110000
 80005ec:	40011000 	.word	0x40011000
 80005f0:	10310000 	.word	0x10310000

080005f4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80005f4:	b480      	push	{r7}
 80005f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005f8:	b672      	cpsid	i
}
 80005fa:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80005fc:	bf00      	nop
 80005fe:	e7fd      	b.n	80005fc <Error_Handler+0x8>

08000600 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000600:	b480      	push	{r7}
 8000602:	b085      	sub	sp, #20
 8000604:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000606:	4b15      	ldr	r3, [pc, #84]	@ (800065c <HAL_MspInit+0x5c>)
 8000608:	699b      	ldr	r3, [r3, #24]
 800060a:	4a14      	ldr	r2, [pc, #80]	@ (800065c <HAL_MspInit+0x5c>)
 800060c:	f043 0301 	orr.w	r3, r3, #1
 8000610:	6193      	str	r3, [r2, #24]
 8000612:	4b12      	ldr	r3, [pc, #72]	@ (800065c <HAL_MspInit+0x5c>)
 8000614:	699b      	ldr	r3, [r3, #24]
 8000616:	f003 0301 	and.w	r3, r3, #1
 800061a:	60bb      	str	r3, [r7, #8]
 800061c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800061e:	4b0f      	ldr	r3, [pc, #60]	@ (800065c <HAL_MspInit+0x5c>)
 8000620:	69db      	ldr	r3, [r3, #28]
 8000622:	4a0e      	ldr	r2, [pc, #56]	@ (800065c <HAL_MspInit+0x5c>)
 8000624:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000628:	61d3      	str	r3, [r2, #28]
 800062a:	4b0c      	ldr	r3, [pc, #48]	@ (800065c <HAL_MspInit+0x5c>)
 800062c:	69db      	ldr	r3, [r3, #28]
 800062e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000632:	607b      	str	r3, [r7, #4]
 8000634:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000636:	4b0a      	ldr	r3, [pc, #40]	@ (8000660 <HAL_MspInit+0x60>)
 8000638:	685b      	ldr	r3, [r3, #4]
 800063a:	60fb      	str	r3, [r7, #12]
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000642:	60fb      	str	r3, [r7, #12]
 8000644:	68fb      	ldr	r3, [r7, #12]
 8000646:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800064a:	60fb      	str	r3, [r7, #12]
 800064c:	4a04      	ldr	r2, [pc, #16]	@ (8000660 <HAL_MspInit+0x60>)
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000652:	bf00      	nop
 8000654:	3714      	adds	r7, #20
 8000656:	46bd      	mov	sp, r7
 8000658:	bc80      	pop	{r7}
 800065a:	4770      	bx	lr
 800065c:	40021000 	.word	0x40021000
 8000660:	40010000 	.word	0x40010000

08000664 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000664:	b480      	push	{r7}
 8000666:	b085      	sub	sp, #20
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	681b      	ldr	r3, [r3, #0]
 8000670:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000674:	d10b      	bne.n	800068e <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM2_MspInit 0 */

    /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000676:	4b08      	ldr	r3, [pc, #32]	@ (8000698 <HAL_TIM_Base_MspInit+0x34>)
 8000678:	69db      	ldr	r3, [r3, #28]
 800067a:	4a07      	ldr	r2, [pc, #28]	@ (8000698 <HAL_TIM_Base_MspInit+0x34>)
 800067c:	f043 0301 	orr.w	r3, r3, #1
 8000680:	61d3      	str	r3, [r2, #28]
 8000682:	4b05      	ldr	r3, [pc, #20]	@ (8000698 <HAL_TIM_Base_MspInit+0x34>)
 8000684:	69db      	ldr	r3, [r3, #28]
 8000686:	f003 0301 	and.w	r3, r3, #1
 800068a:	60fb      	str	r3, [r7, #12]
 800068c:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM2_MspInit 1 */

  }

}
 800068e:	bf00      	nop
 8000690:	3714      	adds	r7, #20
 8000692:	46bd      	mov	sp, r7
 8000694:	bc80      	pop	{r7}
 8000696:	4770      	bx	lr
 8000698:	40021000 	.word	0x40021000

0800069c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	b088      	sub	sp, #32
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006a4:	f107 0310 	add.w	r3, r7, #16
 80006a8:	2200      	movs	r2, #0
 80006aa:	601a      	str	r2, [r3, #0]
 80006ac:	605a      	str	r2, [r3, #4]
 80006ae:	609a      	str	r2, [r3, #8]
 80006b0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	4a15      	ldr	r2, [pc, #84]	@ (800070c <HAL_UART_MspInit+0x70>)
 80006b8:	4293      	cmp	r3, r2
 80006ba:	d123      	bne.n	8000704 <HAL_UART_MspInit+0x68>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006bc:	4b14      	ldr	r3, [pc, #80]	@ (8000710 <HAL_UART_MspInit+0x74>)
 80006be:	69db      	ldr	r3, [r3, #28]
 80006c0:	4a13      	ldr	r2, [pc, #76]	@ (8000710 <HAL_UART_MspInit+0x74>)
 80006c2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006c6:	61d3      	str	r3, [r2, #28]
 80006c8:	4b11      	ldr	r3, [pc, #68]	@ (8000710 <HAL_UART_MspInit+0x74>)
 80006ca:	69db      	ldr	r3, [r3, #28]
 80006cc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006d0:	60fb      	str	r3, [r7, #12]
 80006d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d4:	4b0e      	ldr	r3, [pc, #56]	@ (8000710 <HAL_UART_MspInit+0x74>)
 80006d6:	699b      	ldr	r3, [r3, #24]
 80006d8:	4a0d      	ldr	r2, [pc, #52]	@ (8000710 <HAL_UART_MspInit+0x74>)
 80006da:	f043 0304 	orr.w	r3, r3, #4
 80006de:	6193      	str	r3, [r2, #24]
 80006e0:	4b0b      	ldr	r3, [pc, #44]	@ (8000710 <HAL_UART_MspInit+0x74>)
 80006e2:	699b      	ldr	r3, [r3, #24]
 80006e4:	f003 0304 	and.w	r3, r3, #4
 80006e8:	60bb      	str	r3, [r7, #8]
 80006ea:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80006ec:	230c      	movs	r3, #12
 80006ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006f0:	2302      	movs	r3, #2
 80006f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f4:	2302      	movs	r3, #2
 80006f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006f8:	f107 0310 	add.w	r3, r7, #16
 80006fc:	4619      	mov	r1, r3
 80006fe:	4805      	ldr	r0, [pc, #20]	@ (8000714 <HAL_UART_MspInit+0x78>)
 8000700:	f000 faac 	bl	8000c5c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000704:	bf00      	nop
 8000706:	3720      	adds	r7, #32
 8000708:	46bd      	mov	sp, r7
 800070a:	bd80      	pop	{r7, pc}
 800070c:	40004400 	.word	0x40004400
 8000710:	40021000 	.word	0x40021000
 8000714:	40010800 	.word	0x40010800

08000718 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000718:	b480      	push	{r7}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800071c:	bf00      	nop
 800071e:	e7fd      	b.n	800071c <NMI_Handler+0x4>

08000720 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000724:	bf00      	nop
 8000726:	e7fd      	b.n	8000724 <HardFault_Handler+0x4>

08000728 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800072c:	bf00      	nop
 800072e:	e7fd      	b.n	800072c <MemManage_Handler+0x4>

08000730 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000730:	b480      	push	{r7}
 8000732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000734:	bf00      	nop
 8000736:	e7fd      	b.n	8000734 <BusFault_Handler+0x4>

08000738 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000738:	b480      	push	{r7}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800073c:	bf00      	nop
 800073e:	e7fd      	b.n	800073c <UsageFault_Handler+0x4>

08000740 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000744:	bf00      	nop
 8000746:	46bd      	mov	sp, r7
 8000748:	bc80      	pop	{r7}
 800074a:	4770      	bx	lr

0800074c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800074c:	b480      	push	{r7}
 800074e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000750:	bf00      	nop
 8000752:	46bd      	mov	sp, r7
 8000754:	bc80      	pop	{r7}
 8000756:	4770      	bx	lr

08000758 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800075c:	bf00      	nop
 800075e:	46bd      	mov	sp, r7
 8000760:	bc80      	pop	{r7}
 8000762:	4770      	bx	lr

08000764 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000768:	f000 f92a 	bl	80009c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800076c:	bf00      	nop
 800076e:	bd80      	pop	{r7, pc}

08000770 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000770:	b580      	push	{r7, lr}
 8000772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(CLK_Pin_Pin);
 8000774:	2001      	movs	r0, #1
 8000776:	f000 fc25 	bl	8000fc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800077a:	bf00      	nop
 800077c:	bd80      	pop	{r7, pc}

0800077e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800077e:	b580      	push	{r7, lr}
 8000780:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DT_Pin_Pin);
 8000782:	2002      	movs	r0, #2
 8000784:	f000 fc1e 	bl	8000fc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000788:	bf00      	nop
 800078a:	bd80      	pop	{r7, pc}

0800078c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000790:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000794:	f000 fc16 	bl	8000fc4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000798:	bf00      	nop
 800079a:	bd80      	pop	{r7, pc}

0800079c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b086      	sub	sp, #24
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	60f8      	str	r0, [r7, #12]
 80007a4:	60b9      	str	r1, [r7, #8]
 80007a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007a8:	2300      	movs	r3, #0
 80007aa:	617b      	str	r3, [r7, #20]
 80007ac:	e00a      	b.n	80007c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80007ae:	f3af 8000 	nop.w
 80007b2:	4601      	mov	r1, r0
 80007b4:	68bb      	ldr	r3, [r7, #8]
 80007b6:	1c5a      	adds	r2, r3, #1
 80007b8:	60ba      	str	r2, [r7, #8]
 80007ba:	b2ca      	uxtb	r2, r1
 80007bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007be:	697b      	ldr	r3, [r7, #20]
 80007c0:	3301      	adds	r3, #1
 80007c2:	617b      	str	r3, [r7, #20]
 80007c4:	697a      	ldr	r2, [r7, #20]
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	429a      	cmp	r2, r3
 80007ca:	dbf0      	blt.n	80007ae <_read+0x12>
  }

  return len;
 80007cc:	687b      	ldr	r3, [r7, #4]
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3718      	adds	r7, #24
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80007d6:	b580      	push	{r7, lr}
 80007d8:	b086      	sub	sp, #24
 80007da:	af00      	add	r7, sp, #0
 80007dc:	60f8      	str	r0, [r7, #12]
 80007de:	60b9      	str	r1, [r7, #8]
 80007e0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007e2:	2300      	movs	r3, #0
 80007e4:	617b      	str	r3, [r7, #20]
 80007e6:	e009      	b.n	80007fc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80007e8:	68bb      	ldr	r3, [r7, #8]
 80007ea:	1c5a      	adds	r2, r3, #1
 80007ec:	60ba      	str	r2, [r7, #8]
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	4618      	mov	r0, r3
 80007f2:	f7ff fcab 	bl	800014c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	3301      	adds	r3, #1
 80007fa:	617b      	str	r3, [r7, #20]
 80007fc:	697a      	ldr	r2, [r7, #20]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	429a      	cmp	r2, r3
 8000802:	dbf1      	blt.n	80007e8 <_write+0x12>
  }
  return len;
 8000804:	687b      	ldr	r3, [r7, #4]
}
 8000806:	4618      	mov	r0, r3
 8000808:	3718      	adds	r7, #24
 800080a:	46bd      	mov	sp, r7
 800080c:	bd80      	pop	{r7, pc}

0800080e <_close>:

int _close(int file)
{
 800080e:	b480      	push	{r7}
 8000810:	b083      	sub	sp, #12
 8000812:	af00      	add	r7, sp, #0
 8000814:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000816:	f04f 33ff 	mov.w	r3, #4294967295
}
 800081a:	4618      	mov	r0, r3
 800081c:	370c      	adds	r7, #12
 800081e:	46bd      	mov	sp, r7
 8000820:	bc80      	pop	{r7}
 8000822:	4770      	bx	lr

08000824 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000834:	605a      	str	r2, [r3, #4]
  return 0;
 8000836:	2300      	movs	r3, #0
}
 8000838:	4618      	mov	r0, r3
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	bc80      	pop	{r7}
 8000840:	4770      	bx	lr

08000842 <_isatty>:

int _isatty(int file)
{
 8000842:	b480      	push	{r7}
 8000844:	b083      	sub	sp, #12
 8000846:	af00      	add	r7, sp, #0
 8000848:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800084a:	2301      	movs	r3, #1
}
 800084c:	4618      	mov	r0, r3
 800084e:	370c      	adds	r7, #12
 8000850:	46bd      	mov	sp, r7
 8000852:	bc80      	pop	{r7}
 8000854:	4770      	bx	lr

08000856 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000856:	b480      	push	{r7}
 8000858:	b085      	sub	sp, #20
 800085a:	af00      	add	r7, sp, #0
 800085c:	60f8      	str	r0, [r7, #12]
 800085e:	60b9      	str	r1, [r7, #8]
 8000860:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000862:	2300      	movs	r3, #0
}
 8000864:	4618      	mov	r0, r3
 8000866:	3714      	adds	r7, #20
 8000868:	46bd      	mov	sp, r7
 800086a:	bc80      	pop	{r7}
 800086c:	4770      	bx	lr
	...

08000870 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	b086      	sub	sp, #24
 8000874:	af00      	add	r7, sp, #0
 8000876:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000878:	4a14      	ldr	r2, [pc, #80]	@ (80008cc <_sbrk+0x5c>)
 800087a:	4b15      	ldr	r3, [pc, #84]	@ (80008d0 <_sbrk+0x60>)
 800087c:	1ad3      	subs	r3, r2, r3
 800087e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000884:	4b13      	ldr	r3, [pc, #76]	@ (80008d4 <_sbrk+0x64>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d102      	bne.n	8000892 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800088c:	4b11      	ldr	r3, [pc, #68]	@ (80008d4 <_sbrk+0x64>)
 800088e:	4a12      	ldr	r2, [pc, #72]	@ (80008d8 <_sbrk+0x68>)
 8000890:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000892:	4b10      	ldr	r3, [pc, #64]	@ (80008d4 <_sbrk+0x64>)
 8000894:	681a      	ldr	r2, [r3, #0]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	4413      	add	r3, r2
 800089a:	693a      	ldr	r2, [r7, #16]
 800089c:	429a      	cmp	r2, r3
 800089e:	d207      	bcs.n	80008b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008a0:	f001 fef8 	bl	8002694 <__errno>
 80008a4:	4603      	mov	r3, r0
 80008a6:	220c      	movs	r2, #12
 80008a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008aa:	f04f 33ff 	mov.w	r3, #4294967295
 80008ae:	e009      	b.n	80008c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008b0:	4b08      	ldr	r3, [pc, #32]	@ (80008d4 <_sbrk+0x64>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008b6:	4b07      	ldr	r3, [pc, #28]	@ (80008d4 <_sbrk+0x64>)
 80008b8:	681a      	ldr	r2, [r3, #0]
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	4413      	add	r3, r2
 80008be:	4a05      	ldr	r2, [pc, #20]	@ (80008d4 <_sbrk+0x64>)
 80008c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008c2:	68fb      	ldr	r3, [r7, #12]
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3718      	adds	r7, #24
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	20005000 	.word	0x20005000
 80008d0:	00000400 	.word	0x00000400
 80008d4:	20000120 	.word	0x20000120
 80008d8:	20000278 	.word	0x20000278

080008dc <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bc80      	pop	{r7}
 80008e6:	4770      	bx	lr

080008e8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80008e8:	f7ff fff8 	bl	80008dc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008ec:	480b      	ldr	r0, [pc, #44]	@ (800091c <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80008ee:	490c      	ldr	r1, [pc, #48]	@ (8000920 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80008f0:	4a0c      	ldr	r2, [pc, #48]	@ (8000924 <LoopFillZerobss+0x16>)
  movs r3, #0
 80008f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008f4:	e002      	b.n	80008fc <LoopCopyDataInit>

080008f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008fa:	3304      	adds	r3, #4

080008fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000900:	d3f9      	bcc.n	80008f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000902:	4a09      	ldr	r2, [pc, #36]	@ (8000928 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000904:	4c09      	ldr	r4, [pc, #36]	@ (800092c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000906:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000908:	e001      	b.n	800090e <LoopFillZerobss>

0800090a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800090a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800090c:	3204      	adds	r2, #4

0800090e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800090e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000910:	d3fb      	bcc.n	800090a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000912:	f001 fec5 	bl	80026a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000916:	f7ff fcc9 	bl	80002ac <main>
  bx lr
 800091a:	4770      	bx	lr
  ldr r0, =_sdata
 800091c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000920:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000924:	080032b4 	.word	0x080032b4
  ldr r2, =_sbss
 8000928:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800092c:	20000274 	.word	0x20000274

08000930 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000930:	e7fe      	b.n	8000930 <ADC1_2_IRQHandler>
	...

08000934 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000938:	4b08      	ldr	r3, [pc, #32]	@ (800095c <HAL_Init+0x28>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a07      	ldr	r2, [pc, #28]	@ (800095c <HAL_Init+0x28>)
 800093e:	f043 0310 	orr.w	r3, r3, #16
 8000942:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000944:	2003      	movs	r0, #3
 8000946:	f000 f947 	bl	8000bd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800094a:	2000      	movs	r0, #0
 800094c:	f000 f808 	bl	8000960 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000950:	f7ff fe56 	bl	8000600 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000954:	2300      	movs	r3, #0
}
 8000956:	4618      	mov	r0, r3
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	40022000 	.word	0x40022000

08000960 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000968:	4b12      	ldr	r3, [pc, #72]	@ (80009b4 <HAL_InitTick+0x54>)
 800096a:	681a      	ldr	r2, [r3, #0]
 800096c:	4b12      	ldr	r3, [pc, #72]	@ (80009b8 <HAL_InitTick+0x58>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	4619      	mov	r1, r3
 8000972:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000976:	fbb3 f3f1 	udiv	r3, r3, r1
 800097a:	fbb2 f3f3 	udiv	r3, r2, r3
 800097e:	4618      	mov	r0, r3
 8000980:	f000 f95f 	bl	8000c42 <HAL_SYSTICK_Config>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800098a:	2301      	movs	r3, #1
 800098c:	e00e      	b.n	80009ac <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2b0f      	cmp	r3, #15
 8000992:	d80a      	bhi.n	80009aa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000994:	2200      	movs	r2, #0
 8000996:	6879      	ldr	r1, [r7, #4]
 8000998:	f04f 30ff 	mov.w	r0, #4294967295
 800099c:	f000 f927 	bl	8000bee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009a0:	4a06      	ldr	r2, [pc, #24]	@ (80009bc <HAL_InitTick+0x5c>)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009a6:	2300      	movs	r3, #0
 80009a8:	e000      	b.n	80009ac <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009aa:	2301      	movs	r3, #1
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	3708      	adds	r7, #8
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}
 80009b4:	20000000 	.word	0x20000000
 80009b8:	20000008 	.word	0x20000008
 80009bc:	20000004 	.word	0x20000004

080009c0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009c4:	4b05      	ldr	r3, [pc, #20]	@ (80009dc <HAL_IncTick+0x1c>)
 80009c6:	781b      	ldrb	r3, [r3, #0]
 80009c8:	461a      	mov	r2, r3
 80009ca:	4b05      	ldr	r3, [pc, #20]	@ (80009e0 <HAL_IncTick+0x20>)
 80009cc:	681b      	ldr	r3, [r3, #0]
 80009ce:	4413      	add	r3, r2
 80009d0:	4a03      	ldr	r2, [pc, #12]	@ (80009e0 <HAL_IncTick+0x20>)
 80009d2:	6013      	str	r3, [r2, #0]
}
 80009d4:	bf00      	nop
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bc80      	pop	{r7}
 80009da:	4770      	bx	lr
 80009dc:	20000008 	.word	0x20000008
 80009e0:	20000124 	.word	0x20000124

080009e4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  return uwTick;
 80009e8:	4b02      	ldr	r3, [pc, #8]	@ (80009f4 <HAL_GetTick+0x10>)
 80009ea:	681b      	ldr	r3, [r3, #0]
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bc80      	pop	{r7}
 80009f2:	4770      	bx	lr
 80009f4:	20000124 	.word	0x20000124

080009f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b084      	sub	sp, #16
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a00:	f7ff fff0 	bl	80009e4 <HAL_GetTick>
 8000a04:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a10:	d005      	beq.n	8000a1e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a12:	4b0a      	ldr	r3, [pc, #40]	@ (8000a3c <HAL_Delay+0x44>)
 8000a14:	781b      	ldrb	r3, [r3, #0]
 8000a16:	461a      	mov	r2, r3
 8000a18:	68fb      	ldr	r3, [r7, #12]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000a1e:	bf00      	nop
 8000a20:	f7ff ffe0 	bl	80009e4 <HAL_GetTick>
 8000a24:	4602      	mov	r2, r0
 8000a26:	68bb      	ldr	r3, [r7, #8]
 8000a28:	1ad3      	subs	r3, r2, r3
 8000a2a:	68fa      	ldr	r2, [r7, #12]
 8000a2c:	429a      	cmp	r2, r3
 8000a2e:	d8f7      	bhi.n	8000a20 <HAL_Delay+0x28>
  {
  }
}
 8000a30:	bf00      	nop
 8000a32:	bf00      	nop
 8000a34:	3710      	adds	r7, #16
 8000a36:	46bd      	mov	sp, r7
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20000008 	.word	0x20000008

08000a40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b085      	sub	sp, #20
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	f003 0307 	and.w	r3, r3, #7
 8000a4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a50:	4b0c      	ldr	r3, [pc, #48]	@ (8000a84 <__NVIC_SetPriorityGrouping+0x44>)
 8000a52:	68db      	ldr	r3, [r3, #12]
 8000a54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a56:	68ba      	ldr	r2, [r7, #8]
 8000a58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000a5c:	4013      	ands	r3, r2
 8000a5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a64:	68bb      	ldr	r3, [r7, #8]
 8000a66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000a6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000a70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a72:	4a04      	ldr	r2, [pc, #16]	@ (8000a84 <__NVIC_SetPriorityGrouping+0x44>)
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	60d3      	str	r3, [r2, #12]
}
 8000a78:	bf00      	nop
 8000a7a:	3714      	adds	r7, #20
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bc80      	pop	{r7}
 8000a80:	4770      	bx	lr
 8000a82:	bf00      	nop
 8000a84:	e000ed00 	.word	0xe000ed00

08000a88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a8c:	4b04      	ldr	r3, [pc, #16]	@ (8000aa0 <__NVIC_GetPriorityGrouping+0x18>)
 8000a8e:	68db      	ldr	r3, [r3, #12]
 8000a90:	0a1b      	lsrs	r3, r3, #8
 8000a92:	f003 0307 	and.w	r3, r3, #7
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	bc80      	pop	{r7}
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b083      	sub	sp, #12
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	4603      	mov	r3, r0
 8000aac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	db0b      	blt.n	8000ace <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ab6:	79fb      	ldrb	r3, [r7, #7]
 8000ab8:	f003 021f 	and.w	r2, r3, #31
 8000abc:	4906      	ldr	r1, [pc, #24]	@ (8000ad8 <__NVIC_EnableIRQ+0x34>)
 8000abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac2:	095b      	lsrs	r3, r3, #5
 8000ac4:	2001      	movs	r0, #1
 8000ac6:	fa00 f202 	lsl.w	r2, r0, r2
 8000aca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000ace:	bf00      	nop
 8000ad0:	370c      	adds	r7, #12
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bc80      	pop	{r7}
 8000ad6:	4770      	bx	lr
 8000ad8:	e000e100 	.word	0xe000e100

08000adc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000adc:	b480      	push	{r7}
 8000ade:	b083      	sub	sp, #12
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	6039      	str	r1, [r7, #0]
 8000ae6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	db0a      	blt.n	8000b06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	b2da      	uxtb	r2, r3
 8000af4:	490c      	ldr	r1, [pc, #48]	@ (8000b28 <__NVIC_SetPriority+0x4c>)
 8000af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000afa:	0112      	lsls	r2, r2, #4
 8000afc:	b2d2      	uxtb	r2, r2
 8000afe:	440b      	add	r3, r1
 8000b00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b04:	e00a      	b.n	8000b1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	b2da      	uxtb	r2, r3
 8000b0a:	4908      	ldr	r1, [pc, #32]	@ (8000b2c <__NVIC_SetPriority+0x50>)
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
 8000b0e:	f003 030f 	and.w	r3, r3, #15
 8000b12:	3b04      	subs	r3, #4
 8000b14:	0112      	lsls	r2, r2, #4
 8000b16:	b2d2      	uxtb	r2, r2
 8000b18:	440b      	add	r3, r1
 8000b1a:	761a      	strb	r2, [r3, #24]
}
 8000b1c:	bf00      	nop
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	bc80      	pop	{r7}
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	e000e100 	.word	0xe000e100
 8000b2c:	e000ed00 	.word	0xe000ed00

08000b30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b30:	b480      	push	{r7}
 8000b32:	b089      	sub	sp, #36	@ 0x24
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	60f8      	str	r0, [r7, #12]
 8000b38:	60b9      	str	r1, [r7, #8]
 8000b3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b3c:	68fb      	ldr	r3, [r7, #12]
 8000b3e:	f003 0307 	and.w	r3, r3, #7
 8000b42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b44:	69fb      	ldr	r3, [r7, #28]
 8000b46:	f1c3 0307 	rsb	r3, r3, #7
 8000b4a:	2b04      	cmp	r3, #4
 8000b4c:	bf28      	it	cs
 8000b4e:	2304      	movcs	r3, #4
 8000b50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b52:	69fb      	ldr	r3, [r7, #28]
 8000b54:	3304      	adds	r3, #4
 8000b56:	2b06      	cmp	r3, #6
 8000b58:	d902      	bls.n	8000b60 <NVIC_EncodePriority+0x30>
 8000b5a:	69fb      	ldr	r3, [r7, #28]
 8000b5c:	3b03      	subs	r3, #3
 8000b5e:	e000      	b.n	8000b62 <NVIC_EncodePriority+0x32>
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b64:	f04f 32ff 	mov.w	r2, #4294967295
 8000b68:	69bb      	ldr	r3, [r7, #24]
 8000b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6e:	43da      	mvns	r2, r3
 8000b70:	68bb      	ldr	r3, [r7, #8]
 8000b72:	401a      	ands	r2, r3
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b78:	f04f 31ff 	mov.w	r1, #4294967295
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b82:	43d9      	mvns	r1, r3
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b88:	4313      	orrs	r3, r2
         );
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3724      	adds	r7, #36	@ 0x24
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bc80      	pop	{r7}
 8000b92:	4770      	bx	lr

08000b94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	3b01      	subs	r3, #1
 8000ba0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ba4:	d301      	bcc.n	8000baa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e00f      	b.n	8000bca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000baa:	4a0a      	ldr	r2, [pc, #40]	@ (8000bd4 <SysTick_Config+0x40>)
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	3b01      	subs	r3, #1
 8000bb0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000bb2:	210f      	movs	r1, #15
 8000bb4:	f04f 30ff 	mov.w	r0, #4294967295
 8000bb8:	f7ff ff90 	bl	8000adc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000bbc:	4b05      	ldr	r3, [pc, #20]	@ (8000bd4 <SysTick_Config+0x40>)
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000bc2:	4b04      	ldr	r3, [pc, #16]	@ (8000bd4 <SysTick_Config+0x40>)
 8000bc4:	2207      	movs	r2, #7
 8000bc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000bc8:	2300      	movs	r3, #0
}
 8000bca:	4618      	mov	r0, r3
 8000bcc:	3708      	adds	r7, #8
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	bd80      	pop	{r7, pc}
 8000bd2:	bf00      	nop
 8000bd4:	e000e010 	.word	0xe000e010

08000bd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b082      	sub	sp, #8
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000be0:	6878      	ldr	r0, [r7, #4]
 8000be2:	f7ff ff2d 	bl	8000a40 <__NVIC_SetPriorityGrouping>
}
 8000be6:	bf00      	nop
 8000be8:	3708      	adds	r7, #8
 8000bea:	46bd      	mov	sp, r7
 8000bec:	bd80      	pop	{r7, pc}

08000bee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bee:	b580      	push	{r7, lr}
 8000bf0:	b086      	sub	sp, #24
 8000bf2:	af00      	add	r7, sp, #0
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	60b9      	str	r1, [r7, #8]
 8000bf8:	607a      	str	r2, [r7, #4]
 8000bfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000c00:	f7ff ff42 	bl	8000a88 <__NVIC_GetPriorityGrouping>
 8000c04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c06:	687a      	ldr	r2, [r7, #4]
 8000c08:	68b9      	ldr	r1, [r7, #8]
 8000c0a:	6978      	ldr	r0, [r7, #20]
 8000c0c:	f7ff ff90 	bl	8000b30 <NVIC_EncodePriority>
 8000c10:	4602      	mov	r2, r0
 8000c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c16:	4611      	mov	r1, r2
 8000c18:	4618      	mov	r0, r3
 8000c1a:	f7ff ff5f 	bl	8000adc <__NVIC_SetPriority>
}
 8000c1e:	bf00      	nop
 8000c20:	3718      	adds	r7, #24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}

08000c26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c26:	b580      	push	{r7, lr}
 8000c28:	b082      	sub	sp, #8
 8000c2a:	af00      	add	r7, sp, #0
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c34:	4618      	mov	r0, r3
 8000c36:	f7ff ff35 	bl	8000aa4 <__NVIC_EnableIRQ>
}
 8000c3a:	bf00      	nop
 8000c3c:	3708      	adds	r7, #8
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	bd80      	pop	{r7, pc}

08000c42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000c42:	b580      	push	{r7, lr}
 8000c44:	b082      	sub	sp, #8
 8000c46:	af00      	add	r7, sp, #0
 8000c48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000c4a:	6878      	ldr	r0, [r7, #4]
 8000c4c:	f7ff ffa2 	bl	8000b94 <SysTick_Config>
 8000c50:	4603      	mov	r3, r0
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	3708      	adds	r7, #8
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
	...

08000c5c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b08b      	sub	sp, #44	@ 0x2c
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
 8000c64:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c66:	2300      	movs	r3, #0
 8000c68:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c6e:	e169      	b.n	8000f44 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000c70:	2201      	movs	r2, #1
 8000c72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c74:	fa02 f303 	lsl.w	r3, r2, r3
 8000c78:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	69fa      	ldr	r2, [r7, #28]
 8000c80:	4013      	ands	r3, r2
 8000c82:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000c84:	69ba      	ldr	r2, [r7, #24]
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	f040 8158 	bne.w	8000f3e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	4a9a      	ldr	r2, [pc, #616]	@ (8000efc <HAL_GPIO_Init+0x2a0>)
 8000c94:	4293      	cmp	r3, r2
 8000c96:	d05e      	beq.n	8000d56 <HAL_GPIO_Init+0xfa>
 8000c98:	4a98      	ldr	r2, [pc, #608]	@ (8000efc <HAL_GPIO_Init+0x2a0>)
 8000c9a:	4293      	cmp	r3, r2
 8000c9c:	d875      	bhi.n	8000d8a <HAL_GPIO_Init+0x12e>
 8000c9e:	4a98      	ldr	r2, [pc, #608]	@ (8000f00 <HAL_GPIO_Init+0x2a4>)
 8000ca0:	4293      	cmp	r3, r2
 8000ca2:	d058      	beq.n	8000d56 <HAL_GPIO_Init+0xfa>
 8000ca4:	4a96      	ldr	r2, [pc, #600]	@ (8000f00 <HAL_GPIO_Init+0x2a4>)
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	d86f      	bhi.n	8000d8a <HAL_GPIO_Init+0x12e>
 8000caa:	4a96      	ldr	r2, [pc, #600]	@ (8000f04 <HAL_GPIO_Init+0x2a8>)
 8000cac:	4293      	cmp	r3, r2
 8000cae:	d052      	beq.n	8000d56 <HAL_GPIO_Init+0xfa>
 8000cb0:	4a94      	ldr	r2, [pc, #592]	@ (8000f04 <HAL_GPIO_Init+0x2a8>)
 8000cb2:	4293      	cmp	r3, r2
 8000cb4:	d869      	bhi.n	8000d8a <HAL_GPIO_Init+0x12e>
 8000cb6:	4a94      	ldr	r2, [pc, #592]	@ (8000f08 <HAL_GPIO_Init+0x2ac>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d04c      	beq.n	8000d56 <HAL_GPIO_Init+0xfa>
 8000cbc:	4a92      	ldr	r2, [pc, #584]	@ (8000f08 <HAL_GPIO_Init+0x2ac>)
 8000cbe:	4293      	cmp	r3, r2
 8000cc0:	d863      	bhi.n	8000d8a <HAL_GPIO_Init+0x12e>
 8000cc2:	4a92      	ldr	r2, [pc, #584]	@ (8000f0c <HAL_GPIO_Init+0x2b0>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d046      	beq.n	8000d56 <HAL_GPIO_Init+0xfa>
 8000cc8:	4a90      	ldr	r2, [pc, #576]	@ (8000f0c <HAL_GPIO_Init+0x2b0>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d85d      	bhi.n	8000d8a <HAL_GPIO_Init+0x12e>
 8000cce:	2b12      	cmp	r3, #18
 8000cd0:	d82a      	bhi.n	8000d28 <HAL_GPIO_Init+0xcc>
 8000cd2:	2b12      	cmp	r3, #18
 8000cd4:	d859      	bhi.n	8000d8a <HAL_GPIO_Init+0x12e>
 8000cd6:	a201      	add	r2, pc, #4	@ (adr r2, 8000cdc <HAL_GPIO_Init+0x80>)
 8000cd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cdc:	08000d57 	.word	0x08000d57
 8000ce0:	08000d31 	.word	0x08000d31
 8000ce4:	08000d43 	.word	0x08000d43
 8000ce8:	08000d85 	.word	0x08000d85
 8000cec:	08000d8b 	.word	0x08000d8b
 8000cf0:	08000d8b 	.word	0x08000d8b
 8000cf4:	08000d8b 	.word	0x08000d8b
 8000cf8:	08000d8b 	.word	0x08000d8b
 8000cfc:	08000d8b 	.word	0x08000d8b
 8000d00:	08000d8b 	.word	0x08000d8b
 8000d04:	08000d8b 	.word	0x08000d8b
 8000d08:	08000d8b 	.word	0x08000d8b
 8000d0c:	08000d8b 	.word	0x08000d8b
 8000d10:	08000d8b 	.word	0x08000d8b
 8000d14:	08000d8b 	.word	0x08000d8b
 8000d18:	08000d8b 	.word	0x08000d8b
 8000d1c:	08000d8b 	.word	0x08000d8b
 8000d20:	08000d39 	.word	0x08000d39
 8000d24:	08000d4d 	.word	0x08000d4d
 8000d28:	4a79      	ldr	r2, [pc, #484]	@ (8000f10 <HAL_GPIO_Init+0x2b4>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d013      	beq.n	8000d56 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8000d2e:	e02c      	b.n	8000d8a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8000d30:	683b      	ldr	r3, [r7, #0]
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	623b      	str	r3, [r7, #32]
          break;
 8000d36:	e029      	b.n	8000d8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8000d38:	683b      	ldr	r3, [r7, #0]
 8000d3a:	68db      	ldr	r3, [r3, #12]
 8000d3c:	3304      	adds	r3, #4
 8000d3e:	623b      	str	r3, [r7, #32]
          break;
 8000d40:	e024      	b.n	8000d8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8000d42:	683b      	ldr	r3, [r7, #0]
 8000d44:	68db      	ldr	r3, [r3, #12]
 8000d46:	3308      	adds	r3, #8
 8000d48:	623b      	str	r3, [r7, #32]
          break;
 8000d4a:	e01f      	b.n	8000d8c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8000d4c:	683b      	ldr	r3, [r7, #0]
 8000d4e:	68db      	ldr	r3, [r3, #12]
 8000d50:	330c      	adds	r3, #12
 8000d52:	623b      	str	r3, [r7, #32]
          break;
 8000d54:	e01a      	b.n	8000d8c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	689b      	ldr	r3, [r3, #8]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d102      	bne.n	8000d64 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8000d5e:	2304      	movs	r3, #4
 8000d60:	623b      	str	r3, [r7, #32]
          break;
 8000d62:	e013      	b.n	8000d8c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8000d64:	683b      	ldr	r3, [r7, #0]
 8000d66:	689b      	ldr	r3, [r3, #8]
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d105      	bne.n	8000d78 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d6c:	2308      	movs	r3, #8
 8000d6e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	69fa      	ldr	r2, [r7, #28]
 8000d74:	611a      	str	r2, [r3, #16]
          break;
 8000d76:	e009      	b.n	8000d8c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8000d78:	2308      	movs	r3, #8
 8000d7a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	69fa      	ldr	r2, [r7, #28]
 8000d80:	615a      	str	r2, [r3, #20]
          break;
 8000d82:	e003      	b.n	8000d8c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8000d84:	2300      	movs	r3, #0
 8000d86:	623b      	str	r3, [r7, #32]
          break;
 8000d88:	e000      	b.n	8000d8c <HAL_GPIO_Init+0x130>
          break;
 8000d8a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8000d8c:	69bb      	ldr	r3, [r7, #24]
 8000d8e:	2bff      	cmp	r3, #255	@ 0xff
 8000d90:	d801      	bhi.n	8000d96 <HAL_GPIO_Init+0x13a>
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	e001      	b.n	8000d9a <HAL_GPIO_Init+0x13e>
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	3304      	adds	r3, #4
 8000d9a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8000d9c:	69bb      	ldr	r3, [r7, #24]
 8000d9e:	2bff      	cmp	r3, #255	@ 0xff
 8000da0:	d802      	bhi.n	8000da8 <HAL_GPIO_Init+0x14c>
 8000da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000da4:	009b      	lsls	r3, r3, #2
 8000da6:	e002      	b.n	8000dae <HAL_GPIO_Init+0x152>
 8000da8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000daa:	3b08      	subs	r3, #8
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	681a      	ldr	r2, [r3, #0]
 8000db4:	210f      	movs	r1, #15
 8000db6:	693b      	ldr	r3, [r7, #16]
 8000db8:	fa01 f303 	lsl.w	r3, r1, r3
 8000dbc:	43db      	mvns	r3, r3
 8000dbe:	401a      	ands	r2, r3
 8000dc0:	6a39      	ldr	r1, [r7, #32]
 8000dc2:	693b      	ldr	r3, [r7, #16]
 8000dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc8:	431a      	orrs	r2, r3
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dce:	683b      	ldr	r3, [r7, #0]
 8000dd0:	685b      	ldr	r3, [r3, #4]
 8000dd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	f000 80b1 	beq.w	8000f3e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8000ddc:	4b4d      	ldr	r3, [pc, #308]	@ (8000f14 <HAL_GPIO_Init+0x2b8>)
 8000dde:	699b      	ldr	r3, [r3, #24]
 8000de0:	4a4c      	ldr	r2, [pc, #304]	@ (8000f14 <HAL_GPIO_Init+0x2b8>)
 8000de2:	f043 0301 	orr.w	r3, r3, #1
 8000de6:	6193      	str	r3, [r2, #24]
 8000de8:	4b4a      	ldr	r3, [pc, #296]	@ (8000f14 <HAL_GPIO_Init+0x2b8>)
 8000dea:	699b      	ldr	r3, [r3, #24]
 8000dec:	f003 0301 	and.w	r3, r3, #1
 8000df0:	60bb      	str	r3, [r7, #8]
 8000df2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8000df4:	4a48      	ldr	r2, [pc, #288]	@ (8000f18 <HAL_GPIO_Init+0x2bc>)
 8000df6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000df8:	089b      	lsrs	r3, r3, #2
 8000dfa:	3302      	adds	r3, #2
 8000dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000e00:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8000e02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e04:	f003 0303 	and.w	r3, r3, #3
 8000e08:	009b      	lsls	r3, r3, #2
 8000e0a:	220f      	movs	r2, #15
 8000e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e10:	43db      	mvns	r3, r3
 8000e12:	68fa      	ldr	r2, [r7, #12]
 8000e14:	4013      	ands	r3, r2
 8000e16:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	4a40      	ldr	r2, [pc, #256]	@ (8000f1c <HAL_GPIO_Init+0x2c0>)
 8000e1c:	4293      	cmp	r3, r2
 8000e1e:	d013      	beq.n	8000e48 <HAL_GPIO_Init+0x1ec>
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	4a3f      	ldr	r2, [pc, #252]	@ (8000f20 <HAL_GPIO_Init+0x2c4>)
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d00d      	beq.n	8000e44 <HAL_GPIO_Init+0x1e8>
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	4a3e      	ldr	r2, [pc, #248]	@ (8000f24 <HAL_GPIO_Init+0x2c8>)
 8000e2c:	4293      	cmp	r3, r2
 8000e2e:	d007      	beq.n	8000e40 <HAL_GPIO_Init+0x1e4>
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	4a3d      	ldr	r2, [pc, #244]	@ (8000f28 <HAL_GPIO_Init+0x2cc>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d101      	bne.n	8000e3c <HAL_GPIO_Init+0x1e0>
 8000e38:	2303      	movs	r3, #3
 8000e3a:	e006      	b.n	8000e4a <HAL_GPIO_Init+0x1ee>
 8000e3c:	2304      	movs	r3, #4
 8000e3e:	e004      	b.n	8000e4a <HAL_GPIO_Init+0x1ee>
 8000e40:	2302      	movs	r3, #2
 8000e42:	e002      	b.n	8000e4a <HAL_GPIO_Init+0x1ee>
 8000e44:	2301      	movs	r3, #1
 8000e46:	e000      	b.n	8000e4a <HAL_GPIO_Init+0x1ee>
 8000e48:	2300      	movs	r3, #0
 8000e4a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000e4c:	f002 0203 	and.w	r2, r2, #3
 8000e50:	0092      	lsls	r2, r2, #2
 8000e52:	4093      	lsls	r3, r2
 8000e54:	68fa      	ldr	r2, [r7, #12]
 8000e56:	4313      	orrs	r3, r2
 8000e58:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8000e5a:	492f      	ldr	r1, [pc, #188]	@ (8000f18 <HAL_GPIO_Init+0x2bc>)
 8000e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000e5e:	089b      	lsrs	r3, r3, #2
 8000e60:	3302      	adds	r3, #2
 8000e62:	68fa      	ldr	r2, [r7, #12]
 8000e64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	685b      	ldr	r3, [r3, #4]
 8000e6c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d006      	beq.n	8000e82 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8000e74:	4b2d      	ldr	r3, [pc, #180]	@ (8000f2c <HAL_GPIO_Init+0x2d0>)
 8000e76:	689a      	ldr	r2, [r3, #8]
 8000e78:	492c      	ldr	r1, [pc, #176]	@ (8000f2c <HAL_GPIO_Init+0x2d0>)
 8000e7a:	69bb      	ldr	r3, [r7, #24]
 8000e7c:	4313      	orrs	r3, r2
 8000e7e:	608b      	str	r3, [r1, #8]
 8000e80:	e006      	b.n	8000e90 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8000e82:	4b2a      	ldr	r3, [pc, #168]	@ (8000f2c <HAL_GPIO_Init+0x2d0>)
 8000e84:	689a      	ldr	r2, [r3, #8]
 8000e86:	69bb      	ldr	r3, [r7, #24]
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	4928      	ldr	r1, [pc, #160]	@ (8000f2c <HAL_GPIO_Init+0x2d0>)
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	685b      	ldr	r3, [r3, #4]
 8000e94:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d006      	beq.n	8000eaa <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8000e9c:	4b23      	ldr	r3, [pc, #140]	@ (8000f2c <HAL_GPIO_Init+0x2d0>)
 8000e9e:	68da      	ldr	r2, [r3, #12]
 8000ea0:	4922      	ldr	r1, [pc, #136]	@ (8000f2c <HAL_GPIO_Init+0x2d0>)
 8000ea2:	69bb      	ldr	r3, [r7, #24]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	60cb      	str	r3, [r1, #12]
 8000ea8:	e006      	b.n	8000eb8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8000eaa:	4b20      	ldr	r3, [pc, #128]	@ (8000f2c <HAL_GPIO_Init+0x2d0>)
 8000eac:	68da      	ldr	r2, [r3, #12]
 8000eae:	69bb      	ldr	r3, [r7, #24]
 8000eb0:	43db      	mvns	r3, r3
 8000eb2:	491e      	ldr	r1, [pc, #120]	@ (8000f2c <HAL_GPIO_Init+0x2d0>)
 8000eb4:	4013      	ands	r3, r2
 8000eb6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	685b      	ldr	r3, [r3, #4]
 8000ebc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d006      	beq.n	8000ed2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8000ec4:	4b19      	ldr	r3, [pc, #100]	@ (8000f2c <HAL_GPIO_Init+0x2d0>)
 8000ec6:	685a      	ldr	r2, [r3, #4]
 8000ec8:	4918      	ldr	r1, [pc, #96]	@ (8000f2c <HAL_GPIO_Init+0x2d0>)
 8000eca:	69bb      	ldr	r3, [r7, #24]
 8000ecc:	4313      	orrs	r3, r2
 8000ece:	604b      	str	r3, [r1, #4]
 8000ed0:	e006      	b.n	8000ee0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8000ed2:	4b16      	ldr	r3, [pc, #88]	@ (8000f2c <HAL_GPIO_Init+0x2d0>)
 8000ed4:	685a      	ldr	r2, [r3, #4]
 8000ed6:	69bb      	ldr	r3, [r7, #24]
 8000ed8:	43db      	mvns	r3, r3
 8000eda:	4914      	ldr	r1, [pc, #80]	@ (8000f2c <HAL_GPIO_Init+0x2d0>)
 8000edc:	4013      	ands	r3, r2
 8000ede:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000ee0:	683b      	ldr	r3, [r7, #0]
 8000ee2:	685b      	ldr	r3, [r3, #4]
 8000ee4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d021      	beq.n	8000f30 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8000eec:	4b0f      	ldr	r3, [pc, #60]	@ (8000f2c <HAL_GPIO_Init+0x2d0>)
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	490e      	ldr	r1, [pc, #56]	@ (8000f2c <HAL_GPIO_Init+0x2d0>)
 8000ef2:	69bb      	ldr	r3, [r7, #24]
 8000ef4:	4313      	orrs	r3, r2
 8000ef6:	600b      	str	r3, [r1, #0]
 8000ef8:	e021      	b.n	8000f3e <HAL_GPIO_Init+0x2e2>
 8000efa:	bf00      	nop
 8000efc:	10320000 	.word	0x10320000
 8000f00:	10310000 	.word	0x10310000
 8000f04:	10220000 	.word	0x10220000
 8000f08:	10210000 	.word	0x10210000
 8000f0c:	10120000 	.word	0x10120000
 8000f10:	10110000 	.word	0x10110000
 8000f14:	40021000 	.word	0x40021000
 8000f18:	40010000 	.word	0x40010000
 8000f1c:	40010800 	.word	0x40010800
 8000f20:	40010c00 	.word	0x40010c00
 8000f24:	40011000 	.word	0x40011000
 8000f28:	40011400 	.word	0x40011400
 8000f2c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8000f30:	4b0b      	ldr	r3, [pc, #44]	@ (8000f60 <HAL_GPIO_Init+0x304>)
 8000f32:	681a      	ldr	r2, [r3, #0]
 8000f34:	69bb      	ldr	r3, [r7, #24]
 8000f36:	43db      	mvns	r3, r3
 8000f38:	4909      	ldr	r1, [pc, #36]	@ (8000f60 <HAL_GPIO_Init+0x304>)
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8000f3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f40:	3301      	adds	r3, #1
 8000f42:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f4a:	fa22 f303 	lsr.w	r3, r2, r3
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	f47f ae8e 	bne.w	8000c70 <HAL_GPIO_Init+0x14>
  }
}
 8000f54:	bf00      	nop
 8000f56:	bf00      	nop
 8000f58:	372c      	adds	r7, #44	@ 0x2c
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bc80      	pop	{r7}
 8000f5e:	4770      	bx	lr
 8000f60:	40010400 	.word	0x40010400

08000f64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b085      	sub	sp, #20
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	689a      	ldr	r2, [r3, #8]
 8000f74:	887b      	ldrh	r3, [r7, #2]
 8000f76:	4013      	ands	r3, r2
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d002      	beq.n	8000f82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8000f7c:	2301      	movs	r3, #1
 8000f7e:	73fb      	strb	r3, [r7, #15]
 8000f80:	e001      	b.n	8000f86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8000f82:	2300      	movs	r3, #0
 8000f84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000f86:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3714      	adds	r7, #20
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bc80      	pop	{r7}
 8000f90:	4770      	bx	lr

08000f92 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000f92:	b480      	push	{r7}
 8000f94:	b083      	sub	sp, #12
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
 8000f9a:	460b      	mov	r3, r1
 8000f9c:	807b      	strh	r3, [r7, #2]
 8000f9e:	4613      	mov	r3, r2
 8000fa0:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000fa2:	787b      	ldrb	r3, [r7, #1]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d003      	beq.n	8000fb0 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000fa8:	887a      	ldrh	r2, [r7, #2]
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8000fae:	e003      	b.n	8000fb8 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8000fb0:	887b      	ldrh	r3, [r7, #2]
 8000fb2:	041a      	lsls	r2, r3, #16
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	611a      	str	r2, [r3, #16]
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bc80      	pop	{r7}
 8000fc0:	4770      	bx	lr
	...

08000fc4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	4603      	mov	r3, r0
 8000fcc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000fce:	4b08      	ldr	r3, [pc, #32]	@ (8000ff0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000fd0:	695a      	ldr	r2, [r3, #20]
 8000fd2:	88fb      	ldrh	r3, [r7, #6]
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d006      	beq.n	8000fe8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000fda:	4a05      	ldr	r2, [pc, #20]	@ (8000ff0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000fdc:	88fb      	ldrh	r3, [r7, #6]
 8000fde:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000fe0:	88fb      	ldrh	r3, [r7, #6]
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	f7ff f8f8 	bl	80001d8 <HAL_GPIO_EXTI_Callback>
  }
}
 8000fe8:	bf00      	nop
 8000fea:	3708      	adds	r7, #8
 8000fec:	46bd      	mov	sp, r7
 8000fee:	bd80      	pop	{r7, pc}
 8000ff0:	40010400 	.word	0x40010400

08000ff4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d101      	bne.n	8001006 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001002:	2301      	movs	r3, #1
 8001004:	e272      	b.n	80014ec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	f003 0301 	and.w	r3, r3, #1
 800100e:	2b00      	cmp	r3, #0
 8001010:	f000 8087 	beq.w	8001122 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001014:	4b92      	ldr	r3, [pc, #584]	@ (8001260 <HAL_RCC_OscConfig+0x26c>)
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	f003 030c 	and.w	r3, r3, #12
 800101c:	2b04      	cmp	r3, #4
 800101e:	d00c      	beq.n	800103a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001020:	4b8f      	ldr	r3, [pc, #572]	@ (8001260 <HAL_RCC_OscConfig+0x26c>)
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f003 030c 	and.w	r3, r3, #12
 8001028:	2b08      	cmp	r3, #8
 800102a:	d112      	bne.n	8001052 <HAL_RCC_OscConfig+0x5e>
 800102c:	4b8c      	ldr	r3, [pc, #560]	@ (8001260 <HAL_RCC_OscConfig+0x26c>)
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001034:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001038:	d10b      	bne.n	8001052 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800103a:	4b89      	ldr	r3, [pc, #548]	@ (8001260 <HAL_RCC_OscConfig+0x26c>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001042:	2b00      	cmp	r3, #0
 8001044:	d06c      	beq.n	8001120 <HAL_RCC_OscConfig+0x12c>
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	2b00      	cmp	r3, #0
 800104c:	d168      	bne.n	8001120 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800104e:	2301      	movs	r3, #1
 8001050:	e24c      	b.n	80014ec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800105a:	d106      	bne.n	800106a <HAL_RCC_OscConfig+0x76>
 800105c:	4b80      	ldr	r3, [pc, #512]	@ (8001260 <HAL_RCC_OscConfig+0x26c>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a7f      	ldr	r2, [pc, #508]	@ (8001260 <HAL_RCC_OscConfig+0x26c>)
 8001062:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001066:	6013      	str	r3, [r2, #0]
 8001068:	e02e      	b.n	80010c8 <HAL_RCC_OscConfig+0xd4>
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d10c      	bne.n	800108c <HAL_RCC_OscConfig+0x98>
 8001072:	4b7b      	ldr	r3, [pc, #492]	@ (8001260 <HAL_RCC_OscConfig+0x26c>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a7a      	ldr	r2, [pc, #488]	@ (8001260 <HAL_RCC_OscConfig+0x26c>)
 8001078:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800107c:	6013      	str	r3, [r2, #0]
 800107e:	4b78      	ldr	r3, [pc, #480]	@ (8001260 <HAL_RCC_OscConfig+0x26c>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4a77      	ldr	r2, [pc, #476]	@ (8001260 <HAL_RCC_OscConfig+0x26c>)
 8001084:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001088:	6013      	str	r3, [r2, #0]
 800108a:	e01d      	b.n	80010c8 <HAL_RCC_OscConfig+0xd4>
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001094:	d10c      	bne.n	80010b0 <HAL_RCC_OscConfig+0xbc>
 8001096:	4b72      	ldr	r3, [pc, #456]	@ (8001260 <HAL_RCC_OscConfig+0x26c>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a71      	ldr	r2, [pc, #452]	@ (8001260 <HAL_RCC_OscConfig+0x26c>)
 800109c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80010a0:	6013      	str	r3, [r2, #0]
 80010a2:	4b6f      	ldr	r3, [pc, #444]	@ (8001260 <HAL_RCC_OscConfig+0x26c>)
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	4a6e      	ldr	r2, [pc, #440]	@ (8001260 <HAL_RCC_OscConfig+0x26c>)
 80010a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80010ac:	6013      	str	r3, [r2, #0]
 80010ae:	e00b      	b.n	80010c8 <HAL_RCC_OscConfig+0xd4>
 80010b0:	4b6b      	ldr	r3, [pc, #428]	@ (8001260 <HAL_RCC_OscConfig+0x26c>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	4a6a      	ldr	r2, [pc, #424]	@ (8001260 <HAL_RCC_OscConfig+0x26c>)
 80010b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80010ba:	6013      	str	r3, [r2, #0]
 80010bc:	4b68      	ldr	r3, [pc, #416]	@ (8001260 <HAL_RCC_OscConfig+0x26c>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a67      	ldr	r2, [pc, #412]	@ (8001260 <HAL_RCC_OscConfig+0x26c>)
 80010c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80010c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d013      	beq.n	80010f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010d0:	f7ff fc88 	bl	80009e4 <HAL_GetTick>
 80010d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010d6:	e008      	b.n	80010ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010d8:	f7ff fc84 	bl	80009e4 <HAL_GetTick>
 80010dc:	4602      	mov	r2, r0
 80010de:	693b      	ldr	r3, [r7, #16]
 80010e0:	1ad3      	subs	r3, r2, r3
 80010e2:	2b64      	cmp	r3, #100	@ 0x64
 80010e4:	d901      	bls.n	80010ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80010e6:	2303      	movs	r3, #3
 80010e8:	e200      	b.n	80014ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010ea:	4b5d      	ldr	r3, [pc, #372]	@ (8001260 <HAL_RCC_OscConfig+0x26c>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80010f2:	2b00      	cmp	r3, #0
 80010f4:	d0f0      	beq.n	80010d8 <HAL_RCC_OscConfig+0xe4>
 80010f6:	e014      	b.n	8001122 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80010f8:	f7ff fc74 	bl	80009e4 <HAL_GetTick>
 80010fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80010fe:	e008      	b.n	8001112 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001100:	f7ff fc70 	bl	80009e4 <HAL_GetTick>
 8001104:	4602      	mov	r2, r0
 8001106:	693b      	ldr	r3, [r7, #16]
 8001108:	1ad3      	subs	r3, r2, r3
 800110a:	2b64      	cmp	r3, #100	@ 0x64
 800110c:	d901      	bls.n	8001112 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800110e:	2303      	movs	r3, #3
 8001110:	e1ec      	b.n	80014ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001112:	4b53      	ldr	r3, [pc, #332]	@ (8001260 <HAL_RCC_OscConfig+0x26c>)
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800111a:	2b00      	cmp	r3, #0
 800111c:	d1f0      	bne.n	8001100 <HAL_RCC_OscConfig+0x10c>
 800111e:	e000      	b.n	8001122 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001120:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 0302 	and.w	r3, r3, #2
 800112a:	2b00      	cmp	r3, #0
 800112c:	d063      	beq.n	80011f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800112e:	4b4c      	ldr	r3, [pc, #304]	@ (8001260 <HAL_RCC_OscConfig+0x26c>)
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f003 030c 	and.w	r3, r3, #12
 8001136:	2b00      	cmp	r3, #0
 8001138:	d00b      	beq.n	8001152 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800113a:	4b49      	ldr	r3, [pc, #292]	@ (8001260 <HAL_RCC_OscConfig+0x26c>)
 800113c:	685b      	ldr	r3, [r3, #4]
 800113e:	f003 030c 	and.w	r3, r3, #12
 8001142:	2b08      	cmp	r3, #8
 8001144:	d11c      	bne.n	8001180 <HAL_RCC_OscConfig+0x18c>
 8001146:	4b46      	ldr	r3, [pc, #280]	@ (8001260 <HAL_RCC_OscConfig+0x26c>)
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800114e:	2b00      	cmp	r3, #0
 8001150:	d116      	bne.n	8001180 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001152:	4b43      	ldr	r3, [pc, #268]	@ (8001260 <HAL_RCC_OscConfig+0x26c>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f003 0302 	and.w	r3, r3, #2
 800115a:	2b00      	cmp	r3, #0
 800115c:	d005      	beq.n	800116a <HAL_RCC_OscConfig+0x176>
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	691b      	ldr	r3, [r3, #16]
 8001162:	2b01      	cmp	r3, #1
 8001164:	d001      	beq.n	800116a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001166:	2301      	movs	r3, #1
 8001168:	e1c0      	b.n	80014ec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800116a:	4b3d      	ldr	r3, [pc, #244]	@ (8001260 <HAL_RCC_OscConfig+0x26c>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	695b      	ldr	r3, [r3, #20]
 8001176:	00db      	lsls	r3, r3, #3
 8001178:	4939      	ldr	r1, [pc, #228]	@ (8001260 <HAL_RCC_OscConfig+0x26c>)
 800117a:	4313      	orrs	r3, r2
 800117c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800117e:	e03a      	b.n	80011f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	691b      	ldr	r3, [r3, #16]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d020      	beq.n	80011ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001188:	4b36      	ldr	r3, [pc, #216]	@ (8001264 <HAL_RCC_OscConfig+0x270>)
 800118a:	2201      	movs	r2, #1
 800118c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800118e:	f7ff fc29 	bl	80009e4 <HAL_GetTick>
 8001192:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001194:	e008      	b.n	80011a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001196:	f7ff fc25 	bl	80009e4 <HAL_GetTick>
 800119a:	4602      	mov	r2, r0
 800119c:	693b      	ldr	r3, [r7, #16]
 800119e:	1ad3      	subs	r3, r2, r3
 80011a0:	2b02      	cmp	r3, #2
 80011a2:	d901      	bls.n	80011a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80011a4:	2303      	movs	r3, #3
 80011a6:	e1a1      	b.n	80014ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011a8:	4b2d      	ldr	r3, [pc, #180]	@ (8001260 <HAL_RCC_OscConfig+0x26c>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	f003 0302 	and.w	r3, r3, #2
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d0f0      	beq.n	8001196 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011b4:	4b2a      	ldr	r3, [pc, #168]	@ (8001260 <HAL_RCC_OscConfig+0x26c>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	695b      	ldr	r3, [r3, #20]
 80011c0:	00db      	lsls	r3, r3, #3
 80011c2:	4927      	ldr	r1, [pc, #156]	@ (8001260 <HAL_RCC_OscConfig+0x26c>)
 80011c4:	4313      	orrs	r3, r2
 80011c6:	600b      	str	r3, [r1, #0]
 80011c8:	e015      	b.n	80011f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80011ca:	4b26      	ldr	r3, [pc, #152]	@ (8001264 <HAL_RCC_OscConfig+0x270>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011d0:	f7ff fc08 	bl	80009e4 <HAL_GetTick>
 80011d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011d6:	e008      	b.n	80011ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80011d8:	f7ff fc04 	bl	80009e4 <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	693b      	ldr	r3, [r7, #16]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d901      	bls.n	80011ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	e180      	b.n	80014ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80011ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001260 <HAL_RCC_OscConfig+0x26c>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d1f0      	bne.n	80011d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0308 	and.w	r3, r3, #8
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d03a      	beq.n	8001278 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	699b      	ldr	r3, [r3, #24]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d019      	beq.n	800123e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800120a:	4b17      	ldr	r3, [pc, #92]	@ (8001268 <HAL_RCC_OscConfig+0x274>)
 800120c:	2201      	movs	r2, #1
 800120e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001210:	f7ff fbe8 	bl	80009e4 <HAL_GetTick>
 8001214:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001216:	e008      	b.n	800122a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001218:	f7ff fbe4 	bl	80009e4 <HAL_GetTick>
 800121c:	4602      	mov	r2, r0
 800121e:	693b      	ldr	r3, [r7, #16]
 8001220:	1ad3      	subs	r3, r2, r3
 8001222:	2b02      	cmp	r3, #2
 8001224:	d901      	bls.n	800122a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001226:	2303      	movs	r3, #3
 8001228:	e160      	b.n	80014ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800122a:	4b0d      	ldr	r3, [pc, #52]	@ (8001260 <HAL_RCC_OscConfig+0x26c>)
 800122c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800122e:	f003 0302 	and.w	r3, r3, #2
 8001232:	2b00      	cmp	r3, #0
 8001234:	d0f0      	beq.n	8001218 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001236:	2001      	movs	r0, #1
 8001238:	f000 face 	bl	80017d8 <RCC_Delay>
 800123c:	e01c      	b.n	8001278 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800123e:	4b0a      	ldr	r3, [pc, #40]	@ (8001268 <HAL_RCC_OscConfig+0x274>)
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001244:	f7ff fbce 	bl	80009e4 <HAL_GetTick>
 8001248:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800124a:	e00f      	b.n	800126c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800124c:	f7ff fbca 	bl	80009e4 <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	2b02      	cmp	r3, #2
 8001258:	d908      	bls.n	800126c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e146      	b.n	80014ec <HAL_RCC_OscConfig+0x4f8>
 800125e:	bf00      	nop
 8001260:	40021000 	.word	0x40021000
 8001264:	42420000 	.word	0x42420000
 8001268:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800126c:	4b92      	ldr	r3, [pc, #584]	@ (80014b8 <HAL_RCC_OscConfig+0x4c4>)
 800126e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001270:	f003 0302 	and.w	r3, r3, #2
 8001274:	2b00      	cmp	r3, #0
 8001276:	d1e9      	bne.n	800124c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f003 0304 	and.w	r3, r3, #4
 8001280:	2b00      	cmp	r3, #0
 8001282:	f000 80a6 	beq.w	80013d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001286:	2300      	movs	r3, #0
 8001288:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800128a:	4b8b      	ldr	r3, [pc, #556]	@ (80014b8 <HAL_RCC_OscConfig+0x4c4>)
 800128c:	69db      	ldr	r3, [r3, #28]
 800128e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d10d      	bne.n	80012b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001296:	4b88      	ldr	r3, [pc, #544]	@ (80014b8 <HAL_RCC_OscConfig+0x4c4>)
 8001298:	69db      	ldr	r3, [r3, #28]
 800129a:	4a87      	ldr	r2, [pc, #540]	@ (80014b8 <HAL_RCC_OscConfig+0x4c4>)
 800129c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012a0:	61d3      	str	r3, [r2, #28]
 80012a2:	4b85      	ldr	r3, [pc, #532]	@ (80014b8 <HAL_RCC_OscConfig+0x4c4>)
 80012a4:	69db      	ldr	r3, [r3, #28]
 80012a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012aa:	60bb      	str	r3, [r7, #8]
 80012ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012ae:	2301      	movs	r3, #1
 80012b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012b2:	4b82      	ldr	r3, [pc, #520]	@ (80014bc <HAL_RCC_OscConfig+0x4c8>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d118      	bne.n	80012f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012be:	4b7f      	ldr	r3, [pc, #508]	@ (80014bc <HAL_RCC_OscConfig+0x4c8>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a7e      	ldr	r2, [pc, #504]	@ (80014bc <HAL_RCC_OscConfig+0x4c8>)
 80012c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012ca:	f7ff fb8b 	bl	80009e4 <HAL_GetTick>
 80012ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012d0:	e008      	b.n	80012e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012d2:	f7ff fb87 	bl	80009e4 <HAL_GetTick>
 80012d6:	4602      	mov	r2, r0
 80012d8:	693b      	ldr	r3, [r7, #16]
 80012da:	1ad3      	subs	r3, r2, r3
 80012dc:	2b64      	cmp	r3, #100	@ 0x64
 80012de:	d901      	bls.n	80012e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80012e0:	2303      	movs	r3, #3
 80012e2:	e103      	b.n	80014ec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012e4:	4b75      	ldr	r3, [pc, #468]	@ (80014bc <HAL_RCC_OscConfig+0x4c8>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d0f0      	beq.n	80012d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	68db      	ldr	r3, [r3, #12]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d106      	bne.n	8001306 <HAL_RCC_OscConfig+0x312>
 80012f8:	4b6f      	ldr	r3, [pc, #444]	@ (80014b8 <HAL_RCC_OscConfig+0x4c4>)
 80012fa:	6a1b      	ldr	r3, [r3, #32]
 80012fc:	4a6e      	ldr	r2, [pc, #440]	@ (80014b8 <HAL_RCC_OscConfig+0x4c4>)
 80012fe:	f043 0301 	orr.w	r3, r3, #1
 8001302:	6213      	str	r3, [r2, #32]
 8001304:	e02d      	b.n	8001362 <HAL_RCC_OscConfig+0x36e>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	68db      	ldr	r3, [r3, #12]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d10c      	bne.n	8001328 <HAL_RCC_OscConfig+0x334>
 800130e:	4b6a      	ldr	r3, [pc, #424]	@ (80014b8 <HAL_RCC_OscConfig+0x4c4>)
 8001310:	6a1b      	ldr	r3, [r3, #32]
 8001312:	4a69      	ldr	r2, [pc, #420]	@ (80014b8 <HAL_RCC_OscConfig+0x4c4>)
 8001314:	f023 0301 	bic.w	r3, r3, #1
 8001318:	6213      	str	r3, [r2, #32]
 800131a:	4b67      	ldr	r3, [pc, #412]	@ (80014b8 <HAL_RCC_OscConfig+0x4c4>)
 800131c:	6a1b      	ldr	r3, [r3, #32]
 800131e:	4a66      	ldr	r2, [pc, #408]	@ (80014b8 <HAL_RCC_OscConfig+0x4c4>)
 8001320:	f023 0304 	bic.w	r3, r3, #4
 8001324:	6213      	str	r3, [r2, #32]
 8001326:	e01c      	b.n	8001362 <HAL_RCC_OscConfig+0x36e>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	68db      	ldr	r3, [r3, #12]
 800132c:	2b05      	cmp	r3, #5
 800132e:	d10c      	bne.n	800134a <HAL_RCC_OscConfig+0x356>
 8001330:	4b61      	ldr	r3, [pc, #388]	@ (80014b8 <HAL_RCC_OscConfig+0x4c4>)
 8001332:	6a1b      	ldr	r3, [r3, #32]
 8001334:	4a60      	ldr	r2, [pc, #384]	@ (80014b8 <HAL_RCC_OscConfig+0x4c4>)
 8001336:	f043 0304 	orr.w	r3, r3, #4
 800133a:	6213      	str	r3, [r2, #32]
 800133c:	4b5e      	ldr	r3, [pc, #376]	@ (80014b8 <HAL_RCC_OscConfig+0x4c4>)
 800133e:	6a1b      	ldr	r3, [r3, #32]
 8001340:	4a5d      	ldr	r2, [pc, #372]	@ (80014b8 <HAL_RCC_OscConfig+0x4c4>)
 8001342:	f043 0301 	orr.w	r3, r3, #1
 8001346:	6213      	str	r3, [r2, #32]
 8001348:	e00b      	b.n	8001362 <HAL_RCC_OscConfig+0x36e>
 800134a:	4b5b      	ldr	r3, [pc, #364]	@ (80014b8 <HAL_RCC_OscConfig+0x4c4>)
 800134c:	6a1b      	ldr	r3, [r3, #32]
 800134e:	4a5a      	ldr	r2, [pc, #360]	@ (80014b8 <HAL_RCC_OscConfig+0x4c4>)
 8001350:	f023 0301 	bic.w	r3, r3, #1
 8001354:	6213      	str	r3, [r2, #32]
 8001356:	4b58      	ldr	r3, [pc, #352]	@ (80014b8 <HAL_RCC_OscConfig+0x4c4>)
 8001358:	6a1b      	ldr	r3, [r3, #32]
 800135a:	4a57      	ldr	r2, [pc, #348]	@ (80014b8 <HAL_RCC_OscConfig+0x4c4>)
 800135c:	f023 0304 	bic.w	r3, r3, #4
 8001360:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d015      	beq.n	8001396 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800136a:	f7ff fb3b 	bl	80009e4 <HAL_GetTick>
 800136e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001370:	e00a      	b.n	8001388 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001372:	f7ff fb37 	bl	80009e4 <HAL_GetTick>
 8001376:	4602      	mov	r2, r0
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001380:	4293      	cmp	r3, r2
 8001382:	d901      	bls.n	8001388 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001384:	2303      	movs	r3, #3
 8001386:	e0b1      	b.n	80014ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001388:	4b4b      	ldr	r3, [pc, #300]	@ (80014b8 <HAL_RCC_OscConfig+0x4c4>)
 800138a:	6a1b      	ldr	r3, [r3, #32]
 800138c:	f003 0302 	and.w	r3, r3, #2
 8001390:	2b00      	cmp	r3, #0
 8001392:	d0ee      	beq.n	8001372 <HAL_RCC_OscConfig+0x37e>
 8001394:	e014      	b.n	80013c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001396:	f7ff fb25 	bl	80009e4 <HAL_GetTick>
 800139a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800139c:	e00a      	b.n	80013b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800139e:	f7ff fb21 	bl	80009e4 <HAL_GetTick>
 80013a2:	4602      	mov	r2, r0
 80013a4:	693b      	ldr	r3, [r7, #16]
 80013a6:	1ad3      	subs	r3, r2, r3
 80013a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013ac:	4293      	cmp	r3, r2
 80013ae:	d901      	bls.n	80013b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80013b0:	2303      	movs	r3, #3
 80013b2:	e09b      	b.n	80014ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80013b4:	4b40      	ldr	r3, [pc, #256]	@ (80014b8 <HAL_RCC_OscConfig+0x4c4>)
 80013b6:	6a1b      	ldr	r3, [r3, #32]
 80013b8:	f003 0302 	and.w	r3, r3, #2
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d1ee      	bne.n	800139e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80013c0:	7dfb      	ldrb	r3, [r7, #23]
 80013c2:	2b01      	cmp	r3, #1
 80013c4:	d105      	bne.n	80013d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013c6:	4b3c      	ldr	r3, [pc, #240]	@ (80014b8 <HAL_RCC_OscConfig+0x4c4>)
 80013c8:	69db      	ldr	r3, [r3, #28]
 80013ca:	4a3b      	ldr	r2, [pc, #236]	@ (80014b8 <HAL_RCC_OscConfig+0x4c4>)
 80013cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80013d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	69db      	ldr	r3, [r3, #28]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	f000 8087 	beq.w	80014ea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013dc:	4b36      	ldr	r3, [pc, #216]	@ (80014b8 <HAL_RCC_OscConfig+0x4c4>)
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f003 030c 	and.w	r3, r3, #12
 80013e4:	2b08      	cmp	r3, #8
 80013e6:	d061      	beq.n	80014ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	69db      	ldr	r3, [r3, #28]
 80013ec:	2b02      	cmp	r3, #2
 80013ee:	d146      	bne.n	800147e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013f0:	4b33      	ldr	r3, [pc, #204]	@ (80014c0 <HAL_RCC_OscConfig+0x4cc>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f6:	f7ff faf5 	bl	80009e4 <HAL_GetTick>
 80013fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80013fc:	e008      	b.n	8001410 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013fe:	f7ff faf1 	bl	80009e4 <HAL_GetTick>
 8001402:	4602      	mov	r2, r0
 8001404:	693b      	ldr	r3, [r7, #16]
 8001406:	1ad3      	subs	r3, r2, r3
 8001408:	2b02      	cmp	r3, #2
 800140a:	d901      	bls.n	8001410 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800140c:	2303      	movs	r3, #3
 800140e:	e06d      	b.n	80014ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001410:	4b29      	ldr	r3, [pc, #164]	@ (80014b8 <HAL_RCC_OscConfig+0x4c4>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001418:	2b00      	cmp	r3, #0
 800141a:	d1f0      	bne.n	80013fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6a1b      	ldr	r3, [r3, #32]
 8001420:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001424:	d108      	bne.n	8001438 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001426:	4b24      	ldr	r3, [pc, #144]	@ (80014b8 <HAL_RCC_OscConfig+0x4c4>)
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	689b      	ldr	r3, [r3, #8]
 8001432:	4921      	ldr	r1, [pc, #132]	@ (80014b8 <HAL_RCC_OscConfig+0x4c4>)
 8001434:	4313      	orrs	r3, r2
 8001436:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001438:	4b1f      	ldr	r3, [pc, #124]	@ (80014b8 <HAL_RCC_OscConfig+0x4c4>)
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	6a19      	ldr	r1, [r3, #32]
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001448:	430b      	orrs	r3, r1
 800144a:	491b      	ldr	r1, [pc, #108]	@ (80014b8 <HAL_RCC_OscConfig+0x4c4>)
 800144c:	4313      	orrs	r3, r2
 800144e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001450:	4b1b      	ldr	r3, [pc, #108]	@ (80014c0 <HAL_RCC_OscConfig+0x4cc>)
 8001452:	2201      	movs	r2, #1
 8001454:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001456:	f7ff fac5 	bl	80009e4 <HAL_GetTick>
 800145a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800145c:	e008      	b.n	8001470 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800145e:	f7ff fac1 	bl	80009e4 <HAL_GetTick>
 8001462:	4602      	mov	r2, r0
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	2b02      	cmp	r3, #2
 800146a:	d901      	bls.n	8001470 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800146c:	2303      	movs	r3, #3
 800146e:	e03d      	b.n	80014ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001470:	4b11      	ldr	r3, [pc, #68]	@ (80014b8 <HAL_RCC_OscConfig+0x4c4>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001478:	2b00      	cmp	r3, #0
 800147a:	d0f0      	beq.n	800145e <HAL_RCC_OscConfig+0x46a>
 800147c:	e035      	b.n	80014ea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800147e:	4b10      	ldr	r3, [pc, #64]	@ (80014c0 <HAL_RCC_OscConfig+0x4cc>)
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001484:	f7ff faae 	bl	80009e4 <HAL_GetTick>
 8001488:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800148a:	e008      	b.n	800149e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800148c:	f7ff faaa 	bl	80009e4 <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	693b      	ldr	r3, [r7, #16]
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b02      	cmp	r3, #2
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e026      	b.n	80014ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800149e:	4b06      	ldr	r3, [pc, #24]	@ (80014b8 <HAL_RCC_OscConfig+0x4c4>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d1f0      	bne.n	800148c <HAL_RCC_OscConfig+0x498>
 80014aa:	e01e      	b.n	80014ea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	69db      	ldr	r3, [r3, #28]
 80014b0:	2b01      	cmp	r3, #1
 80014b2:	d107      	bne.n	80014c4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80014b4:	2301      	movs	r3, #1
 80014b6:	e019      	b.n	80014ec <HAL_RCC_OscConfig+0x4f8>
 80014b8:	40021000 	.word	0x40021000
 80014bc:	40007000 	.word	0x40007000
 80014c0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80014c4:	4b0b      	ldr	r3, [pc, #44]	@ (80014f4 <HAL_RCC_OscConfig+0x500>)
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014ca:	68fb      	ldr	r3, [r7, #12]
 80014cc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6a1b      	ldr	r3, [r3, #32]
 80014d4:	429a      	cmp	r2, r3
 80014d6:	d106      	bne.n	80014e6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d001      	beq.n	80014ea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e000      	b.n	80014ec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80014ea:	2300      	movs	r3, #0
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	3718      	adds	r7, #24
 80014f0:	46bd      	mov	sp, r7
 80014f2:	bd80      	pop	{r7, pc}
 80014f4:	40021000 	.word	0x40021000

080014f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80014f8:	b580      	push	{r7, lr}
 80014fa:	b084      	sub	sp, #16
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	6078      	str	r0, [r7, #4]
 8001500:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	2b00      	cmp	r3, #0
 8001506:	d101      	bne.n	800150c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e0d0      	b.n	80016ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800150c:	4b6a      	ldr	r3, [pc, #424]	@ (80016b8 <HAL_RCC_ClockConfig+0x1c0>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f003 0307 	and.w	r3, r3, #7
 8001514:	683a      	ldr	r2, [r7, #0]
 8001516:	429a      	cmp	r2, r3
 8001518:	d910      	bls.n	800153c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800151a:	4b67      	ldr	r3, [pc, #412]	@ (80016b8 <HAL_RCC_ClockConfig+0x1c0>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f023 0207 	bic.w	r2, r3, #7
 8001522:	4965      	ldr	r1, [pc, #404]	@ (80016b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001524:	683b      	ldr	r3, [r7, #0]
 8001526:	4313      	orrs	r3, r2
 8001528:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800152a:	4b63      	ldr	r3, [pc, #396]	@ (80016b8 <HAL_RCC_ClockConfig+0x1c0>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0307 	and.w	r3, r3, #7
 8001532:	683a      	ldr	r2, [r7, #0]
 8001534:	429a      	cmp	r2, r3
 8001536:	d001      	beq.n	800153c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001538:	2301      	movs	r3, #1
 800153a:	e0b8      	b.n	80016ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f003 0302 	and.w	r3, r3, #2
 8001544:	2b00      	cmp	r3, #0
 8001546:	d020      	beq.n	800158a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	f003 0304 	and.w	r3, r3, #4
 8001550:	2b00      	cmp	r3, #0
 8001552:	d005      	beq.n	8001560 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001554:	4b59      	ldr	r3, [pc, #356]	@ (80016bc <HAL_RCC_ClockConfig+0x1c4>)
 8001556:	685b      	ldr	r3, [r3, #4]
 8001558:	4a58      	ldr	r2, [pc, #352]	@ (80016bc <HAL_RCC_ClockConfig+0x1c4>)
 800155a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800155e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0308 	and.w	r3, r3, #8
 8001568:	2b00      	cmp	r3, #0
 800156a:	d005      	beq.n	8001578 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800156c:	4b53      	ldr	r3, [pc, #332]	@ (80016bc <HAL_RCC_ClockConfig+0x1c4>)
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	4a52      	ldr	r2, [pc, #328]	@ (80016bc <HAL_RCC_ClockConfig+0x1c4>)
 8001572:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001576:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001578:	4b50      	ldr	r3, [pc, #320]	@ (80016bc <HAL_RCC_ClockConfig+0x1c4>)
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	494d      	ldr	r1, [pc, #308]	@ (80016bc <HAL_RCC_ClockConfig+0x1c4>)
 8001586:	4313      	orrs	r3, r2
 8001588:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	2b00      	cmp	r3, #0
 8001594:	d040      	beq.n	8001618 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	2b01      	cmp	r3, #1
 800159c:	d107      	bne.n	80015ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800159e:	4b47      	ldr	r3, [pc, #284]	@ (80016bc <HAL_RCC_ClockConfig+0x1c4>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d115      	bne.n	80015d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e07f      	b.n	80016ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	2b02      	cmp	r3, #2
 80015b4:	d107      	bne.n	80015c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80015b6:	4b41      	ldr	r3, [pc, #260]	@ (80016bc <HAL_RCC_ClockConfig+0x1c4>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d109      	bne.n	80015d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015c2:	2301      	movs	r3, #1
 80015c4:	e073      	b.n	80016ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015c6:	4b3d      	ldr	r3, [pc, #244]	@ (80016bc <HAL_RCC_ClockConfig+0x1c4>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d101      	bne.n	80015d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80015d2:	2301      	movs	r3, #1
 80015d4:	e06b      	b.n	80016ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015d6:	4b39      	ldr	r3, [pc, #228]	@ (80016bc <HAL_RCC_ClockConfig+0x1c4>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	f023 0203 	bic.w	r2, r3, #3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	685b      	ldr	r3, [r3, #4]
 80015e2:	4936      	ldr	r1, [pc, #216]	@ (80016bc <HAL_RCC_ClockConfig+0x1c4>)
 80015e4:	4313      	orrs	r3, r2
 80015e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80015e8:	f7ff f9fc 	bl	80009e4 <HAL_GetTick>
 80015ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80015ee:	e00a      	b.n	8001606 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80015f0:	f7ff f9f8 	bl	80009e4 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015fe:	4293      	cmp	r3, r2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e053      	b.n	80016ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001606:	4b2d      	ldr	r3, [pc, #180]	@ (80016bc <HAL_RCC_ClockConfig+0x1c4>)
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f003 020c 	and.w	r2, r3, #12
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	685b      	ldr	r3, [r3, #4]
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	429a      	cmp	r2, r3
 8001616:	d1eb      	bne.n	80015f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001618:	4b27      	ldr	r3, [pc, #156]	@ (80016b8 <HAL_RCC_ClockConfig+0x1c0>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	f003 0307 	and.w	r3, r3, #7
 8001620:	683a      	ldr	r2, [r7, #0]
 8001622:	429a      	cmp	r2, r3
 8001624:	d210      	bcs.n	8001648 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001626:	4b24      	ldr	r3, [pc, #144]	@ (80016b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f023 0207 	bic.w	r2, r3, #7
 800162e:	4922      	ldr	r1, [pc, #136]	@ (80016b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	4313      	orrs	r3, r2
 8001634:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001636:	4b20      	ldr	r3, [pc, #128]	@ (80016b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f003 0307 	and.w	r3, r3, #7
 800163e:	683a      	ldr	r2, [r7, #0]
 8001640:	429a      	cmp	r2, r3
 8001642:	d001      	beq.n	8001648 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e032      	b.n	80016ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f003 0304 	and.w	r3, r3, #4
 8001650:	2b00      	cmp	r3, #0
 8001652:	d008      	beq.n	8001666 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001654:	4b19      	ldr	r3, [pc, #100]	@ (80016bc <HAL_RCC_ClockConfig+0x1c4>)
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	68db      	ldr	r3, [r3, #12]
 8001660:	4916      	ldr	r1, [pc, #88]	@ (80016bc <HAL_RCC_ClockConfig+0x1c4>)
 8001662:	4313      	orrs	r3, r2
 8001664:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0308 	and.w	r3, r3, #8
 800166e:	2b00      	cmp	r3, #0
 8001670:	d009      	beq.n	8001686 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001672:	4b12      	ldr	r3, [pc, #72]	@ (80016bc <HAL_RCC_ClockConfig+0x1c4>)
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	691b      	ldr	r3, [r3, #16]
 800167e:	00db      	lsls	r3, r3, #3
 8001680:	490e      	ldr	r1, [pc, #56]	@ (80016bc <HAL_RCC_ClockConfig+0x1c4>)
 8001682:	4313      	orrs	r3, r2
 8001684:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001686:	f000 f821 	bl	80016cc <HAL_RCC_GetSysClockFreq>
 800168a:	4602      	mov	r2, r0
 800168c:	4b0b      	ldr	r3, [pc, #44]	@ (80016bc <HAL_RCC_ClockConfig+0x1c4>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	091b      	lsrs	r3, r3, #4
 8001692:	f003 030f 	and.w	r3, r3, #15
 8001696:	490a      	ldr	r1, [pc, #40]	@ (80016c0 <HAL_RCC_ClockConfig+0x1c8>)
 8001698:	5ccb      	ldrb	r3, [r1, r3]
 800169a:	fa22 f303 	lsr.w	r3, r2, r3
 800169e:	4a09      	ldr	r2, [pc, #36]	@ (80016c4 <HAL_RCC_ClockConfig+0x1cc>)
 80016a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80016a2:	4b09      	ldr	r3, [pc, #36]	@ (80016c8 <HAL_RCC_ClockConfig+0x1d0>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f7ff f95a 	bl	8000960 <HAL_InitTick>

  return HAL_OK;
 80016ac:	2300      	movs	r3, #0
}
 80016ae:	4618      	mov	r0, r3
 80016b0:	3710      	adds	r7, #16
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40022000 	.word	0x40022000
 80016bc:	40021000 	.word	0x40021000
 80016c0:	0800324c 	.word	0x0800324c
 80016c4:	20000000 	.word	0x20000000
 80016c8:	20000004 	.word	0x20000004

080016cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b087      	sub	sp, #28
 80016d0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80016d2:	2300      	movs	r3, #0
 80016d4:	60fb      	str	r3, [r7, #12]
 80016d6:	2300      	movs	r3, #0
 80016d8:	60bb      	str	r3, [r7, #8]
 80016da:	2300      	movs	r3, #0
 80016dc:	617b      	str	r3, [r7, #20]
 80016de:	2300      	movs	r3, #0
 80016e0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80016e2:	2300      	movs	r3, #0
 80016e4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80016e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001760 <HAL_RCC_GetSysClockFreq+0x94>)
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f003 030c 	and.w	r3, r3, #12
 80016f2:	2b04      	cmp	r3, #4
 80016f4:	d002      	beq.n	80016fc <HAL_RCC_GetSysClockFreq+0x30>
 80016f6:	2b08      	cmp	r3, #8
 80016f8:	d003      	beq.n	8001702 <HAL_RCC_GetSysClockFreq+0x36>
 80016fa:	e027      	b.n	800174c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80016fc:	4b19      	ldr	r3, [pc, #100]	@ (8001764 <HAL_RCC_GetSysClockFreq+0x98>)
 80016fe:	613b      	str	r3, [r7, #16]
      break;
 8001700:	e027      	b.n	8001752 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	0c9b      	lsrs	r3, r3, #18
 8001706:	f003 030f 	and.w	r3, r3, #15
 800170a:	4a17      	ldr	r2, [pc, #92]	@ (8001768 <HAL_RCC_GetSysClockFreq+0x9c>)
 800170c:	5cd3      	ldrb	r3, [r2, r3]
 800170e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001716:	2b00      	cmp	r3, #0
 8001718:	d010      	beq.n	800173c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800171a:	4b11      	ldr	r3, [pc, #68]	@ (8001760 <HAL_RCC_GetSysClockFreq+0x94>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	0c5b      	lsrs	r3, r3, #17
 8001720:	f003 0301 	and.w	r3, r3, #1
 8001724:	4a11      	ldr	r2, [pc, #68]	@ (800176c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001726:	5cd3      	ldrb	r3, [r2, r3]
 8001728:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a0d      	ldr	r2, [pc, #52]	@ (8001764 <HAL_RCC_GetSysClockFreq+0x98>)
 800172e:	fb03 f202 	mul.w	r2, r3, r2
 8001732:	68bb      	ldr	r3, [r7, #8]
 8001734:	fbb2 f3f3 	udiv	r3, r2, r3
 8001738:	617b      	str	r3, [r7, #20]
 800173a:	e004      	b.n	8001746 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4a0c      	ldr	r2, [pc, #48]	@ (8001770 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001740:	fb02 f303 	mul.w	r3, r2, r3
 8001744:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	613b      	str	r3, [r7, #16]
      break;
 800174a:	e002      	b.n	8001752 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800174c:	4b05      	ldr	r3, [pc, #20]	@ (8001764 <HAL_RCC_GetSysClockFreq+0x98>)
 800174e:	613b      	str	r3, [r7, #16]
      break;
 8001750:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001752:	693b      	ldr	r3, [r7, #16]
}
 8001754:	4618      	mov	r0, r3
 8001756:	371c      	adds	r7, #28
 8001758:	46bd      	mov	sp, r7
 800175a:	bc80      	pop	{r7}
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	40021000 	.word	0x40021000
 8001764:	007a1200 	.word	0x007a1200
 8001768:	08003264 	.word	0x08003264
 800176c:	08003274 	.word	0x08003274
 8001770:	003d0900 	.word	0x003d0900

08001774 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001774:	b480      	push	{r7}
 8001776:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001778:	4b02      	ldr	r3, [pc, #8]	@ (8001784 <HAL_RCC_GetHCLKFreq+0x10>)
 800177a:	681b      	ldr	r3, [r3, #0]
}
 800177c:	4618      	mov	r0, r3
 800177e:	46bd      	mov	sp, r7
 8001780:	bc80      	pop	{r7}
 8001782:	4770      	bx	lr
 8001784:	20000000 	.word	0x20000000

08001788 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001788:	b580      	push	{r7, lr}
 800178a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800178c:	f7ff fff2 	bl	8001774 <HAL_RCC_GetHCLKFreq>
 8001790:	4602      	mov	r2, r0
 8001792:	4b05      	ldr	r3, [pc, #20]	@ (80017a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	0a1b      	lsrs	r3, r3, #8
 8001798:	f003 0307 	and.w	r3, r3, #7
 800179c:	4903      	ldr	r1, [pc, #12]	@ (80017ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800179e:	5ccb      	ldrb	r3, [r1, r3]
 80017a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	40021000 	.word	0x40021000
 80017ac:	0800325c 	.word	0x0800325c

080017b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80017b4:	f7ff ffde 	bl	8001774 <HAL_RCC_GetHCLKFreq>
 80017b8:	4602      	mov	r2, r0
 80017ba:	4b05      	ldr	r3, [pc, #20]	@ (80017d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	0adb      	lsrs	r3, r3, #11
 80017c0:	f003 0307 	and.w	r3, r3, #7
 80017c4:	4903      	ldr	r1, [pc, #12]	@ (80017d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80017c6:	5ccb      	ldrb	r3, [r1, r3]
 80017c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	40021000 	.word	0x40021000
 80017d4:	0800325c 	.word	0x0800325c

080017d8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80017d8:	b480      	push	{r7}
 80017da:	b085      	sub	sp, #20
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80017e0:	4b0a      	ldr	r3, [pc, #40]	@ (800180c <RCC_Delay+0x34>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4a0a      	ldr	r2, [pc, #40]	@ (8001810 <RCC_Delay+0x38>)
 80017e6:	fba2 2303 	umull	r2, r3, r2, r3
 80017ea:	0a5b      	lsrs	r3, r3, #9
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	fb02 f303 	mul.w	r3, r2, r3
 80017f2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80017f4:	bf00      	nop
  }
  while (Delay --);
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	1e5a      	subs	r2, r3, #1
 80017fa:	60fa      	str	r2, [r7, #12]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d1f9      	bne.n	80017f4 <RCC_Delay+0x1c>
}
 8001800:	bf00      	nop
 8001802:	bf00      	nop
 8001804:	3714      	adds	r7, #20
 8001806:	46bd      	mov	sp, r7
 8001808:	bc80      	pop	{r7}
 800180a:	4770      	bx	lr
 800180c:	20000000 	.word	0x20000000
 8001810:	10624dd3 	.word	0x10624dd3

08001814 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b082      	sub	sp, #8
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d101      	bne.n	8001826 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001822:	2301      	movs	r3, #1
 8001824:	e041      	b.n	80018aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800182c:	b2db      	uxtb	r3, r3
 800182e:	2b00      	cmp	r3, #0
 8001830:	d106      	bne.n	8001840 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	2200      	movs	r2, #0
 8001836:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800183a:	6878      	ldr	r0, [r7, #4]
 800183c:	f7fe ff12 	bl	8000664 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2202      	movs	r2, #2
 8001844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681a      	ldr	r2, [r3, #0]
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	3304      	adds	r3, #4
 8001850:	4619      	mov	r1, r3
 8001852:	4610      	mov	r0, r2
 8001854:	f000 f940 	bl	8001ad8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	2201      	movs	r2, #1
 800185c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2201      	movs	r2, #1
 8001864:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2201      	movs	r2, #1
 800186c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	2201      	movs	r2, #1
 8001874:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	2201      	movs	r2, #1
 800187c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	2201      	movs	r2, #1
 8001884:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	2201      	movs	r2, #1
 800188c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2201      	movs	r2, #1
 8001894:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	2201      	movs	r2, #1
 800189c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2201      	movs	r2, #1
 80018a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80018a8:	2300      	movs	r3, #0
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
	...

080018b4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d001      	beq.n	80018cc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80018c8:	2301      	movs	r3, #1
 80018ca:	e032      	b.n	8001932 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2202      	movs	r2, #2
 80018d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a18      	ldr	r2, [pc, #96]	@ (800193c <HAL_TIM_Base_Start+0x88>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d00e      	beq.n	80018fc <HAL_TIM_Base_Start+0x48>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80018e6:	d009      	beq.n	80018fc <HAL_TIM_Base_Start+0x48>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a14      	ldr	r2, [pc, #80]	@ (8001940 <HAL_TIM_Base_Start+0x8c>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d004      	beq.n	80018fc <HAL_TIM_Base_Start+0x48>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	4a13      	ldr	r2, [pc, #76]	@ (8001944 <HAL_TIM_Base_Start+0x90>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d111      	bne.n	8001920 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	f003 0307 	and.w	r3, r3, #7
 8001906:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2b06      	cmp	r3, #6
 800190c:	d010      	beq.n	8001930 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f042 0201 	orr.w	r2, r2, #1
 800191c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800191e:	e007      	b.n	8001930 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	681a      	ldr	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f042 0201 	orr.w	r2, r2, #1
 800192e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3714      	adds	r7, #20
 8001936:	46bd      	mov	sp, r7
 8001938:	bc80      	pop	{r7}
 800193a:	4770      	bx	lr
 800193c:	40012c00 	.word	0x40012c00
 8001940:	40000400 	.word	0x40000400
 8001944:	40000800 	.word	0x40000800

08001948 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001948:	b580      	push	{r7, lr}
 800194a:	b084      	sub	sp, #16
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001952:	2300      	movs	r3, #0
 8001954:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800195c:	2b01      	cmp	r3, #1
 800195e:	d101      	bne.n	8001964 <HAL_TIM_ConfigClockSource+0x1c>
 8001960:	2302      	movs	r3, #2
 8001962:	e0b4      	b.n	8001ace <HAL_TIM_ConfigClockSource+0x186>
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2201      	movs	r2, #1
 8001968:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2202      	movs	r2, #2
 8001970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001982:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001984:	68bb      	ldr	r3, [r7, #8]
 8001986:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800198a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	68ba      	ldr	r2, [r7, #8]
 8001992:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800199c:	d03e      	beq.n	8001a1c <HAL_TIM_ConfigClockSource+0xd4>
 800199e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80019a2:	f200 8087 	bhi.w	8001ab4 <HAL_TIM_ConfigClockSource+0x16c>
 80019a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80019aa:	f000 8086 	beq.w	8001aba <HAL_TIM_ConfigClockSource+0x172>
 80019ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80019b2:	d87f      	bhi.n	8001ab4 <HAL_TIM_ConfigClockSource+0x16c>
 80019b4:	2b70      	cmp	r3, #112	@ 0x70
 80019b6:	d01a      	beq.n	80019ee <HAL_TIM_ConfigClockSource+0xa6>
 80019b8:	2b70      	cmp	r3, #112	@ 0x70
 80019ba:	d87b      	bhi.n	8001ab4 <HAL_TIM_ConfigClockSource+0x16c>
 80019bc:	2b60      	cmp	r3, #96	@ 0x60
 80019be:	d050      	beq.n	8001a62 <HAL_TIM_ConfigClockSource+0x11a>
 80019c0:	2b60      	cmp	r3, #96	@ 0x60
 80019c2:	d877      	bhi.n	8001ab4 <HAL_TIM_ConfigClockSource+0x16c>
 80019c4:	2b50      	cmp	r3, #80	@ 0x50
 80019c6:	d03c      	beq.n	8001a42 <HAL_TIM_ConfigClockSource+0xfa>
 80019c8:	2b50      	cmp	r3, #80	@ 0x50
 80019ca:	d873      	bhi.n	8001ab4 <HAL_TIM_ConfigClockSource+0x16c>
 80019cc:	2b40      	cmp	r3, #64	@ 0x40
 80019ce:	d058      	beq.n	8001a82 <HAL_TIM_ConfigClockSource+0x13a>
 80019d0:	2b40      	cmp	r3, #64	@ 0x40
 80019d2:	d86f      	bhi.n	8001ab4 <HAL_TIM_ConfigClockSource+0x16c>
 80019d4:	2b30      	cmp	r3, #48	@ 0x30
 80019d6:	d064      	beq.n	8001aa2 <HAL_TIM_ConfigClockSource+0x15a>
 80019d8:	2b30      	cmp	r3, #48	@ 0x30
 80019da:	d86b      	bhi.n	8001ab4 <HAL_TIM_ConfigClockSource+0x16c>
 80019dc:	2b20      	cmp	r3, #32
 80019de:	d060      	beq.n	8001aa2 <HAL_TIM_ConfigClockSource+0x15a>
 80019e0:	2b20      	cmp	r3, #32
 80019e2:	d867      	bhi.n	8001ab4 <HAL_TIM_ConfigClockSource+0x16c>
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d05c      	beq.n	8001aa2 <HAL_TIM_ConfigClockSource+0x15a>
 80019e8:	2b10      	cmp	r3, #16
 80019ea:	d05a      	beq.n	8001aa2 <HAL_TIM_ConfigClockSource+0x15a>
 80019ec:	e062      	b.n	8001ab4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80019f6:	683b      	ldr	r3, [r7, #0]
 80019f8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80019fa:	683b      	ldr	r3, [r7, #0]
 80019fc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80019fe:	f000 f950 	bl	8001ca2 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001a10:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	68ba      	ldr	r2, [r7, #8]
 8001a18:	609a      	str	r2, [r3, #8]
      break;
 8001a1a:	e04f      	b.n	8001abc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001a28:	683b      	ldr	r3, [r7, #0]
 8001a2a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001a2c:	f000 f939 	bl	8001ca2 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	689a      	ldr	r2, [r3, #8]
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001a3e:	609a      	str	r2, [r3, #8]
      break;
 8001a40:	e03c      	b.n	8001abc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a4e:	461a      	mov	r2, r3
 8001a50:	f000 f8b0 	bl	8001bb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	2150      	movs	r1, #80	@ 0x50
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f000 f907 	bl	8001c6e <TIM_ITRx_SetConfig>
      break;
 8001a60:	e02c      	b.n	8001abc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001a6e:	461a      	mov	r2, r3
 8001a70:	f000 f8ce 	bl	8001c10 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	2160      	movs	r1, #96	@ 0x60
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f000 f8f7 	bl	8001c6e <TIM_ITRx_SetConfig>
      break;
 8001a80:	e01c      	b.n	8001abc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001a86:	683b      	ldr	r3, [r7, #0]
 8001a88:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001a8e:	461a      	mov	r2, r3
 8001a90:	f000 f890 	bl	8001bb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2140      	movs	r1, #64	@ 0x40
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f000 f8e7 	bl	8001c6e <TIM_ITRx_SetConfig>
      break;
 8001aa0:	e00c      	b.n	8001abc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681a      	ldr	r2, [r3, #0]
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4619      	mov	r1, r3
 8001aac:	4610      	mov	r0, r2
 8001aae:	f000 f8de 	bl	8001c6e <TIM_ITRx_SetConfig>
      break;
 8001ab2:	e003      	b.n	8001abc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	73fb      	strb	r3, [r7, #15]
      break;
 8001ab8:	e000      	b.n	8001abc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8001aba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2201      	movs	r2, #1
 8001ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3710      	adds	r7, #16
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
	...

08001ad8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	681b      	ldr	r3, [r3, #0]
 8001ae6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	4a2f      	ldr	r2, [pc, #188]	@ (8001ba8 <TIM_Base_SetConfig+0xd0>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d00b      	beq.n	8001b08 <TIM_Base_SetConfig+0x30>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001af6:	d007      	beq.n	8001b08 <TIM_Base_SetConfig+0x30>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	4a2c      	ldr	r2, [pc, #176]	@ (8001bac <TIM_Base_SetConfig+0xd4>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	d003      	beq.n	8001b08 <TIM_Base_SetConfig+0x30>
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a2b      	ldr	r2, [pc, #172]	@ (8001bb0 <TIM_Base_SetConfig+0xd8>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d108      	bne.n	8001b1a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001b0e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	68fa      	ldr	r2, [r7, #12]
 8001b16:	4313      	orrs	r3, r2
 8001b18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	4a22      	ldr	r2, [pc, #136]	@ (8001ba8 <TIM_Base_SetConfig+0xd0>)
 8001b1e:	4293      	cmp	r3, r2
 8001b20:	d00b      	beq.n	8001b3a <TIM_Base_SetConfig+0x62>
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b28:	d007      	beq.n	8001b3a <TIM_Base_SetConfig+0x62>
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4a1f      	ldr	r2, [pc, #124]	@ (8001bac <TIM_Base_SetConfig+0xd4>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d003      	beq.n	8001b3a <TIM_Base_SetConfig+0x62>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a1e      	ldr	r2, [pc, #120]	@ (8001bb0 <TIM_Base_SetConfig+0xd8>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d108      	bne.n	8001b4c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001b40:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001b42:	683b      	ldr	r3, [r7, #0]
 8001b44:	68db      	ldr	r3, [r3, #12]
 8001b46:	68fa      	ldr	r2, [r7, #12]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	695b      	ldr	r3, [r3, #20]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	68fa      	ldr	r2, [r7, #12]
 8001b5e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001b60:	683b      	ldr	r3, [r7, #0]
 8001b62:	689a      	ldr	r2, [r3, #8]
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	4a0d      	ldr	r2, [pc, #52]	@ (8001ba8 <TIM_Base_SetConfig+0xd0>)
 8001b74:	4293      	cmp	r3, r2
 8001b76:	d103      	bne.n	8001b80 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	691a      	ldr	r2, [r3, #16]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	691b      	ldr	r3, [r3, #16]
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d005      	beq.n	8001b9e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	f023 0201 	bic.w	r2, r3, #1
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	611a      	str	r2, [r3, #16]
  }
}
 8001b9e:	bf00      	nop
 8001ba0:	3714      	adds	r7, #20
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bc80      	pop	{r7}
 8001ba6:	4770      	bx	lr
 8001ba8:	40012c00 	.word	0x40012c00
 8001bac:	40000400 	.word	0x40000400
 8001bb0:	40000800 	.word	0x40000800

08001bb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b087      	sub	sp, #28
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	60f8      	str	r0, [r7, #12]
 8001bbc:	60b9      	str	r1, [r7, #8]
 8001bbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	6a1b      	ldr	r3, [r3, #32]
 8001bc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	6a1b      	ldr	r3, [r3, #32]
 8001bca:	f023 0201 	bic.w	r2, r3, #1
 8001bce:	68fb      	ldr	r3, [r7, #12]
 8001bd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	699b      	ldr	r3, [r3, #24]
 8001bd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001bd8:	693b      	ldr	r3, [r7, #16]
 8001bda:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001bde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	011b      	lsls	r3, r3, #4
 8001be4:	693a      	ldr	r2, [r7, #16]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001bea:	697b      	ldr	r3, [r7, #20]
 8001bec:	f023 030a 	bic.w	r3, r3, #10
 8001bf0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001bf2:	697a      	ldr	r2, [r7, #20]
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	693a      	ldr	r2, [r7, #16]
 8001bfe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	697a      	ldr	r2, [r7, #20]
 8001c04:	621a      	str	r2, [r3, #32]
}
 8001c06:	bf00      	nop
 8001c08:	371c      	adds	r7, #28
 8001c0a:	46bd      	mov	sp, r7
 8001c0c:	bc80      	pop	{r7}
 8001c0e:	4770      	bx	lr

08001c10 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b087      	sub	sp, #28
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	60f8      	str	r0, [r7, #12]
 8001c18:	60b9      	str	r1, [r7, #8]
 8001c1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	6a1b      	ldr	r3, [r3, #32]
 8001c20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	6a1b      	ldr	r3, [r3, #32]
 8001c26:	f023 0210 	bic.w	r2, r3, #16
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	699b      	ldr	r3, [r3, #24]
 8001c32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8001c3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	031b      	lsls	r3, r3, #12
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	4313      	orrs	r3, r2
 8001c44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8001c4c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	011b      	lsls	r3, r3, #4
 8001c52:	697a      	ldr	r2, [r7, #20]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	693a      	ldr	r2, [r7, #16]
 8001c5c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	697a      	ldr	r2, [r7, #20]
 8001c62:	621a      	str	r2, [r3, #32]
}
 8001c64:	bf00      	nop
 8001c66:	371c      	adds	r7, #28
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bc80      	pop	{r7}
 8001c6c:	4770      	bx	lr

08001c6e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b085      	sub	sp, #20
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
 8001c76:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001c84:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001c86:	683a      	ldr	r2, [r7, #0]
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	4313      	orrs	r3, r2
 8001c8c:	f043 0307 	orr.w	r3, r3, #7
 8001c90:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	68fa      	ldr	r2, [r7, #12]
 8001c96:	609a      	str	r2, [r3, #8]
}
 8001c98:	bf00      	nop
 8001c9a:	3714      	adds	r7, #20
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bc80      	pop	{r7}
 8001ca0:	4770      	bx	lr

08001ca2 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b087      	sub	sp, #28
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	60f8      	str	r0, [r7, #12]
 8001caa:	60b9      	str	r1, [r7, #8]
 8001cac:	607a      	str	r2, [r7, #4]
 8001cae:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	689b      	ldr	r3, [r3, #8]
 8001cb4:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001cbc:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	021a      	lsls	r2, r3, #8
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	431a      	orrs	r2, r3
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	697a      	ldr	r2, [r7, #20]
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	697a      	ldr	r2, [r7, #20]
 8001cd4:	609a      	str	r2, [r3, #8]
}
 8001cd6:	bf00      	nop
 8001cd8:	371c      	adds	r7, #28
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bc80      	pop	{r7}
 8001cde:	4770      	bx	lr

08001ce0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001cf0:	2b01      	cmp	r3, #1
 8001cf2:	d101      	bne.n	8001cf8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001cf4:	2302      	movs	r3, #2
 8001cf6:	e046      	b.n	8001d86 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2202      	movs	r2, #2
 8001d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	689b      	ldr	r3, [r3, #8]
 8001d16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8001d1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	68fa      	ldr	r2, [r7, #12]
 8001d26:	4313      	orrs	r3, r2
 8001d28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	68fa      	ldr	r2, [r7, #12]
 8001d30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	4a16      	ldr	r2, [pc, #88]	@ (8001d90 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	d00e      	beq.n	8001d5a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d44:	d009      	beq.n	8001d5a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4a12      	ldr	r2, [pc, #72]	@ (8001d94 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8001d4c:	4293      	cmp	r3, r2
 8001d4e:	d004      	beq.n	8001d5a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	4a10      	ldr	r2, [pc, #64]	@ (8001d98 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d10c      	bne.n	8001d74 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001d60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	68ba      	ldr	r2, [r7, #8]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	68ba      	ldr	r2, [r7, #8]
 8001d72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	2201      	movs	r2, #1
 8001d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	2200      	movs	r2, #0
 8001d80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8001d84:	2300      	movs	r3, #0
}
 8001d86:	4618      	mov	r0, r3
 8001d88:	3714      	adds	r7, #20
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bc80      	pop	{r7}
 8001d8e:	4770      	bx	lr
 8001d90:	40012c00 	.word	0x40012c00
 8001d94:	40000400 	.word	0x40000400
 8001d98:	40000800 	.word	0x40000800

08001d9c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d101      	bne.n	8001dae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e042      	b.n	8001e34 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d106      	bne.n	8001dc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2200      	movs	r2, #0
 8001dbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f7fe fc6a 	bl	800069c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2224      	movs	r2, #36	@ 0x24
 8001dcc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	68da      	ldr	r2, [r3, #12]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001dde:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f000 f971 	bl	80020c8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	691a      	ldr	r2, [r3, #16]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001df4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	695a      	ldr	r2, [r3, #20]
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001e04:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	68da      	ldr	r2, [r3, #12]
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001e14:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2200      	movs	r2, #0
 8001e1a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2220      	movs	r2, #32
 8001e20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	2220      	movs	r2, #32
 8001e28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2200      	movs	r2, #0
 8001e30:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3708      	adds	r7, #8
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}

08001e3c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b08a      	sub	sp, #40	@ 0x28
 8001e40:	af02      	add	r7, sp, #8
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	60b9      	str	r1, [r7, #8]
 8001e46:	603b      	str	r3, [r7, #0]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	2b20      	cmp	r3, #32
 8001e5a:	d175      	bne.n	8001f48 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d002      	beq.n	8001e68 <HAL_UART_Transmit+0x2c>
 8001e62:	88fb      	ldrh	r3, [r7, #6]
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d101      	bne.n	8001e6c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e06e      	b.n	8001f4a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	2221      	movs	r2, #33	@ 0x21
 8001e76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001e7a:	f7fe fdb3 	bl	80009e4 <HAL_GetTick>
 8001e7e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	88fa      	ldrh	r2, [r7, #6]
 8001e84:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	88fa      	ldrh	r2, [r7, #6]
 8001e8a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001e94:	d108      	bne.n	8001ea8 <HAL_UART_Transmit+0x6c>
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d104      	bne.n	8001ea8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001ea2:	68bb      	ldr	r3, [r7, #8]
 8001ea4:	61bb      	str	r3, [r7, #24]
 8001ea6:	e003      	b.n	8001eb0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001eac:	2300      	movs	r3, #0
 8001eae:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001eb0:	e02e      	b.n	8001f10 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	9300      	str	r3, [sp, #0]
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	2180      	movs	r1, #128	@ 0x80
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	f000 f848 	bl	8001f52 <UART_WaitOnFlagUntilTimeout>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d005      	beq.n	8001ed4 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	2220      	movs	r2, #32
 8001ecc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001ed0:	2303      	movs	r3, #3
 8001ed2:	e03a      	b.n	8001f4a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d10b      	bne.n	8001ef2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001eda:	69bb      	ldr	r3, [r7, #24]
 8001edc:	881b      	ldrh	r3, [r3, #0]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001ee8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	3302      	adds	r3, #2
 8001eee:	61bb      	str	r3, [r7, #24]
 8001ef0:	e007      	b.n	8001f02 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001ef2:	69fb      	ldr	r3, [r7, #28]
 8001ef4:	781a      	ldrb	r2, [r3, #0]
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001efc:	69fb      	ldr	r3, [r7, #28]
 8001efe:	3301      	adds	r3, #1
 8001f00:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001f02:	68fb      	ldr	r3, [r7, #12]
 8001f04:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001f06:	b29b      	uxth	r3, r3
 8001f08:	3b01      	subs	r3, #1
 8001f0a:	b29a      	uxth	r2, r3
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1cb      	bne.n	8001eb2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001f1a:	683b      	ldr	r3, [r7, #0]
 8001f1c:	9300      	str	r3, [sp, #0]
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	2200      	movs	r2, #0
 8001f22:	2140      	movs	r1, #64	@ 0x40
 8001f24:	68f8      	ldr	r0, [r7, #12]
 8001f26:	f000 f814 	bl	8001f52 <UART_WaitOnFlagUntilTimeout>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d005      	beq.n	8001f3c <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	2220      	movs	r2, #32
 8001f34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001f38:	2303      	movs	r3, #3
 8001f3a:	e006      	b.n	8001f4a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2220      	movs	r2, #32
 8001f40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001f44:	2300      	movs	r3, #0
 8001f46:	e000      	b.n	8001f4a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001f48:	2302      	movs	r3, #2
  }
}
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	3720      	adds	r7, #32
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}

08001f52 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001f52:	b580      	push	{r7, lr}
 8001f54:	b086      	sub	sp, #24
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	60f8      	str	r0, [r7, #12]
 8001f5a:	60b9      	str	r1, [r7, #8]
 8001f5c:	603b      	str	r3, [r7, #0]
 8001f5e:	4613      	mov	r3, r2
 8001f60:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f62:	e03b      	b.n	8001fdc <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f64:	6a3b      	ldr	r3, [r7, #32]
 8001f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f6a:	d037      	beq.n	8001fdc <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f6c:	f7fe fd3a 	bl	80009e4 <HAL_GetTick>
 8001f70:	4602      	mov	r2, r0
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	6a3a      	ldr	r2, [r7, #32]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d302      	bcc.n	8001f82 <UART_WaitOnFlagUntilTimeout+0x30>
 8001f7c:	6a3b      	ldr	r3, [r7, #32]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8001f82:	2303      	movs	r3, #3
 8001f84:	e03a      	b.n	8001ffc <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68db      	ldr	r3, [r3, #12]
 8001f8c:	f003 0304 	and.w	r3, r3, #4
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d023      	beq.n	8001fdc <UART_WaitOnFlagUntilTimeout+0x8a>
 8001f94:	68bb      	ldr	r3, [r7, #8]
 8001f96:	2b80      	cmp	r3, #128	@ 0x80
 8001f98:	d020      	beq.n	8001fdc <UART_WaitOnFlagUntilTimeout+0x8a>
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	2b40      	cmp	r3, #64	@ 0x40
 8001f9e:	d01d      	beq.n	8001fdc <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0308 	and.w	r3, r3, #8
 8001faa:	2b08      	cmp	r3, #8
 8001fac:	d116      	bne.n	8001fdc <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8001fae:	2300      	movs	r3, #0
 8001fb0:	617b      	str	r3, [r7, #20]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	617b      	str	r3, [r7, #20]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	685b      	ldr	r3, [r3, #4]
 8001fc0:	617b      	str	r3, [r7, #20]
 8001fc2:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8001fc4:	68f8      	ldr	r0, [r7, #12]
 8001fc6:	f000 f81d 	bl	8002004 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2208      	movs	r2, #8
 8001fce:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001fd8:	2301      	movs	r3, #1
 8001fda:	e00f      	b.n	8001ffc <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fdc:	68fb      	ldr	r3, [r7, #12]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	68ba      	ldr	r2, [r7, #8]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	bf0c      	ite	eq
 8001fec:	2301      	moveq	r3, #1
 8001fee:	2300      	movne	r3, #0
 8001ff0:	b2db      	uxtb	r3, r3
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	79fb      	ldrb	r3, [r7, #7]
 8001ff6:	429a      	cmp	r2, r3
 8001ff8:	d0b4      	beq.n	8001f64 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001ffa:	2300      	movs	r3, #0
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3718      	adds	r7, #24
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}

08002004 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002004:	b480      	push	{r7}
 8002006:	b095      	sub	sp, #84	@ 0x54
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	330c      	adds	r3, #12
 8002012:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002016:	e853 3f00 	ldrex	r3, [r3]
 800201a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800201c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800201e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002022:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	330c      	adds	r3, #12
 800202a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800202c:	643a      	str	r2, [r7, #64]	@ 0x40
 800202e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002030:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002032:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002034:	e841 2300 	strex	r3, r2, [r1]
 8002038:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800203a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1e5      	bne.n	800200c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	3314      	adds	r3, #20
 8002046:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002048:	6a3b      	ldr	r3, [r7, #32]
 800204a:	e853 3f00 	ldrex	r3, [r3]
 800204e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002050:	69fb      	ldr	r3, [r7, #28]
 8002052:	f023 0301 	bic.w	r3, r3, #1
 8002056:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	3314      	adds	r3, #20
 800205e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002060:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002062:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002064:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002066:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002068:	e841 2300 	strex	r3, r2, [r1]
 800206c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800206e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002070:	2b00      	cmp	r3, #0
 8002072:	d1e5      	bne.n	8002040 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002078:	2b01      	cmp	r3, #1
 800207a:	d119      	bne.n	80020b0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	330c      	adds	r3, #12
 8002082:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	e853 3f00 	ldrex	r3, [r3]
 800208a:	60bb      	str	r3, [r7, #8]
   return(result);
 800208c:	68bb      	ldr	r3, [r7, #8]
 800208e:	f023 0310 	bic.w	r3, r3, #16
 8002092:	647b      	str	r3, [r7, #68]	@ 0x44
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	330c      	adds	r3, #12
 800209a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800209c:	61ba      	str	r2, [r7, #24]
 800209e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80020a0:	6979      	ldr	r1, [r7, #20]
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	e841 2300 	strex	r3, r2, [r1]
 80020a8:	613b      	str	r3, [r7, #16]
   return(result);
 80020aa:	693b      	ldr	r3, [r7, #16]
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d1e5      	bne.n	800207c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	2220      	movs	r2, #32
 80020b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	2200      	movs	r2, #0
 80020bc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80020be:	bf00      	nop
 80020c0:	3754      	adds	r7, #84	@ 0x54
 80020c2:	46bd      	mov	sp, r7
 80020c4:	bc80      	pop	{r7}
 80020c6:	4770      	bx	lr

080020c8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	691b      	ldr	r3, [r3, #16]
 80020d6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	68da      	ldr	r2, [r3, #12]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	430a      	orrs	r2, r1
 80020e4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	689a      	ldr	r2, [r3, #8]
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	691b      	ldr	r3, [r3, #16]
 80020ee:	431a      	orrs	r2, r3
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	695b      	ldr	r3, [r3, #20]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	68db      	ldr	r3, [r3, #12]
 80020fe:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002102:	f023 030c 	bic.w	r3, r3, #12
 8002106:	687a      	ldr	r2, [r7, #4]
 8002108:	6812      	ldr	r2, [r2, #0]
 800210a:	68b9      	ldr	r1, [r7, #8]
 800210c:	430b      	orrs	r3, r1
 800210e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	695b      	ldr	r3, [r3, #20]
 8002116:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	699a      	ldr	r2, [r3, #24]
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	430a      	orrs	r2, r1
 8002124:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a2c      	ldr	r2, [pc, #176]	@ (80021dc <UART_SetConfig+0x114>)
 800212c:	4293      	cmp	r3, r2
 800212e:	d103      	bne.n	8002138 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002130:	f7ff fb3e 	bl	80017b0 <HAL_RCC_GetPCLK2Freq>
 8002134:	60f8      	str	r0, [r7, #12]
 8002136:	e002      	b.n	800213e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002138:	f7ff fb26 	bl	8001788 <HAL_RCC_GetPCLK1Freq>
 800213c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	4613      	mov	r3, r2
 8002142:	009b      	lsls	r3, r3, #2
 8002144:	4413      	add	r3, r2
 8002146:	009a      	lsls	r2, r3, #2
 8002148:	441a      	add	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685b      	ldr	r3, [r3, #4]
 800214e:	009b      	lsls	r3, r3, #2
 8002150:	fbb2 f3f3 	udiv	r3, r2, r3
 8002154:	4a22      	ldr	r2, [pc, #136]	@ (80021e0 <UART_SetConfig+0x118>)
 8002156:	fba2 2303 	umull	r2, r3, r2, r3
 800215a:	095b      	lsrs	r3, r3, #5
 800215c:	0119      	lsls	r1, r3, #4
 800215e:	68fa      	ldr	r2, [r7, #12]
 8002160:	4613      	mov	r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	4413      	add	r3, r2
 8002166:	009a      	lsls	r2, r3, #2
 8002168:	441a      	add	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	685b      	ldr	r3, [r3, #4]
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	fbb2 f2f3 	udiv	r2, r2, r3
 8002174:	4b1a      	ldr	r3, [pc, #104]	@ (80021e0 <UART_SetConfig+0x118>)
 8002176:	fba3 0302 	umull	r0, r3, r3, r2
 800217a:	095b      	lsrs	r3, r3, #5
 800217c:	2064      	movs	r0, #100	@ 0x64
 800217e:	fb00 f303 	mul.w	r3, r0, r3
 8002182:	1ad3      	subs	r3, r2, r3
 8002184:	011b      	lsls	r3, r3, #4
 8002186:	3332      	adds	r3, #50	@ 0x32
 8002188:	4a15      	ldr	r2, [pc, #84]	@ (80021e0 <UART_SetConfig+0x118>)
 800218a:	fba2 2303 	umull	r2, r3, r2, r3
 800218e:	095b      	lsrs	r3, r3, #5
 8002190:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002194:	4419      	add	r1, r3
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	4613      	mov	r3, r2
 800219a:	009b      	lsls	r3, r3, #2
 800219c:	4413      	add	r3, r2
 800219e:	009a      	lsls	r2, r3, #2
 80021a0:	441a      	add	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	009b      	lsls	r3, r3, #2
 80021a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80021ac:	4b0c      	ldr	r3, [pc, #48]	@ (80021e0 <UART_SetConfig+0x118>)
 80021ae:	fba3 0302 	umull	r0, r3, r3, r2
 80021b2:	095b      	lsrs	r3, r3, #5
 80021b4:	2064      	movs	r0, #100	@ 0x64
 80021b6:	fb00 f303 	mul.w	r3, r0, r3
 80021ba:	1ad3      	subs	r3, r2, r3
 80021bc:	011b      	lsls	r3, r3, #4
 80021be:	3332      	adds	r3, #50	@ 0x32
 80021c0:	4a07      	ldr	r2, [pc, #28]	@ (80021e0 <UART_SetConfig+0x118>)
 80021c2:	fba2 2303 	umull	r2, r3, r2, r3
 80021c6:	095b      	lsrs	r3, r3, #5
 80021c8:	f003 020f 	and.w	r2, r3, #15
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	440a      	add	r2, r1
 80021d2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80021d4:	bf00      	nop
 80021d6:	3710      	adds	r7, #16
 80021d8:	46bd      	mov	sp, r7
 80021da:	bd80      	pop	{r7, pc}
 80021dc:	40013800 	.word	0x40013800
 80021e0:	51eb851f 	.word	0x51eb851f

080021e4 <std>:
 80021e4:	2300      	movs	r3, #0
 80021e6:	b510      	push	{r4, lr}
 80021e8:	4604      	mov	r4, r0
 80021ea:	e9c0 3300 	strd	r3, r3, [r0]
 80021ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80021f2:	6083      	str	r3, [r0, #8]
 80021f4:	8181      	strh	r1, [r0, #12]
 80021f6:	6643      	str	r3, [r0, #100]	@ 0x64
 80021f8:	81c2      	strh	r2, [r0, #14]
 80021fa:	6183      	str	r3, [r0, #24]
 80021fc:	4619      	mov	r1, r3
 80021fe:	2208      	movs	r2, #8
 8002200:	305c      	adds	r0, #92	@ 0x5c
 8002202:	f000 f9f9 	bl	80025f8 <memset>
 8002206:	4b0d      	ldr	r3, [pc, #52]	@ (800223c <std+0x58>)
 8002208:	6224      	str	r4, [r4, #32]
 800220a:	6263      	str	r3, [r4, #36]	@ 0x24
 800220c:	4b0c      	ldr	r3, [pc, #48]	@ (8002240 <std+0x5c>)
 800220e:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002210:	4b0c      	ldr	r3, [pc, #48]	@ (8002244 <std+0x60>)
 8002212:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002214:	4b0c      	ldr	r3, [pc, #48]	@ (8002248 <std+0x64>)
 8002216:	6323      	str	r3, [r4, #48]	@ 0x30
 8002218:	4b0c      	ldr	r3, [pc, #48]	@ (800224c <std+0x68>)
 800221a:	429c      	cmp	r4, r3
 800221c:	d006      	beq.n	800222c <std+0x48>
 800221e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002222:	4294      	cmp	r4, r2
 8002224:	d002      	beq.n	800222c <std+0x48>
 8002226:	33d0      	adds	r3, #208	@ 0xd0
 8002228:	429c      	cmp	r4, r3
 800222a:	d105      	bne.n	8002238 <std+0x54>
 800222c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002230:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002234:	f000 ba58 	b.w	80026e8 <__retarget_lock_init_recursive>
 8002238:	bd10      	pop	{r4, pc}
 800223a:	bf00      	nop
 800223c:	08002449 	.word	0x08002449
 8002240:	0800246b 	.word	0x0800246b
 8002244:	080024a3 	.word	0x080024a3
 8002248:	080024c7 	.word	0x080024c7
 800224c:	20000128 	.word	0x20000128

08002250 <stdio_exit_handler>:
 8002250:	4a02      	ldr	r2, [pc, #8]	@ (800225c <stdio_exit_handler+0xc>)
 8002252:	4903      	ldr	r1, [pc, #12]	@ (8002260 <stdio_exit_handler+0x10>)
 8002254:	4803      	ldr	r0, [pc, #12]	@ (8002264 <stdio_exit_handler+0x14>)
 8002256:	f000 b869 	b.w	800232c <_fwalk_sglue>
 800225a:	bf00      	nop
 800225c:	2000000c 	.word	0x2000000c
 8002260:	08002f7d 	.word	0x08002f7d
 8002264:	2000001c 	.word	0x2000001c

08002268 <cleanup_stdio>:
 8002268:	6841      	ldr	r1, [r0, #4]
 800226a:	4b0c      	ldr	r3, [pc, #48]	@ (800229c <cleanup_stdio+0x34>)
 800226c:	b510      	push	{r4, lr}
 800226e:	4299      	cmp	r1, r3
 8002270:	4604      	mov	r4, r0
 8002272:	d001      	beq.n	8002278 <cleanup_stdio+0x10>
 8002274:	f000 fe82 	bl	8002f7c <_fflush_r>
 8002278:	68a1      	ldr	r1, [r4, #8]
 800227a:	4b09      	ldr	r3, [pc, #36]	@ (80022a0 <cleanup_stdio+0x38>)
 800227c:	4299      	cmp	r1, r3
 800227e:	d002      	beq.n	8002286 <cleanup_stdio+0x1e>
 8002280:	4620      	mov	r0, r4
 8002282:	f000 fe7b 	bl	8002f7c <_fflush_r>
 8002286:	68e1      	ldr	r1, [r4, #12]
 8002288:	4b06      	ldr	r3, [pc, #24]	@ (80022a4 <cleanup_stdio+0x3c>)
 800228a:	4299      	cmp	r1, r3
 800228c:	d004      	beq.n	8002298 <cleanup_stdio+0x30>
 800228e:	4620      	mov	r0, r4
 8002290:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002294:	f000 be72 	b.w	8002f7c <_fflush_r>
 8002298:	bd10      	pop	{r4, pc}
 800229a:	bf00      	nop
 800229c:	20000128 	.word	0x20000128
 80022a0:	20000190 	.word	0x20000190
 80022a4:	200001f8 	.word	0x200001f8

080022a8 <global_stdio_init.part.0>:
 80022a8:	b510      	push	{r4, lr}
 80022aa:	4b0b      	ldr	r3, [pc, #44]	@ (80022d8 <global_stdio_init.part.0+0x30>)
 80022ac:	4c0b      	ldr	r4, [pc, #44]	@ (80022dc <global_stdio_init.part.0+0x34>)
 80022ae:	4a0c      	ldr	r2, [pc, #48]	@ (80022e0 <global_stdio_init.part.0+0x38>)
 80022b0:	4620      	mov	r0, r4
 80022b2:	601a      	str	r2, [r3, #0]
 80022b4:	2104      	movs	r1, #4
 80022b6:	2200      	movs	r2, #0
 80022b8:	f7ff ff94 	bl	80021e4 <std>
 80022bc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80022c0:	2201      	movs	r2, #1
 80022c2:	2109      	movs	r1, #9
 80022c4:	f7ff ff8e 	bl	80021e4 <std>
 80022c8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80022cc:	2202      	movs	r2, #2
 80022ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80022d2:	2112      	movs	r1, #18
 80022d4:	f7ff bf86 	b.w	80021e4 <std>
 80022d8:	20000260 	.word	0x20000260
 80022dc:	20000128 	.word	0x20000128
 80022e0:	08002251 	.word	0x08002251

080022e4 <__sfp_lock_acquire>:
 80022e4:	4801      	ldr	r0, [pc, #4]	@ (80022ec <__sfp_lock_acquire+0x8>)
 80022e6:	f000 ba00 	b.w	80026ea <__retarget_lock_acquire_recursive>
 80022ea:	bf00      	nop
 80022ec:	20000269 	.word	0x20000269

080022f0 <__sfp_lock_release>:
 80022f0:	4801      	ldr	r0, [pc, #4]	@ (80022f8 <__sfp_lock_release+0x8>)
 80022f2:	f000 b9fb 	b.w	80026ec <__retarget_lock_release_recursive>
 80022f6:	bf00      	nop
 80022f8:	20000269 	.word	0x20000269

080022fc <__sinit>:
 80022fc:	b510      	push	{r4, lr}
 80022fe:	4604      	mov	r4, r0
 8002300:	f7ff fff0 	bl	80022e4 <__sfp_lock_acquire>
 8002304:	6a23      	ldr	r3, [r4, #32]
 8002306:	b11b      	cbz	r3, 8002310 <__sinit+0x14>
 8002308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800230c:	f7ff bff0 	b.w	80022f0 <__sfp_lock_release>
 8002310:	4b04      	ldr	r3, [pc, #16]	@ (8002324 <__sinit+0x28>)
 8002312:	6223      	str	r3, [r4, #32]
 8002314:	4b04      	ldr	r3, [pc, #16]	@ (8002328 <__sinit+0x2c>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	d1f5      	bne.n	8002308 <__sinit+0xc>
 800231c:	f7ff ffc4 	bl	80022a8 <global_stdio_init.part.0>
 8002320:	e7f2      	b.n	8002308 <__sinit+0xc>
 8002322:	bf00      	nop
 8002324:	08002269 	.word	0x08002269
 8002328:	20000260 	.word	0x20000260

0800232c <_fwalk_sglue>:
 800232c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002330:	4607      	mov	r7, r0
 8002332:	4688      	mov	r8, r1
 8002334:	4614      	mov	r4, r2
 8002336:	2600      	movs	r6, #0
 8002338:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800233c:	f1b9 0901 	subs.w	r9, r9, #1
 8002340:	d505      	bpl.n	800234e <_fwalk_sglue+0x22>
 8002342:	6824      	ldr	r4, [r4, #0]
 8002344:	2c00      	cmp	r4, #0
 8002346:	d1f7      	bne.n	8002338 <_fwalk_sglue+0xc>
 8002348:	4630      	mov	r0, r6
 800234a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800234e:	89ab      	ldrh	r3, [r5, #12]
 8002350:	2b01      	cmp	r3, #1
 8002352:	d907      	bls.n	8002364 <_fwalk_sglue+0x38>
 8002354:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002358:	3301      	adds	r3, #1
 800235a:	d003      	beq.n	8002364 <_fwalk_sglue+0x38>
 800235c:	4629      	mov	r1, r5
 800235e:	4638      	mov	r0, r7
 8002360:	47c0      	blx	r8
 8002362:	4306      	orrs	r6, r0
 8002364:	3568      	adds	r5, #104	@ 0x68
 8002366:	e7e9      	b.n	800233c <_fwalk_sglue+0x10>

08002368 <iprintf>:
 8002368:	b40f      	push	{r0, r1, r2, r3}
 800236a:	b507      	push	{r0, r1, r2, lr}
 800236c:	4906      	ldr	r1, [pc, #24]	@ (8002388 <iprintf+0x20>)
 800236e:	ab04      	add	r3, sp, #16
 8002370:	6808      	ldr	r0, [r1, #0]
 8002372:	f853 2b04 	ldr.w	r2, [r3], #4
 8002376:	6881      	ldr	r1, [r0, #8]
 8002378:	9301      	str	r3, [sp, #4]
 800237a:	f000 fad7 	bl	800292c <_vfiprintf_r>
 800237e:	b003      	add	sp, #12
 8002380:	f85d eb04 	ldr.w	lr, [sp], #4
 8002384:	b004      	add	sp, #16
 8002386:	4770      	bx	lr
 8002388:	20000018 	.word	0x20000018

0800238c <_puts_r>:
 800238c:	6a03      	ldr	r3, [r0, #32]
 800238e:	b570      	push	{r4, r5, r6, lr}
 8002390:	4605      	mov	r5, r0
 8002392:	460e      	mov	r6, r1
 8002394:	6884      	ldr	r4, [r0, #8]
 8002396:	b90b      	cbnz	r3, 800239c <_puts_r+0x10>
 8002398:	f7ff ffb0 	bl	80022fc <__sinit>
 800239c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800239e:	07db      	lsls	r3, r3, #31
 80023a0:	d405      	bmi.n	80023ae <_puts_r+0x22>
 80023a2:	89a3      	ldrh	r3, [r4, #12]
 80023a4:	0598      	lsls	r0, r3, #22
 80023a6:	d402      	bmi.n	80023ae <_puts_r+0x22>
 80023a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80023aa:	f000 f99e 	bl	80026ea <__retarget_lock_acquire_recursive>
 80023ae:	89a3      	ldrh	r3, [r4, #12]
 80023b0:	0719      	lsls	r1, r3, #28
 80023b2:	d502      	bpl.n	80023ba <_puts_r+0x2e>
 80023b4:	6923      	ldr	r3, [r4, #16]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d135      	bne.n	8002426 <_puts_r+0x9a>
 80023ba:	4621      	mov	r1, r4
 80023bc:	4628      	mov	r0, r5
 80023be:	f000 f8c5 	bl	800254c <__swsetup_r>
 80023c2:	b380      	cbz	r0, 8002426 <_puts_r+0x9a>
 80023c4:	f04f 35ff 	mov.w	r5, #4294967295
 80023c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80023ca:	07da      	lsls	r2, r3, #31
 80023cc:	d405      	bmi.n	80023da <_puts_r+0x4e>
 80023ce:	89a3      	ldrh	r3, [r4, #12]
 80023d0:	059b      	lsls	r3, r3, #22
 80023d2:	d402      	bmi.n	80023da <_puts_r+0x4e>
 80023d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80023d6:	f000 f989 	bl	80026ec <__retarget_lock_release_recursive>
 80023da:	4628      	mov	r0, r5
 80023dc:	bd70      	pop	{r4, r5, r6, pc}
 80023de:	2b00      	cmp	r3, #0
 80023e0:	da04      	bge.n	80023ec <_puts_r+0x60>
 80023e2:	69a2      	ldr	r2, [r4, #24]
 80023e4:	429a      	cmp	r2, r3
 80023e6:	dc17      	bgt.n	8002418 <_puts_r+0x8c>
 80023e8:	290a      	cmp	r1, #10
 80023ea:	d015      	beq.n	8002418 <_puts_r+0x8c>
 80023ec:	6823      	ldr	r3, [r4, #0]
 80023ee:	1c5a      	adds	r2, r3, #1
 80023f0:	6022      	str	r2, [r4, #0]
 80023f2:	7019      	strb	r1, [r3, #0]
 80023f4:	68a3      	ldr	r3, [r4, #8]
 80023f6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80023fa:	3b01      	subs	r3, #1
 80023fc:	60a3      	str	r3, [r4, #8]
 80023fe:	2900      	cmp	r1, #0
 8002400:	d1ed      	bne.n	80023de <_puts_r+0x52>
 8002402:	2b00      	cmp	r3, #0
 8002404:	da11      	bge.n	800242a <_puts_r+0x9e>
 8002406:	4622      	mov	r2, r4
 8002408:	210a      	movs	r1, #10
 800240a:	4628      	mov	r0, r5
 800240c:	f000 f85f 	bl	80024ce <__swbuf_r>
 8002410:	3001      	adds	r0, #1
 8002412:	d0d7      	beq.n	80023c4 <_puts_r+0x38>
 8002414:	250a      	movs	r5, #10
 8002416:	e7d7      	b.n	80023c8 <_puts_r+0x3c>
 8002418:	4622      	mov	r2, r4
 800241a:	4628      	mov	r0, r5
 800241c:	f000 f857 	bl	80024ce <__swbuf_r>
 8002420:	3001      	adds	r0, #1
 8002422:	d1e7      	bne.n	80023f4 <_puts_r+0x68>
 8002424:	e7ce      	b.n	80023c4 <_puts_r+0x38>
 8002426:	3e01      	subs	r6, #1
 8002428:	e7e4      	b.n	80023f4 <_puts_r+0x68>
 800242a:	6823      	ldr	r3, [r4, #0]
 800242c:	1c5a      	adds	r2, r3, #1
 800242e:	6022      	str	r2, [r4, #0]
 8002430:	220a      	movs	r2, #10
 8002432:	701a      	strb	r2, [r3, #0]
 8002434:	e7ee      	b.n	8002414 <_puts_r+0x88>
	...

08002438 <puts>:
 8002438:	4b02      	ldr	r3, [pc, #8]	@ (8002444 <puts+0xc>)
 800243a:	4601      	mov	r1, r0
 800243c:	6818      	ldr	r0, [r3, #0]
 800243e:	f7ff bfa5 	b.w	800238c <_puts_r>
 8002442:	bf00      	nop
 8002444:	20000018 	.word	0x20000018

08002448 <__sread>:
 8002448:	b510      	push	{r4, lr}
 800244a:	460c      	mov	r4, r1
 800244c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002450:	f000 f8fc 	bl	800264c <_read_r>
 8002454:	2800      	cmp	r0, #0
 8002456:	bfab      	itete	ge
 8002458:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800245a:	89a3      	ldrhlt	r3, [r4, #12]
 800245c:	181b      	addge	r3, r3, r0
 800245e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002462:	bfac      	ite	ge
 8002464:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002466:	81a3      	strhlt	r3, [r4, #12]
 8002468:	bd10      	pop	{r4, pc}

0800246a <__swrite>:
 800246a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800246e:	461f      	mov	r7, r3
 8002470:	898b      	ldrh	r3, [r1, #12]
 8002472:	4605      	mov	r5, r0
 8002474:	05db      	lsls	r3, r3, #23
 8002476:	460c      	mov	r4, r1
 8002478:	4616      	mov	r6, r2
 800247a:	d505      	bpl.n	8002488 <__swrite+0x1e>
 800247c:	2302      	movs	r3, #2
 800247e:	2200      	movs	r2, #0
 8002480:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002484:	f000 f8d0 	bl	8002628 <_lseek_r>
 8002488:	89a3      	ldrh	r3, [r4, #12]
 800248a:	4632      	mov	r2, r6
 800248c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002490:	81a3      	strh	r3, [r4, #12]
 8002492:	4628      	mov	r0, r5
 8002494:	463b      	mov	r3, r7
 8002496:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800249a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800249e:	f000 b8e7 	b.w	8002670 <_write_r>

080024a2 <__sseek>:
 80024a2:	b510      	push	{r4, lr}
 80024a4:	460c      	mov	r4, r1
 80024a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024aa:	f000 f8bd 	bl	8002628 <_lseek_r>
 80024ae:	1c43      	adds	r3, r0, #1
 80024b0:	89a3      	ldrh	r3, [r4, #12]
 80024b2:	bf15      	itete	ne
 80024b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80024b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80024ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80024be:	81a3      	strheq	r3, [r4, #12]
 80024c0:	bf18      	it	ne
 80024c2:	81a3      	strhne	r3, [r4, #12]
 80024c4:	bd10      	pop	{r4, pc}

080024c6 <__sclose>:
 80024c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80024ca:	f000 b89d 	b.w	8002608 <_close_r>

080024ce <__swbuf_r>:
 80024ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024d0:	460e      	mov	r6, r1
 80024d2:	4614      	mov	r4, r2
 80024d4:	4605      	mov	r5, r0
 80024d6:	b118      	cbz	r0, 80024e0 <__swbuf_r+0x12>
 80024d8:	6a03      	ldr	r3, [r0, #32]
 80024da:	b90b      	cbnz	r3, 80024e0 <__swbuf_r+0x12>
 80024dc:	f7ff ff0e 	bl	80022fc <__sinit>
 80024e0:	69a3      	ldr	r3, [r4, #24]
 80024e2:	60a3      	str	r3, [r4, #8]
 80024e4:	89a3      	ldrh	r3, [r4, #12]
 80024e6:	071a      	lsls	r2, r3, #28
 80024e8:	d501      	bpl.n	80024ee <__swbuf_r+0x20>
 80024ea:	6923      	ldr	r3, [r4, #16]
 80024ec:	b943      	cbnz	r3, 8002500 <__swbuf_r+0x32>
 80024ee:	4621      	mov	r1, r4
 80024f0:	4628      	mov	r0, r5
 80024f2:	f000 f82b 	bl	800254c <__swsetup_r>
 80024f6:	b118      	cbz	r0, 8002500 <__swbuf_r+0x32>
 80024f8:	f04f 37ff 	mov.w	r7, #4294967295
 80024fc:	4638      	mov	r0, r7
 80024fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002500:	6823      	ldr	r3, [r4, #0]
 8002502:	6922      	ldr	r2, [r4, #16]
 8002504:	b2f6      	uxtb	r6, r6
 8002506:	1a98      	subs	r0, r3, r2
 8002508:	6963      	ldr	r3, [r4, #20]
 800250a:	4637      	mov	r7, r6
 800250c:	4283      	cmp	r3, r0
 800250e:	dc05      	bgt.n	800251c <__swbuf_r+0x4e>
 8002510:	4621      	mov	r1, r4
 8002512:	4628      	mov	r0, r5
 8002514:	f000 fd32 	bl	8002f7c <_fflush_r>
 8002518:	2800      	cmp	r0, #0
 800251a:	d1ed      	bne.n	80024f8 <__swbuf_r+0x2a>
 800251c:	68a3      	ldr	r3, [r4, #8]
 800251e:	3b01      	subs	r3, #1
 8002520:	60a3      	str	r3, [r4, #8]
 8002522:	6823      	ldr	r3, [r4, #0]
 8002524:	1c5a      	adds	r2, r3, #1
 8002526:	6022      	str	r2, [r4, #0]
 8002528:	701e      	strb	r6, [r3, #0]
 800252a:	6962      	ldr	r2, [r4, #20]
 800252c:	1c43      	adds	r3, r0, #1
 800252e:	429a      	cmp	r2, r3
 8002530:	d004      	beq.n	800253c <__swbuf_r+0x6e>
 8002532:	89a3      	ldrh	r3, [r4, #12]
 8002534:	07db      	lsls	r3, r3, #31
 8002536:	d5e1      	bpl.n	80024fc <__swbuf_r+0x2e>
 8002538:	2e0a      	cmp	r6, #10
 800253a:	d1df      	bne.n	80024fc <__swbuf_r+0x2e>
 800253c:	4621      	mov	r1, r4
 800253e:	4628      	mov	r0, r5
 8002540:	f000 fd1c 	bl	8002f7c <_fflush_r>
 8002544:	2800      	cmp	r0, #0
 8002546:	d0d9      	beq.n	80024fc <__swbuf_r+0x2e>
 8002548:	e7d6      	b.n	80024f8 <__swbuf_r+0x2a>
	...

0800254c <__swsetup_r>:
 800254c:	b538      	push	{r3, r4, r5, lr}
 800254e:	4b29      	ldr	r3, [pc, #164]	@ (80025f4 <__swsetup_r+0xa8>)
 8002550:	4605      	mov	r5, r0
 8002552:	6818      	ldr	r0, [r3, #0]
 8002554:	460c      	mov	r4, r1
 8002556:	b118      	cbz	r0, 8002560 <__swsetup_r+0x14>
 8002558:	6a03      	ldr	r3, [r0, #32]
 800255a:	b90b      	cbnz	r3, 8002560 <__swsetup_r+0x14>
 800255c:	f7ff fece 	bl	80022fc <__sinit>
 8002560:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002564:	0719      	lsls	r1, r3, #28
 8002566:	d422      	bmi.n	80025ae <__swsetup_r+0x62>
 8002568:	06da      	lsls	r2, r3, #27
 800256a:	d407      	bmi.n	800257c <__swsetup_r+0x30>
 800256c:	2209      	movs	r2, #9
 800256e:	602a      	str	r2, [r5, #0]
 8002570:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002574:	f04f 30ff 	mov.w	r0, #4294967295
 8002578:	81a3      	strh	r3, [r4, #12]
 800257a:	e033      	b.n	80025e4 <__swsetup_r+0x98>
 800257c:	0758      	lsls	r0, r3, #29
 800257e:	d512      	bpl.n	80025a6 <__swsetup_r+0x5a>
 8002580:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002582:	b141      	cbz	r1, 8002596 <__swsetup_r+0x4a>
 8002584:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002588:	4299      	cmp	r1, r3
 800258a:	d002      	beq.n	8002592 <__swsetup_r+0x46>
 800258c:	4628      	mov	r0, r5
 800258e:	f000 f8af 	bl	80026f0 <_free_r>
 8002592:	2300      	movs	r3, #0
 8002594:	6363      	str	r3, [r4, #52]	@ 0x34
 8002596:	89a3      	ldrh	r3, [r4, #12]
 8002598:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800259c:	81a3      	strh	r3, [r4, #12]
 800259e:	2300      	movs	r3, #0
 80025a0:	6063      	str	r3, [r4, #4]
 80025a2:	6923      	ldr	r3, [r4, #16]
 80025a4:	6023      	str	r3, [r4, #0]
 80025a6:	89a3      	ldrh	r3, [r4, #12]
 80025a8:	f043 0308 	orr.w	r3, r3, #8
 80025ac:	81a3      	strh	r3, [r4, #12]
 80025ae:	6923      	ldr	r3, [r4, #16]
 80025b0:	b94b      	cbnz	r3, 80025c6 <__swsetup_r+0x7a>
 80025b2:	89a3      	ldrh	r3, [r4, #12]
 80025b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80025b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80025bc:	d003      	beq.n	80025c6 <__swsetup_r+0x7a>
 80025be:	4621      	mov	r1, r4
 80025c0:	4628      	mov	r0, r5
 80025c2:	f000 fd28 	bl	8003016 <__smakebuf_r>
 80025c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80025ca:	f013 0201 	ands.w	r2, r3, #1
 80025ce:	d00a      	beq.n	80025e6 <__swsetup_r+0x9a>
 80025d0:	2200      	movs	r2, #0
 80025d2:	60a2      	str	r2, [r4, #8]
 80025d4:	6962      	ldr	r2, [r4, #20]
 80025d6:	4252      	negs	r2, r2
 80025d8:	61a2      	str	r2, [r4, #24]
 80025da:	6922      	ldr	r2, [r4, #16]
 80025dc:	b942      	cbnz	r2, 80025f0 <__swsetup_r+0xa4>
 80025de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80025e2:	d1c5      	bne.n	8002570 <__swsetup_r+0x24>
 80025e4:	bd38      	pop	{r3, r4, r5, pc}
 80025e6:	0799      	lsls	r1, r3, #30
 80025e8:	bf58      	it	pl
 80025ea:	6962      	ldrpl	r2, [r4, #20]
 80025ec:	60a2      	str	r2, [r4, #8]
 80025ee:	e7f4      	b.n	80025da <__swsetup_r+0x8e>
 80025f0:	2000      	movs	r0, #0
 80025f2:	e7f7      	b.n	80025e4 <__swsetup_r+0x98>
 80025f4:	20000018 	.word	0x20000018

080025f8 <memset>:
 80025f8:	4603      	mov	r3, r0
 80025fa:	4402      	add	r2, r0
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d100      	bne.n	8002602 <memset+0xa>
 8002600:	4770      	bx	lr
 8002602:	f803 1b01 	strb.w	r1, [r3], #1
 8002606:	e7f9      	b.n	80025fc <memset+0x4>

08002608 <_close_r>:
 8002608:	b538      	push	{r3, r4, r5, lr}
 800260a:	2300      	movs	r3, #0
 800260c:	4d05      	ldr	r5, [pc, #20]	@ (8002624 <_close_r+0x1c>)
 800260e:	4604      	mov	r4, r0
 8002610:	4608      	mov	r0, r1
 8002612:	602b      	str	r3, [r5, #0]
 8002614:	f7fe f8fb 	bl	800080e <_close>
 8002618:	1c43      	adds	r3, r0, #1
 800261a:	d102      	bne.n	8002622 <_close_r+0x1a>
 800261c:	682b      	ldr	r3, [r5, #0]
 800261e:	b103      	cbz	r3, 8002622 <_close_r+0x1a>
 8002620:	6023      	str	r3, [r4, #0]
 8002622:	bd38      	pop	{r3, r4, r5, pc}
 8002624:	20000264 	.word	0x20000264

08002628 <_lseek_r>:
 8002628:	b538      	push	{r3, r4, r5, lr}
 800262a:	4604      	mov	r4, r0
 800262c:	4608      	mov	r0, r1
 800262e:	4611      	mov	r1, r2
 8002630:	2200      	movs	r2, #0
 8002632:	4d05      	ldr	r5, [pc, #20]	@ (8002648 <_lseek_r+0x20>)
 8002634:	602a      	str	r2, [r5, #0]
 8002636:	461a      	mov	r2, r3
 8002638:	f7fe f90d 	bl	8000856 <_lseek>
 800263c:	1c43      	adds	r3, r0, #1
 800263e:	d102      	bne.n	8002646 <_lseek_r+0x1e>
 8002640:	682b      	ldr	r3, [r5, #0]
 8002642:	b103      	cbz	r3, 8002646 <_lseek_r+0x1e>
 8002644:	6023      	str	r3, [r4, #0]
 8002646:	bd38      	pop	{r3, r4, r5, pc}
 8002648:	20000264 	.word	0x20000264

0800264c <_read_r>:
 800264c:	b538      	push	{r3, r4, r5, lr}
 800264e:	4604      	mov	r4, r0
 8002650:	4608      	mov	r0, r1
 8002652:	4611      	mov	r1, r2
 8002654:	2200      	movs	r2, #0
 8002656:	4d05      	ldr	r5, [pc, #20]	@ (800266c <_read_r+0x20>)
 8002658:	602a      	str	r2, [r5, #0]
 800265a:	461a      	mov	r2, r3
 800265c:	f7fe f89e 	bl	800079c <_read>
 8002660:	1c43      	adds	r3, r0, #1
 8002662:	d102      	bne.n	800266a <_read_r+0x1e>
 8002664:	682b      	ldr	r3, [r5, #0]
 8002666:	b103      	cbz	r3, 800266a <_read_r+0x1e>
 8002668:	6023      	str	r3, [r4, #0]
 800266a:	bd38      	pop	{r3, r4, r5, pc}
 800266c:	20000264 	.word	0x20000264

08002670 <_write_r>:
 8002670:	b538      	push	{r3, r4, r5, lr}
 8002672:	4604      	mov	r4, r0
 8002674:	4608      	mov	r0, r1
 8002676:	4611      	mov	r1, r2
 8002678:	2200      	movs	r2, #0
 800267a:	4d05      	ldr	r5, [pc, #20]	@ (8002690 <_write_r+0x20>)
 800267c:	602a      	str	r2, [r5, #0]
 800267e:	461a      	mov	r2, r3
 8002680:	f7fe f8a9 	bl	80007d6 <_write>
 8002684:	1c43      	adds	r3, r0, #1
 8002686:	d102      	bne.n	800268e <_write_r+0x1e>
 8002688:	682b      	ldr	r3, [r5, #0]
 800268a:	b103      	cbz	r3, 800268e <_write_r+0x1e>
 800268c:	6023      	str	r3, [r4, #0]
 800268e:	bd38      	pop	{r3, r4, r5, pc}
 8002690:	20000264 	.word	0x20000264

08002694 <__errno>:
 8002694:	4b01      	ldr	r3, [pc, #4]	@ (800269c <__errno+0x8>)
 8002696:	6818      	ldr	r0, [r3, #0]
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	20000018 	.word	0x20000018

080026a0 <__libc_init_array>:
 80026a0:	b570      	push	{r4, r5, r6, lr}
 80026a2:	2600      	movs	r6, #0
 80026a4:	4d0c      	ldr	r5, [pc, #48]	@ (80026d8 <__libc_init_array+0x38>)
 80026a6:	4c0d      	ldr	r4, [pc, #52]	@ (80026dc <__libc_init_array+0x3c>)
 80026a8:	1b64      	subs	r4, r4, r5
 80026aa:	10a4      	asrs	r4, r4, #2
 80026ac:	42a6      	cmp	r6, r4
 80026ae:	d109      	bne.n	80026c4 <__libc_init_array+0x24>
 80026b0:	f000 fd2e 	bl	8003110 <_init>
 80026b4:	2600      	movs	r6, #0
 80026b6:	4d0a      	ldr	r5, [pc, #40]	@ (80026e0 <__libc_init_array+0x40>)
 80026b8:	4c0a      	ldr	r4, [pc, #40]	@ (80026e4 <__libc_init_array+0x44>)
 80026ba:	1b64      	subs	r4, r4, r5
 80026bc:	10a4      	asrs	r4, r4, #2
 80026be:	42a6      	cmp	r6, r4
 80026c0:	d105      	bne.n	80026ce <__libc_init_array+0x2e>
 80026c2:	bd70      	pop	{r4, r5, r6, pc}
 80026c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80026c8:	4798      	blx	r3
 80026ca:	3601      	adds	r6, #1
 80026cc:	e7ee      	b.n	80026ac <__libc_init_array+0xc>
 80026ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80026d2:	4798      	blx	r3
 80026d4:	3601      	adds	r6, #1
 80026d6:	e7f2      	b.n	80026be <__libc_init_array+0x1e>
 80026d8:	080032ac 	.word	0x080032ac
 80026dc:	080032ac 	.word	0x080032ac
 80026e0:	080032ac 	.word	0x080032ac
 80026e4:	080032b0 	.word	0x080032b0

080026e8 <__retarget_lock_init_recursive>:
 80026e8:	4770      	bx	lr

080026ea <__retarget_lock_acquire_recursive>:
 80026ea:	4770      	bx	lr

080026ec <__retarget_lock_release_recursive>:
 80026ec:	4770      	bx	lr
	...

080026f0 <_free_r>:
 80026f0:	b538      	push	{r3, r4, r5, lr}
 80026f2:	4605      	mov	r5, r0
 80026f4:	2900      	cmp	r1, #0
 80026f6:	d040      	beq.n	800277a <_free_r+0x8a>
 80026f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80026fc:	1f0c      	subs	r4, r1, #4
 80026fe:	2b00      	cmp	r3, #0
 8002700:	bfb8      	it	lt
 8002702:	18e4      	addlt	r4, r4, r3
 8002704:	f000 f8de 	bl	80028c4 <__malloc_lock>
 8002708:	4a1c      	ldr	r2, [pc, #112]	@ (800277c <_free_r+0x8c>)
 800270a:	6813      	ldr	r3, [r2, #0]
 800270c:	b933      	cbnz	r3, 800271c <_free_r+0x2c>
 800270e:	6063      	str	r3, [r4, #4]
 8002710:	6014      	str	r4, [r2, #0]
 8002712:	4628      	mov	r0, r5
 8002714:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002718:	f000 b8da 	b.w	80028d0 <__malloc_unlock>
 800271c:	42a3      	cmp	r3, r4
 800271e:	d908      	bls.n	8002732 <_free_r+0x42>
 8002720:	6820      	ldr	r0, [r4, #0]
 8002722:	1821      	adds	r1, r4, r0
 8002724:	428b      	cmp	r3, r1
 8002726:	bf01      	itttt	eq
 8002728:	6819      	ldreq	r1, [r3, #0]
 800272a:	685b      	ldreq	r3, [r3, #4]
 800272c:	1809      	addeq	r1, r1, r0
 800272e:	6021      	streq	r1, [r4, #0]
 8002730:	e7ed      	b.n	800270e <_free_r+0x1e>
 8002732:	461a      	mov	r2, r3
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	b10b      	cbz	r3, 800273c <_free_r+0x4c>
 8002738:	42a3      	cmp	r3, r4
 800273a:	d9fa      	bls.n	8002732 <_free_r+0x42>
 800273c:	6811      	ldr	r1, [r2, #0]
 800273e:	1850      	adds	r0, r2, r1
 8002740:	42a0      	cmp	r0, r4
 8002742:	d10b      	bne.n	800275c <_free_r+0x6c>
 8002744:	6820      	ldr	r0, [r4, #0]
 8002746:	4401      	add	r1, r0
 8002748:	1850      	adds	r0, r2, r1
 800274a:	4283      	cmp	r3, r0
 800274c:	6011      	str	r1, [r2, #0]
 800274e:	d1e0      	bne.n	8002712 <_free_r+0x22>
 8002750:	6818      	ldr	r0, [r3, #0]
 8002752:	685b      	ldr	r3, [r3, #4]
 8002754:	4408      	add	r0, r1
 8002756:	6010      	str	r0, [r2, #0]
 8002758:	6053      	str	r3, [r2, #4]
 800275a:	e7da      	b.n	8002712 <_free_r+0x22>
 800275c:	d902      	bls.n	8002764 <_free_r+0x74>
 800275e:	230c      	movs	r3, #12
 8002760:	602b      	str	r3, [r5, #0]
 8002762:	e7d6      	b.n	8002712 <_free_r+0x22>
 8002764:	6820      	ldr	r0, [r4, #0]
 8002766:	1821      	adds	r1, r4, r0
 8002768:	428b      	cmp	r3, r1
 800276a:	bf01      	itttt	eq
 800276c:	6819      	ldreq	r1, [r3, #0]
 800276e:	685b      	ldreq	r3, [r3, #4]
 8002770:	1809      	addeq	r1, r1, r0
 8002772:	6021      	streq	r1, [r4, #0]
 8002774:	6063      	str	r3, [r4, #4]
 8002776:	6054      	str	r4, [r2, #4]
 8002778:	e7cb      	b.n	8002712 <_free_r+0x22>
 800277a:	bd38      	pop	{r3, r4, r5, pc}
 800277c:	20000270 	.word	0x20000270

08002780 <sbrk_aligned>:
 8002780:	b570      	push	{r4, r5, r6, lr}
 8002782:	4e0f      	ldr	r6, [pc, #60]	@ (80027c0 <sbrk_aligned+0x40>)
 8002784:	460c      	mov	r4, r1
 8002786:	6831      	ldr	r1, [r6, #0]
 8002788:	4605      	mov	r5, r0
 800278a:	b911      	cbnz	r1, 8002792 <sbrk_aligned+0x12>
 800278c:	f000 fca2 	bl	80030d4 <_sbrk_r>
 8002790:	6030      	str	r0, [r6, #0]
 8002792:	4621      	mov	r1, r4
 8002794:	4628      	mov	r0, r5
 8002796:	f000 fc9d 	bl	80030d4 <_sbrk_r>
 800279a:	1c43      	adds	r3, r0, #1
 800279c:	d103      	bne.n	80027a6 <sbrk_aligned+0x26>
 800279e:	f04f 34ff 	mov.w	r4, #4294967295
 80027a2:	4620      	mov	r0, r4
 80027a4:	bd70      	pop	{r4, r5, r6, pc}
 80027a6:	1cc4      	adds	r4, r0, #3
 80027a8:	f024 0403 	bic.w	r4, r4, #3
 80027ac:	42a0      	cmp	r0, r4
 80027ae:	d0f8      	beq.n	80027a2 <sbrk_aligned+0x22>
 80027b0:	1a21      	subs	r1, r4, r0
 80027b2:	4628      	mov	r0, r5
 80027b4:	f000 fc8e 	bl	80030d4 <_sbrk_r>
 80027b8:	3001      	adds	r0, #1
 80027ba:	d1f2      	bne.n	80027a2 <sbrk_aligned+0x22>
 80027bc:	e7ef      	b.n	800279e <sbrk_aligned+0x1e>
 80027be:	bf00      	nop
 80027c0:	2000026c 	.word	0x2000026c

080027c4 <_malloc_r>:
 80027c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80027c8:	1ccd      	adds	r5, r1, #3
 80027ca:	f025 0503 	bic.w	r5, r5, #3
 80027ce:	3508      	adds	r5, #8
 80027d0:	2d0c      	cmp	r5, #12
 80027d2:	bf38      	it	cc
 80027d4:	250c      	movcc	r5, #12
 80027d6:	2d00      	cmp	r5, #0
 80027d8:	4606      	mov	r6, r0
 80027da:	db01      	blt.n	80027e0 <_malloc_r+0x1c>
 80027dc:	42a9      	cmp	r1, r5
 80027de:	d904      	bls.n	80027ea <_malloc_r+0x26>
 80027e0:	230c      	movs	r3, #12
 80027e2:	6033      	str	r3, [r6, #0]
 80027e4:	2000      	movs	r0, #0
 80027e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80027ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80028c0 <_malloc_r+0xfc>
 80027ee:	f000 f869 	bl	80028c4 <__malloc_lock>
 80027f2:	f8d8 3000 	ldr.w	r3, [r8]
 80027f6:	461c      	mov	r4, r3
 80027f8:	bb44      	cbnz	r4, 800284c <_malloc_r+0x88>
 80027fa:	4629      	mov	r1, r5
 80027fc:	4630      	mov	r0, r6
 80027fe:	f7ff ffbf 	bl	8002780 <sbrk_aligned>
 8002802:	1c43      	adds	r3, r0, #1
 8002804:	4604      	mov	r4, r0
 8002806:	d158      	bne.n	80028ba <_malloc_r+0xf6>
 8002808:	f8d8 4000 	ldr.w	r4, [r8]
 800280c:	4627      	mov	r7, r4
 800280e:	2f00      	cmp	r7, #0
 8002810:	d143      	bne.n	800289a <_malloc_r+0xd6>
 8002812:	2c00      	cmp	r4, #0
 8002814:	d04b      	beq.n	80028ae <_malloc_r+0xea>
 8002816:	6823      	ldr	r3, [r4, #0]
 8002818:	4639      	mov	r1, r7
 800281a:	4630      	mov	r0, r6
 800281c:	eb04 0903 	add.w	r9, r4, r3
 8002820:	f000 fc58 	bl	80030d4 <_sbrk_r>
 8002824:	4581      	cmp	r9, r0
 8002826:	d142      	bne.n	80028ae <_malloc_r+0xea>
 8002828:	6821      	ldr	r1, [r4, #0]
 800282a:	4630      	mov	r0, r6
 800282c:	1a6d      	subs	r5, r5, r1
 800282e:	4629      	mov	r1, r5
 8002830:	f7ff ffa6 	bl	8002780 <sbrk_aligned>
 8002834:	3001      	adds	r0, #1
 8002836:	d03a      	beq.n	80028ae <_malloc_r+0xea>
 8002838:	6823      	ldr	r3, [r4, #0]
 800283a:	442b      	add	r3, r5
 800283c:	6023      	str	r3, [r4, #0]
 800283e:	f8d8 3000 	ldr.w	r3, [r8]
 8002842:	685a      	ldr	r2, [r3, #4]
 8002844:	bb62      	cbnz	r2, 80028a0 <_malloc_r+0xdc>
 8002846:	f8c8 7000 	str.w	r7, [r8]
 800284a:	e00f      	b.n	800286c <_malloc_r+0xa8>
 800284c:	6822      	ldr	r2, [r4, #0]
 800284e:	1b52      	subs	r2, r2, r5
 8002850:	d420      	bmi.n	8002894 <_malloc_r+0xd0>
 8002852:	2a0b      	cmp	r2, #11
 8002854:	d917      	bls.n	8002886 <_malloc_r+0xc2>
 8002856:	1961      	adds	r1, r4, r5
 8002858:	42a3      	cmp	r3, r4
 800285a:	6025      	str	r5, [r4, #0]
 800285c:	bf18      	it	ne
 800285e:	6059      	strne	r1, [r3, #4]
 8002860:	6863      	ldr	r3, [r4, #4]
 8002862:	bf08      	it	eq
 8002864:	f8c8 1000 	streq.w	r1, [r8]
 8002868:	5162      	str	r2, [r4, r5]
 800286a:	604b      	str	r3, [r1, #4]
 800286c:	4630      	mov	r0, r6
 800286e:	f000 f82f 	bl	80028d0 <__malloc_unlock>
 8002872:	f104 000b 	add.w	r0, r4, #11
 8002876:	1d23      	adds	r3, r4, #4
 8002878:	f020 0007 	bic.w	r0, r0, #7
 800287c:	1ac2      	subs	r2, r0, r3
 800287e:	bf1c      	itt	ne
 8002880:	1a1b      	subne	r3, r3, r0
 8002882:	50a3      	strne	r3, [r4, r2]
 8002884:	e7af      	b.n	80027e6 <_malloc_r+0x22>
 8002886:	6862      	ldr	r2, [r4, #4]
 8002888:	42a3      	cmp	r3, r4
 800288a:	bf0c      	ite	eq
 800288c:	f8c8 2000 	streq.w	r2, [r8]
 8002890:	605a      	strne	r2, [r3, #4]
 8002892:	e7eb      	b.n	800286c <_malloc_r+0xa8>
 8002894:	4623      	mov	r3, r4
 8002896:	6864      	ldr	r4, [r4, #4]
 8002898:	e7ae      	b.n	80027f8 <_malloc_r+0x34>
 800289a:	463c      	mov	r4, r7
 800289c:	687f      	ldr	r7, [r7, #4]
 800289e:	e7b6      	b.n	800280e <_malloc_r+0x4a>
 80028a0:	461a      	mov	r2, r3
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	42a3      	cmp	r3, r4
 80028a6:	d1fb      	bne.n	80028a0 <_malloc_r+0xdc>
 80028a8:	2300      	movs	r3, #0
 80028aa:	6053      	str	r3, [r2, #4]
 80028ac:	e7de      	b.n	800286c <_malloc_r+0xa8>
 80028ae:	230c      	movs	r3, #12
 80028b0:	4630      	mov	r0, r6
 80028b2:	6033      	str	r3, [r6, #0]
 80028b4:	f000 f80c 	bl	80028d0 <__malloc_unlock>
 80028b8:	e794      	b.n	80027e4 <_malloc_r+0x20>
 80028ba:	6005      	str	r5, [r0, #0]
 80028bc:	e7d6      	b.n	800286c <_malloc_r+0xa8>
 80028be:	bf00      	nop
 80028c0:	20000270 	.word	0x20000270

080028c4 <__malloc_lock>:
 80028c4:	4801      	ldr	r0, [pc, #4]	@ (80028cc <__malloc_lock+0x8>)
 80028c6:	f7ff bf10 	b.w	80026ea <__retarget_lock_acquire_recursive>
 80028ca:	bf00      	nop
 80028cc:	20000268 	.word	0x20000268

080028d0 <__malloc_unlock>:
 80028d0:	4801      	ldr	r0, [pc, #4]	@ (80028d8 <__malloc_unlock+0x8>)
 80028d2:	f7ff bf0b 	b.w	80026ec <__retarget_lock_release_recursive>
 80028d6:	bf00      	nop
 80028d8:	20000268 	.word	0x20000268

080028dc <__sfputc_r>:
 80028dc:	6893      	ldr	r3, [r2, #8]
 80028de:	b410      	push	{r4}
 80028e0:	3b01      	subs	r3, #1
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	6093      	str	r3, [r2, #8]
 80028e6:	da07      	bge.n	80028f8 <__sfputc_r+0x1c>
 80028e8:	6994      	ldr	r4, [r2, #24]
 80028ea:	42a3      	cmp	r3, r4
 80028ec:	db01      	blt.n	80028f2 <__sfputc_r+0x16>
 80028ee:	290a      	cmp	r1, #10
 80028f0:	d102      	bne.n	80028f8 <__sfputc_r+0x1c>
 80028f2:	bc10      	pop	{r4}
 80028f4:	f7ff bdeb 	b.w	80024ce <__swbuf_r>
 80028f8:	6813      	ldr	r3, [r2, #0]
 80028fa:	1c58      	adds	r0, r3, #1
 80028fc:	6010      	str	r0, [r2, #0]
 80028fe:	7019      	strb	r1, [r3, #0]
 8002900:	4608      	mov	r0, r1
 8002902:	bc10      	pop	{r4}
 8002904:	4770      	bx	lr

08002906 <__sfputs_r>:
 8002906:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002908:	4606      	mov	r6, r0
 800290a:	460f      	mov	r7, r1
 800290c:	4614      	mov	r4, r2
 800290e:	18d5      	adds	r5, r2, r3
 8002910:	42ac      	cmp	r4, r5
 8002912:	d101      	bne.n	8002918 <__sfputs_r+0x12>
 8002914:	2000      	movs	r0, #0
 8002916:	e007      	b.n	8002928 <__sfputs_r+0x22>
 8002918:	463a      	mov	r2, r7
 800291a:	4630      	mov	r0, r6
 800291c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002920:	f7ff ffdc 	bl	80028dc <__sfputc_r>
 8002924:	1c43      	adds	r3, r0, #1
 8002926:	d1f3      	bne.n	8002910 <__sfputs_r+0xa>
 8002928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800292c <_vfiprintf_r>:
 800292c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002930:	460d      	mov	r5, r1
 8002932:	4614      	mov	r4, r2
 8002934:	4698      	mov	r8, r3
 8002936:	4606      	mov	r6, r0
 8002938:	b09d      	sub	sp, #116	@ 0x74
 800293a:	b118      	cbz	r0, 8002944 <_vfiprintf_r+0x18>
 800293c:	6a03      	ldr	r3, [r0, #32]
 800293e:	b90b      	cbnz	r3, 8002944 <_vfiprintf_r+0x18>
 8002940:	f7ff fcdc 	bl	80022fc <__sinit>
 8002944:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002946:	07d9      	lsls	r1, r3, #31
 8002948:	d405      	bmi.n	8002956 <_vfiprintf_r+0x2a>
 800294a:	89ab      	ldrh	r3, [r5, #12]
 800294c:	059a      	lsls	r2, r3, #22
 800294e:	d402      	bmi.n	8002956 <_vfiprintf_r+0x2a>
 8002950:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002952:	f7ff feca 	bl	80026ea <__retarget_lock_acquire_recursive>
 8002956:	89ab      	ldrh	r3, [r5, #12]
 8002958:	071b      	lsls	r3, r3, #28
 800295a:	d501      	bpl.n	8002960 <_vfiprintf_r+0x34>
 800295c:	692b      	ldr	r3, [r5, #16]
 800295e:	b99b      	cbnz	r3, 8002988 <_vfiprintf_r+0x5c>
 8002960:	4629      	mov	r1, r5
 8002962:	4630      	mov	r0, r6
 8002964:	f7ff fdf2 	bl	800254c <__swsetup_r>
 8002968:	b170      	cbz	r0, 8002988 <_vfiprintf_r+0x5c>
 800296a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800296c:	07dc      	lsls	r4, r3, #31
 800296e:	d504      	bpl.n	800297a <_vfiprintf_r+0x4e>
 8002970:	f04f 30ff 	mov.w	r0, #4294967295
 8002974:	b01d      	add	sp, #116	@ 0x74
 8002976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800297a:	89ab      	ldrh	r3, [r5, #12]
 800297c:	0598      	lsls	r0, r3, #22
 800297e:	d4f7      	bmi.n	8002970 <_vfiprintf_r+0x44>
 8002980:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002982:	f7ff feb3 	bl	80026ec <__retarget_lock_release_recursive>
 8002986:	e7f3      	b.n	8002970 <_vfiprintf_r+0x44>
 8002988:	2300      	movs	r3, #0
 800298a:	9309      	str	r3, [sp, #36]	@ 0x24
 800298c:	2320      	movs	r3, #32
 800298e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002992:	2330      	movs	r3, #48	@ 0x30
 8002994:	f04f 0901 	mov.w	r9, #1
 8002998:	f8cd 800c 	str.w	r8, [sp, #12]
 800299c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8002b48 <_vfiprintf_r+0x21c>
 80029a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80029a4:	4623      	mov	r3, r4
 80029a6:	469a      	mov	sl, r3
 80029a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80029ac:	b10a      	cbz	r2, 80029b2 <_vfiprintf_r+0x86>
 80029ae:	2a25      	cmp	r2, #37	@ 0x25
 80029b0:	d1f9      	bne.n	80029a6 <_vfiprintf_r+0x7a>
 80029b2:	ebba 0b04 	subs.w	fp, sl, r4
 80029b6:	d00b      	beq.n	80029d0 <_vfiprintf_r+0xa4>
 80029b8:	465b      	mov	r3, fp
 80029ba:	4622      	mov	r2, r4
 80029bc:	4629      	mov	r1, r5
 80029be:	4630      	mov	r0, r6
 80029c0:	f7ff ffa1 	bl	8002906 <__sfputs_r>
 80029c4:	3001      	adds	r0, #1
 80029c6:	f000 80a7 	beq.w	8002b18 <_vfiprintf_r+0x1ec>
 80029ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80029cc:	445a      	add	r2, fp
 80029ce:	9209      	str	r2, [sp, #36]	@ 0x24
 80029d0:	f89a 3000 	ldrb.w	r3, [sl]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f000 809f 	beq.w	8002b18 <_vfiprintf_r+0x1ec>
 80029da:	2300      	movs	r3, #0
 80029dc:	f04f 32ff 	mov.w	r2, #4294967295
 80029e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80029e4:	f10a 0a01 	add.w	sl, sl, #1
 80029e8:	9304      	str	r3, [sp, #16]
 80029ea:	9307      	str	r3, [sp, #28]
 80029ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80029f0:	931a      	str	r3, [sp, #104]	@ 0x68
 80029f2:	4654      	mov	r4, sl
 80029f4:	2205      	movs	r2, #5
 80029f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80029fa:	4853      	ldr	r0, [pc, #332]	@ (8002b48 <_vfiprintf_r+0x21c>)
 80029fc:	f000 fb7a 	bl	80030f4 <memchr>
 8002a00:	9a04      	ldr	r2, [sp, #16]
 8002a02:	b9d8      	cbnz	r0, 8002a3c <_vfiprintf_r+0x110>
 8002a04:	06d1      	lsls	r1, r2, #27
 8002a06:	bf44      	itt	mi
 8002a08:	2320      	movmi	r3, #32
 8002a0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002a0e:	0713      	lsls	r3, r2, #28
 8002a10:	bf44      	itt	mi
 8002a12:	232b      	movmi	r3, #43	@ 0x2b
 8002a14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002a18:	f89a 3000 	ldrb.w	r3, [sl]
 8002a1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8002a1e:	d015      	beq.n	8002a4c <_vfiprintf_r+0x120>
 8002a20:	4654      	mov	r4, sl
 8002a22:	2000      	movs	r0, #0
 8002a24:	f04f 0c0a 	mov.w	ip, #10
 8002a28:	9a07      	ldr	r2, [sp, #28]
 8002a2a:	4621      	mov	r1, r4
 8002a2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002a30:	3b30      	subs	r3, #48	@ 0x30
 8002a32:	2b09      	cmp	r3, #9
 8002a34:	d94b      	bls.n	8002ace <_vfiprintf_r+0x1a2>
 8002a36:	b1b0      	cbz	r0, 8002a66 <_vfiprintf_r+0x13a>
 8002a38:	9207      	str	r2, [sp, #28]
 8002a3a:	e014      	b.n	8002a66 <_vfiprintf_r+0x13a>
 8002a3c:	eba0 0308 	sub.w	r3, r0, r8
 8002a40:	fa09 f303 	lsl.w	r3, r9, r3
 8002a44:	4313      	orrs	r3, r2
 8002a46:	46a2      	mov	sl, r4
 8002a48:	9304      	str	r3, [sp, #16]
 8002a4a:	e7d2      	b.n	80029f2 <_vfiprintf_r+0xc6>
 8002a4c:	9b03      	ldr	r3, [sp, #12]
 8002a4e:	1d19      	adds	r1, r3, #4
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	9103      	str	r1, [sp, #12]
 8002a54:	2b00      	cmp	r3, #0
 8002a56:	bfbb      	ittet	lt
 8002a58:	425b      	neglt	r3, r3
 8002a5a:	f042 0202 	orrlt.w	r2, r2, #2
 8002a5e:	9307      	strge	r3, [sp, #28]
 8002a60:	9307      	strlt	r3, [sp, #28]
 8002a62:	bfb8      	it	lt
 8002a64:	9204      	strlt	r2, [sp, #16]
 8002a66:	7823      	ldrb	r3, [r4, #0]
 8002a68:	2b2e      	cmp	r3, #46	@ 0x2e
 8002a6a:	d10a      	bne.n	8002a82 <_vfiprintf_r+0x156>
 8002a6c:	7863      	ldrb	r3, [r4, #1]
 8002a6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002a70:	d132      	bne.n	8002ad8 <_vfiprintf_r+0x1ac>
 8002a72:	9b03      	ldr	r3, [sp, #12]
 8002a74:	3402      	adds	r4, #2
 8002a76:	1d1a      	adds	r2, r3, #4
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	9203      	str	r2, [sp, #12]
 8002a7c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8002a80:	9305      	str	r3, [sp, #20]
 8002a82:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8002b4c <_vfiprintf_r+0x220>
 8002a86:	2203      	movs	r2, #3
 8002a88:	4650      	mov	r0, sl
 8002a8a:	7821      	ldrb	r1, [r4, #0]
 8002a8c:	f000 fb32 	bl	80030f4 <memchr>
 8002a90:	b138      	cbz	r0, 8002aa2 <_vfiprintf_r+0x176>
 8002a92:	2240      	movs	r2, #64	@ 0x40
 8002a94:	9b04      	ldr	r3, [sp, #16]
 8002a96:	eba0 000a 	sub.w	r0, r0, sl
 8002a9a:	4082      	lsls	r2, r0
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	3401      	adds	r4, #1
 8002aa0:	9304      	str	r3, [sp, #16]
 8002aa2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002aa6:	2206      	movs	r2, #6
 8002aa8:	4829      	ldr	r0, [pc, #164]	@ (8002b50 <_vfiprintf_r+0x224>)
 8002aaa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002aae:	f000 fb21 	bl	80030f4 <memchr>
 8002ab2:	2800      	cmp	r0, #0
 8002ab4:	d03f      	beq.n	8002b36 <_vfiprintf_r+0x20a>
 8002ab6:	4b27      	ldr	r3, [pc, #156]	@ (8002b54 <_vfiprintf_r+0x228>)
 8002ab8:	bb1b      	cbnz	r3, 8002b02 <_vfiprintf_r+0x1d6>
 8002aba:	9b03      	ldr	r3, [sp, #12]
 8002abc:	3307      	adds	r3, #7
 8002abe:	f023 0307 	bic.w	r3, r3, #7
 8002ac2:	3308      	adds	r3, #8
 8002ac4:	9303      	str	r3, [sp, #12]
 8002ac6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8002ac8:	443b      	add	r3, r7
 8002aca:	9309      	str	r3, [sp, #36]	@ 0x24
 8002acc:	e76a      	b.n	80029a4 <_vfiprintf_r+0x78>
 8002ace:	460c      	mov	r4, r1
 8002ad0:	2001      	movs	r0, #1
 8002ad2:	fb0c 3202 	mla	r2, ip, r2, r3
 8002ad6:	e7a8      	b.n	8002a2a <_vfiprintf_r+0xfe>
 8002ad8:	2300      	movs	r3, #0
 8002ada:	f04f 0c0a 	mov.w	ip, #10
 8002ade:	4619      	mov	r1, r3
 8002ae0:	3401      	adds	r4, #1
 8002ae2:	9305      	str	r3, [sp, #20]
 8002ae4:	4620      	mov	r0, r4
 8002ae6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002aea:	3a30      	subs	r2, #48	@ 0x30
 8002aec:	2a09      	cmp	r2, #9
 8002aee:	d903      	bls.n	8002af8 <_vfiprintf_r+0x1cc>
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d0c6      	beq.n	8002a82 <_vfiprintf_r+0x156>
 8002af4:	9105      	str	r1, [sp, #20]
 8002af6:	e7c4      	b.n	8002a82 <_vfiprintf_r+0x156>
 8002af8:	4604      	mov	r4, r0
 8002afa:	2301      	movs	r3, #1
 8002afc:	fb0c 2101 	mla	r1, ip, r1, r2
 8002b00:	e7f0      	b.n	8002ae4 <_vfiprintf_r+0x1b8>
 8002b02:	ab03      	add	r3, sp, #12
 8002b04:	9300      	str	r3, [sp, #0]
 8002b06:	462a      	mov	r2, r5
 8002b08:	4630      	mov	r0, r6
 8002b0a:	4b13      	ldr	r3, [pc, #76]	@ (8002b58 <_vfiprintf_r+0x22c>)
 8002b0c:	a904      	add	r1, sp, #16
 8002b0e:	f3af 8000 	nop.w
 8002b12:	4607      	mov	r7, r0
 8002b14:	1c78      	adds	r0, r7, #1
 8002b16:	d1d6      	bne.n	8002ac6 <_vfiprintf_r+0x19a>
 8002b18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8002b1a:	07d9      	lsls	r1, r3, #31
 8002b1c:	d405      	bmi.n	8002b2a <_vfiprintf_r+0x1fe>
 8002b1e:	89ab      	ldrh	r3, [r5, #12]
 8002b20:	059a      	lsls	r2, r3, #22
 8002b22:	d402      	bmi.n	8002b2a <_vfiprintf_r+0x1fe>
 8002b24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8002b26:	f7ff fde1 	bl	80026ec <__retarget_lock_release_recursive>
 8002b2a:	89ab      	ldrh	r3, [r5, #12]
 8002b2c:	065b      	lsls	r3, r3, #25
 8002b2e:	f53f af1f 	bmi.w	8002970 <_vfiprintf_r+0x44>
 8002b32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002b34:	e71e      	b.n	8002974 <_vfiprintf_r+0x48>
 8002b36:	ab03      	add	r3, sp, #12
 8002b38:	9300      	str	r3, [sp, #0]
 8002b3a:	462a      	mov	r2, r5
 8002b3c:	4630      	mov	r0, r6
 8002b3e:	4b06      	ldr	r3, [pc, #24]	@ (8002b58 <_vfiprintf_r+0x22c>)
 8002b40:	a904      	add	r1, sp, #16
 8002b42:	f000 f87d 	bl	8002c40 <_printf_i>
 8002b46:	e7e4      	b.n	8002b12 <_vfiprintf_r+0x1e6>
 8002b48:	08003276 	.word	0x08003276
 8002b4c:	0800327c 	.word	0x0800327c
 8002b50:	08003280 	.word	0x08003280
 8002b54:	00000000 	.word	0x00000000
 8002b58:	08002907 	.word	0x08002907

08002b5c <_printf_common>:
 8002b5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b60:	4616      	mov	r6, r2
 8002b62:	4698      	mov	r8, r3
 8002b64:	688a      	ldr	r2, [r1, #8]
 8002b66:	690b      	ldr	r3, [r1, #16]
 8002b68:	4607      	mov	r7, r0
 8002b6a:	4293      	cmp	r3, r2
 8002b6c:	bfb8      	it	lt
 8002b6e:	4613      	movlt	r3, r2
 8002b70:	6033      	str	r3, [r6, #0]
 8002b72:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8002b76:	460c      	mov	r4, r1
 8002b78:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8002b7c:	b10a      	cbz	r2, 8002b82 <_printf_common+0x26>
 8002b7e:	3301      	adds	r3, #1
 8002b80:	6033      	str	r3, [r6, #0]
 8002b82:	6823      	ldr	r3, [r4, #0]
 8002b84:	0699      	lsls	r1, r3, #26
 8002b86:	bf42      	ittt	mi
 8002b88:	6833      	ldrmi	r3, [r6, #0]
 8002b8a:	3302      	addmi	r3, #2
 8002b8c:	6033      	strmi	r3, [r6, #0]
 8002b8e:	6825      	ldr	r5, [r4, #0]
 8002b90:	f015 0506 	ands.w	r5, r5, #6
 8002b94:	d106      	bne.n	8002ba4 <_printf_common+0x48>
 8002b96:	f104 0a19 	add.w	sl, r4, #25
 8002b9a:	68e3      	ldr	r3, [r4, #12]
 8002b9c:	6832      	ldr	r2, [r6, #0]
 8002b9e:	1a9b      	subs	r3, r3, r2
 8002ba0:	42ab      	cmp	r3, r5
 8002ba2:	dc2b      	bgt.n	8002bfc <_printf_common+0xa0>
 8002ba4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002ba8:	6822      	ldr	r2, [r4, #0]
 8002baa:	3b00      	subs	r3, #0
 8002bac:	bf18      	it	ne
 8002bae:	2301      	movne	r3, #1
 8002bb0:	0692      	lsls	r2, r2, #26
 8002bb2:	d430      	bmi.n	8002c16 <_printf_common+0xba>
 8002bb4:	4641      	mov	r1, r8
 8002bb6:	4638      	mov	r0, r7
 8002bb8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8002bbc:	47c8      	blx	r9
 8002bbe:	3001      	adds	r0, #1
 8002bc0:	d023      	beq.n	8002c0a <_printf_common+0xae>
 8002bc2:	6823      	ldr	r3, [r4, #0]
 8002bc4:	6922      	ldr	r2, [r4, #16]
 8002bc6:	f003 0306 	and.w	r3, r3, #6
 8002bca:	2b04      	cmp	r3, #4
 8002bcc:	bf14      	ite	ne
 8002bce:	2500      	movne	r5, #0
 8002bd0:	6833      	ldreq	r3, [r6, #0]
 8002bd2:	f04f 0600 	mov.w	r6, #0
 8002bd6:	bf08      	it	eq
 8002bd8:	68e5      	ldreq	r5, [r4, #12]
 8002bda:	f104 041a 	add.w	r4, r4, #26
 8002bde:	bf08      	it	eq
 8002be0:	1aed      	subeq	r5, r5, r3
 8002be2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002be6:	bf08      	it	eq
 8002be8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002bec:	4293      	cmp	r3, r2
 8002bee:	bfc4      	itt	gt
 8002bf0:	1a9b      	subgt	r3, r3, r2
 8002bf2:	18ed      	addgt	r5, r5, r3
 8002bf4:	42b5      	cmp	r5, r6
 8002bf6:	d11a      	bne.n	8002c2e <_printf_common+0xd2>
 8002bf8:	2000      	movs	r0, #0
 8002bfa:	e008      	b.n	8002c0e <_printf_common+0xb2>
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	4652      	mov	r2, sl
 8002c00:	4641      	mov	r1, r8
 8002c02:	4638      	mov	r0, r7
 8002c04:	47c8      	blx	r9
 8002c06:	3001      	adds	r0, #1
 8002c08:	d103      	bne.n	8002c12 <_printf_common+0xb6>
 8002c0a:	f04f 30ff 	mov.w	r0, #4294967295
 8002c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002c12:	3501      	adds	r5, #1
 8002c14:	e7c1      	b.n	8002b9a <_printf_common+0x3e>
 8002c16:	2030      	movs	r0, #48	@ 0x30
 8002c18:	18e1      	adds	r1, r4, r3
 8002c1a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8002c1e:	1c5a      	adds	r2, r3, #1
 8002c20:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002c24:	4422      	add	r2, r4
 8002c26:	3302      	adds	r3, #2
 8002c28:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8002c2c:	e7c2      	b.n	8002bb4 <_printf_common+0x58>
 8002c2e:	2301      	movs	r3, #1
 8002c30:	4622      	mov	r2, r4
 8002c32:	4641      	mov	r1, r8
 8002c34:	4638      	mov	r0, r7
 8002c36:	47c8      	blx	r9
 8002c38:	3001      	adds	r0, #1
 8002c3a:	d0e6      	beq.n	8002c0a <_printf_common+0xae>
 8002c3c:	3601      	adds	r6, #1
 8002c3e:	e7d9      	b.n	8002bf4 <_printf_common+0x98>

08002c40 <_printf_i>:
 8002c40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8002c44:	7e0f      	ldrb	r7, [r1, #24]
 8002c46:	4691      	mov	r9, r2
 8002c48:	2f78      	cmp	r7, #120	@ 0x78
 8002c4a:	4680      	mov	r8, r0
 8002c4c:	460c      	mov	r4, r1
 8002c4e:	469a      	mov	sl, r3
 8002c50:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8002c52:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8002c56:	d807      	bhi.n	8002c68 <_printf_i+0x28>
 8002c58:	2f62      	cmp	r7, #98	@ 0x62
 8002c5a:	d80a      	bhi.n	8002c72 <_printf_i+0x32>
 8002c5c:	2f00      	cmp	r7, #0
 8002c5e:	f000 80d1 	beq.w	8002e04 <_printf_i+0x1c4>
 8002c62:	2f58      	cmp	r7, #88	@ 0x58
 8002c64:	f000 80b8 	beq.w	8002dd8 <_printf_i+0x198>
 8002c68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002c6c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8002c70:	e03a      	b.n	8002ce8 <_printf_i+0xa8>
 8002c72:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8002c76:	2b15      	cmp	r3, #21
 8002c78:	d8f6      	bhi.n	8002c68 <_printf_i+0x28>
 8002c7a:	a101      	add	r1, pc, #4	@ (adr r1, 8002c80 <_printf_i+0x40>)
 8002c7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8002c80:	08002cd9 	.word	0x08002cd9
 8002c84:	08002ced 	.word	0x08002ced
 8002c88:	08002c69 	.word	0x08002c69
 8002c8c:	08002c69 	.word	0x08002c69
 8002c90:	08002c69 	.word	0x08002c69
 8002c94:	08002c69 	.word	0x08002c69
 8002c98:	08002ced 	.word	0x08002ced
 8002c9c:	08002c69 	.word	0x08002c69
 8002ca0:	08002c69 	.word	0x08002c69
 8002ca4:	08002c69 	.word	0x08002c69
 8002ca8:	08002c69 	.word	0x08002c69
 8002cac:	08002deb 	.word	0x08002deb
 8002cb0:	08002d17 	.word	0x08002d17
 8002cb4:	08002da5 	.word	0x08002da5
 8002cb8:	08002c69 	.word	0x08002c69
 8002cbc:	08002c69 	.word	0x08002c69
 8002cc0:	08002e0d 	.word	0x08002e0d
 8002cc4:	08002c69 	.word	0x08002c69
 8002cc8:	08002d17 	.word	0x08002d17
 8002ccc:	08002c69 	.word	0x08002c69
 8002cd0:	08002c69 	.word	0x08002c69
 8002cd4:	08002dad 	.word	0x08002dad
 8002cd8:	6833      	ldr	r3, [r6, #0]
 8002cda:	1d1a      	adds	r2, r3, #4
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	6032      	str	r2, [r6, #0]
 8002ce0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002ce4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e09c      	b.n	8002e26 <_printf_i+0x1e6>
 8002cec:	6833      	ldr	r3, [r6, #0]
 8002cee:	6820      	ldr	r0, [r4, #0]
 8002cf0:	1d19      	adds	r1, r3, #4
 8002cf2:	6031      	str	r1, [r6, #0]
 8002cf4:	0606      	lsls	r6, r0, #24
 8002cf6:	d501      	bpl.n	8002cfc <_printf_i+0xbc>
 8002cf8:	681d      	ldr	r5, [r3, #0]
 8002cfa:	e003      	b.n	8002d04 <_printf_i+0xc4>
 8002cfc:	0645      	lsls	r5, r0, #25
 8002cfe:	d5fb      	bpl.n	8002cf8 <_printf_i+0xb8>
 8002d00:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002d04:	2d00      	cmp	r5, #0
 8002d06:	da03      	bge.n	8002d10 <_printf_i+0xd0>
 8002d08:	232d      	movs	r3, #45	@ 0x2d
 8002d0a:	426d      	negs	r5, r5
 8002d0c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002d10:	230a      	movs	r3, #10
 8002d12:	4858      	ldr	r0, [pc, #352]	@ (8002e74 <_printf_i+0x234>)
 8002d14:	e011      	b.n	8002d3a <_printf_i+0xfa>
 8002d16:	6821      	ldr	r1, [r4, #0]
 8002d18:	6833      	ldr	r3, [r6, #0]
 8002d1a:	0608      	lsls	r0, r1, #24
 8002d1c:	f853 5b04 	ldr.w	r5, [r3], #4
 8002d20:	d402      	bmi.n	8002d28 <_printf_i+0xe8>
 8002d22:	0649      	lsls	r1, r1, #25
 8002d24:	bf48      	it	mi
 8002d26:	b2ad      	uxthmi	r5, r5
 8002d28:	2f6f      	cmp	r7, #111	@ 0x6f
 8002d2a:	6033      	str	r3, [r6, #0]
 8002d2c:	bf14      	ite	ne
 8002d2e:	230a      	movne	r3, #10
 8002d30:	2308      	moveq	r3, #8
 8002d32:	4850      	ldr	r0, [pc, #320]	@ (8002e74 <_printf_i+0x234>)
 8002d34:	2100      	movs	r1, #0
 8002d36:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8002d3a:	6866      	ldr	r6, [r4, #4]
 8002d3c:	2e00      	cmp	r6, #0
 8002d3e:	60a6      	str	r6, [r4, #8]
 8002d40:	db05      	blt.n	8002d4e <_printf_i+0x10e>
 8002d42:	6821      	ldr	r1, [r4, #0]
 8002d44:	432e      	orrs	r6, r5
 8002d46:	f021 0104 	bic.w	r1, r1, #4
 8002d4a:	6021      	str	r1, [r4, #0]
 8002d4c:	d04b      	beq.n	8002de6 <_printf_i+0x1a6>
 8002d4e:	4616      	mov	r6, r2
 8002d50:	fbb5 f1f3 	udiv	r1, r5, r3
 8002d54:	fb03 5711 	mls	r7, r3, r1, r5
 8002d58:	5dc7      	ldrb	r7, [r0, r7]
 8002d5a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8002d5e:	462f      	mov	r7, r5
 8002d60:	42bb      	cmp	r3, r7
 8002d62:	460d      	mov	r5, r1
 8002d64:	d9f4      	bls.n	8002d50 <_printf_i+0x110>
 8002d66:	2b08      	cmp	r3, #8
 8002d68:	d10b      	bne.n	8002d82 <_printf_i+0x142>
 8002d6a:	6823      	ldr	r3, [r4, #0]
 8002d6c:	07df      	lsls	r7, r3, #31
 8002d6e:	d508      	bpl.n	8002d82 <_printf_i+0x142>
 8002d70:	6923      	ldr	r3, [r4, #16]
 8002d72:	6861      	ldr	r1, [r4, #4]
 8002d74:	4299      	cmp	r1, r3
 8002d76:	bfde      	ittt	le
 8002d78:	2330      	movle	r3, #48	@ 0x30
 8002d7a:	f806 3c01 	strble.w	r3, [r6, #-1]
 8002d7e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8002d82:	1b92      	subs	r2, r2, r6
 8002d84:	6122      	str	r2, [r4, #16]
 8002d86:	464b      	mov	r3, r9
 8002d88:	4621      	mov	r1, r4
 8002d8a:	4640      	mov	r0, r8
 8002d8c:	f8cd a000 	str.w	sl, [sp]
 8002d90:	aa03      	add	r2, sp, #12
 8002d92:	f7ff fee3 	bl	8002b5c <_printf_common>
 8002d96:	3001      	adds	r0, #1
 8002d98:	d14a      	bne.n	8002e30 <_printf_i+0x1f0>
 8002d9a:	f04f 30ff 	mov.w	r0, #4294967295
 8002d9e:	b004      	add	sp, #16
 8002da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002da4:	6823      	ldr	r3, [r4, #0]
 8002da6:	f043 0320 	orr.w	r3, r3, #32
 8002daa:	6023      	str	r3, [r4, #0]
 8002dac:	2778      	movs	r7, #120	@ 0x78
 8002dae:	4832      	ldr	r0, [pc, #200]	@ (8002e78 <_printf_i+0x238>)
 8002db0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002db4:	6823      	ldr	r3, [r4, #0]
 8002db6:	6831      	ldr	r1, [r6, #0]
 8002db8:	061f      	lsls	r7, r3, #24
 8002dba:	f851 5b04 	ldr.w	r5, [r1], #4
 8002dbe:	d402      	bmi.n	8002dc6 <_printf_i+0x186>
 8002dc0:	065f      	lsls	r7, r3, #25
 8002dc2:	bf48      	it	mi
 8002dc4:	b2ad      	uxthmi	r5, r5
 8002dc6:	6031      	str	r1, [r6, #0]
 8002dc8:	07d9      	lsls	r1, r3, #31
 8002dca:	bf44      	itt	mi
 8002dcc:	f043 0320 	orrmi.w	r3, r3, #32
 8002dd0:	6023      	strmi	r3, [r4, #0]
 8002dd2:	b11d      	cbz	r5, 8002ddc <_printf_i+0x19c>
 8002dd4:	2310      	movs	r3, #16
 8002dd6:	e7ad      	b.n	8002d34 <_printf_i+0xf4>
 8002dd8:	4826      	ldr	r0, [pc, #152]	@ (8002e74 <_printf_i+0x234>)
 8002dda:	e7e9      	b.n	8002db0 <_printf_i+0x170>
 8002ddc:	6823      	ldr	r3, [r4, #0]
 8002dde:	f023 0320 	bic.w	r3, r3, #32
 8002de2:	6023      	str	r3, [r4, #0]
 8002de4:	e7f6      	b.n	8002dd4 <_printf_i+0x194>
 8002de6:	4616      	mov	r6, r2
 8002de8:	e7bd      	b.n	8002d66 <_printf_i+0x126>
 8002dea:	6833      	ldr	r3, [r6, #0]
 8002dec:	6825      	ldr	r5, [r4, #0]
 8002dee:	1d18      	adds	r0, r3, #4
 8002df0:	6961      	ldr	r1, [r4, #20]
 8002df2:	6030      	str	r0, [r6, #0]
 8002df4:	062e      	lsls	r6, r5, #24
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	d501      	bpl.n	8002dfe <_printf_i+0x1be>
 8002dfa:	6019      	str	r1, [r3, #0]
 8002dfc:	e002      	b.n	8002e04 <_printf_i+0x1c4>
 8002dfe:	0668      	lsls	r0, r5, #25
 8002e00:	d5fb      	bpl.n	8002dfa <_printf_i+0x1ba>
 8002e02:	8019      	strh	r1, [r3, #0]
 8002e04:	2300      	movs	r3, #0
 8002e06:	4616      	mov	r6, r2
 8002e08:	6123      	str	r3, [r4, #16]
 8002e0a:	e7bc      	b.n	8002d86 <_printf_i+0x146>
 8002e0c:	6833      	ldr	r3, [r6, #0]
 8002e0e:	2100      	movs	r1, #0
 8002e10:	1d1a      	adds	r2, r3, #4
 8002e12:	6032      	str	r2, [r6, #0]
 8002e14:	681e      	ldr	r6, [r3, #0]
 8002e16:	6862      	ldr	r2, [r4, #4]
 8002e18:	4630      	mov	r0, r6
 8002e1a:	f000 f96b 	bl	80030f4 <memchr>
 8002e1e:	b108      	cbz	r0, 8002e24 <_printf_i+0x1e4>
 8002e20:	1b80      	subs	r0, r0, r6
 8002e22:	6060      	str	r0, [r4, #4]
 8002e24:	6863      	ldr	r3, [r4, #4]
 8002e26:	6123      	str	r3, [r4, #16]
 8002e28:	2300      	movs	r3, #0
 8002e2a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002e2e:	e7aa      	b.n	8002d86 <_printf_i+0x146>
 8002e30:	4632      	mov	r2, r6
 8002e32:	4649      	mov	r1, r9
 8002e34:	4640      	mov	r0, r8
 8002e36:	6923      	ldr	r3, [r4, #16]
 8002e38:	47d0      	blx	sl
 8002e3a:	3001      	adds	r0, #1
 8002e3c:	d0ad      	beq.n	8002d9a <_printf_i+0x15a>
 8002e3e:	6823      	ldr	r3, [r4, #0]
 8002e40:	079b      	lsls	r3, r3, #30
 8002e42:	d413      	bmi.n	8002e6c <_printf_i+0x22c>
 8002e44:	68e0      	ldr	r0, [r4, #12]
 8002e46:	9b03      	ldr	r3, [sp, #12]
 8002e48:	4298      	cmp	r0, r3
 8002e4a:	bfb8      	it	lt
 8002e4c:	4618      	movlt	r0, r3
 8002e4e:	e7a6      	b.n	8002d9e <_printf_i+0x15e>
 8002e50:	2301      	movs	r3, #1
 8002e52:	4632      	mov	r2, r6
 8002e54:	4649      	mov	r1, r9
 8002e56:	4640      	mov	r0, r8
 8002e58:	47d0      	blx	sl
 8002e5a:	3001      	adds	r0, #1
 8002e5c:	d09d      	beq.n	8002d9a <_printf_i+0x15a>
 8002e5e:	3501      	adds	r5, #1
 8002e60:	68e3      	ldr	r3, [r4, #12]
 8002e62:	9903      	ldr	r1, [sp, #12]
 8002e64:	1a5b      	subs	r3, r3, r1
 8002e66:	42ab      	cmp	r3, r5
 8002e68:	dcf2      	bgt.n	8002e50 <_printf_i+0x210>
 8002e6a:	e7eb      	b.n	8002e44 <_printf_i+0x204>
 8002e6c:	2500      	movs	r5, #0
 8002e6e:	f104 0619 	add.w	r6, r4, #25
 8002e72:	e7f5      	b.n	8002e60 <_printf_i+0x220>
 8002e74:	08003287 	.word	0x08003287
 8002e78:	08003298 	.word	0x08003298

08002e7c <__sflush_r>:
 8002e7c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e82:	0716      	lsls	r6, r2, #28
 8002e84:	4605      	mov	r5, r0
 8002e86:	460c      	mov	r4, r1
 8002e88:	d454      	bmi.n	8002f34 <__sflush_r+0xb8>
 8002e8a:	684b      	ldr	r3, [r1, #4]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	dc02      	bgt.n	8002e96 <__sflush_r+0x1a>
 8002e90:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	dd48      	ble.n	8002f28 <__sflush_r+0xac>
 8002e96:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002e98:	2e00      	cmp	r6, #0
 8002e9a:	d045      	beq.n	8002f28 <__sflush_r+0xac>
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8002ea2:	682f      	ldr	r7, [r5, #0]
 8002ea4:	6a21      	ldr	r1, [r4, #32]
 8002ea6:	602b      	str	r3, [r5, #0]
 8002ea8:	d030      	beq.n	8002f0c <__sflush_r+0x90>
 8002eaa:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8002eac:	89a3      	ldrh	r3, [r4, #12]
 8002eae:	0759      	lsls	r1, r3, #29
 8002eb0:	d505      	bpl.n	8002ebe <__sflush_r+0x42>
 8002eb2:	6863      	ldr	r3, [r4, #4]
 8002eb4:	1ad2      	subs	r2, r2, r3
 8002eb6:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8002eb8:	b10b      	cbz	r3, 8002ebe <__sflush_r+0x42>
 8002eba:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8002ebc:	1ad2      	subs	r2, r2, r3
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	4628      	mov	r0, r5
 8002ec2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8002ec4:	6a21      	ldr	r1, [r4, #32]
 8002ec6:	47b0      	blx	r6
 8002ec8:	1c43      	adds	r3, r0, #1
 8002eca:	89a3      	ldrh	r3, [r4, #12]
 8002ecc:	d106      	bne.n	8002edc <__sflush_r+0x60>
 8002ece:	6829      	ldr	r1, [r5, #0]
 8002ed0:	291d      	cmp	r1, #29
 8002ed2:	d82b      	bhi.n	8002f2c <__sflush_r+0xb0>
 8002ed4:	4a28      	ldr	r2, [pc, #160]	@ (8002f78 <__sflush_r+0xfc>)
 8002ed6:	40ca      	lsrs	r2, r1
 8002ed8:	07d6      	lsls	r6, r2, #31
 8002eda:	d527      	bpl.n	8002f2c <__sflush_r+0xb0>
 8002edc:	2200      	movs	r2, #0
 8002ede:	6062      	str	r2, [r4, #4]
 8002ee0:	6922      	ldr	r2, [r4, #16]
 8002ee2:	04d9      	lsls	r1, r3, #19
 8002ee4:	6022      	str	r2, [r4, #0]
 8002ee6:	d504      	bpl.n	8002ef2 <__sflush_r+0x76>
 8002ee8:	1c42      	adds	r2, r0, #1
 8002eea:	d101      	bne.n	8002ef0 <__sflush_r+0x74>
 8002eec:	682b      	ldr	r3, [r5, #0]
 8002eee:	b903      	cbnz	r3, 8002ef2 <__sflush_r+0x76>
 8002ef0:	6560      	str	r0, [r4, #84]	@ 0x54
 8002ef2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002ef4:	602f      	str	r7, [r5, #0]
 8002ef6:	b1b9      	cbz	r1, 8002f28 <__sflush_r+0xac>
 8002ef8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002efc:	4299      	cmp	r1, r3
 8002efe:	d002      	beq.n	8002f06 <__sflush_r+0x8a>
 8002f00:	4628      	mov	r0, r5
 8002f02:	f7ff fbf5 	bl	80026f0 <_free_r>
 8002f06:	2300      	movs	r3, #0
 8002f08:	6363      	str	r3, [r4, #52]	@ 0x34
 8002f0a:	e00d      	b.n	8002f28 <__sflush_r+0xac>
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	4628      	mov	r0, r5
 8002f10:	47b0      	blx	r6
 8002f12:	4602      	mov	r2, r0
 8002f14:	1c50      	adds	r0, r2, #1
 8002f16:	d1c9      	bne.n	8002eac <__sflush_r+0x30>
 8002f18:	682b      	ldr	r3, [r5, #0]
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d0c6      	beq.n	8002eac <__sflush_r+0x30>
 8002f1e:	2b1d      	cmp	r3, #29
 8002f20:	d001      	beq.n	8002f26 <__sflush_r+0xaa>
 8002f22:	2b16      	cmp	r3, #22
 8002f24:	d11d      	bne.n	8002f62 <__sflush_r+0xe6>
 8002f26:	602f      	str	r7, [r5, #0]
 8002f28:	2000      	movs	r0, #0
 8002f2a:	e021      	b.n	8002f70 <__sflush_r+0xf4>
 8002f2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f30:	b21b      	sxth	r3, r3
 8002f32:	e01a      	b.n	8002f6a <__sflush_r+0xee>
 8002f34:	690f      	ldr	r7, [r1, #16]
 8002f36:	2f00      	cmp	r7, #0
 8002f38:	d0f6      	beq.n	8002f28 <__sflush_r+0xac>
 8002f3a:	0793      	lsls	r3, r2, #30
 8002f3c:	bf18      	it	ne
 8002f3e:	2300      	movne	r3, #0
 8002f40:	680e      	ldr	r6, [r1, #0]
 8002f42:	bf08      	it	eq
 8002f44:	694b      	ldreq	r3, [r1, #20]
 8002f46:	1bf6      	subs	r6, r6, r7
 8002f48:	600f      	str	r7, [r1, #0]
 8002f4a:	608b      	str	r3, [r1, #8]
 8002f4c:	2e00      	cmp	r6, #0
 8002f4e:	ddeb      	ble.n	8002f28 <__sflush_r+0xac>
 8002f50:	4633      	mov	r3, r6
 8002f52:	463a      	mov	r2, r7
 8002f54:	4628      	mov	r0, r5
 8002f56:	6a21      	ldr	r1, [r4, #32]
 8002f58:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8002f5c:	47e0      	blx	ip
 8002f5e:	2800      	cmp	r0, #0
 8002f60:	dc07      	bgt.n	8002f72 <__sflush_r+0xf6>
 8002f62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f66:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002f6a:	f04f 30ff 	mov.w	r0, #4294967295
 8002f6e:	81a3      	strh	r3, [r4, #12]
 8002f70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f72:	4407      	add	r7, r0
 8002f74:	1a36      	subs	r6, r6, r0
 8002f76:	e7e9      	b.n	8002f4c <__sflush_r+0xd0>
 8002f78:	20400001 	.word	0x20400001

08002f7c <_fflush_r>:
 8002f7c:	b538      	push	{r3, r4, r5, lr}
 8002f7e:	690b      	ldr	r3, [r1, #16]
 8002f80:	4605      	mov	r5, r0
 8002f82:	460c      	mov	r4, r1
 8002f84:	b913      	cbnz	r3, 8002f8c <_fflush_r+0x10>
 8002f86:	2500      	movs	r5, #0
 8002f88:	4628      	mov	r0, r5
 8002f8a:	bd38      	pop	{r3, r4, r5, pc}
 8002f8c:	b118      	cbz	r0, 8002f96 <_fflush_r+0x1a>
 8002f8e:	6a03      	ldr	r3, [r0, #32]
 8002f90:	b90b      	cbnz	r3, 8002f96 <_fflush_r+0x1a>
 8002f92:	f7ff f9b3 	bl	80022fc <__sinit>
 8002f96:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d0f3      	beq.n	8002f86 <_fflush_r+0xa>
 8002f9e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8002fa0:	07d0      	lsls	r0, r2, #31
 8002fa2:	d404      	bmi.n	8002fae <_fflush_r+0x32>
 8002fa4:	0599      	lsls	r1, r3, #22
 8002fa6:	d402      	bmi.n	8002fae <_fflush_r+0x32>
 8002fa8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002faa:	f7ff fb9e 	bl	80026ea <__retarget_lock_acquire_recursive>
 8002fae:	4628      	mov	r0, r5
 8002fb0:	4621      	mov	r1, r4
 8002fb2:	f7ff ff63 	bl	8002e7c <__sflush_r>
 8002fb6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002fb8:	4605      	mov	r5, r0
 8002fba:	07da      	lsls	r2, r3, #31
 8002fbc:	d4e4      	bmi.n	8002f88 <_fflush_r+0xc>
 8002fbe:	89a3      	ldrh	r3, [r4, #12]
 8002fc0:	059b      	lsls	r3, r3, #22
 8002fc2:	d4e1      	bmi.n	8002f88 <_fflush_r+0xc>
 8002fc4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002fc6:	f7ff fb91 	bl	80026ec <__retarget_lock_release_recursive>
 8002fca:	e7dd      	b.n	8002f88 <_fflush_r+0xc>

08002fcc <__swhatbuf_r>:
 8002fcc:	b570      	push	{r4, r5, r6, lr}
 8002fce:	460c      	mov	r4, r1
 8002fd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002fd4:	4615      	mov	r5, r2
 8002fd6:	2900      	cmp	r1, #0
 8002fd8:	461e      	mov	r6, r3
 8002fda:	b096      	sub	sp, #88	@ 0x58
 8002fdc:	da0c      	bge.n	8002ff8 <__swhatbuf_r+0x2c>
 8002fde:	89a3      	ldrh	r3, [r4, #12]
 8002fe0:	2100      	movs	r1, #0
 8002fe2:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8002fe6:	bf14      	ite	ne
 8002fe8:	2340      	movne	r3, #64	@ 0x40
 8002fea:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002fee:	2000      	movs	r0, #0
 8002ff0:	6031      	str	r1, [r6, #0]
 8002ff2:	602b      	str	r3, [r5, #0]
 8002ff4:	b016      	add	sp, #88	@ 0x58
 8002ff6:	bd70      	pop	{r4, r5, r6, pc}
 8002ff8:	466a      	mov	r2, sp
 8002ffa:	f000 f849 	bl	8003090 <_fstat_r>
 8002ffe:	2800      	cmp	r0, #0
 8003000:	dbed      	blt.n	8002fde <__swhatbuf_r+0x12>
 8003002:	9901      	ldr	r1, [sp, #4]
 8003004:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003008:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800300c:	4259      	negs	r1, r3
 800300e:	4159      	adcs	r1, r3
 8003010:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003014:	e7eb      	b.n	8002fee <__swhatbuf_r+0x22>

08003016 <__smakebuf_r>:
 8003016:	898b      	ldrh	r3, [r1, #12]
 8003018:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800301a:	079d      	lsls	r5, r3, #30
 800301c:	4606      	mov	r6, r0
 800301e:	460c      	mov	r4, r1
 8003020:	d507      	bpl.n	8003032 <__smakebuf_r+0x1c>
 8003022:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003026:	6023      	str	r3, [r4, #0]
 8003028:	6123      	str	r3, [r4, #16]
 800302a:	2301      	movs	r3, #1
 800302c:	6163      	str	r3, [r4, #20]
 800302e:	b003      	add	sp, #12
 8003030:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003032:	466a      	mov	r2, sp
 8003034:	ab01      	add	r3, sp, #4
 8003036:	f7ff ffc9 	bl	8002fcc <__swhatbuf_r>
 800303a:	9f00      	ldr	r7, [sp, #0]
 800303c:	4605      	mov	r5, r0
 800303e:	4639      	mov	r1, r7
 8003040:	4630      	mov	r0, r6
 8003042:	f7ff fbbf 	bl	80027c4 <_malloc_r>
 8003046:	b948      	cbnz	r0, 800305c <__smakebuf_r+0x46>
 8003048:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800304c:	059a      	lsls	r2, r3, #22
 800304e:	d4ee      	bmi.n	800302e <__smakebuf_r+0x18>
 8003050:	f023 0303 	bic.w	r3, r3, #3
 8003054:	f043 0302 	orr.w	r3, r3, #2
 8003058:	81a3      	strh	r3, [r4, #12]
 800305a:	e7e2      	b.n	8003022 <__smakebuf_r+0xc>
 800305c:	89a3      	ldrh	r3, [r4, #12]
 800305e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003062:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003066:	81a3      	strh	r3, [r4, #12]
 8003068:	9b01      	ldr	r3, [sp, #4]
 800306a:	6020      	str	r0, [r4, #0]
 800306c:	b15b      	cbz	r3, 8003086 <__smakebuf_r+0x70>
 800306e:	4630      	mov	r0, r6
 8003070:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003074:	f000 f81e 	bl	80030b4 <_isatty_r>
 8003078:	b128      	cbz	r0, 8003086 <__smakebuf_r+0x70>
 800307a:	89a3      	ldrh	r3, [r4, #12]
 800307c:	f023 0303 	bic.w	r3, r3, #3
 8003080:	f043 0301 	orr.w	r3, r3, #1
 8003084:	81a3      	strh	r3, [r4, #12]
 8003086:	89a3      	ldrh	r3, [r4, #12]
 8003088:	431d      	orrs	r5, r3
 800308a:	81a5      	strh	r5, [r4, #12]
 800308c:	e7cf      	b.n	800302e <__smakebuf_r+0x18>
	...

08003090 <_fstat_r>:
 8003090:	b538      	push	{r3, r4, r5, lr}
 8003092:	2300      	movs	r3, #0
 8003094:	4d06      	ldr	r5, [pc, #24]	@ (80030b0 <_fstat_r+0x20>)
 8003096:	4604      	mov	r4, r0
 8003098:	4608      	mov	r0, r1
 800309a:	4611      	mov	r1, r2
 800309c:	602b      	str	r3, [r5, #0]
 800309e:	f7fd fbc1 	bl	8000824 <_fstat>
 80030a2:	1c43      	adds	r3, r0, #1
 80030a4:	d102      	bne.n	80030ac <_fstat_r+0x1c>
 80030a6:	682b      	ldr	r3, [r5, #0]
 80030a8:	b103      	cbz	r3, 80030ac <_fstat_r+0x1c>
 80030aa:	6023      	str	r3, [r4, #0]
 80030ac:	bd38      	pop	{r3, r4, r5, pc}
 80030ae:	bf00      	nop
 80030b0:	20000264 	.word	0x20000264

080030b4 <_isatty_r>:
 80030b4:	b538      	push	{r3, r4, r5, lr}
 80030b6:	2300      	movs	r3, #0
 80030b8:	4d05      	ldr	r5, [pc, #20]	@ (80030d0 <_isatty_r+0x1c>)
 80030ba:	4604      	mov	r4, r0
 80030bc:	4608      	mov	r0, r1
 80030be:	602b      	str	r3, [r5, #0]
 80030c0:	f7fd fbbf 	bl	8000842 <_isatty>
 80030c4:	1c43      	adds	r3, r0, #1
 80030c6:	d102      	bne.n	80030ce <_isatty_r+0x1a>
 80030c8:	682b      	ldr	r3, [r5, #0]
 80030ca:	b103      	cbz	r3, 80030ce <_isatty_r+0x1a>
 80030cc:	6023      	str	r3, [r4, #0]
 80030ce:	bd38      	pop	{r3, r4, r5, pc}
 80030d0:	20000264 	.word	0x20000264

080030d4 <_sbrk_r>:
 80030d4:	b538      	push	{r3, r4, r5, lr}
 80030d6:	2300      	movs	r3, #0
 80030d8:	4d05      	ldr	r5, [pc, #20]	@ (80030f0 <_sbrk_r+0x1c>)
 80030da:	4604      	mov	r4, r0
 80030dc:	4608      	mov	r0, r1
 80030de:	602b      	str	r3, [r5, #0]
 80030e0:	f7fd fbc6 	bl	8000870 <_sbrk>
 80030e4:	1c43      	adds	r3, r0, #1
 80030e6:	d102      	bne.n	80030ee <_sbrk_r+0x1a>
 80030e8:	682b      	ldr	r3, [r5, #0]
 80030ea:	b103      	cbz	r3, 80030ee <_sbrk_r+0x1a>
 80030ec:	6023      	str	r3, [r4, #0]
 80030ee:	bd38      	pop	{r3, r4, r5, pc}
 80030f0:	20000264 	.word	0x20000264

080030f4 <memchr>:
 80030f4:	4603      	mov	r3, r0
 80030f6:	b510      	push	{r4, lr}
 80030f8:	b2c9      	uxtb	r1, r1
 80030fa:	4402      	add	r2, r0
 80030fc:	4293      	cmp	r3, r2
 80030fe:	4618      	mov	r0, r3
 8003100:	d101      	bne.n	8003106 <memchr+0x12>
 8003102:	2000      	movs	r0, #0
 8003104:	e003      	b.n	800310e <memchr+0x1a>
 8003106:	7804      	ldrb	r4, [r0, #0]
 8003108:	3301      	adds	r3, #1
 800310a:	428c      	cmp	r4, r1
 800310c:	d1f6      	bne.n	80030fc <memchr+0x8>
 800310e:	bd10      	pop	{r4, pc}

08003110 <_init>:
 8003110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003112:	bf00      	nop
 8003114:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003116:	bc08      	pop	{r3}
 8003118:	469e      	mov	lr, r3
 800311a:	4770      	bx	lr

0800311c <_fini>:
 800311c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800311e:	bf00      	nop
 8003120:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003122:	bc08      	pop	{r3}
 8003124:	469e      	mov	lr, r3
 8003126:	4770      	bx	lr
