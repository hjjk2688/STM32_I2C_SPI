
ILI9341.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002ae0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000029c  08002bec  08002bec  00003bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e88  08002e88  0000405c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08002e88  08002e88  0000405c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08002e88  08002e88  0000405c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e88  08002e88  00003e88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002e8c  08002e8c  00003e8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08002e90  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  2000005c  08002eec  0000405c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000210  08002eec  00004210  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000405c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006f14  00000000  00000000  00004085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000015ef  00000000  00000000  0000af99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c0  00000000  00000000  0000c588  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000530  00000000  00000000  0000cc48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000172a5  00000000  00000000  0000d178  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000083b7  00000000  00000000  0002441d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000835be  00000000  00000000  0002c7d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000afd92  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f3c  00000000  00000000  000afdd8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000060  00000000  00000000  000b1d14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000005c 	.word	0x2000005c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002bd4 	.word	0x08002bd4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000060 	.word	0x20000060
 8000148:	08002bd4 	.word	0x08002bd4

0800014c <ILI9341_WriteData8>:
#define RD_HIGH()   HAL_GPIO_WritePin(LCD_RD_PORT, LCD_RD_PIN, GPIO_PIN_SET)
#define RST_LOW()   HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_RESET)
#define RST_HIGH()  HAL_GPIO_WritePin(LCD_RST_PORT, LCD_RST_PIN, GPIO_PIN_SET)

// Write 8-bit data to parallel bus
void ILI9341_WriteData8(uint8_t data) {
 800014c:	b580      	push	{r7, lr}
 800014e:	b082      	sub	sp, #8
 8000150:	af00      	add	r7, sp, #0
 8000152:	4603      	mov	r3, r0
 8000154:	71fb      	strb	r3, [r7, #7]
    // Set data pins
    HAL_GPIO_WritePin(LCD_D0_PORT, LCD_D0_PIN, (data & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000156:	79fb      	ldrb	r3, [r7, #7]
 8000158:	f003 0301 	and.w	r3, r3, #1
 800015c:	b2db      	uxtb	r3, r3
 800015e:	461a      	mov	r2, r3
 8000160:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000164:	482f      	ldr	r0, [pc, #188]	@ (8000224 <ILI9341_WriteData8+0xd8>)
 8000166:	f001 fb5d 	bl	8001824 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D1_PORT, LCD_D1_PIN, (data & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800016a:	79fb      	ldrb	r3, [r7, #7]
 800016c:	105b      	asrs	r3, r3, #1
 800016e:	b2db      	uxtb	r3, r3
 8000170:	f003 0301 	and.w	r3, r3, #1
 8000174:	b2db      	uxtb	r3, r3
 8000176:	461a      	mov	r2, r3
 8000178:	2180      	movs	r1, #128	@ 0x80
 800017a:	482b      	ldr	r0, [pc, #172]	@ (8000228 <ILI9341_WriteData8+0xdc>)
 800017c:	f001 fb52 	bl	8001824 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D2_PORT, LCD_D2_PIN, (data & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000180:	79fb      	ldrb	r3, [r7, #7]
 8000182:	109b      	asrs	r3, r3, #2
 8000184:	b2db      	uxtb	r3, r3
 8000186:	f003 0301 	and.w	r3, r3, #1
 800018a:	b2db      	uxtb	r3, r3
 800018c:	461a      	mov	r2, r3
 800018e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000192:	4824      	ldr	r0, [pc, #144]	@ (8000224 <ILI9341_WriteData8+0xd8>)
 8000194:	f001 fb46 	bl	8001824 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D3_PORT, LCD_D3_PIN, (data & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8000198:	79fb      	ldrb	r3, [r7, #7]
 800019a:	10db      	asrs	r3, r3, #3
 800019c:	b2db      	uxtb	r3, r3
 800019e:	f003 0301 	and.w	r3, r3, #1
 80001a2:	b2db      	uxtb	r3, r3
 80001a4:	461a      	mov	r2, r3
 80001a6:	2108      	movs	r1, #8
 80001a8:	4820      	ldr	r0, [pc, #128]	@ (800022c <ILI9341_WriteData8+0xe0>)
 80001aa:	f001 fb3b 	bl	8001824 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D4_PORT, LCD_D4_PIN, (data & 0x10) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80001ae:	79fb      	ldrb	r3, [r7, #7]
 80001b0:	111b      	asrs	r3, r3, #4
 80001b2:	b2db      	uxtb	r3, r3
 80001b4:	f003 0301 	and.w	r3, r3, #1
 80001b8:	b2db      	uxtb	r3, r3
 80001ba:	461a      	mov	r2, r3
 80001bc:	2120      	movs	r1, #32
 80001be:	481b      	ldr	r0, [pc, #108]	@ (800022c <ILI9341_WriteData8+0xe0>)
 80001c0:	f001 fb30 	bl	8001824 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_PORT, LCD_D5_PIN, (data & 0x20) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80001c4:	79fb      	ldrb	r3, [r7, #7]
 80001c6:	115b      	asrs	r3, r3, #5
 80001c8:	b2db      	uxtb	r3, r3
 80001ca:	f003 0301 	and.w	r3, r3, #1
 80001ce:	b2db      	uxtb	r3, r3
 80001d0:	461a      	mov	r2, r3
 80001d2:	2110      	movs	r1, #16
 80001d4:	4815      	ldr	r0, [pc, #84]	@ (800022c <ILI9341_WriteData8+0xe0>)
 80001d6:	f001 fb25 	bl	8001824 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_PORT, LCD_D6_PIN, (data & 0x40) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80001da:	79fb      	ldrb	r3, [r7, #7]
 80001dc:	119b      	asrs	r3, r3, #6
 80001de:	b2db      	uxtb	r3, r3
 80001e0:	f003 0301 	and.w	r3, r3, #1
 80001e4:	b2db      	uxtb	r3, r3
 80001e6:	461a      	mov	r2, r3
 80001e8:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80001ec:	480f      	ldr	r0, [pc, #60]	@ (800022c <ILI9341_WriteData8+0xe0>)
 80001ee:	f001 fb19 	bl	8001824 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7_PORT, LCD_D7_PIN, (data & 0x80) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80001f2:	79fb      	ldrb	r3, [r7, #7]
 80001f4:	09db      	lsrs	r3, r3, #7
 80001f6:	b2db      	uxtb	r3, r3
 80001f8:	461a      	mov	r2, r3
 80001fa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80001fe:	4809      	ldr	r0, [pc, #36]	@ (8000224 <ILI9341_WriteData8+0xd8>)
 8000200:	f001 fb10 	bl	8001824 <HAL_GPIO_WritePin>

    // Write strobe
    WR_LOW();
 8000204:	2200      	movs	r2, #0
 8000206:	2102      	movs	r1, #2
 8000208:	4806      	ldr	r0, [pc, #24]	@ (8000224 <ILI9341_WriteData8+0xd8>)
 800020a:	f001 fb0b 	bl	8001824 <HAL_GPIO_WritePin>
    __NOP(); // Small delay
 800020e:	bf00      	nop
    __NOP();
 8000210:	bf00      	nop
    WR_HIGH();
 8000212:	2201      	movs	r2, #1
 8000214:	2102      	movs	r1, #2
 8000216:	4803      	ldr	r0, [pc, #12]	@ (8000224 <ILI9341_WriteData8+0xd8>)
 8000218:	f001 fb04 	bl	8001824 <HAL_GPIO_WritePin>
}
 800021c:	bf00      	nop
 800021e:	3708      	adds	r7, #8
 8000220:	46bd      	mov	sp, r7
 8000222:	bd80      	pop	{r7, pc}
 8000224:	40010800 	.word	0x40010800
 8000228:	40011000 	.word	0x40011000
 800022c:	40010c00 	.word	0x40010c00

08000230 <ILI9341_SetDataPinsOutput>:
    RD_HIGH();
    return data;
}

// Configure data pins for output
void ILI9341_SetDataPinsOutput(void) {
 8000230:	b580      	push	{r7, lr}
 8000232:	b084      	sub	sp, #16
 8000234:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000236:	463b      	mov	r3, r7
 8000238:	2200      	movs	r2, #0
 800023a:	601a      	str	r2, [r3, #0]
 800023c:	605a      	str	r2, [r3, #4]
 800023e:	609a      	str	r2, [r3, #8]
 8000240:	60da      	str	r2, [r3, #12]

    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000242:	2301      	movs	r3, #1
 8000244:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000246:	2300      	movs	r3, #0
 8000248:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800024a:	2303      	movs	r3, #3
 800024c:	60fb      	str	r3, [r7, #12]

    GPIO_InitStruct.Pin = LCD_D0_PIN;
 800024e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000252:	603b      	str	r3, [r7, #0]
    HAL_GPIO_Init(LCD_D0_PORT, &GPIO_InitStruct);
 8000254:	463b      	mov	r3, r7
 8000256:	4619      	mov	r1, r3
 8000258:	481d      	ldr	r0, [pc, #116]	@ (80002d0 <ILI9341_SetDataPinsOutput+0xa0>)
 800025a:	f001 f95f 	bl	800151c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_D1_PIN;
 800025e:	2380      	movs	r3, #128	@ 0x80
 8000260:	603b      	str	r3, [r7, #0]
    HAL_GPIO_Init(LCD_D1_PORT, &GPIO_InitStruct);
 8000262:	463b      	mov	r3, r7
 8000264:	4619      	mov	r1, r3
 8000266:	481b      	ldr	r0, [pc, #108]	@ (80002d4 <ILI9341_SetDataPinsOutput+0xa4>)
 8000268:	f001 f958 	bl	800151c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_D2_PIN;
 800026c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000270:	603b      	str	r3, [r7, #0]
    HAL_GPIO_Init(LCD_D2_PORT, &GPIO_InitStruct);
 8000272:	463b      	mov	r3, r7
 8000274:	4619      	mov	r1, r3
 8000276:	4816      	ldr	r0, [pc, #88]	@ (80002d0 <ILI9341_SetDataPinsOutput+0xa0>)
 8000278:	f001 f950 	bl	800151c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_D3_PIN;
 800027c:	2308      	movs	r3, #8
 800027e:	603b      	str	r3, [r7, #0]
    HAL_GPIO_Init(LCD_D3_PORT, &GPIO_InitStruct);
 8000280:	463b      	mov	r3, r7
 8000282:	4619      	mov	r1, r3
 8000284:	4814      	ldr	r0, [pc, #80]	@ (80002d8 <ILI9341_SetDataPinsOutput+0xa8>)
 8000286:	f001 f949 	bl	800151c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_D4_PIN;
 800028a:	2320      	movs	r3, #32
 800028c:	603b      	str	r3, [r7, #0]
    HAL_GPIO_Init(LCD_D4_PORT, &GPIO_InitStruct);
 800028e:	463b      	mov	r3, r7
 8000290:	4619      	mov	r1, r3
 8000292:	4811      	ldr	r0, [pc, #68]	@ (80002d8 <ILI9341_SetDataPinsOutput+0xa8>)
 8000294:	f001 f942 	bl	800151c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_D5_PIN;
 8000298:	2310      	movs	r3, #16
 800029a:	603b      	str	r3, [r7, #0]
    HAL_GPIO_Init(LCD_D5_PORT, &GPIO_InitStruct);
 800029c:	463b      	mov	r3, r7
 800029e:	4619      	mov	r1, r3
 80002a0:	480d      	ldr	r0, [pc, #52]	@ (80002d8 <ILI9341_SetDataPinsOutput+0xa8>)
 80002a2:	f001 f93b 	bl	800151c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_D6_PIN;
 80002a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80002aa:	603b      	str	r3, [r7, #0]
    HAL_GPIO_Init(LCD_D6_PORT, &GPIO_InitStruct);
 80002ac:	463b      	mov	r3, r7
 80002ae:	4619      	mov	r1, r3
 80002b0:	4809      	ldr	r0, [pc, #36]	@ (80002d8 <ILI9341_SetDataPinsOutput+0xa8>)
 80002b2:	f001 f933 	bl	800151c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = LCD_D7_PIN;
 80002b6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80002ba:	603b      	str	r3, [r7, #0]
    HAL_GPIO_Init(LCD_D7_PORT, &GPIO_InitStruct);
 80002bc:	463b      	mov	r3, r7
 80002be:	4619      	mov	r1, r3
 80002c0:	4803      	ldr	r0, [pc, #12]	@ (80002d0 <ILI9341_SetDataPinsOutput+0xa0>)
 80002c2:	f001 f92b 	bl	800151c <HAL_GPIO_Init>
}
 80002c6:	bf00      	nop
 80002c8:	3710      	adds	r7, #16
 80002ca:	46bd      	mov	sp, r7
 80002cc:	bd80      	pop	{r7, pc}
 80002ce:	bf00      	nop
 80002d0:	40010800 	.word	0x40010800
 80002d4:	40011000 	.word	0x40011000
 80002d8:	40010c00 	.word	0x40010c00

080002dc <ILI9341_WriteCommand>:
    HAL_GPIO_Init(LCD_D6_PORT, &GPIO_InitStruct);
    GPIO_InitStruct.Pin = LCD_D7_PIN;
    HAL_GPIO_Init(LCD_D7_PORT, &GPIO_InitStruct);
}

void ILI9341_WriteCommand(uint8_t cmd) {
 80002dc:	b580      	push	{r7, lr}
 80002de:	b082      	sub	sp, #8
 80002e0:	af00      	add	r7, sp, #0
 80002e2:	4603      	mov	r3, r0
 80002e4:	71fb      	strb	r3, [r7, #7]
    CS_LOW();
 80002e6:	2200      	movs	r2, #0
 80002e8:	2101      	movs	r1, #1
 80002ea:	480a      	ldr	r0, [pc, #40]	@ (8000314 <ILI9341_WriteCommand+0x38>)
 80002ec:	f001 fa9a 	bl	8001824 <HAL_GPIO_WritePin>
    RS_LOW();  // Command mode
 80002f0:	2200      	movs	r2, #0
 80002f2:	2110      	movs	r1, #16
 80002f4:	4808      	ldr	r0, [pc, #32]	@ (8000318 <ILI9341_WriteCommand+0x3c>)
 80002f6:	f001 fa95 	bl	8001824 <HAL_GPIO_WritePin>
    ILI9341_WriteData8(cmd);
 80002fa:	79fb      	ldrb	r3, [r7, #7]
 80002fc:	4618      	mov	r0, r3
 80002fe:	f7ff ff25 	bl	800014c <ILI9341_WriteData8>
    CS_HIGH();
 8000302:	2201      	movs	r2, #1
 8000304:	2101      	movs	r1, #1
 8000306:	4803      	ldr	r0, [pc, #12]	@ (8000314 <ILI9341_WriteCommand+0x38>)
 8000308:	f001 fa8c 	bl	8001824 <HAL_GPIO_WritePin>
}
 800030c:	bf00      	nop
 800030e:	3708      	adds	r7, #8
 8000310:	46bd      	mov	sp, r7
 8000312:	bd80      	pop	{r7, pc}
 8000314:	40010c00 	.word	0x40010c00
 8000318:	40010800 	.word	0x40010800

0800031c <ILI9341_WriteData>:

void ILI9341_WriteData(uint8_t data) {
 800031c:	b580      	push	{r7, lr}
 800031e:	b082      	sub	sp, #8
 8000320:	af00      	add	r7, sp, #0
 8000322:	4603      	mov	r3, r0
 8000324:	71fb      	strb	r3, [r7, #7]
    CS_LOW();
 8000326:	2200      	movs	r2, #0
 8000328:	2101      	movs	r1, #1
 800032a:	480a      	ldr	r0, [pc, #40]	@ (8000354 <ILI9341_WriteData+0x38>)
 800032c:	f001 fa7a 	bl	8001824 <HAL_GPIO_WritePin>
    RS_HIGH(); // Data mode
 8000330:	2201      	movs	r2, #1
 8000332:	2110      	movs	r1, #16
 8000334:	4808      	ldr	r0, [pc, #32]	@ (8000358 <ILI9341_WriteData+0x3c>)
 8000336:	f001 fa75 	bl	8001824 <HAL_GPIO_WritePin>
    ILI9341_WriteData8(data);
 800033a:	79fb      	ldrb	r3, [r7, #7]
 800033c:	4618      	mov	r0, r3
 800033e:	f7ff ff05 	bl	800014c <ILI9341_WriteData8>
    CS_HIGH();
 8000342:	2201      	movs	r2, #1
 8000344:	2101      	movs	r1, #1
 8000346:	4803      	ldr	r0, [pc, #12]	@ (8000354 <ILI9341_WriteData+0x38>)
 8000348:	f001 fa6c 	bl	8001824 <HAL_GPIO_WritePin>
}
 800034c:	bf00      	nop
 800034e:	3708      	adds	r7, #8
 8000350:	46bd      	mov	sp, r7
 8000352:	bd80      	pop	{r7, pc}
 8000354:	40010c00 	.word	0x40010c00
 8000358:	40010800 	.word	0x40010800

0800035c <ILI9341_WriteData16>:

void ILI9341_WriteData16(uint16_t data) {
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0
 8000362:	4603      	mov	r3, r0
 8000364:	80fb      	strh	r3, [r7, #6]
    CS_LOW();
 8000366:	2200      	movs	r2, #0
 8000368:	2101      	movs	r1, #1
 800036a:	480e      	ldr	r0, [pc, #56]	@ (80003a4 <ILI9341_WriteData16+0x48>)
 800036c:	f001 fa5a 	bl	8001824 <HAL_GPIO_WritePin>
    RS_HIGH(); // Data mode
 8000370:	2201      	movs	r2, #1
 8000372:	2110      	movs	r1, #16
 8000374:	480c      	ldr	r0, [pc, #48]	@ (80003a8 <ILI9341_WriteData16+0x4c>)
 8000376:	f001 fa55 	bl	8001824 <HAL_GPIO_WritePin>
    ILI9341_WriteData8(data >> 8);   // High byte
 800037a:	88fb      	ldrh	r3, [r7, #6]
 800037c:	0a1b      	lsrs	r3, r3, #8
 800037e:	b29b      	uxth	r3, r3
 8000380:	b2db      	uxtb	r3, r3
 8000382:	4618      	mov	r0, r3
 8000384:	f7ff fee2 	bl	800014c <ILI9341_WriteData8>
    ILI9341_WriteData8(data & 0xFF); // Low byte
 8000388:	88fb      	ldrh	r3, [r7, #6]
 800038a:	b2db      	uxtb	r3, r3
 800038c:	4618      	mov	r0, r3
 800038e:	f7ff fedd 	bl	800014c <ILI9341_WriteData8>
    CS_HIGH();
 8000392:	2201      	movs	r2, #1
 8000394:	2101      	movs	r1, #1
 8000396:	4803      	ldr	r0, [pc, #12]	@ (80003a4 <ILI9341_WriteData16+0x48>)
 8000398:	f001 fa44 	bl	8001824 <HAL_GPIO_WritePin>
}
 800039c:	bf00      	nop
 800039e:	3708      	adds	r7, #8
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	40010c00 	.word	0x40010c00
 80003a8:	40010800 	.word	0x40010800

080003ac <ILI9341_Init>:
    ILI9341_SetDataPinsOutput();

    return data;
}

void ILI9341_Init(void) {
 80003ac:	b580      	push	{r7, lr}
 80003ae:	af00      	add	r7, sp, #0
    // Initialize control pins
    RD_HIGH();
 80003b0:	2201      	movs	r2, #1
 80003b2:	2101      	movs	r1, #1
 80003b4:	4896      	ldr	r0, [pc, #600]	@ (8000610 <ILI9341_Init+0x264>)
 80003b6:	f001 fa35 	bl	8001824 <HAL_GPIO_WritePin>
    WR_HIGH();
 80003ba:	2201      	movs	r2, #1
 80003bc:	2102      	movs	r1, #2
 80003be:	4894      	ldr	r0, [pc, #592]	@ (8000610 <ILI9341_Init+0x264>)
 80003c0:	f001 fa30 	bl	8001824 <HAL_GPIO_WritePin>
    CS_HIGH();
 80003c4:	2201      	movs	r2, #1
 80003c6:	2101      	movs	r1, #1
 80003c8:	4892      	ldr	r0, [pc, #584]	@ (8000614 <ILI9341_Init+0x268>)
 80003ca:	f001 fa2b 	bl	8001824 <HAL_GPIO_WritePin>

    // Configure data pins as output initially
    ILI9341_SetDataPinsOutput();
 80003ce:	f7ff ff2f 	bl	8000230 <ILI9341_SetDataPinsOutput>

    // Hardware reset
    RST_HIGH();
 80003d2:	2201      	movs	r2, #1
 80003d4:	2102      	movs	r1, #2
 80003d6:	4890      	ldr	r0, [pc, #576]	@ (8000618 <ILI9341_Init+0x26c>)
 80003d8:	f001 fa24 	bl	8001824 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80003dc:	200a      	movs	r0, #10
 80003de:	f000 ff6b 	bl	80012b8 <HAL_Delay>
    RST_LOW();
 80003e2:	2200      	movs	r2, #0
 80003e4:	2102      	movs	r1, #2
 80003e6:	488c      	ldr	r0, [pc, #560]	@ (8000618 <ILI9341_Init+0x26c>)
 80003e8:	f001 fa1c 	bl	8001824 <HAL_GPIO_WritePin>
    HAL_Delay(10);
 80003ec:	200a      	movs	r0, #10
 80003ee:	f000 ff63 	bl	80012b8 <HAL_Delay>
    RST_HIGH();
 80003f2:	2201      	movs	r2, #1
 80003f4:	2102      	movs	r1, #2
 80003f6:	4888      	ldr	r0, [pc, #544]	@ (8000618 <ILI9341_Init+0x26c>)
 80003f8:	f001 fa14 	bl	8001824 <HAL_GPIO_WritePin>
    HAL_Delay(120);
 80003fc:	2078      	movs	r0, #120	@ 0x78
 80003fe:	f000 ff5b 	bl	80012b8 <HAL_Delay>

    // Software reset
    ILI9341_WriteCommand(ILI9341_SWRESET);
 8000402:	2001      	movs	r0, #1
 8000404:	f7ff ff6a 	bl	80002dc <ILI9341_WriteCommand>
    HAL_Delay(150);
 8000408:	2096      	movs	r0, #150	@ 0x96
 800040a:	f000 ff55 	bl	80012b8 <HAL_Delay>

    // Power control A
    ILI9341_WriteCommand(0xCB);
 800040e:	20cb      	movs	r0, #203	@ 0xcb
 8000410:	f7ff ff64 	bl	80002dc <ILI9341_WriteCommand>
    ILI9341_WriteData(0x39);
 8000414:	2039      	movs	r0, #57	@ 0x39
 8000416:	f7ff ff81 	bl	800031c <ILI9341_WriteData>
    ILI9341_WriteData(0x2C);
 800041a:	202c      	movs	r0, #44	@ 0x2c
 800041c:	f7ff ff7e 	bl	800031c <ILI9341_WriteData>
    ILI9341_WriteData(0x00);
 8000420:	2000      	movs	r0, #0
 8000422:	f7ff ff7b 	bl	800031c <ILI9341_WriteData>
    ILI9341_WriteData(0x34);
 8000426:	2034      	movs	r0, #52	@ 0x34
 8000428:	f7ff ff78 	bl	800031c <ILI9341_WriteData>
    ILI9341_WriteData(0x02);
 800042c:	2002      	movs	r0, #2
 800042e:	f7ff ff75 	bl	800031c <ILI9341_WriteData>

    // Power control B
    ILI9341_WriteCommand(0xCF);
 8000432:	20cf      	movs	r0, #207	@ 0xcf
 8000434:	f7ff ff52 	bl	80002dc <ILI9341_WriteCommand>
    ILI9341_WriteData(0x00);
 8000438:	2000      	movs	r0, #0
 800043a:	f7ff ff6f 	bl	800031c <ILI9341_WriteData>
    ILI9341_WriteData(0xC1);
 800043e:	20c1      	movs	r0, #193	@ 0xc1
 8000440:	f7ff ff6c 	bl	800031c <ILI9341_WriteData>
    ILI9341_WriteData(0x30);
 8000444:	2030      	movs	r0, #48	@ 0x30
 8000446:	f7ff ff69 	bl	800031c <ILI9341_WriteData>

    // Driver timing control A
    ILI9341_WriteCommand(0xE8);
 800044a:	20e8      	movs	r0, #232	@ 0xe8
 800044c:	f7ff ff46 	bl	80002dc <ILI9341_WriteCommand>
    ILI9341_WriteData(0x85);
 8000450:	2085      	movs	r0, #133	@ 0x85
 8000452:	f7ff ff63 	bl	800031c <ILI9341_WriteData>
    ILI9341_WriteData(0x00);
 8000456:	2000      	movs	r0, #0
 8000458:	f7ff ff60 	bl	800031c <ILI9341_WriteData>
    ILI9341_WriteData(0x78);
 800045c:	2078      	movs	r0, #120	@ 0x78
 800045e:	f7ff ff5d 	bl	800031c <ILI9341_WriteData>

    // Driver timing control B
    ILI9341_WriteCommand(0xEA);
 8000462:	20ea      	movs	r0, #234	@ 0xea
 8000464:	f7ff ff3a 	bl	80002dc <ILI9341_WriteCommand>
    ILI9341_WriteData(0x00);
 8000468:	2000      	movs	r0, #0
 800046a:	f7ff ff57 	bl	800031c <ILI9341_WriteData>
    ILI9341_WriteData(0x00);
 800046e:	2000      	movs	r0, #0
 8000470:	f7ff ff54 	bl	800031c <ILI9341_WriteData>

    // Power on sequence control
    ILI9341_WriteCommand(0xED);
 8000474:	20ed      	movs	r0, #237	@ 0xed
 8000476:	f7ff ff31 	bl	80002dc <ILI9341_WriteCommand>
    ILI9341_WriteData(0x64);
 800047a:	2064      	movs	r0, #100	@ 0x64
 800047c:	f7ff ff4e 	bl	800031c <ILI9341_WriteData>
    ILI9341_WriteData(0x03);
 8000480:	2003      	movs	r0, #3
 8000482:	f7ff ff4b 	bl	800031c <ILI9341_WriteData>
    ILI9341_WriteData(0x12);
 8000486:	2012      	movs	r0, #18
 8000488:	f7ff ff48 	bl	800031c <ILI9341_WriteData>
    ILI9341_WriteData(0x81);
 800048c:	2081      	movs	r0, #129	@ 0x81
 800048e:	f7ff ff45 	bl	800031c <ILI9341_WriteData>

    // Pump ratio control
    ILI9341_WriteCommand(0xF7);
 8000492:	20f7      	movs	r0, #247	@ 0xf7
 8000494:	f7ff ff22 	bl	80002dc <ILI9341_WriteCommand>
    ILI9341_WriteData(0x20);
 8000498:	2020      	movs	r0, #32
 800049a:	f7ff ff3f 	bl	800031c <ILI9341_WriteData>

    // Power control 1
    ILI9341_WriteCommand(ILI9341_PWCTR1);
 800049e:	20c0      	movs	r0, #192	@ 0xc0
 80004a0:	f7ff ff1c 	bl	80002dc <ILI9341_WriteCommand>
    ILI9341_WriteData(0x23);
 80004a4:	2023      	movs	r0, #35	@ 0x23
 80004a6:	f7ff ff39 	bl	800031c <ILI9341_WriteData>

    // Power control 2
    ILI9341_WriteCommand(ILI9341_PWCTR2);
 80004aa:	20c1      	movs	r0, #193	@ 0xc1
 80004ac:	f7ff ff16 	bl	80002dc <ILI9341_WriteCommand>
    ILI9341_WriteData(0x10);
 80004b0:	2010      	movs	r0, #16
 80004b2:	f7ff ff33 	bl	800031c <ILI9341_WriteData>

    // VCOM control 1
    ILI9341_WriteCommand(ILI9341_VMCTR1);
 80004b6:	20c5      	movs	r0, #197	@ 0xc5
 80004b8:	f7ff ff10 	bl	80002dc <ILI9341_WriteCommand>
    ILI9341_WriteData(0x3E);
 80004bc:	203e      	movs	r0, #62	@ 0x3e
 80004be:	f7ff ff2d 	bl	800031c <ILI9341_WriteData>
    ILI9341_WriteData(0x28);
 80004c2:	2028      	movs	r0, #40	@ 0x28
 80004c4:	f7ff ff2a 	bl	800031c <ILI9341_WriteData>

    // VCOM control 2
    ILI9341_WriteCommand(ILI9341_VMCTR2);
 80004c8:	20c7      	movs	r0, #199	@ 0xc7
 80004ca:	f7ff ff07 	bl	80002dc <ILI9341_WriteCommand>
    ILI9341_WriteData(0x86);
 80004ce:	2086      	movs	r0, #134	@ 0x86
 80004d0:	f7ff ff24 	bl	800031c <ILI9341_WriteData>

    // Memory access control
    ILI9341_WriteCommand(ILI9341_MADCTL);
 80004d4:	2036      	movs	r0, #54	@ 0x36
 80004d6:	f7ff ff01 	bl	80002dc <ILI9341_WriteCommand>
    ILI9341_WriteData(0x48);
 80004da:	2048      	movs	r0, #72	@ 0x48
 80004dc:	f7ff ff1e 	bl	800031c <ILI9341_WriteData>

    // Pixel format
    ILI9341_WriteCommand(ILI9341_PIXFMT);
 80004e0:	203a      	movs	r0, #58	@ 0x3a
 80004e2:	f7ff fefb 	bl	80002dc <ILI9341_WriteCommand>
    ILI9341_WriteData(0x55);
 80004e6:	2055      	movs	r0, #85	@ 0x55
 80004e8:	f7ff ff18 	bl	800031c <ILI9341_WriteData>

    // Frame rate control
    ILI9341_WriteCommand(ILI9341_FRMCTR1);
 80004ec:	20b1      	movs	r0, #177	@ 0xb1
 80004ee:	f7ff fef5 	bl	80002dc <ILI9341_WriteCommand>
    ILI9341_WriteData(0x00);
 80004f2:	2000      	movs	r0, #0
 80004f4:	f7ff ff12 	bl	800031c <ILI9341_WriteData>
    ILI9341_WriteData(0x18);
 80004f8:	2018      	movs	r0, #24
 80004fa:	f7ff ff0f 	bl	800031c <ILI9341_WriteData>

    // Display function control
    ILI9341_WriteCommand(ILI9341_DFUNCTR);
 80004fe:	20b6      	movs	r0, #182	@ 0xb6
 8000500:	f7ff feec 	bl	80002dc <ILI9341_WriteCommand>
    ILI9341_WriteData(0x08);
 8000504:	2008      	movs	r0, #8
 8000506:	f7ff ff09 	bl	800031c <ILI9341_WriteData>
    ILI9341_WriteData(0x82);
 800050a:	2082      	movs	r0, #130	@ 0x82
 800050c:	f7ff ff06 	bl	800031c <ILI9341_WriteData>
    ILI9341_WriteData(0x27);
 8000510:	2027      	movs	r0, #39	@ 0x27
 8000512:	f7ff ff03 	bl	800031c <ILI9341_WriteData>

    // Gamma function disable
    ILI9341_WriteCommand(0xF2);
 8000516:	20f2      	movs	r0, #242	@ 0xf2
 8000518:	f7ff fee0 	bl	80002dc <ILI9341_WriteCommand>
    ILI9341_WriteData(0x00);
 800051c:	2000      	movs	r0, #0
 800051e:	f7ff fefd 	bl	800031c <ILI9341_WriteData>

    // Gamma curve
    ILI9341_WriteCommand(ILI9341_GAMMASET);
 8000522:	2026      	movs	r0, #38	@ 0x26
 8000524:	f7ff feda 	bl	80002dc <ILI9341_WriteCommand>
    ILI9341_WriteData(0x01);
 8000528:	2001      	movs	r0, #1
 800052a:	f7ff fef7 	bl	800031c <ILI9341_WriteData>

    // Positive gamma correction
    ILI9341_WriteCommand(ILI9341_GMCTRP1);
 800052e:	20e0      	movs	r0, #224	@ 0xe0
 8000530:	f7ff fed4 	bl	80002dc <ILI9341_WriteCommand>
    ILI9341_WriteData(0x0F);
 8000534:	200f      	movs	r0, #15
 8000536:	f7ff fef1 	bl	800031c <ILI9341_WriteData>
    ILI9341_WriteData(0x31);
 800053a:	2031      	movs	r0, #49	@ 0x31
 800053c:	f7ff feee 	bl	800031c <ILI9341_WriteData>
    ILI9341_WriteData(0x2B);
 8000540:	202b      	movs	r0, #43	@ 0x2b
 8000542:	f7ff feeb 	bl	800031c <ILI9341_WriteData>
    ILI9341_WriteData(0x0C);
 8000546:	200c      	movs	r0, #12
 8000548:	f7ff fee8 	bl	800031c <ILI9341_WriteData>
    ILI9341_WriteData(0x0E);
 800054c:	200e      	movs	r0, #14
 800054e:	f7ff fee5 	bl	800031c <ILI9341_WriteData>
    ILI9341_WriteData(0x08);
 8000552:	2008      	movs	r0, #8
 8000554:	f7ff fee2 	bl	800031c <ILI9341_WriteData>
    ILI9341_WriteData(0x4E);
 8000558:	204e      	movs	r0, #78	@ 0x4e
 800055a:	f7ff fedf 	bl	800031c <ILI9341_WriteData>
    ILI9341_WriteData(0xF1);
 800055e:	20f1      	movs	r0, #241	@ 0xf1
 8000560:	f7ff fedc 	bl	800031c <ILI9341_WriteData>
    ILI9341_WriteData(0x37);
 8000564:	2037      	movs	r0, #55	@ 0x37
 8000566:	f7ff fed9 	bl	800031c <ILI9341_WriteData>
    ILI9341_WriteData(0x07);
 800056a:	2007      	movs	r0, #7
 800056c:	f7ff fed6 	bl	800031c <ILI9341_WriteData>
    ILI9341_WriteData(0x10);
 8000570:	2010      	movs	r0, #16
 8000572:	f7ff fed3 	bl	800031c <ILI9341_WriteData>
    ILI9341_WriteData(0x03);
 8000576:	2003      	movs	r0, #3
 8000578:	f7ff fed0 	bl	800031c <ILI9341_WriteData>
    ILI9341_WriteData(0x0E);
 800057c:	200e      	movs	r0, #14
 800057e:	f7ff fecd 	bl	800031c <ILI9341_WriteData>
    ILI9341_WriteData(0x09);
 8000582:	2009      	movs	r0, #9
 8000584:	f7ff feca 	bl	800031c <ILI9341_WriteData>
    ILI9341_WriteData(0x00);
 8000588:	2000      	movs	r0, #0
 800058a:	f7ff fec7 	bl	800031c <ILI9341_WriteData>

    // Negative gamma correction
    ILI9341_WriteCommand(ILI9341_GMCTRN1);
 800058e:	20e1      	movs	r0, #225	@ 0xe1
 8000590:	f7ff fea4 	bl	80002dc <ILI9341_WriteCommand>
    ILI9341_WriteData(0x00);
 8000594:	2000      	movs	r0, #0
 8000596:	f7ff fec1 	bl	800031c <ILI9341_WriteData>
    ILI9341_WriteData(0x0E);
 800059a:	200e      	movs	r0, #14
 800059c:	f7ff febe 	bl	800031c <ILI9341_WriteData>
    ILI9341_WriteData(0x14);
 80005a0:	2014      	movs	r0, #20
 80005a2:	f7ff febb 	bl	800031c <ILI9341_WriteData>
    ILI9341_WriteData(0x03);
 80005a6:	2003      	movs	r0, #3
 80005a8:	f7ff feb8 	bl	800031c <ILI9341_WriteData>
    ILI9341_WriteData(0x11);
 80005ac:	2011      	movs	r0, #17
 80005ae:	f7ff feb5 	bl	800031c <ILI9341_WriteData>
    ILI9341_WriteData(0x07);
 80005b2:	2007      	movs	r0, #7
 80005b4:	f7ff feb2 	bl	800031c <ILI9341_WriteData>
    ILI9341_WriteData(0x31);
 80005b8:	2031      	movs	r0, #49	@ 0x31
 80005ba:	f7ff feaf 	bl	800031c <ILI9341_WriteData>
    ILI9341_WriteData(0xC1);
 80005be:	20c1      	movs	r0, #193	@ 0xc1
 80005c0:	f7ff feac 	bl	800031c <ILI9341_WriteData>
    ILI9341_WriteData(0x48);
 80005c4:	2048      	movs	r0, #72	@ 0x48
 80005c6:	f7ff fea9 	bl	800031c <ILI9341_WriteData>
    ILI9341_WriteData(0x08);
 80005ca:	2008      	movs	r0, #8
 80005cc:	f7ff fea6 	bl	800031c <ILI9341_WriteData>
    ILI9341_WriteData(0x0F);
 80005d0:	200f      	movs	r0, #15
 80005d2:	f7ff fea3 	bl	800031c <ILI9341_WriteData>
    ILI9341_WriteData(0x0C);
 80005d6:	200c      	movs	r0, #12
 80005d8:	f7ff fea0 	bl	800031c <ILI9341_WriteData>
    ILI9341_WriteData(0x31);
 80005dc:	2031      	movs	r0, #49	@ 0x31
 80005de:	f7ff fe9d 	bl	800031c <ILI9341_WriteData>
    ILI9341_WriteData(0x36);
 80005e2:	2036      	movs	r0, #54	@ 0x36
 80005e4:	f7ff fe9a 	bl	800031c <ILI9341_WriteData>
    ILI9341_WriteData(0x0F);
 80005e8:	200f      	movs	r0, #15
 80005ea:	f7ff fe97 	bl	800031c <ILI9341_WriteData>

    // Exit sleep mode
    ILI9341_WriteCommand(ILI9341_SLPOUT);
 80005ee:	2011      	movs	r0, #17
 80005f0:	f7ff fe74 	bl	80002dc <ILI9341_WriteCommand>
    HAL_Delay(120);
 80005f4:	2078      	movs	r0, #120	@ 0x78
 80005f6:	f000 fe5f 	bl	80012b8 <HAL_Delay>

    // Display on
    ILI9341_WriteCommand(ILI9341_DISPON);
 80005fa:	2029      	movs	r0, #41	@ 0x29
 80005fc:	f7ff fe6e 	bl	80002dc <ILI9341_WriteCommand>
    HAL_Delay(50);
 8000600:	2032      	movs	r0, #50	@ 0x32
 8000602:	f000 fe59 	bl	80012b8 <HAL_Delay>

    // Fill screen with black
    ILI9341_Fill(BLACK);
 8000606:	2000      	movs	r0, #0
 8000608:	f000 f853 	bl	80006b2 <ILI9341_Fill>
}
 800060c:	bf00      	nop
 800060e:	bd80      	pop	{r7, pc}
 8000610:	40010800 	.word	0x40010800
 8000614:	40010c00 	.word	0x40010c00
 8000618:	40011000 	.word	0x40011000

0800061c <ILI9341_SetAddress>:

void ILI9341_SetAddress(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 800061c:	b590      	push	{r4, r7, lr}
 800061e:	b083      	sub	sp, #12
 8000620:	af00      	add	r7, sp, #0
 8000622:	4604      	mov	r4, r0
 8000624:	4608      	mov	r0, r1
 8000626:	4611      	mov	r1, r2
 8000628:	461a      	mov	r2, r3
 800062a:	4623      	mov	r3, r4
 800062c:	80fb      	strh	r3, [r7, #6]
 800062e:	4603      	mov	r3, r0
 8000630:	80bb      	strh	r3, [r7, #4]
 8000632:	460b      	mov	r3, r1
 8000634:	807b      	strh	r3, [r7, #2]
 8000636:	4613      	mov	r3, r2
 8000638:	803b      	strh	r3, [r7, #0]
    ILI9341_WriteCommand(ILI9341_CASET);
 800063a:	202a      	movs	r0, #42	@ 0x2a
 800063c:	f7ff fe4e 	bl	80002dc <ILI9341_WriteCommand>
    ILI9341_WriteData16(x1);
 8000640:	88fb      	ldrh	r3, [r7, #6]
 8000642:	4618      	mov	r0, r3
 8000644:	f7ff fe8a 	bl	800035c <ILI9341_WriteData16>
    ILI9341_WriteData16(x2);
 8000648:	887b      	ldrh	r3, [r7, #2]
 800064a:	4618      	mov	r0, r3
 800064c:	f7ff fe86 	bl	800035c <ILI9341_WriteData16>

    ILI9341_WriteCommand(ILI9341_PASET);
 8000650:	202b      	movs	r0, #43	@ 0x2b
 8000652:	f7ff fe43 	bl	80002dc <ILI9341_WriteCommand>
    ILI9341_WriteData16(y1);
 8000656:	88bb      	ldrh	r3, [r7, #4]
 8000658:	4618      	mov	r0, r3
 800065a:	f7ff fe7f 	bl	800035c <ILI9341_WriteData16>
    ILI9341_WriteData16(y2);
 800065e:	883b      	ldrh	r3, [r7, #0]
 8000660:	4618      	mov	r0, r3
 8000662:	f7ff fe7b 	bl	800035c <ILI9341_WriteData16>

    ILI9341_WriteCommand(ILI9341_RAMWR);
 8000666:	202c      	movs	r0, #44	@ 0x2c
 8000668:	f7ff fe38 	bl	80002dc <ILI9341_WriteCommand>
}
 800066c:	bf00      	nop
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	bd90      	pop	{r4, r7, pc}

08000674 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(uint16_t x, uint16_t y, uint16_t color) {
 8000674:	b580      	push	{r7, lr}
 8000676:	b082      	sub	sp, #8
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	80fb      	strh	r3, [r7, #6]
 800067e:	460b      	mov	r3, r1
 8000680:	80bb      	strh	r3, [r7, #4]
 8000682:	4613      	mov	r3, r2
 8000684:	807b      	strh	r3, [r7, #2]
    if (x >= ILI9341_WIDTH || y >= ILI9341_HEIGHT) return;
 8000686:	88fb      	ldrh	r3, [r7, #6]
 8000688:	2bef      	cmp	r3, #239	@ 0xef
 800068a:	d80e      	bhi.n	80006aa <ILI9341_DrawPixel+0x36>
 800068c:	88bb      	ldrh	r3, [r7, #4]
 800068e:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000692:	d20a      	bcs.n	80006aa <ILI9341_DrawPixel+0x36>

    ILI9341_SetAddress(x, y, x, y);
 8000694:	88bb      	ldrh	r3, [r7, #4]
 8000696:	88fa      	ldrh	r2, [r7, #6]
 8000698:	88b9      	ldrh	r1, [r7, #4]
 800069a:	88f8      	ldrh	r0, [r7, #6]
 800069c:	f7ff ffbe 	bl	800061c <ILI9341_SetAddress>
    ILI9341_WriteData16(color);
 80006a0:	887b      	ldrh	r3, [r7, #2]
 80006a2:	4618      	mov	r0, r3
 80006a4:	f7ff fe5a 	bl	800035c <ILI9341_WriteData16>
 80006a8:	e000      	b.n	80006ac <ILI9341_DrawPixel+0x38>
    if (x >= ILI9341_WIDTH || y >= ILI9341_HEIGHT) return;
 80006aa:	bf00      	nop
}
 80006ac:	3708      	adds	r7, #8
 80006ae:	46bd      	mov	sp, r7
 80006b0:	bd80      	pop	{r7, pc}

080006b2 <ILI9341_Fill>:

void ILI9341_Fill(uint16_t color) {
 80006b2:	b580      	push	{r7, lr}
 80006b4:	b084      	sub	sp, #16
 80006b6:	af02      	add	r7, sp, #8
 80006b8:	4603      	mov	r3, r0
 80006ba:	80fb      	strh	r3, [r7, #6]
    ILI9341_FillRect(0, 0, ILI9341_WIDTH, ILI9341_HEIGHT, color);
 80006bc:	88fb      	ldrh	r3, [r7, #6]
 80006be:	9300      	str	r3, [sp, #0]
 80006c0:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 80006c4:	22f0      	movs	r2, #240	@ 0xf0
 80006c6:	2100      	movs	r1, #0
 80006c8:	2000      	movs	r0, #0
 80006ca:	f000 f805 	bl	80006d8 <ILI9341_FillRect>
}
 80006ce:	bf00      	nop
 80006d0:	3708      	adds	r7, #8
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
	...

080006d8 <ILI9341_FillRect>:

void ILI9341_FillRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 80006d8:	b590      	push	{r4, r7, lr}
 80006da:	b085      	sub	sp, #20
 80006dc:	af00      	add	r7, sp, #0
 80006de:	4604      	mov	r4, r0
 80006e0:	4608      	mov	r0, r1
 80006e2:	4611      	mov	r1, r2
 80006e4:	461a      	mov	r2, r3
 80006e6:	4623      	mov	r3, r4
 80006e8:	80fb      	strh	r3, [r7, #6]
 80006ea:	4603      	mov	r3, r0
 80006ec:	80bb      	strh	r3, [r7, #4]
 80006ee:	460b      	mov	r3, r1
 80006f0:	807b      	strh	r3, [r7, #2]
 80006f2:	4613      	mov	r3, r2
 80006f4:	803b      	strh	r3, [r7, #0]
    if (x >= ILI9341_WIDTH || y >= ILI9341_HEIGHT) return;
 80006f6:	88fb      	ldrh	r3, [r7, #6]
 80006f8:	2bef      	cmp	r3, #239	@ 0xef
 80006fa:	d851      	bhi.n	80007a0 <ILI9341_FillRect+0xc8>
 80006fc:	88bb      	ldrh	r3, [r7, #4]
 80006fe:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000702:	d24d      	bcs.n	80007a0 <ILI9341_FillRect+0xc8>
    if ((x + w - 1) >= ILI9341_WIDTH) w = ILI9341_WIDTH - x;
 8000704:	88fa      	ldrh	r2, [r7, #6]
 8000706:	887b      	ldrh	r3, [r7, #2]
 8000708:	4413      	add	r3, r2
 800070a:	2bf0      	cmp	r3, #240	@ 0xf0
 800070c:	dd03      	ble.n	8000716 <ILI9341_FillRect+0x3e>
 800070e:	88fb      	ldrh	r3, [r7, #6]
 8000710:	f1c3 03f0 	rsb	r3, r3, #240	@ 0xf0
 8000714:	807b      	strh	r3, [r7, #2]
    if ((y + h - 1) >= ILI9341_HEIGHT) h = ILI9341_HEIGHT - y;
 8000716:	88ba      	ldrh	r2, [r7, #4]
 8000718:	883b      	ldrh	r3, [r7, #0]
 800071a:	4413      	add	r3, r2
 800071c:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 8000720:	dd03      	ble.n	800072a <ILI9341_FillRect+0x52>
 8000722:	88bb      	ldrh	r3, [r7, #4]
 8000724:	f5c3 73a0 	rsb	r3, r3, #320	@ 0x140
 8000728:	803b      	strh	r3, [r7, #0]

    ILI9341_SetAddress(x, y, x + w - 1, y + h - 1);
 800072a:	88fa      	ldrh	r2, [r7, #6]
 800072c:	887b      	ldrh	r3, [r7, #2]
 800072e:	4413      	add	r3, r2
 8000730:	b29b      	uxth	r3, r3
 8000732:	3b01      	subs	r3, #1
 8000734:	b29c      	uxth	r4, r3
 8000736:	88ba      	ldrh	r2, [r7, #4]
 8000738:	883b      	ldrh	r3, [r7, #0]
 800073a:	4413      	add	r3, r2
 800073c:	b29b      	uxth	r3, r3
 800073e:	3b01      	subs	r3, #1
 8000740:	b29b      	uxth	r3, r3
 8000742:	88b9      	ldrh	r1, [r7, #4]
 8000744:	88f8      	ldrh	r0, [r7, #6]
 8000746:	4622      	mov	r2, r4
 8000748:	f7ff ff68 	bl	800061c <ILI9341_SetAddress>

    CS_LOW();
 800074c:	2200      	movs	r2, #0
 800074e:	2101      	movs	r1, #1
 8000750:	4815      	ldr	r0, [pc, #84]	@ (80007a8 <ILI9341_FillRect+0xd0>)
 8000752:	f001 f867 	bl	8001824 <HAL_GPIO_WritePin>
    RS_HIGH(); // Data mode
 8000756:	2201      	movs	r2, #1
 8000758:	2110      	movs	r1, #16
 800075a:	4814      	ldr	r0, [pc, #80]	@ (80007ac <ILI9341_FillRect+0xd4>)
 800075c:	f001 f862 	bl	8001824 <HAL_GPIO_WritePin>

    for (uint32_t i = 0; i < w * h; i++) {
 8000760:	2300      	movs	r3, #0
 8000762:	60fb      	str	r3, [r7, #12]
 8000764:	e00e      	b.n	8000784 <ILI9341_FillRect+0xac>
        ILI9341_WriteData8(color >> 8);   // High byte
 8000766:	8c3b      	ldrh	r3, [r7, #32]
 8000768:	0a1b      	lsrs	r3, r3, #8
 800076a:	b29b      	uxth	r3, r3
 800076c:	b2db      	uxtb	r3, r3
 800076e:	4618      	mov	r0, r3
 8000770:	f7ff fcec 	bl	800014c <ILI9341_WriteData8>
        ILI9341_WriteData8(color & 0xFF); // Low byte
 8000774:	8c3b      	ldrh	r3, [r7, #32]
 8000776:	b2db      	uxtb	r3, r3
 8000778:	4618      	mov	r0, r3
 800077a:	f7ff fce7 	bl	800014c <ILI9341_WriteData8>
    for (uint32_t i = 0; i < w * h; i++) {
 800077e:	68fb      	ldr	r3, [r7, #12]
 8000780:	3301      	adds	r3, #1
 8000782:	60fb      	str	r3, [r7, #12]
 8000784:	887b      	ldrh	r3, [r7, #2]
 8000786:	883a      	ldrh	r2, [r7, #0]
 8000788:	fb02 f303 	mul.w	r3, r2, r3
 800078c:	461a      	mov	r2, r3
 800078e:	68fb      	ldr	r3, [r7, #12]
 8000790:	4293      	cmp	r3, r2
 8000792:	d3e8      	bcc.n	8000766 <ILI9341_FillRect+0x8e>
    }

    CS_HIGH();
 8000794:	2201      	movs	r2, #1
 8000796:	2101      	movs	r1, #1
 8000798:	4803      	ldr	r0, [pc, #12]	@ (80007a8 <ILI9341_FillRect+0xd0>)
 800079a:	f001 f843 	bl	8001824 <HAL_GPIO_WritePin>
 800079e:	e000      	b.n	80007a2 <ILI9341_FillRect+0xca>
    if (x >= ILI9341_WIDTH || y >= ILI9341_HEIGHT) return;
 80007a0:	bf00      	nop
}
 80007a2:	3714      	adds	r7, #20
 80007a4:	46bd      	mov	sp, r7
 80007a6:	bd90      	pop	{r4, r7, pc}
 80007a8:	40010c00 	.word	0x40010c00
 80007ac:	40010800 	.word	0x40010800

080007b0 <ILI9341_DrawLine>:

void ILI9341_DrawLine(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color) {
 80007b0:	b590      	push	{r4, r7, lr}
 80007b2:	b087      	sub	sp, #28
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	4604      	mov	r4, r0
 80007b8:	4608      	mov	r0, r1
 80007ba:	4611      	mov	r1, r2
 80007bc:	461a      	mov	r2, r3
 80007be:	4623      	mov	r3, r4
 80007c0:	80fb      	strh	r3, [r7, #6]
 80007c2:	4603      	mov	r3, r0
 80007c4:	80bb      	strh	r3, [r7, #4]
 80007c6:	460b      	mov	r3, r1
 80007c8:	807b      	strh	r3, [r7, #2]
 80007ca:	4613      	mov	r3, r2
 80007cc:	803b      	strh	r3, [r7, #0]
    int16_t dx = abs(x1 - x0);
 80007ce:	887a      	ldrh	r2, [r7, #2]
 80007d0:	88fb      	ldrh	r3, [r7, #6]
 80007d2:	1ad3      	subs	r3, r2, r3
 80007d4:	2b00      	cmp	r3, #0
 80007d6:	bfb8      	it	lt
 80007d8:	425b      	neglt	r3, r3
 80007da:	82bb      	strh	r3, [r7, #20]
    int16_t dy = abs(y1 - y0);
 80007dc:	883a      	ldrh	r2, [r7, #0]
 80007de:	88bb      	ldrh	r3, [r7, #4]
 80007e0:	1ad3      	subs	r3, r2, r3
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	bfb8      	it	lt
 80007e6:	425b      	neglt	r3, r3
 80007e8:	827b      	strh	r3, [r7, #18]
    int16_t sx = (x0 < x1) ? 1 : -1;
 80007ea:	88fa      	ldrh	r2, [r7, #6]
 80007ec:	887b      	ldrh	r3, [r7, #2]
 80007ee:	429a      	cmp	r2, r3
 80007f0:	d201      	bcs.n	80007f6 <ILI9341_DrawLine+0x46>
 80007f2:	2301      	movs	r3, #1
 80007f4:	e001      	b.n	80007fa <ILI9341_DrawLine+0x4a>
 80007f6:	f04f 33ff 	mov.w	r3, #4294967295
 80007fa:	823b      	strh	r3, [r7, #16]
    int16_t sy = (y0 < y1) ? 1 : -1;
 80007fc:	88ba      	ldrh	r2, [r7, #4]
 80007fe:	883b      	ldrh	r3, [r7, #0]
 8000800:	429a      	cmp	r2, r3
 8000802:	d201      	bcs.n	8000808 <ILI9341_DrawLine+0x58>
 8000804:	2301      	movs	r3, #1
 8000806:	e001      	b.n	800080c <ILI9341_DrawLine+0x5c>
 8000808:	f04f 33ff 	mov.w	r3, #4294967295
 800080c:	81fb      	strh	r3, [r7, #14]
    int16_t err = dx - dy;
 800080e:	8aba      	ldrh	r2, [r7, #20]
 8000810:	8a7b      	ldrh	r3, [r7, #18]
 8000812:	1ad3      	subs	r3, r2, r3
 8000814:	b29b      	uxth	r3, r3
 8000816:	82fb      	strh	r3, [r7, #22]

    while (1) {
        ILI9341_DrawPixel(x0, y0, color);
 8000818:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 800081a:	88b9      	ldrh	r1, [r7, #4]
 800081c:	88fb      	ldrh	r3, [r7, #6]
 800081e:	4618      	mov	r0, r3
 8000820:	f7ff ff28 	bl	8000674 <ILI9341_DrawPixel>

        if (x0 == x1 && y0 == y1) break;
 8000824:	88fa      	ldrh	r2, [r7, #6]
 8000826:	887b      	ldrh	r3, [r7, #2]
 8000828:	429a      	cmp	r2, r3
 800082a:	d103      	bne.n	8000834 <ILI9341_DrawLine+0x84>
 800082c:	88ba      	ldrh	r2, [r7, #4]
 800082e:	883b      	ldrh	r3, [r7, #0]
 8000830:	429a      	cmp	r2, r3
 8000832:	d023      	beq.n	800087c <ILI9341_DrawLine+0xcc>

        int16_t e2 = 2 * err;
 8000834:	8afb      	ldrh	r3, [r7, #22]
 8000836:	005b      	lsls	r3, r3, #1
 8000838:	b29b      	uxth	r3, r3
 800083a:	81bb      	strh	r3, [r7, #12]
        if (e2 > -dy) {
 800083c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000840:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000844:	425b      	negs	r3, r3
 8000846:	429a      	cmp	r2, r3
 8000848:	dd08      	ble.n	800085c <ILI9341_DrawLine+0xac>
            err -= dy;
 800084a:	8afa      	ldrh	r2, [r7, #22]
 800084c:	8a7b      	ldrh	r3, [r7, #18]
 800084e:	1ad3      	subs	r3, r2, r3
 8000850:	b29b      	uxth	r3, r3
 8000852:	82fb      	strh	r3, [r7, #22]
            x0 += sx;
 8000854:	8a3a      	ldrh	r2, [r7, #16]
 8000856:	88fb      	ldrh	r3, [r7, #6]
 8000858:	4413      	add	r3, r2
 800085a:	80fb      	strh	r3, [r7, #6]
        }
        if (e2 < dx) {
 800085c:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000860:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000864:	429a      	cmp	r2, r3
 8000866:	dad7      	bge.n	8000818 <ILI9341_DrawLine+0x68>
            err += dx;
 8000868:	8afa      	ldrh	r2, [r7, #22]
 800086a:	8abb      	ldrh	r3, [r7, #20]
 800086c:	4413      	add	r3, r2
 800086e:	b29b      	uxth	r3, r3
 8000870:	82fb      	strh	r3, [r7, #22]
            y0 += sy;
 8000872:	89fa      	ldrh	r2, [r7, #14]
 8000874:	88bb      	ldrh	r3, [r7, #4]
 8000876:	4413      	add	r3, r2
 8000878:	80bb      	strh	r3, [r7, #4]
    while (1) {
 800087a:	e7cd      	b.n	8000818 <ILI9341_DrawLine+0x68>
        if (x0 == x1 && y0 == y1) break;
 800087c:	bf00      	nop
        }
    }
}
 800087e:	bf00      	nop
 8000880:	371c      	adds	r7, #28
 8000882:	46bd      	mov	sp, r7
 8000884:	bd90      	pop	{r4, r7, pc}

08000886 <ILI9341_DrawRect>:

void ILI9341_DrawRect(uint16_t x, uint16_t y, uint16_t w, uint16_t h, uint16_t color) {
 8000886:	b590      	push	{r4, r7, lr}
 8000888:	b085      	sub	sp, #20
 800088a:	af02      	add	r7, sp, #8
 800088c:	4604      	mov	r4, r0
 800088e:	4608      	mov	r0, r1
 8000890:	4611      	mov	r1, r2
 8000892:	461a      	mov	r2, r3
 8000894:	4623      	mov	r3, r4
 8000896:	80fb      	strh	r3, [r7, #6]
 8000898:	4603      	mov	r3, r0
 800089a:	80bb      	strh	r3, [r7, #4]
 800089c:	460b      	mov	r3, r1
 800089e:	807b      	strh	r3, [r7, #2]
 80008a0:	4613      	mov	r3, r2
 80008a2:	803b      	strh	r3, [r7, #0]
    ILI9341_DrawLine(x, y, x + w - 1, y, color);
 80008a4:	88fa      	ldrh	r2, [r7, #6]
 80008a6:	887b      	ldrh	r3, [r7, #2]
 80008a8:	4413      	add	r3, r2
 80008aa:	b29b      	uxth	r3, r3
 80008ac:	3b01      	subs	r3, #1
 80008ae:	b29a      	uxth	r2, r3
 80008b0:	88bc      	ldrh	r4, [r7, #4]
 80008b2:	88b9      	ldrh	r1, [r7, #4]
 80008b4:	88f8      	ldrh	r0, [r7, #6]
 80008b6:	8b3b      	ldrh	r3, [r7, #24]
 80008b8:	9300      	str	r3, [sp, #0]
 80008ba:	4623      	mov	r3, r4
 80008bc:	f7ff ff78 	bl	80007b0 <ILI9341_DrawLine>
    ILI9341_DrawLine(x + w - 1, y, x + w - 1, y + h - 1, color);
 80008c0:	88fa      	ldrh	r2, [r7, #6]
 80008c2:	887b      	ldrh	r3, [r7, #2]
 80008c4:	4413      	add	r3, r2
 80008c6:	b29b      	uxth	r3, r3
 80008c8:	3b01      	subs	r3, #1
 80008ca:	b298      	uxth	r0, r3
 80008cc:	88fa      	ldrh	r2, [r7, #6]
 80008ce:	887b      	ldrh	r3, [r7, #2]
 80008d0:	4413      	add	r3, r2
 80008d2:	b29b      	uxth	r3, r3
 80008d4:	3b01      	subs	r3, #1
 80008d6:	b29c      	uxth	r4, r3
 80008d8:	88ba      	ldrh	r2, [r7, #4]
 80008da:	883b      	ldrh	r3, [r7, #0]
 80008dc:	4413      	add	r3, r2
 80008de:	b29b      	uxth	r3, r3
 80008e0:	3b01      	subs	r3, #1
 80008e2:	b29a      	uxth	r2, r3
 80008e4:	88b9      	ldrh	r1, [r7, #4]
 80008e6:	8b3b      	ldrh	r3, [r7, #24]
 80008e8:	9300      	str	r3, [sp, #0]
 80008ea:	4613      	mov	r3, r2
 80008ec:	4622      	mov	r2, r4
 80008ee:	f7ff ff5f 	bl	80007b0 <ILI9341_DrawLine>
    ILI9341_DrawLine(x + w - 1, y + h - 1, x, y + h - 1, color);
 80008f2:	88fa      	ldrh	r2, [r7, #6]
 80008f4:	887b      	ldrh	r3, [r7, #2]
 80008f6:	4413      	add	r3, r2
 80008f8:	b29b      	uxth	r3, r3
 80008fa:	3b01      	subs	r3, #1
 80008fc:	b298      	uxth	r0, r3
 80008fe:	88ba      	ldrh	r2, [r7, #4]
 8000900:	883b      	ldrh	r3, [r7, #0]
 8000902:	4413      	add	r3, r2
 8000904:	b29b      	uxth	r3, r3
 8000906:	3b01      	subs	r3, #1
 8000908:	b299      	uxth	r1, r3
 800090a:	88ba      	ldrh	r2, [r7, #4]
 800090c:	883b      	ldrh	r3, [r7, #0]
 800090e:	4413      	add	r3, r2
 8000910:	b29b      	uxth	r3, r3
 8000912:	3b01      	subs	r3, #1
 8000914:	b29c      	uxth	r4, r3
 8000916:	88fa      	ldrh	r2, [r7, #6]
 8000918:	8b3b      	ldrh	r3, [r7, #24]
 800091a:	9300      	str	r3, [sp, #0]
 800091c:	4623      	mov	r3, r4
 800091e:	f7ff ff47 	bl	80007b0 <ILI9341_DrawLine>
    ILI9341_DrawLine(x, y + h - 1, x, y, color);
 8000922:	88ba      	ldrh	r2, [r7, #4]
 8000924:	883b      	ldrh	r3, [r7, #0]
 8000926:	4413      	add	r3, r2
 8000928:	b29b      	uxth	r3, r3
 800092a:	3b01      	subs	r3, #1
 800092c:	b299      	uxth	r1, r3
 800092e:	88bc      	ldrh	r4, [r7, #4]
 8000930:	88fa      	ldrh	r2, [r7, #6]
 8000932:	88f8      	ldrh	r0, [r7, #6]
 8000934:	8b3b      	ldrh	r3, [r7, #24]
 8000936:	9300      	str	r3, [sp, #0]
 8000938:	4623      	mov	r3, r4
 800093a:	f7ff ff39 	bl	80007b0 <ILI9341_DrawLine>
}
 800093e:	bf00      	nop
 8000940:	370c      	adds	r7, #12
 8000942:	46bd      	mov	sp, r7
 8000944:	bd90      	pop	{r4, r7, pc}

08000946 <ILI9341_DrawCircle>:

void ILI9341_DrawCircle(uint16_t x0, uint16_t y0, uint16_t r, uint16_t color) {
 8000946:	b590      	push	{r4, r7, lr}
 8000948:	b087      	sub	sp, #28
 800094a:	af00      	add	r7, sp, #0
 800094c:	4604      	mov	r4, r0
 800094e:	4608      	mov	r0, r1
 8000950:	4611      	mov	r1, r2
 8000952:	461a      	mov	r2, r3
 8000954:	4623      	mov	r3, r4
 8000956:	80fb      	strh	r3, [r7, #6]
 8000958:	4603      	mov	r3, r0
 800095a:	80bb      	strh	r3, [r7, #4]
 800095c:	460b      	mov	r3, r1
 800095e:	807b      	strh	r3, [r7, #2]
 8000960:	4613      	mov	r3, r2
 8000962:	803b      	strh	r3, [r7, #0]
    int16_t f = 1 - r;
 8000964:	887b      	ldrh	r3, [r7, #2]
 8000966:	f1c3 0301 	rsb	r3, r3, #1
 800096a:	b29b      	uxth	r3, r3
 800096c:	82fb      	strh	r3, [r7, #22]
    int16_t ddF_x = 1;
 800096e:	2301      	movs	r3, #1
 8000970:	82bb      	strh	r3, [r7, #20]
    int16_t ddF_y = -2 * r;
 8000972:	887b      	ldrh	r3, [r7, #2]
 8000974:	461a      	mov	r2, r3
 8000976:	03d2      	lsls	r2, r2, #15
 8000978:	1ad3      	subs	r3, r2, r3
 800097a:	005b      	lsls	r3, r3, #1
 800097c:	b29b      	uxth	r3, r3
 800097e:	827b      	strh	r3, [r7, #18]
    int16_t x = 0;
 8000980:	2300      	movs	r3, #0
 8000982:	823b      	strh	r3, [r7, #16]
    int16_t y = r;
 8000984:	887b      	ldrh	r3, [r7, #2]
 8000986:	81fb      	strh	r3, [r7, #14]

    ILI9341_DrawPixel(x0, y0 + r, color);
 8000988:	88ba      	ldrh	r2, [r7, #4]
 800098a:	887b      	ldrh	r3, [r7, #2]
 800098c:	4413      	add	r3, r2
 800098e:	b299      	uxth	r1, r3
 8000990:	883a      	ldrh	r2, [r7, #0]
 8000992:	88fb      	ldrh	r3, [r7, #6]
 8000994:	4618      	mov	r0, r3
 8000996:	f7ff fe6d 	bl	8000674 <ILI9341_DrawPixel>
    ILI9341_DrawPixel(x0, y0 - r, color);
 800099a:	88ba      	ldrh	r2, [r7, #4]
 800099c:	887b      	ldrh	r3, [r7, #2]
 800099e:	1ad3      	subs	r3, r2, r3
 80009a0:	b299      	uxth	r1, r3
 80009a2:	883a      	ldrh	r2, [r7, #0]
 80009a4:	88fb      	ldrh	r3, [r7, #6]
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff fe64 	bl	8000674 <ILI9341_DrawPixel>
    ILI9341_DrawPixel(x0 + r, y0, color);
 80009ac:	88fa      	ldrh	r2, [r7, #6]
 80009ae:	887b      	ldrh	r3, [r7, #2]
 80009b0:	4413      	add	r3, r2
 80009b2:	b29b      	uxth	r3, r3
 80009b4:	883a      	ldrh	r2, [r7, #0]
 80009b6:	88b9      	ldrh	r1, [r7, #4]
 80009b8:	4618      	mov	r0, r3
 80009ba:	f7ff fe5b 	bl	8000674 <ILI9341_DrawPixel>
    ILI9341_DrawPixel(x0 - r, y0, color);
 80009be:	88fa      	ldrh	r2, [r7, #6]
 80009c0:	887b      	ldrh	r3, [r7, #2]
 80009c2:	1ad3      	subs	r3, r2, r3
 80009c4:	b29b      	uxth	r3, r3
 80009c6:	883a      	ldrh	r2, [r7, #0]
 80009c8:	88b9      	ldrh	r1, [r7, #4]
 80009ca:	4618      	mov	r0, r3
 80009cc:	f7ff fe52 	bl	8000674 <ILI9341_DrawPixel>

    while (x < y) {
 80009d0:	e081      	b.n	8000ad6 <ILI9341_DrawCircle+0x190>
        if (f >= 0) {
 80009d2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	db0e      	blt.n	80009f8 <ILI9341_DrawCircle+0xb2>
            y--;
 80009da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80009de:	b29b      	uxth	r3, r3
 80009e0:	3b01      	subs	r3, #1
 80009e2:	b29b      	uxth	r3, r3
 80009e4:	81fb      	strh	r3, [r7, #14]
            ddF_y += 2;
 80009e6:	8a7b      	ldrh	r3, [r7, #18]
 80009e8:	3302      	adds	r3, #2
 80009ea:	b29b      	uxth	r3, r3
 80009ec:	827b      	strh	r3, [r7, #18]
            f += ddF_y;
 80009ee:	8afa      	ldrh	r2, [r7, #22]
 80009f0:	8a7b      	ldrh	r3, [r7, #18]
 80009f2:	4413      	add	r3, r2
 80009f4:	b29b      	uxth	r3, r3
 80009f6:	82fb      	strh	r3, [r7, #22]
        }
        x++;
 80009f8:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 80009fc:	b29b      	uxth	r3, r3
 80009fe:	3301      	adds	r3, #1
 8000a00:	b29b      	uxth	r3, r3
 8000a02:	823b      	strh	r3, [r7, #16]
        ddF_x += 2;
 8000a04:	8abb      	ldrh	r3, [r7, #20]
 8000a06:	3302      	adds	r3, #2
 8000a08:	b29b      	uxth	r3, r3
 8000a0a:	82bb      	strh	r3, [r7, #20]
        f += ddF_x;
 8000a0c:	8afa      	ldrh	r2, [r7, #22]
 8000a0e:	8abb      	ldrh	r3, [r7, #20]
 8000a10:	4413      	add	r3, r2
 8000a12:	b29b      	uxth	r3, r3
 8000a14:	82fb      	strh	r3, [r7, #22]

        ILI9341_DrawPixel(x0 + x, y0 + y, color);
 8000a16:	8a3a      	ldrh	r2, [r7, #16]
 8000a18:	88fb      	ldrh	r3, [r7, #6]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	b298      	uxth	r0, r3
 8000a1e:	89fa      	ldrh	r2, [r7, #14]
 8000a20:	88bb      	ldrh	r3, [r7, #4]
 8000a22:	4413      	add	r3, r2
 8000a24:	b29b      	uxth	r3, r3
 8000a26:	883a      	ldrh	r2, [r7, #0]
 8000a28:	4619      	mov	r1, r3
 8000a2a:	f7ff fe23 	bl	8000674 <ILI9341_DrawPixel>
        ILI9341_DrawPixel(x0 - x, y0 + y, color);
 8000a2e:	8a3b      	ldrh	r3, [r7, #16]
 8000a30:	88fa      	ldrh	r2, [r7, #6]
 8000a32:	1ad3      	subs	r3, r2, r3
 8000a34:	b298      	uxth	r0, r3
 8000a36:	89fa      	ldrh	r2, [r7, #14]
 8000a38:	88bb      	ldrh	r3, [r7, #4]
 8000a3a:	4413      	add	r3, r2
 8000a3c:	b29b      	uxth	r3, r3
 8000a3e:	883a      	ldrh	r2, [r7, #0]
 8000a40:	4619      	mov	r1, r3
 8000a42:	f7ff fe17 	bl	8000674 <ILI9341_DrawPixel>
        ILI9341_DrawPixel(x0 + x, y0 - y, color);
 8000a46:	8a3a      	ldrh	r2, [r7, #16]
 8000a48:	88fb      	ldrh	r3, [r7, #6]
 8000a4a:	4413      	add	r3, r2
 8000a4c:	b298      	uxth	r0, r3
 8000a4e:	89fb      	ldrh	r3, [r7, #14]
 8000a50:	88ba      	ldrh	r2, [r7, #4]
 8000a52:	1ad3      	subs	r3, r2, r3
 8000a54:	b29b      	uxth	r3, r3
 8000a56:	883a      	ldrh	r2, [r7, #0]
 8000a58:	4619      	mov	r1, r3
 8000a5a:	f7ff fe0b 	bl	8000674 <ILI9341_DrawPixel>
        ILI9341_DrawPixel(x0 - x, y0 - y, color);
 8000a5e:	8a3b      	ldrh	r3, [r7, #16]
 8000a60:	88fa      	ldrh	r2, [r7, #6]
 8000a62:	1ad3      	subs	r3, r2, r3
 8000a64:	b298      	uxth	r0, r3
 8000a66:	89fb      	ldrh	r3, [r7, #14]
 8000a68:	88ba      	ldrh	r2, [r7, #4]
 8000a6a:	1ad3      	subs	r3, r2, r3
 8000a6c:	b29b      	uxth	r3, r3
 8000a6e:	883a      	ldrh	r2, [r7, #0]
 8000a70:	4619      	mov	r1, r3
 8000a72:	f7ff fdff 	bl	8000674 <ILI9341_DrawPixel>
        ILI9341_DrawPixel(x0 + y, y0 + x, color);
 8000a76:	89fa      	ldrh	r2, [r7, #14]
 8000a78:	88fb      	ldrh	r3, [r7, #6]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	b298      	uxth	r0, r3
 8000a7e:	8a3a      	ldrh	r2, [r7, #16]
 8000a80:	88bb      	ldrh	r3, [r7, #4]
 8000a82:	4413      	add	r3, r2
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	883a      	ldrh	r2, [r7, #0]
 8000a88:	4619      	mov	r1, r3
 8000a8a:	f7ff fdf3 	bl	8000674 <ILI9341_DrawPixel>
        ILI9341_DrawPixel(x0 - y, y0 + x, color);
 8000a8e:	89fb      	ldrh	r3, [r7, #14]
 8000a90:	88fa      	ldrh	r2, [r7, #6]
 8000a92:	1ad3      	subs	r3, r2, r3
 8000a94:	b298      	uxth	r0, r3
 8000a96:	8a3a      	ldrh	r2, [r7, #16]
 8000a98:	88bb      	ldrh	r3, [r7, #4]
 8000a9a:	4413      	add	r3, r2
 8000a9c:	b29b      	uxth	r3, r3
 8000a9e:	883a      	ldrh	r2, [r7, #0]
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	f7ff fde7 	bl	8000674 <ILI9341_DrawPixel>
        ILI9341_DrawPixel(x0 + y, y0 - x, color);
 8000aa6:	89fa      	ldrh	r2, [r7, #14]
 8000aa8:	88fb      	ldrh	r3, [r7, #6]
 8000aaa:	4413      	add	r3, r2
 8000aac:	b298      	uxth	r0, r3
 8000aae:	8a3b      	ldrh	r3, [r7, #16]
 8000ab0:	88ba      	ldrh	r2, [r7, #4]
 8000ab2:	1ad3      	subs	r3, r2, r3
 8000ab4:	b29b      	uxth	r3, r3
 8000ab6:	883a      	ldrh	r2, [r7, #0]
 8000ab8:	4619      	mov	r1, r3
 8000aba:	f7ff fddb 	bl	8000674 <ILI9341_DrawPixel>
        ILI9341_DrawPixel(x0 - y, y0 - x, color);
 8000abe:	89fb      	ldrh	r3, [r7, #14]
 8000ac0:	88fa      	ldrh	r2, [r7, #6]
 8000ac2:	1ad3      	subs	r3, r2, r3
 8000ac4:	b298      	uxth	r0, r3
 8000ac6:	8a3b      	ldrh	r3, [r7, #16]
 8000ac8:	88ba      	ldrh	r2, [r7, #4]
 8000aca:	1ad3      	subs	r3, r2, r3
 8000acc:	b29b      	uxth	r3, r3
 8000ace:	883a      	ldrh	r2, [r7, #0]
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	f7ff fdcf 	bl	8000674 <ILI9341_DrawPixel>
    while (x < y) {
 8000ad6:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8000ada:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000ade:	429a      	cmp	r2, r3
 8000ae0:	f6ff af77 	blt.w	80009d2 <ILI9341_DrawCircle+0x8c>
    }
}
 8000ae4:	bf00      	nop
 8000ae6:	bf00      	nop
 8000ae8:	371c      	adds	r7, #28
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd90      	pop	{r4, r7, pc}
	...

08000af0 <ILI9341_DrawChar>:

void ILI9341_DrawChar(uint16_t x, uint16_t y, char ch, uint16_t color, uint16_t bgcolor) {
 8000af0:	b590      	push	{r4, r7, lr}
 8000af2:	b087      	sub	sp, #28
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4604      	mov	r4, r0
 8000af8:	4608      	mov	r0, r1
 8000afa:	4611      	mov	r1, r2
 8000afc:	461a      	mov	r2, r3
 8000afe:	4623      	mov	r3, r4
 8000b00:	80fb      	strh	r3, [r7, #6]
 8000b02:	4603      	mov	r3, r0
 8000b04:	80bb      	strh	r3, [r7, #4]
 8000b06:	460b      	mov	r3, r1
 8000b08:	70fb      	strb	r3, [r7, #3]
 8000b0a:	4613      	mov	r3, r2
 8000b0c:	803b      	strh	r3, [r7, #0]
    if (ch < 32 || ch > 126) ch = 32; // Space for unsupported characters
 8000b0e:	78fb      	ldrb	r3, [r7, #3]
 8000b10:	2b1f      	cmp	r3, #31
 8000b12:	d902      	bls.n	8000b1a <ILI9341_DrawChar+0x2a>
 8000b14:	78fb      	ldrb	r3, [r7, #3]
 8000b16:	2b7e      	cmp	r3, #126	@ 0x7e
 8000b18:	d901      	bls.n	8000b1e <ILI9341_DrawChar+0x2e>
 8000b1a:	2320      	movs	r3, #32
 8000b1c:	70fb      	strb	r3, [r7, #3]

    const uint8_t *font_data = font5x7[ch - 32];
 8000b1e:	78fb      	ldrb	r3, [r7, #3]
 8000b20:	f1a3 0220 	sub.w	r2, r3, #32
 8000b24:	4613      	mov	r3, r2
 8000b26:	009b      	lsls	r3, r3, #2
 8000b28:	4413      	add	r3, r2
 8000b2a:	4a24      	ldr	r2, [pc, #144]	@ (8000bbc <ILI9341_DrawChar+0xcc>)
 8000b2c:	4413      	add	r3, r2
 8000b2e:	613b      	str	r3, [r7, #16]

    for (uint8_t col = 0; col < 5; col++) {
 8000b30:	2300      	movs	r3, #0
 8000b32:	75fb      	strb	r3, [r7, #23]
 8000b34:	e039      	b.n	8000baa <ILI9341_DrawChar+0xba>
        uint8_t line = font_data[col];
 8000b36:	7dfb      	ldrb	r3, [r7, #23]
 8000b38:	693a      	ldr	r2, [r7, #16]
 8000b3a:	4413      	add	r3, r2
 8000b3c:	781b      	ldrb	r3, [r3, #0]
 8000b3e:	73fb      	strb	r3, [r7, #15]
        for (uint8_t row = 0; row < 8; row++) {  // Changed from 7 to 8
 8000b40:	2300      	movs	r3, #0
 8000b42:	75bb      	strb	r3, [r7, #22]
 8000b44:	e02b      	b.n	8000b9e <ILI9341_DrawChar+0xae>
            if (line & (1 << row)) {  // Changed bit checking method
 8000b46:	7bfa      	ldrb	r2, [r7, #15]
 8000b48:	7dbb      	ldrb	r3, [r7, #22]
 8000b4a:	fa42 f303 	asr.w	r3, r2, r3
 8000b4e:	f003 0301 	and.w	r3, r3, #1
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d00e      	beq.n	8000b74 <ILI9341_DrawChar+0x84>
                ILI9341_DrawPixel(x + col, y + row, color);
 8000b56:	7dfb      	ldrb	r3, [r7, #23]
 8000b58:	b29a      	uxth	r2, r3
 8000b5a:	88fb      	ldrh	r3, [r7, #6]
 8000b5c:	4413      	add	r3, r2
 8000b5e:	b298      	uxth	r0, r3
 8000b60:	7dbb      	ldrb	r3, [r7, #22]
 8000b62:	b29a      	uxth	r2, r3
 8000b64:	88bb      	ldrh	r3, [r7, #4]
 8000b66:	4413      	add	r3, r2
 8000b68:	b29b      	uxth	r3, r3
 8000b6a:	883a      	ldrh	r2, [r7, #0]
 8000b6c:	4619      	mov	r1, r3
 8000b6e:	f7ff fd81 	bl	8000674 <ILI9341_DrawPixel>
 8000b72:	e011      	b.n	8000b98 <ILI9341_DrawChar+0xa8>
            } else if (bgcolor != color) {
 8000b74:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000b76:	883b      	ldrh	r3, [r7, #0]
 8000b78:	429a      	cmp	r2, r3
 8000b7a:	d00d      	beq.n	8000b98 <ILI9341_DrawChar+0xa8>
                ILI9341_DrawPixel(x + col, y + row, bgcolor);
 8000b7c:	7dfb      	ldrb	r3, [r7, #23]
 8000b7e:	b29a      	uxth	r2, r3
 8000b80:	88fb      	ldrh	r3, [r7, #6]
 8000b82:	4413      	add	r3, r2
 8000b84:	b298      	uxth	r0, r3
 8000b86:	7dbb      	ldrb	r3, [r7, #22]
 8000b88:	b29a      	uxth	r2, r3
 8000b8a:	88bb      	ldrh	r3, [r7, #4]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	b29b      	uxth	r3, r3
 8000b90:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8000b92:	4619      	mov	r1, r3
 8000b94:	f7ff fd6e 	bl	8000674 <ILI9341_DrawPixel>
        for (uint8_t row = 0; row < 8; row++) {  // Changed from 7 to 8
 8000b98:	7dbb      	ldrb	r3, [r7, #22]
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	75bb      	strb	r3, [r7, #22]
 8000b9e:	7dbb      	ldrb	r3, [r7, #22]
 8000ba0:	2b07      	cmp	r3, #7
 8000ba2:	d9d0      	bls.n	8000b46 <ILI9341_DrawChar+0x56>
    for (uint8_t col = 0; col < 5; col++) {
 8000ba4:	7dfb      	ldrb	r3, [r7, #23]
 8000ba6:	3301      	adds	r3, #1
 8000ba8:	75fb      	strb	r3, [r7, #23]
 8000baa:	7dfb      	ldrb	r3, [r7, #23]
 8000bac:	2b04      	cmp	r3, #4
 8000bae:	d9c2      	bls.n	8000b36 <ILI9341_DrawChar+0x46>
            }
        }
    }
}
 8000bb0:	bf00      	nop
 8000bb2:	bf00      	nop
 8000bb4:	371c      	adds	r7, #28
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd90      	pop	{r4, r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	08002c4c 	.word	0x08002c4c

08000bc0 <ILI9341_DrawString>:

void ILI9341_DrawString(uint16_t x, uint16_t y, char* str, uint16_t color, uint16_t bgcolor) {
 8000bc0:	b590      	push	{r4, r7, lr}
 8000bc2:	b089      	sub	sp, #36	@ 0x24
 8000bc4:	af02      	add	r7, sp, #8
 8000bc6:	60ba      	str	r2, [r7, #8]
 8000bc8:	461a      	mov	r2, r3
 8000bca:	4603      	mov	r3, r0
 8000bcc:	81fb      	strh	r3, [r7, #14]
 8000bce:	460b      	mov	r3, r1
 8000bd0:	81bb      	strh	r3, [r7, #12]
 8000bd2:	4613      	mov	r3, r2
 8000bd4:	80fb      	strh	r3, [r7, #6]
    uint16_t start_x = x;
 8000bd6:	89fb      	ldrh	r3, [r7, #14]
 8000bd8:	82fb      	strh	r3, [r7, #22]

    while (*str) {
 8000bda:	e019      	b.n	8000c10 <ILI9341_DrawString+0x50>
        if (*str == '\n') {
 8000bdc:	68bb      	ldr	r3, [r7, #8]
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	2b0a      	cmp	r3, #10
 8000be2:	d105      	bne.n	8000bf0 <ILI9341_DrawString+0x30>
            y += 9;  // Changed from 8 to 9 for better line spacing
 8000be4:	89bb      	ldrh	r3, [r7, #12]
 8000be6:	3309      	adds	r3, #9
 8000be8:	81bb      	strh	r3, [r7, #12]
            x = start_x;
 8000bea:	8afb      	ldrh	r3, [r7, #22]
 8000bec:	81fb      	strh	r3, [r7, #14]
 8000bee:	e00c      	b.n	8000c0a <ILI9341_DrawString+0x4a>
        } else {
            ILI9341_DrawChar(x, y, *str, color, bgcolor);
 8000bf0:	68bb      	ldr	r3, [r7, #8]
 8000bf2:	781a      	ldrb	r2, [r3, #0]
 8000bf4:	88fc      	ldrh	r4, [r7, #6]
 8000bf6:	89b9      	ldrh	r1, [r7, #12]
 8000bf8:	89f8      	ldrh	r0, [r7, #14]
 8000bfa:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8000bfc:	9300      	str	r3, [sp, #0]
 8000bfe:	4623      	mov	r3, r4
 8000c00:	f7ff ff76 	bl	8000af0 <ILI9341_DrawChar>
            x += 6;  // 5 pixels + 1 pixel spacing
 8000c04:	89fb      	ldrh	r3, [r7, #14]
 8000c06:	3306      	adds	r3, #6
 8000c08:	81fb      	strh	r3, [r7, #14]
        }
        str++;
 8000c0a:	68bb      	ldr	r3, [r7, #8]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	60bb      	str	r3, [r7, #8]
    while (*str) {
 8000c10:	68bb      	ldr	r3, [r7, #8]
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d1e1      	bne.n	8000bdc <ILI9341_DrawString+0x1c>
    }
}
 8000c18:	bf00      	nop
 8000c1a:	bf00      	nop
 8000c1c:	371c      	adds	r7, #28
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd90      	pop	{r4, r7, pc}
	...

08000c24 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b088      	sub	sp, #32
 8000c28:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000c2a:	f000 fae3 	bl	80011f4 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000c2e:	f000 f8c3 	bl	8000db8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000c32:	f000 f92d 	bl	8000e90 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8000c36:	f000 f901 	bl	8000e3c <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	/* Initialize ILI9341 LCD */
	ILI9341_Init();
 8000c3a:	f7ff fbb7 	bl	80003ac <ILI9341_Init>

	/* Demo program */
	ILI9341_Fill(BLACK);
 8000c3e:	2000      	movs	r0, #0
 8000c40:	f7ff fd37 	bl	80006b2 <ILI9341_Fill>

	// Simple font test - 큰 글씨로 테스트
	ILI9341_DrawString(10, 10, "HELLO", WHITE, RED);
 8000c44:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000c48:	9300      	str	r3, [sp, #0]
 8000c4a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000c4e:	4a52      	ldr	r2, [pc, #328]	@ (8000d98 <main+0x174>)
 8000c50:	210a      	movs	r1, #10
 8000c52:	200a      	movs	r0, #10
 8000c54:	f7ff ffb4 	bl	8000bc0 <ILI9341_DrawString>
	ILI9341_DrawString(10, 25, "WORLD", RED, BLACK);
 8000c58:	2300      	movs	r3, #0
 8000c5a:	9300      	str	r3, [sp, #0]
 8000c5c:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000c60:	4a4e      	ldr	r2, [pc, #312]	@ (8000d9c <main+0x178>)
 8000c62:	2119      	movs	r1, #25
 8000c64:	200a      	movs	r0, #10
 8000c66:	f7ff ffab 	bl	8000bc0 <ILI9341_DrawString>
	ILI9341_DrawString(10, 40, "12345", GREEN, BLACK);
 8000c6a:	2300      	movs	r3, #0
 8000c6c:	9300      	str	r3, [sp, #0]
 8000c6e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000c72:	4a4b      	ldr	r2, [pc, #300]	@ (8000da0 <main+0x17c>)
 8000c74:	2128      	movs	r1, #40	@ 0x28
 8000c76:	200a      	movs	r0, #10
 8000c78:	f7ff ffa2 	bl	8000bc0 <ILI9341_DrawString>
	ILI9341_DrawString(10, 55, "ABCDE", BLUE, BLACK);
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	9300      	str	r3, [sp, #0]
 8000c80:	231f      	movs	r3, #31
 8000c82:	4a48      	ldr	r2, [pc, #288]	@ (8000da4 <main+0x180>)
 8000c84:	2137      	movs	r1, #55	@ 0x37
 8000c86:	200a      	movs	r0, #10
 8000c88:	f7ff ff9a 	bl	8000bc0 <ILI9341_DrawString>

	// 개별 문자 테스트
	ILI9341_DrawChar(10, 75, 'A', YELLOW, BLACK);
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	9300      	str	r3, [sp, #0]
 8000c90:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000c94:	2241      	movs	r2, #65	@ 0x41
 8000c96:	214b      	movs	r1, #75	@ 0x4b
 8000c98:	200a      	movs	r0, #10
 8000c9a:	f7ff ff29 	bl	8000af0 <ILI9341_DrawChar>
	ILI9341_DrawChar(20, 75, 'B', YELLOW, BLACK);
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	9300      	str	r3, [sp, #0]
 8000ca2:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000ca6:	2242      	movs	r2, #66	@ 0x42
 8000ca8:	214b      	movs	r1, #75	@ 0x4b
 8000caa:	2014      	movs	r0, #20
 8000cac:	f7ff ff20 	bl	8000af0 <ILI9341_DrawChar>
	ILI9341_DrawChar(30, 75, 'C', YELLOW, BLACK);
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	9300      	str	r3, [sp, #0]
 8000cb4:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000cb8:	2243      	movs	r2, #67	@ 0x43
 8000cba:	214b      	movs	r1, #75	@ 0x4b
 8000cbc:	201e      	movs	r0, #30
 8000cbe:	f7ff ff17 	bl	8000af0 <ILI9341_DrawChar>

	// Original demo content (moved down)
	ILI9341_DrawString(10, 100, "STM32F103 + ILI9341", WHITE, BLACK);
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	9300      	str	r3, [sp, #0]
 8000cc6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000cca:	4a37      	ldr	r2, [pc, #220]	@ (8000da8 <main+0x184>)
 8000ccc:	2164      	movs	r1, #100	@ 0x64
 8000cce:	200a      	movs	r0, #10
 8000cd0:	f7ff ff76 	bl	8000bc0 <ILI9341_DrawString>
	ILI9341_DrawString(10, 115, "Parallel Interface", CYAN, BLACK);
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	9300      	str	r3, [sp, #0]
 8000cd8:	f240 73ff 	movw	r3, #2047	@ 0x7ff
 8000cdc:	4a33      	ldr	r2, [pc, #204]	@ (8000dac <main+0x188>)
 8000cde:	2173      	movs	r1, #115	@ 0x73
 8000ce0:	200a      	movs	r0, #10
 8000ce2:	f7ff ff6d 	bl	8000bc0 <ILI9341_DrawString>

	// Draw some shapes (moved down to accommodate font test)
	ILI9341_DrawRect(10, 130, 100, 60, RED);
 8000ce6:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 8000cea:	9300      	str	r3, [sp, #0]
 8000cec:	233c      	movs	r3, #60	@ 0x3c
 8000cee:	2264      	movs	r2, #100	@ 0x64
 8000cf0:	2182      	movs	r1, #130	@ 0x82
 8000cf2:	200a      	movs	r0, #10
 8000cf4:	f7ff fdc7 	bl	8000886 <ILI9341_DrawRect>
	ILI9341_FillRect(130, 130, 80, 60, BLUE);
 8000cf8:	231f      	movs	r3, #31
 8000cfa:	9300      	str	r3, [sp, #0]
 8000cfc:	233c      	movs	r3, #60	@ 0x3c
 8000cfe:	2250      	movs	r2, #80	@ 0x50
 8000d00:	2182      	movs	r1, #130	@ 0x82
 8000d02:	2082      	movs	r0, #130	@ 0x82
 8000d04:	f7ff fce8 	bl	80006d8 <ILI9341_FillRect>

	ILI9341_DrawCircle(60, 220, 25, GREEN);
 8000d08:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000d0c:	2219      	movs	r2, #25
 8000d0e:	21dc      	movs	r1, #220	@ 0xdc
 8000d10:	203c      	movs	r0, #60	@ 0x3c
 8000d12:	f7ff fe18 	bl	8000946 <ILI9341_DrawCircle>
	ILI9341_DrawCircle(180, 220, 25, MAGENTA);
 8000d16:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 8000d1a:	2219      	movs	r2, #25
 8000d1c:	21dc      	movs	r1, #220	@ 0xdc
 8000d1e:	20b4      	movs	r0, #180	@ 0xb4
 8000d20:	f7ff fe11 	bl	8000946 <ILI9341_DrawCircle>

	// Draw lines
	ILI9341_DrawLine(10, 270, 230, 270, WHITE);
 8000d24:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000d28:	9300      	str	r3, [sp, #0]
 8000d2a:	f44f 7387 	mov.w	r3, #270	@ 0x10e
 8000d2e:	22e6      	movs	r2, #230	@ 0xe6
 8000d30:	f44f 7187 	mov.w	r1, #270	@ 0x10e
 8000d34:	200a      	movs	r0, #10
 8000d36:	f7ff fd3b 	bl	80007b0 <ILI9341_DrawLine>

	// Status info
	ILI9341_DrawString(10, 290, "Status: Ready", GREEN, BLACK);
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	9300      	str	r3, [sp, #0]
 8000d3e:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 8000d42:	4a1b      	ldr	r2, [pc, #108]	@ (8000db0 <main+0x18c>)
 8000d44:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8000d48:	200a      	movs	r0, #10
 8000d4a:	f7ff ff39 	bl	8000bc0 <ILI9341_DrawString>

	uint16_t counter = 0;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	82fb      	strh	r3, [r7, #22]
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		sprintf(counter_str, "CNT:%d", counter);
 8000d52:	8afa      	ldrh	r2, [r7, #22]
 8000d54:	463b      	mov	r3, r7
 8000d56:	4917      	ldr	r1, [pc, #92]	@ (8000db4 <main+0x190>)
 8000d58:	4618      	mov	r0, r3
 8000d5a:	f001 fa8b 	bl	8002274 <siprintf>
		ILI9341_FillRect(120, 290, 80, 10, BLACK); // Clear previous counter
 8000d5e:	2300      	movs	r3, #0
 8000d60:	9300      	str	r3, [sp, #0]
 8000d62:	230a      	movs	r3, #10
 8000d64:	2250      	movs	r2, #80	@ 0x50
 8000d66:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8000d6a:	2078      	movs	r0, #120	@ 0x78
 8000d6c:	f7ff fcb4 	bl	80006d8 <ILI9341_FillRect>
		ILI9341_DrawString(120, 290, counter_str, YELLOW, BLACK);
 8000d70:	463a      	mov	r2, r7
 8000d72:	2300      	movs	r3, #0
 8000d74:	9300      	str	r3, [sp, #0]
 8000d76:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8000d7a:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8000d7e:	2078      	movs	r0, #120	@ 0x78
 8000d80:	f7ff ff1e 	bl	8000bc0 <ILI9341_DrawString>
		counter++;
 8000d84:	8afb      	ldrh	r3, [r7, #22]
 8000d86:	3301      	adds	r3, #1
 8000d88:	82fb      	strh	r3, [r7, #22]
		HAL_Delay(1000);
 8000d8a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000d8e:	f000 fa93 	bl	80012b8 <HAL_Delay>
		sprintf(counter_str, "CNT:%d", counter);
 8000d92:	bf00      	nop
 8000d94:	e7dd      	b.n	8000d52 <main+0x12e>
 8000d96:	bf00      	nop
 8000d98:	08002bec 	.word	0x08002bec
 8000d9c:	08002bf4 	.word	0x08002bf4
 8000da0:	08002bfc 	.word	0x08002bfc
 8000da4:	08002c04 	.word	0x08002c04
 8000da8:	08002c0c 	.word	0x08002c0c
 8000dac:	08002c20 	.word	0x08002c20
 8000db0:	08002c34 	.word	0x08002c34
 8000db4:	08002c44 	.word	0x08002c44

08000db8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b090      	sub	sp, #64	@ 0x40
 8000dbc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000dbe:	f107 0318 	add.w	r3, r7, #24
 8000dc2:	2228      	movs	r2, #40	@ 0x28
 8000dc4:	2100      	movs	r1, #0
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f001 fa76 	bl	80022b8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000dcc:	1d3b      	adds	r3, r7, #4
 8000dce:	2200      	movs	r2, #0
 8000dd0:	601a      	str	r2, [r3, #0]
 8000dd2:	605a      	str	r2, [r3, #4]
 8000dd4:	609a      	str	r2, [r3, #8]
 8000dd6:	60da      	str	r2, [r3, #12]
 8000dd8:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dde:	2301      	movs	r3, #1
 8000de0:	62bb      	str	r3, [r7, #40]	@ 0x28
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000de2:	2310      	movs	r3, #16
 8000de4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000de6:	2302      	movs	r3, #2
 8000de8:	637b      	str	r3, [r7, #52]	@ 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000dea:	2300      	movs	r3, #0
 8000dec:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000dee:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000df2:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000df4:	f107 0318 	add.w	r3, r7, #24
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f000 fd4d 	bl	8001898 <HAL_RCC_OscConfig>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <SystemClock_Config+0x50>
		Error_Handler();
 8000e04:	f000 f8ea 	bl	8000fdc <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000e08:	230f      	movs	r3, #15
 8000e0a:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e10:	2300      	movs	r3, #0
 8000e12:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e14:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e18:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000e1e:	1d3b      	adds	r3, r7, #4
 8000e20:	2102      	movs	r1, #2
 8000e22:	4618      	mov	r0, r3
 8000e24:	f000 ffba 	bl	8001d9c <HAL_RCC_ClockConfig>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <SystemClock_Config+0x7a>
		Error_Handler();
 8000e2e:	f000 f8d5 	bl	8000fdc <Error_Handler>
	}
}
 8000e32:	bf00      	nop
 8000e34:	3740      	adds	r7, #64	@ 0x40
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
	...

08000e3c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8000e40:	4b11      	ldr	r3, [pc, #68]	@ (8000e88 <MX_USART2_UART_Init+0x4c>)
 8000e42:	4a12      	ldr	r2, [pc, #72]	@ (8000e8c <MX_USART2_UART_Init+0x50>)
 8000e44:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8000e46:	4b10      	ldr	r3, [pc, #64]	@ (8000e88 <MX_USART2_UART_Init+0x4c>)
 8000e48:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000e4c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e88 <MX_USART2_UART_Init+0x4c>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8000e54:	4b0c      	ldr	r3, [pc, #48]	@ (8000e88 <MX_USART2_UART_Init+0x4c>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8000e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000e88 <MX_USART2_UART_Init+0x4c>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8000e60:	4b09      	ldr	r3, [pc, #36]	@ (8000e88 <MX_USART2_UART_Init+0x4c>)
 8000e62:	220c      	movs	r2, #12
 8000e64:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e66:	4b08      	ldr	r3, [pc, #32]	@ (8000e88 <MX_USART2_UART_Init+0x4c>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e6c:	4b06      	ldr	r3, [pc, #24]	@ (8000e88 <MX_USART2_UART_Init+0x4c>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8000e72:	4805      	ldr	r0, [pc, #20]	@ (8000e88 <MX_USART2_UART_Init+0x4c>)
 8000e74:	f001 f920 	bl	80020b8 <HAL_UART_Init>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_USART2_UART_Init+0x46>
		Error_Handler();
 8000e7e:	f000 f8ad 	bl	8000fdc <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20000078 	.word	0x20000078
 8000e8c:	40004400 	.word	0x40004400

08000e90 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8000e90:	b580      	push	{r7, lr}
 8000e92:	b088      	sub	sp, #32
 8000e94:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8000e96:	f107 0310 	add.w	r3, r7, #16
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	601a      	str	r2, [r3, #0]
 8000e9e:	605a      	str	r2, [r3, #4]
 8000ea0:	609a      	str	r2, [r3, #8]
 8000ea2:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */

	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8000ea4:	4b48      	ldr	r3, [pc, #288]	@ (8000fc8 <MX_GPIO_Init+0x138>)
 8000ea6:	699b      	ldr	r3, [r3, #24]
 8000ea8:	4a47      	ldr	r2, [pc, #284]	@ (8000fc8 <MX_GPIO_Init+0x138>)
 8000eaa:	f043 0310 	orr.w	r3, r3, #16
 8000eae:	6193      	str	r3, [r2, #24]
 8000eb0:	4b45      	ldr	r3, [pc, #276]	@ (8000fc8 <MX_GPIO_Init+0x138>)
 8000eb2:	699b      	ldr	r3, [r3, #24]
 8000eb4:	f003 0310 	and.w	r3, r3, #16
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8000ebc:	4b42      	ldr	r3, [pc, #264]	@ (8000fc8 <MX_GPIO_Init+0x138>)
 8000ebe:	699b      	ldr	r3, [r3, #24]
 8000ec0:	4a41      	ldr	r2, [pc, #260]	@ (8000fc8 <MX_GPIO_Init+0x138>)
 8000ec2:	f043 0320 	orr.w	r3, r3, #32
 8000ec6:	6193      	str	r3, [r2, #24]
 8000ec8:	4b3f      	ldr	r3, [pc, #252]	@ (8000fc8 <MX_GPIO_Init+0x138>)
 8000eca:	699b      	ldr	r3, [r3, #24]
 8000ecc:	f003 0320 	and.w	r3, r3, #32
 8000ed0:	60bb      	str	r3, [r7, #8]
 8000ed2:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000ed4:	4b3c      	ldr	r3, [pc, #240]	@ (8000fc8 <MX_GPIO_Init+0x138>)
 8000ed6:	699b      	ldr	r3, [r3, #24]
 8000ed8:	4a3b      	ldr	r2, [pc, #236]	@ (8000fc8 <MX_GPIO_Init+0x138>)
 8000eda:	f043 0304 	orr.w	r3, r3, #4
 8000ede:	6193      	str	r3, [r2, #24]
 8000ee0:	4b39      	ldr	r3, [pc, #228]	@ (8000fc8 <MX_GPIO_Init+0x138>)
 8000ee2:	699b      	ldr	r3, [r3, #24]
 8000ee4:	f003 0304 	and.w	r3, r3, #4
 8000ee8:	607b      	str	r3, [r7, #4]
 8000eea:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000eec:	4b36      	ldr	r3, [pc, #216]	@ (8000fc8 <MX_GPIO_Init+0x138>)
 8000eee:	699b      	ldr	r3, [r3, #24]
 8000ef0:	4a35      	ldr	r2, [pc, #212]	@ (8000fc8 <MX_GPIO_Init+0x138>)
 8000ef2:	f043 0308 	orr.w	r3, r3, #8
 8000ef6:	6193      	str	r3, [r2, #24]
 8000ef8:	4b33      	ldr	r3, [pc, #204]	@ (8000fc8 <MX_GPIO_Init+0x138>)
 8000efa:	699b      	ldr	r3, [r3, #24]
 8000efc:	f003 0308 	and.w	r3, r3, #8
 8000f00:	603b      	str	r3, [r7, #0]
 8000f02:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin | LCD_D1_Pin, GPIO_PIN_RESET);
 8000f04:	2200      	movs	r2, #0
 8000f06:	2182      	movs	r1, #130	@ 0x82
 8000f08:	4830      	ldr	r0, [pc, #192]	@ (8000fcc <MX_GPIO_Init+0x13c>)
 8000f0a:	f000 fc8b 	bl	8001824 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 8000f0e:	2200      	movs	r2, #0
 8000f10:	f240 7133 	movw	r1, #1843	@ 0x733
 8000f14:	482e      	ldr	r0, [pc, #184]	@ (8000fd0 <MX_GPIO_Init+0x140>)
 8000f16:	f000 fc85 	bl	8001824 <HAL_GPIO_WritePin>
			LCD_RD_Pin | LCD_WR_Pin | LCD_RS_Pin | LD2_Pin | LCD_D7_Pin
					| LCD_D0_Pin | LCD_D2_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, LCD_CS_Pin | LCD_D6_Pin | LCD_D3_Pin | LCD_D4_Pin,
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	f240 4129 	movw	r1, #1065	@ 0x429
 8000f20:	482c      	ldr	r0, [pc, #176]	@ (8000fd4 <MX_GPIO_Init+0x144>)
 8000f22:	f000 fc7f 	bl	8001824 <HAL_GPIO_WritePin>
			GPIO_PIN_RESET);

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 8000f26:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f2a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f2c:	4b2a      	ldr	r3, [pc, #168]	@ (8000fd8 <MX_GPIO_Init+0x148>)
 8000f2e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	2300      	movs	r3, #0
 8000f32:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f34:	f107 0310 	add.w	r3, r7, #16
 8000f38:	4619      	mov	r1, r3
 8000f3a:	4824      	ldr	r0, [pc, #144]	@ (8000fcc <MX_GPIO_Init+0x13c>)
 8000f3c:	f000 faee 	bl	800151c <HAL_GPIO_Init>

	/*Configure GPIO pins : LCD_RST_Pin LCD_D1_Pin */
	GPIO_InitStruct.Pin = LCD_RST_Pin | LCD_D1_Pin;
 8000f40:	2382      	movs	r3, #130	@ 0x82
 8000f42:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f44:	2301      	movs	r3, #1
 8000f46:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f50:	f107 0310 	add.w	r3, r7, #16
 8000f54:	4619      	mov	r1, r3
 8000f56:	481d      	ldr	r0, [pc, #116]	@ (8000fcc <MX_GPIO_Init+0x13c>)
 8000f58:	f000 fae0 	bl	800151c <HAL_GPIO_Init>

	/*Configure GPIO pins : LCD_RD_Pin LCD_WR_Pin LCD_RS_Pin LD2_Pin
	 LCD_D7_Pin LCD_D0_Pin LCD_D2_Pin */
	GPIO_InitStruct.Pin = LCD_RD_Pin | LCD_WR_Pin | LCD_RS_Pin | LD2_Pin
 8000f5c:	f240 7333 	movw	r3, #1843	@ 0x733
 8000f60:	613b      	str	r3, [r7, #16]
			| LCD_D7_Pin | LCD_D0_Pin | LCD_D2_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f62:	2301      	movs	r3, #1
 8000f64:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	2300      	movs	r3, #0
 8000f68:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f6a:	2302      	movs	r3, #2
 8000f6c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f6e:	f107 0310 	add.w	r3, r7, #16
 8000f72:	4619      	mov	r1, r3
 8000f74:	4816      	ldr	r0, [pc, #88]	@ (8000fd0 <MX_GPIO_Init+0x140>)
 8000f76:	f000 fad1 	bl	800151c <HAL_GPIO_Init>

	/*Configure GPIO pins : LCD_CS_Pin LCD_D6_Pin LCD_D3_Pin LCD_D4_Pin */
	GPIO_InitStruct.Pin = LCD_CS_Pin | LCD_D6_Pin | LCD_D3_Pin | LCD_D4_Pin;
 8000f7a:	f240 4329 	movw	r3, #1065	@ 0x429
 8000f7e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f80:	2301      	movs	r3, #1
 8000f82:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f84:	2300      	movs	r3, #0
 8000f86:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f8c:	f107 0310 	add.w	r3, r7, #16
 8000f90:	4619      	mov	r1, r3
 8000f92:	4810      	ldr	r0, [pc, #64]	@ (8000fd4 <MX_GPIO_Init+0x144>)
 8000f94:	f000 fac2 	bl	800151c <HAL_GPIO_Init>

	/*Configure GPIO pin : LCD_D5_Pin */
	GPIO_InitStruct.Pin = LCD_D5_Pin;
 8000f98:	2310      	movs	r3, #16
 8000f9a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f9c:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd8 <MX_GPIO_Init+0x148>)
 8000f9e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(LCD_D5_GPIO_Port, &GPIO_InitStruct);
 8000fa4:	f107 0310 	add.w	r3, r7, #16
 8000fa8:	4619      	mov	r1, r3
 8000faa:	480a      	ldr	r0, [pc, #40]	@ (8000fd4 <MX_GPIO_Init+0x144>)
 8000fac:	f000 fab6 	bl	800151c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	2028      	movs	r0, #40	@ 0x28
 8000fb6:	f000 fa7a 	bl	80014ae <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fba:	2028      	movs	r0, #40	@ 0x28
 8000fbc:	f000 fa93 	bl	80014e6 <HAL_NVIC_EnableIRQ>

	/* USER CODE BEGIN MX_GPIO_Init_2 */

	/* USER CODE END MX_GPIO_Init_2 */
}
 8000fc0:	bf00      	nop
 8000fc2:	3720      	adds	r7, #32
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	40011000 	.word	0x40011000
 8000fd0:	40010800 	.word	0x40010800
 8000fd4:	40010c00 	.word	0x40010c00
 8000fd8:	10110000 	.word	0x10110000

08000fdc <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000fe0:	b672      	cpsid	i
}
 8000fe2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000fe4:	bf00      	nop
 8000fe6:	e7fd      	b.n	8000fe4 <Error_Handler+0x8>

08000fe8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000fee:	4b15      	ldr	r3, [pc, #84]	@ (8001044 <HAL_MspInit+0x5c>)
 8000ff0:	699b      	ldr	r3, [r3, #24]
 8000ff2:	4a14      	ldr	r2, [pc, #80]	@ (8001044 <HAL_MspInit+0x5c>)
 8000ff4:	f043 0301 	orr.w	r3, r3, #1
 8000ff8:	6193      	str	r3, [r2, #24]
 8000ffa:	4b12      	ldr	r3, [pc, #72]	@ (8001044 <HAL_MspInit+0x5c>)
 8000ffc:	699b      	ldr	r3, [r3, #24]
 8000ffe:	f003 0301 	and.w	r3, r3, #1
 8001002:	60bb      	str	r3, [r7, #8]
 8001004:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001006:	4b0f      	ldr	r3, [pc, #60]	@ (8001044 <HAL_MspInit+0x5c>)
 8001008:	69db      	ldr	r3, [r3, #28]
 800100a:	4a0e      	ldr	r2, [pc, #56]	@ (8001044 <HAL_MspInit+0x5c>)
 800100c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001010:	61d3      	str	r3, [r2, #28]
 8001012:	4b0c      	ldr	r3, [pc, #48]	@ (8001044 <HAL_MspInit+0x5c>)
 8001014:	69db      	ldr	r3, [r3, #28]
 8001016:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800101a:	607b      	str	r3, [r7, #4]
 800101c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800101e:	4b0a      	ldr	r3, [pc, #40]	@ (8001048 <HAL_MspInit+0x60>)
 8001020:	685b      	ldr	r3, [r3, #4]
 8001022:	60fb      	str	r3, [r7, #12]
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800102a:	60fb      	str	r3, [r7, #12]
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	4a04      	ldr	r2, [pc, #16]	@ (8001048 <HAL_MspInit+0x60>)
 8001036:	68fb      	ldr	r3, [r7, #12]
 8001038:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800103a:	bf00      	nop
 800103c:	3714      	adds	r7, #20
 800103e:	46bd      	mov	sp, r7
 8001040:	bc80      	pop	{r7}
 8001042:	4770      	bx	lr
 8001044:	40021000 	.word	0x40021000
 8001048:	40010000 	.word	0x40010000

0800104c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b088      	sub	sp, #32
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001054:	f107 0310 	add.w	r3, r7, #16
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	4a15      	ldr	r2, [pc, #84]	@ (80010bc <HAL_UART_MspInit+0x70>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d123      	bne.n	80010b4 <HAL_UART_MspInit+0x68>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800106c:	4b14      	ldr	r3, [pc, #80]	@ (80010c0 <HAL_UART_MspInit+0x74>)
 800106e:	69db      	ldr	r3, [r3, #28]
 8001070:	4a13      	ldr	r2, [pc, #76]	@ (80010c0 <HAL_UART_MspInit+0x74>)
 8001072:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001076:	61d3      	str	r3, [r2, #28]
 8001078:	4b11      	ldr	r3, [pc, #68]	@ (80010c0 <HAL_UART_MspInit+0x74>)
 800107a:	69db      	ldr	r3, [r3, #28]
 800107c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001080:	60fb      	str	r3, [r7, #12]
 8001082:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001084:	4b0e      	ldr	r3, [pc, #56]	@ (80010c0 <HAL_UART_MspInit+0x74>)
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	4a0d      	ldr	r2, [pc, #52]	@ (80010c0 <HAL_UART_MspInit+0x74>)
 800108a:	f043 0304 	orr.w	r3, r3, #4
 800108e:	6193      	str	r3, [r2, #24]
 8001090:	4b0b      	ldr	r3, [pc, #44]	@ (80010c0 <HAL_UART_MspInit+0x74>)
 8001092:	699b      	ldr	r3, [r3, #24]
 8001094:	f003 0304 	and.w	r3, r3, #4
 8001098:	60bb      	str	r3, [r7, #8]
 800109a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800109c:	230c      	movs	r3, #12
 800109e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a0:	2302      	movs	r3, #2
 80010a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010a4:	2302      	movs	r3, #2
 80010a6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a8:	f107 0310 	add.w	r3, r7, #16
 80010ac:	4619      	mov	r1, r3
 80010ae:	4805      	ldr	r0, [pc, #20]	@ (80010c4 <HAL_UART_MspInit+0x78>)
 80010b0:	f000 fa34 	bl	800151c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80010b4:	bf00      	nop
 80010b6:	3720      	adds	r7, #32
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	40004400 	.word	0x40004400
 80010c0:	40021000 	.word	0x40021000
 80010c4:	40010800 	.word	0x40010800

080010c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010c8:	b480      	push	{r7}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010cc:	bf00      	nop
 80010ce:	e7fd      	b.n	80010cc <NMI_Handler+0x4>

080010d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010d4:	bf00      	nop
 80010d6:	e7fd      	b.n	80010d4 <HardFault_Handler+0x4>

080010d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010dc:	bf00      	nop
 80010de:	e7fd      	b.n	80010dc <MemManage_Handler+0x4>

080010e0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010e0:	b480      	push	{r7}
 80010e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010e4:	bf00      	nop
 80010e6:	e7fd      	b.n	80010e4 <BusFault_Handler+0x4>

080010e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010e8:	b480      	push	{r7}
 80010ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010ec:	bf00      	nop
 80010ee:	e7fd      	b.n	80010ec <UsageFault_Handler+0x4>

080010f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010f4:	bf00      	nop
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bc80      	pop	{r7}
 80010fa:	4770      	bx	lr

080010fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001100:	bf00      	nop
 8001102:	46bd      	mov	sp, r7
 8001104:	bc80      	pop	{r7}
 8001106:	4770      	bx	lr

08001108 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800110c:	bf00      	nop
 800110e:	46bd      	mov	sp, r7
 8001110:	bc80      	pop	{r7}
 8001112:	4770      	bx	lr

08001114 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001118:	f000 f8b2 	bl	8001280 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800111c:	bf00      	nop
 800111e:	bd80      	pop	{r7, pc}

08001120 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001124:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001128:	f000 fb94 	bl	8001854 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800112c:	bf00      	nop
 800112e:	bd80      	pop	{r7, pc}

08001130 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b086      	sub	sp, #24
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001138:	4a14      	ldr	r2, [pc, #80]	@ (800118c <_sbrk+0x5c>)
 800113a:	4b15      	ldr	r3, [pc, #84]	@ (8001190 <_sbrk+0x60>)
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001140:	697b      	ldr	r3, [r7, #20]
 8001142:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001144:	4b13      	ldr	r3, [pc, #76]	@ (8001194 <_sbrk+0x64>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d102      	bne.n	8001152 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800114c:	4b11      	ldr	r3, [pc, #68]	@ (8001194 <_sbrk+0x64>)
 800114e:	4a12      	ldr	r2, [pc, #72]	@ (8001198 <_sbrk+0x68>)
 8001150:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001152:	4b10      	ldr	r3, [pc, #64]	@ (8001194 <_sbrk+0x64>)
 8001154:	681a      	ldr	r2, [r3, #0]
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4413      	add	r3, r2
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	429a      	cmp	r2, r3
 800115e:	d207      	bcs.n	8001170 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001160:	f001 f8b2 	bl	80022c8 <__errno>
 8001164:	4603      	mov	r3, r0
 8001166:	220c      	movs	r2, #12
 8001168:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800116a:	f04f 33ff 	mov.w	r3, #4294967295
 800116e:	e009      	b.n	8001184 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001170:	4b08      	ldr	r3, [pc, #32]	@ (8001194 <_sbrk+0x64>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001176:	4b07      	ldr	r3, [pc, #28]	@ (8001194 <_sbrk+0x64>)
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4413      	add	r3, r2
 800117e:	4a05      	ldr	r2, [pc, #20]	@ (8001194 <_sbrk+0x64>)
 8001180:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001182:	68fb      	ldr	r3, [r7, #12]
}
 8001184:	4618      	mov	r0, r3
 8001186:	3718      	adds	r7, #24
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	20005000 	.word	0x20005000
 8001190:	00000400 	.word	0x00000400
 8001194:	200000c0 	.word	0x200000c0
 8001198:	20000210 	.word	0x20000210

0800119c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800119c:	b480      	push	{r7}
 800119e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80011a0:	bf00      	nop
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bc80      	pop	{r7}
 80011a6:	4770      	bx	lr

080011a8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80011a8:	f7ff fff8 	bl	800119c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80011ac:	480b      	ldr	r0, [pc, #44]	@ (80011dc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80011ae:	490c      	ldr	r1, [pc, #48]	@ (80011e0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80011b0:	4a0c      	ldr	r2, [pc, #48]	@ (80011e4 <LoopFillZerobss+0x16>)
  movs r3, #0
 80011b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011b4:	e002      	b.n	80011bc <LoopCopyDataInit>

080011b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ba:	3304      	adds	r3, #4

080011bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011c0:	d3f9      	bcc.n	80011b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011c2:	4a09      	ldr	r2, [pc, #36]	@ (80011e8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80011c4:	4c09      	ldr	r4, [pc, #36]	@ (80011ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011c8:	e001      	b.n	80011ce <LoopFillZerobss>

080011ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011cc:	3204      	adds	r2, #4

080011ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011d0:	d3fb      	bcc.n	80011ca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80011d2:	f001 f87f 	bl	80022d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80011d6:	f7ff fd25 	bl	8000c24 <main>
  bx lr
 80011da:	4770      	bx	lr
  ldr r0, =_sdata
 80011dc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011e0:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80011e4:	08002e90 	.word	0x08002e90
  ldr r2, =_sbss
 80011e8:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80011ec:	20000210 	.word	0x20000210

080011f0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80011f0:	e7fe      	b.n	80011f0 <ADC1_2_IRQHandler>
	...

080011f4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011f8:	4b08      	ldr	r3, [pc, #32]	@ (800121c <HAL_Init+0x28>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	4a07      	ldr	r2, [pc, #28]	@ (800121c <HAL_Init+0x28>)
 80011fe:	f043 0310 	orr.w	r3, r3, #16
 8001202:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001204:	2003      	movs	r0, #3
 8001206:	f000 f947 	bl	8001498 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800120a:	2000      	movs	r0, #0
 800120c:	f000 f808 	bl	8001220 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001210:	f7ff feea 	bl	8000fe8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001214:	2300      	movs	r3, #0
}
 8001216:	4618      	mov	r0, r3
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40022000 	.word	0x40022000

08001220 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b082      	sub	sp, #8
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001228:	4b12      	ldr	r3, [pc, #72]	@ (8001274 <HAL_InitTick+0x54>)
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	4b12      	ldr	r3, [pc, #72]	@ (8001278 <HAL_InitTick+0x58>)
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	4619      	mov	r1, r3
 8001232:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001236:	fbb3 f3f1 	udiv	r3, r3, r1
 800123a:	fbb2 f3f3 	udiv	r3, r2, r3
 800123e:	4618      	mov	r0, r3
 8001240:	f000 f95f 	bl	8001502 <HAL_SYSTICK_Config>
 8001244:	4603      	mov	r3, r0
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800124a:	2301      	movs	r3, #1
 800124c:	e00e      	b.n	800126c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	2b0f      	cmp	r3, #15
 8001252:	d80a      	bhi.n	800126a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001254:	2200      	movs	r2, #0
 8001256:	6879      	ldr	r1, [r7, #4]
 8001258:	f04f 30ff 	mov.w	r0, #4294967295
 800125c:	f000 f927 	bl	80014ae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001260:	4a06      	ldr	r2, [pc, #24]	@ (800127c <HAL_InitTick+0x5c>)
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001266:	2300      	movs	r3, #0
 8001268:	e000      	b.n	800126c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
}
 800126c:	4618      	mov	r0, r3
 800126e:	3708      	adds	r7, #8
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	20000000 	.word	0x20000000
 8001278:	20000008 	.word	0x20000008
 800127c:	20000004 	.word	0x20000004

08001280 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001284:	4b05      	ldr	r3, [pc, #20]	@ (800129c <HAL_IncTick+0x1c>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	461a      	mov	r2, r3
 800128a:	4b05      	ldr	r3, [pc, #20]	@ (80012a0 <HAL_IncTick+0x20>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4413      	add	r3, r2
 8001290:	4a03      	ldr	r2, [pc, #12]	@ (80012a0 <HAL_IncTick+0x20>)
 8001292:	6013      	str	r3, [r2, #0]
}
 8001294:	bf00      	nop
 8001296:	46bd      	mov	sp, r7
 8001298:	bc80      	pop	{r7}
 800129a:	4770      	bx	lr
 800129c:	20000008 	.word	0x20000008
 80012a0:	200000c4 	.word	0x200000c4

080012a4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  return uwTick;
 80012a8:	4b02      	ldr	r3, [pc, #8]	@ (80012b4 <HAL_GetTick+0x10>)
 80012aa:	681b      	ldr	r3, [r3, #0]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bc80      	pop	{r7}
 80012b2:	4770      	bx	lr
 80012b4:	200000c4 	.word	0x200000c4

080012b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b084      	sub	sp, #16
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012c0:	f7ff fff0 	bl	80012a4 <HAL_GetTick>
 80012c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d0:	d005      	beq.n	80012de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012d2:	4b0a      	ldr	r3, [pc, #40]	@ (80012fc <HAL_Delay+0x44>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	461a      	mov	r2, r3
 80012d8:	68fb      	ldr	r3, [r7, #12]
 80012da:	4413      	add	r3, r2
 80012dc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012de:	bf00      	nop
 80012e0:	f7ff ffe0 	bl	80012a4 <HAL_GetTick>
 80012e4:	4602      	mov	r2, r0
 80012e6:	68bb      	ldr	r3, [r7, #8]
 80012e8:	1ad3      	subs	r3, r2, r3
 80012ea:	68fa      	ldr	r2, [r7, #12]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	d8f7      	bhi.n	80012e0 <HAL_Delay+0x28>
  {
  }
}
 80012f0:	bf00      	nop
 80012f2:	bf00      	nop
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	20000008 	.word	0x20000008

08001300 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	f003 0307 	and.w	r3, r3, #7
 800130e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001310:	4b0c      	ldr	r3, [pc, #48]	@ (8001344 <__NVIC_SetPriorityGrouping+0x44>)
 8001312:	68db      	ldr	r3, [r3, #12]
 8001314:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001316:	68ba      	ldr	r2, [r7, #8]
 8001318:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800131c:	4013      	ands	r3, r2
 800131e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001324:	68bb      	ldr	r3, [r7, #8]
 8001326:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001328:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800132c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001330:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001332:	4a04      	ldr	r2, [pc, #16]	@ (8001344 <__NVIC_SetPriorityGrouping+0x44>)
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	60d3      	str	r3, [r2, #12]
}
 8001338:	bf00      	nop
 800133a:	3714      	adds	r7, #20
 800133c:	46bd      	mov	sp, r7
 800133e:	bc80      	pop	{r7}
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	e000ed00 	.word	0xe000ed00

08001348 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001348:	b480      	push	{r7}
 800134a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800134c:	4b04      	ldr	r3, [pc, #16]	@ (8001360 <__NVIC_GetPriorityGrouping+0x18>)
 800134e:	68db      	ldr	r3, [r3, #12]
 8001350:	0a1b      	lsrs	r3, r3, #8
 8001352:	f003 0307 	and.w	r3, r3, #7
}
 8001356:	4618      	mov	r0, r3
 8001358:	46bd      	mov	sp, r7
 800135a:	bc80      	pop	{r7}
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	4603      	mov	r3, r0
 800136c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800136e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001372:	2b00      	cmp	r3, #0
 8001374:	db0b      	blt.n	800138e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001376:	79fb      	ldrb	r3, [r7, #7]
 8001378:	f003 021f 	and.w	r2, r3, #31
 800137c:	4906      	ldr	r1, [pc, #24]	@ (8001398 <__NVIC_EnableIRQ+0x34>)
 800137e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001382:	095b      	lsrs	r3, r3, #5
 8001384:	2001      	movs	r0, #1
 8001386:	fa00 f202 	lsl.w	r2, r0, r2
 800138a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	bc80      	pop	{r7}
 8001396:	4770      	bx	lr
 8001398:	e000e100 	.word	0xe000e100

0800139c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	6039      	str	r1, [r7, #0]
 80013a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	db0a      	blt.n	80013c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	b2da      	uxtb	r2, r3
 80013b4:	490c      	ldr	r1, [pc, #48]	@ (80013e8 <__NVIC_SetPriority+0x4c>)
 80013b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ba:	0112      	lsls	r2, r2, #4
 80013bc:	b2d2      	uxtb	r2, r2
 80013be:	440b      	add	r3, r1
 80013c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013c4:	e00a      	b.n	80013dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	4908      	ldr	r1, [pc, #32]	@ (80013ec <__NVIC_SetPriority+0x50>)
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	f003 030f 	and.w	r3, r3, #15
 80013d2:	3b04      	subs	r3, #4
 80013d4:	0112      	lsls	r2, r2, #4
 80013d6:	b2d2      	uxtb	r2, r2
 80013d8:	440b      	add	r3, r1
 80013da:	761a      	strb	r2, [r3, #24]
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bc80      	pop	{r7}
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	e000e100 	.word	0xe000e100
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b089      	sub	sp, #36	@ 0x24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	f1c3 0307 	rsb	r3, r3, #7
 800140a:	2b04      	cmp	r3, #4
 800140c:	bf28      	it	cs
 800140e:	2304      	movcs	r3, #4
 8001410:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	3304      	adds	r3, #4
 8001416:	2b06      	cmp	r3, #6
 8001418:	d902      	bls.n	8001420 <NVIC_EncodePriority+0x30>
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	3b03      	subs	r3, #3
 800141e:	e000      	b.n	8001422 <NVIC_EncodePriority+0x32>
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001424:	f04f 32ff 	mov.w	r2, #4294967295
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	43da      	mvns	r2, r3
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	401a      	ands	r2, r3
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001438:	f04f 31ff 	mov.w	r1, #4294967295
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	fa01 f303 	lsl.w	r3, r1, r3
 8001442:	43d9      	mvns	r1, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001448:	4313      	orrs	r3, r2
         );
}
 800144a:	4618      	mov	r0, r3
 800144c:	3724      	adds	r7, #36	@ 0x24
 800144e:	46bd      	mov	sp, r7
 8001450:	bc80      	pop	{r7}
 8001452:	4770      	bx	lr

08001454 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b082      	sub	sp, #8
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	3b01      	subs	r3, #1
 8001460:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001464:	d301      	bcc.n	800146a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001466:	2301      	movs	r3, #1
 8001468:	e00f      	b.n	800148a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800146a:	4a0a      	ldr	r2, [pc, #40]	@ (8001494 <SysTick_Config+0x40>)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	3b01      	subs	r3, #1
 8001470:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001472:	210f      	movs	r1, #15
 8001474:	f04f 30ff 	mov.w	r0, #4294967295
 8001478:	f7ff ff90 	bl	800139c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800147c:	4b05      	ldr	r3, [pc, #20]	@ (8001494 <SysTick_Config+0x40>)
 800147e:	2200      	movs	r2, #0
 8001480:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001482:	4b04      	ldr	r3, [pc, #16]	@ (8001494 <SysTick_Config+0x40>)
 8001484:	2207      	movs	r2, #7
 8001486:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001488:	2300      	movs	r3, #0
}
 800148a:	4618      	mov	r0, r3
 800148c:	3708      	adds	r7, #8
 800148e:	46bd      	mov	sp, r7
 8001490:	bd80      	pop	{r7, pc}
 8001492:	bf00      	nop
 8001494:	e000e010 	.word	0xe000e010

08001498 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014a0:	6878      	ldr	r0, [r7, #4]
 80014a2:	f7ff ff2d 	bl	8001300 <__NVIC_SetPriorityGrouping>
}
 80014a6:	bf00      	nop
 80014a8:	3708      	adds	r7, #8
 80014aa:	46bd      	mov	sp, r7
 80014ac:	bd80      	pop	{r7, pc}

080014ae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014ae:	b580      	push	{r7, lr}
 80014b0:	b086      	sub	sp, #24
 80014b2:	af00      	add	r7, sp, #0
 80014b4:	4603      	mov	r3, r0
 80014b6:	60b9      	str	r1, [r7, #8]
 80014b8:	607a      	str	r2, [r7, #4]
 80014ba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014bc:	2300      	movs	r3, #0
 80014be:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014c0:	f7ff ff42 	bl	8001348 <__NVIC_GetPriorityGrouping>
 80014c4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014c6:	687a      	ldr	r2, [r7, #4]
 80014c8:	68b9      	ldr	r1, [r7, #8]
 80014ca:	6978      	ldr	r0, [r7, #20]
 80014cc:	f7ff ff90 	bl	80013f0 <NVIC_EncodePriority>
 80014d0:	4602      	mov	r2, r0
 80014d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014d6:	4611      	mov	r1, r2
 80014d8:	4618      	mov	r0, r3
 80014da:	f7ff ff5f 	bl	800139c <__NVIC_SetPriority>
}
 80014de:	bf00      	nop
 80014e0:	3718      	adds	r7, #24
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}

080014e6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014e6:	b580      	push	{r7, lr}
 80014e8:	b082      	sub	sp, #8
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	4603      	mov	r3, r0
 80014ee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff ff35 	bl	8001364 <__NVIC_EnableIRQ>
}
 80014fa:	bf00      	nop
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001502:	b580      	push	{r7, lr}
 8001504:	b082      	sub	sp, #8
 8001506:	af00      	add	r7, sp, #0
 8001508:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800150a:	6878      	ldr	r0, [r7, #4]
 800150c:	f7ff ffa2 	bl	8001454 <SysTick_Config>
 8001510:	4603      	mov	r3, r0
}
 8001512:	4618      	mov	r0, r3
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
	...

0800151c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800151c:	b480      	push	{r7}
 800151e:	b08b      	sub	sp, #44	@ 0x2c
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001526:	2300      	movs	r3, #0
 8001528:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800152a:	2300      	movs	r3, #0
 800152c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800152e:	e169      	b.n	8001804 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001530:	2201      	movs	r2, #1
 8001532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	69fa      	ldr	r2, [r7, #28]
 8001540:	4013      	ands	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001544:	69ba      	ldr	r2, [r7, #24]
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	429a      	cmp	r2, r3
 800154a:	f040 8158 	bne.w	80017fe <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	4a9a      	ldr	r2, [pc, #616]	@ (80017bc <HAL_GPIO_Init+0x2a0>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d05e      	beq.n	8001616 <HAL_GPIO_Init+0xfa>
 8001558:	4a98      	ldr	r2, [pc, #608]	@ (80017bc <HAL_GPIO_Init+0x2a0>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d875      	bhi.n	800164a <HAL_GPIO_Init+0x12e>
 800155e:	4a98      	ldr	r2, [pc, #608]	@ (80017c0 <HAL_GPIO_Init+0x2a4>)
 8001560:	4293      	cmp	r3, r2
 8001562:	d058      	beq.n	8001616 <HAL_GPIO_Init+0xfa>
 8001564:	4a96      	ldr	r2, [pc, #600]	@ (80017c0 <HAL_GPIO_Init+0x2a4>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d86f      	bhi.n	800164a <HAL_GPIO_Init+0x12e>
 800156a:	4a96      	ldr	r2, [pc, #600]	@ (80017c4 <HAL_GPIO_Init+0x2a8>)
 800156c:	4293      	cmp	r3, r2
 800156e:	d052      	beq.n	8001616 <HAL_GPIO_Init+0xfa>
 8001570:	4a94      	ldr	r2, [pc, #592]	@ (80017c4 <HAL_GPIO_Init+0x2a8>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d869      	bhi.n	800164a <HAL_GPIO_Init+0x12e>
 8001576:	4a94      	ldr	r2, [pc, #592]	@ (80017c8 <HAL_GPIO_Init+0x2ac>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d04c      	beq.n	8001616 <HAL_GPIO_Init+0xfa>
 800157c:	4a92      	ldr	r2, [pc, #584]	@ (80017c8 <HAL_GPIO_Init+0x2ac>)
 800157e:	4293      	cmp	r3, r2
 8001580:	d863      	bhi.n	800164a <HAL_GPIO_Init+0x12e>
 8001582:	4a92      	ldr	r2, [pc, #584]	@ (80017cc <HAL_GPIO_Init+0x2b0>)
 8001584:	4293      	cmp	r3, r2
 8001586:	d046      	beq.n	8001616 <HAL_GPIO_Init+0xfa>
 8001588:	4a90      	ldr	r2, [pc, #576]	@ (80017cc <HAL_GPIO_Init+0x2b0>)
 800158a:	4293      	cmp	r3, r2
 800158c:	d85d      	bhi.n	800164a <HAL_GPIO_Init+0x12e>
 800158e:	2b12      	cmp	r3, #18
 8001590:	d82a      	bhi.n	80015e8 <HAL_GPIO_Init+0xcc>
 8001592:	2b12      	cmp	r3, #18
 8001594:	d859      	bhi.n	800164a <HAL_GPIO_Init+0x12e>
 8001596:	a201      	add	r2, pc, #4	@ (adr r2, 800159c <HAL_GPIO_Init+0x80>)
 8001598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800159c:	08001617 	.word	0x08001617
 80015a0:	080015f1 	.word	0x080015f1
 80015a4:	08001603 	.word	0x08001603
 80015a8:	08001645 	.word	0x08001645
 80015ac:	0800164b 	.word	0x0800164b
 80015b0:	0800164b 	.word	0x0800164b
 80015b4:	0800164b 	.word	0x0800164b
 80015b8:	0800164b 	.word	0x0800164b
 80015bc:	0800164b 	.word	0x0800164b
 80015c0:	0800164b 	.word	0x0800164b
 80015c4:	0800164b 	.word	0x0800164b
 80015c8:	0800164b 	.word	0x0800164b
 80015cc:	0800164b 	.word	0x0800164b
 80015d0:	0800164b 	.word	0x0800164b
 80015d4:	0800164b 	.word	0x0800164b
 80015d8:	0800164b 	.word	0x0800164b
 80015dc:	0800164b 	.word	0x0800164b
 80015e0:	080015f9 	.word	0x080015f9
 80015e4:	0800160d 	.word	0x0800160d
 80015e8:	4a79      	ldr	r2, [pc, #484]	@ (80017d0 <HAL_GPIO_Init+0x2b4>)
 80015ea:	4293      	cmp	r3, r2
 80015ec:	d013      	beq.n	8001616 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80015ee:	e02c      	b.n	800164a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	623b      	str	r3, [r7, #32]
          break;
 80015f6:	e029      	b.n	800164c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	3304      	adds	r3, #4
 80015fe:	623b      	str	r3, [r7, #32]
          break;
 8001600:	e024      	b.n	800164c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001602:	683b      	ldr	r3, [r7, #0]
 8001604:	68db      	ldr	r3, [r3, #12]
 8001606:	3308      	adds	r3, #8
 8001608:	623b      	str	r3, [r7, #32]
          break;
 800160a:	e01f      	b.n	800164c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	68db      	ldr	r3, [r3, #12]
 8001610:	330c      	adds	r3, #12
 8001612:	623b      	str	r3, [r7, #32]
          break;
 8001614:	e01a      	b.n	800164c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d102      	bne.n	8001624 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800161e:	2304      	movs	r3, #4
 8001620:	623b      	str	r3, [r7, #32]
          break;
 8001622:	e013      	b.n	800164c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	689b      	ldr	r3, [r3, #8]
 8001628:	2b01      	cmp	r3, #1
 800162a:	d105      	bne.n	8001638 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800162c:	2308      	movs	r3, #8
 800162e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	69fa      	ldr	r2, [r7, #28]
 8001634:	611a      	str	r2, [r3, #16]
          break;
 8001636:	e009      	b.n	800164c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001638:	2308      	movs	r3, #8
 800163a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	69fa      	ldr	r2, [r7, #28]
 8001640:	615a      	str	r2, [r3, #20]
          break;
 8001642:	e003      	b.n	800164c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001644:	2300      	movs	r3, #0
 8001646:	623b      	str	r3, [r7, #32]
          break;
 8001648:	e000      	b.n	800164c <HAL_GPIO_Init+0x130>
          break;
 800164a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	2bff      	cmp	r3, #255	@ 0xff
 8001650:	d801      	bhi.n	8001656 <HAL_GPIO_Init+0x13a>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	e001      	b.n	800165a <HAL_GPIO_Init+0x13e>
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	3304      	adds	r3, #4
 800165a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800165c:	69bb      	ldr	r3, [r7, #24]
 800165e:	2bff      	cmp	r3, #255	@ 0xff
 8001660:	d802      	bhi.n	8001668 <HAL_GPIO_Init+0x14c>
 8001662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001664:	009b      	lsls	r3, r3, #2
 8001666:	e002      	b.n	800166e <HAL_GPIO_Init+0x152>
 8001668:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800166a:	3b08      	subs	r3, #8
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	210f      	movs	r1, #15
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	fa01 f303 	lsl.w	r3, r1, r3
 800167c:	43db      	mvns	r3, r3
 800167e:	401a      	ands	r2, r3
 8001680:	6a39      	ldr	r1, [r7, #32]
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	fa01 f303 	lsl.w	r3, r1, r3
 8001688:	431a      	orrs	r2, r3
 800168a:	697b      	ldr	r3, [r7, #20]
 800168c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001696:	2b00      	cmp	r3, #0
 8001698:	f000 80b1 	beq.w	80017fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800169c:	4b4d      	ldr	r3, [pc, #308]	@ (80017d4 <HAL_GPIO_Init+0x2b8>)
 800169e:	699b      	ldr	r3, [r3, #24]
 80016a0:	4a4c      	ldr	r2, [pc, #304]	@ (80017d4 <HAL_GPIO_Init+0x2b8>)
 80016a2:	f043 0301 	orr.w	r3, r3, #1
 80016a6:	6193      	str	r3, [r2, #24]
 80016a8:	4b4a      	ldr	r3, [pc, #296]	@ (80017d4 <HAL_GPIO_Init+0x2b8>)
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	f003 0301 	and.w	r3, r3, #1
 80016b0:	60bb      	str	r3, [r7, #8]
 80016b2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80016b4:	4a48      	ldr	r2, [pc, #288]	@ (80017d8 <HAL_GPIO_Init+0x2bc>)
 80016b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016b8:	089b      	lsrs	r3, r3, #2
 80016ba:	3302      	adds	r3, #2
 80016bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016c0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80016c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016c4:	f003 0303 	and.w	r3, r3, #3
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	220f      	movs	r2, #15
 80016cc:	fa02 f303 	lsl.w	r3, r2, r3
 80016d0:	43db      	mvns	r3, r3
 80016d2:	68fa      	ldr	r2, [r7, #12]
 80016d4:	4013      	ands	r3, r2
 80016d6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	4a40      	ldr	r2, [pc, #256]	@ (80017dc <HAL_GPIO_Init+0x2c0>)
 80016dc:	4293      	cmp	r3, r2
 80016de:	d013      	beq.n	8001708 <HAL_GPIO_Init+0x1ec>
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	4a3f      	ldr	r2, [pc, #252]	@ (80017e0 <HAL_GPIO_Init+0x2c4>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d00d      	beq.n	8001704 <HAL_GPIO_Init+0x1e8>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4a3e      	ldr	r2, [pc, #248]	@ (80017e4 <HAL_GPIO_Init+0x2c8>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d007      	beq.n	8001700 <HAL_GPIO_Init+0x1e4>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	4a3d      	ldr	r2, [pc, #244]	@ (80017e8 <HAL_GPIO_Init+0x2cc>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d101      	bne.n	80016fc <HAL_GPIO_Init+0x1e0>
 80016f8:	2303      	movs	r3, #3
 80016fa:	e006      	b.n	800170a <HAL_GPIO_Init+0x1ee>
 80016fc:	2304      	movs	r3, #4
 80016fe:	e004      	b.n	800170a <HAL_GPIO_Init+0x1ee>
 8001700:	2302      	movs	r3, #2
 8001702:	e002      	b.n	800170a <HAL_GPIO_Init+0x1ee>
 8001704:	2301      	movs	r3, #1
 8001706:	e000      	b.n	800170a <HAL_GPIO_Init+0x1ee>
 8001708:	2300      	movs	r3, #0
 800170a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800170c:	f002 0203 	and.w	r2, r2, #3
 8001710:	0092      	lsls	r2, r2, #2
 8001712:	4093      	lsls	r3, r2
 8001714:	68fa      	ldr	r2, [r7, #12]
 8001716:	4313      	orrs	r3, r2
 8001718:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800171a:	492f      	ldr	r1, [pc, #188]	@ (80017d8 <HAL_GPIO_Init+0x2bc>)
 800171c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800171e:	089b      	lsrs	r3, r3, #2
 8001720:	3302      	adds	r3, #2
 8001722:	68fa      	ldr	r2, [r7, #12]
 8001724:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001730:	2b00      	cmp	r3, #0
 8001732:	d006      	beq.n	8001742 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001734:	4b2d      	ldr	r3, [pc, #180]	@ (80017ec <HAL_GPIO_Init+0x2d0>)
 8001736:	689a      	ldr	r2, [r3, #8]
 8001738:	492c      	ldr	r1, [pc, #176]	@ (80017ec <HAL_GPIO_Init+0x2d0>)
 800173a:	69bb      	ldr	r3, [r7, #24]
 800173c:	4313      	orrs	r3, r2
 800173e:	608b      	str	r3, [r1, #8]
 8001740:	e006      	b.n	8001750 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001742:	4b2a      	ldr	r3, [pc, #168]	@ (80017ec <HAL_GPIO_Init+0x2d0>)
 8001744:	689a      	ldr	r2, [r3, #8]
 8001746:	69bb      	ldr	r3, [r7, #24]
 8001748:	43db      	mvns	r3, r3
 800174a:	4928      	ldr	r1, [pc, #160]	@ (80017ec <HAL_GPIO_Init+0x2d0>)
 800174c:	4013      	ands	r3, r2
 800174e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	685b      	ldr	r3, [r3, #4]
 8001754:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001758:	2b00      	cmp	r3, #0
 800175a:	d006      	beq.n	800176a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800175c:	4b23      	ldr	r3, [pc, #140]	@ (80017ec <HAL_GPIO_Init+0x2d0>)
 800175e:	68da      	ldr	r2, [r3, #12]
 8001760:	4922      	ldr	r1, [pc, #136]	@ (80017ec <HAL_GPIO_Init+0x2d0>)
 8001762:	69bb      	ldr	r3, [r7, #24]
 8001764:	4313      	orrs	r3, r2
 8001766:	60cb      	str	r3, [r1, #12]
 8001768:	e006      	b.n	8001778 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800176a:	4b20      	ldr	r3, [pc, #128]	@ (80017ec <HAL_GPIO_Init+0x2d0>)
 800176c:	68da      	ldr	r2, [r3, #12]
 800176e:	69bb      	ldr	r3, [r7, #24]
 8001770:	43db      	mvns	r3, r3
 8001772:	491e      	ldr	r1, [pc, #120]	@ (80017ec <HAL_GPIO_Init+0x2d0>)
 8001774:	4013      	ands	r3, r2
 8001776:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	685b      	ldr	r3, [r3, #4]
 800177c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d006      	beq.n	8001792 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001784:	4b19      	ldr	r3, [pc, #100]	@ (80017ec <HAL_GPIO_Init+0x2d0>)
 8001786:	685a      	ldr	r2, [r3, #4]
 8001788:	4918      	ldr	r1, [pc, #96]	@ (80017ec <HAL_GPIO_Init+0x2d0>)
 800178a:	69bb      	ldr	r3, [r7, #24]
 800178c:	4313      	orrs	r3, r2
 800178e:	604b      	str	r3, [r1, #4]
 8001790:	e006      	b.n	80017a0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001792:	4b16      	ldr	r3, [pc, #88]	@ (80017ec <HAL_GPIO_Init+0x2d0>)
 8001794:	685a      	ldr	r2, [r3, #4]
 8001796:	69bb      	ldr	r3, [r7, #24]
 8001798:	43db      	mvns	r3, r3
 800179a:	4914      	ldr	r1, [pc, #80]	@ (80017ec <HAL_GPIO_Init+0x2d0>)
 800179c:	4013      	ands	r3, r2
 800179e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d021      	beq.n	80017f0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80017ac:	4b0f      	ldr	r3, [pc, #60]	@ (80017ec <HAL_GPIO_Init+0x2d0>)
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	490e      	ldr	r1, [pc, #56]	@ (80017ec <HAL_GPIO_Init+0x2d0>)
 80017b2:	69bb      	ldr	r3, [r7, #24]
 80017b4:	4313      	orrs	r3, r2
 80017b6:	600b      	str	r3, [r1, #0]
 80017b8:	e021      	b.n	80017fe <HAL_GPIO_Init+0x2e2>
 80017ba:	bf00      	nop
 80017bc:	10320000 	.word	0x10320000
 80017c0:	10310000 	.word	0x10310000
 80017c4:	10220000 	.word	0x10220000
 80017c8:	10210000 	.word	0x10210000
 80017cc:	10120000 	.word	0x10120000
 80017d0:	10110000 	.word	0x10110000
 80017d4:	40021000 	.word	0x40021000
 80017d8:	40010000 	.word	0x40010000
 80017dc:	40010800 	.word	0x40010800
 80017e0:	40010c00 	.word	0x40010c00
 80017e4:	40011000 	.word	0x40011000
 80017e8:	40011400 	.word	0x40011400
 80017ec:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80017f0:	4b0b      	ldr	r3, [pc, #44]	@ (8001820 <HAL_GPIO_Init+0x304>)
 80017f2:	681a      	ldr	r2, [r3, #0]
 80017f4:	69bb      	ldr	r3, [r7, #24]
 80017f6:	43db      	mvns	r3, r3
 80017f8:	4909      	ldr	r1, [pc, #36]	@ (8001820 <HAL_GPIO_Init+0x304>)
 80017fa:	4013      	ands	r3, r2
 80017fc:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80017fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001800:	3301      	adds	r3, #1
 8001802:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001804:	683b      	ldr	r3, [r7, #0]
 8001806:	681a      	ldr	r2, [r3, #0]
 8001808:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800180a:	fa22 f303 	lsr.w	r3, r2, r3
 800180e:	2b00      	cmp	r3, #0
 8001810:	f47f ae8e 	bne.w	8001530 <HAL_GPIO_Init+0x14>
  }
}
 8001814:	bf00      	nop
 8001816:	bf00      	nop
 8001818:	372c      	adds	r7, #44	@ 0x2c
 800181a:	46bd      	mov	sp, r7
 800181c:	bc80      	pop	{r7}
 800181e:	4770      	bx	lr
 8001820:	40010400 	.word	0x40010400

08001824 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	6078      	str	r0, [r7, #4]
 800182c:	460b      	mov	r3, r1
 800182e:	807b      	strh	r3, [r7, #2]
 8001830:	4613      	mov	r3, r2
 8001832:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001834:	787b      	ldrb	r3, [r7, #1]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d003      	beq.n	8001842 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800183a:	887a      	ldrh	r2, [r7, #2]
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001840:	e003      	b.n	800184a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001842:	887b      	ldrh	r3, [r7, #2]
 8001844:	041a      	lsls	r2, r3, #16
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	611a      	str	r2, [r3, #16]
}
 800184a:	bf00      	nop
 800184c:	370c      	adds	r7, #12
 800184e:	46bd      	mov	sp, r7
 8001850:	bc80      	pop	{r7}
 8001852:	4770      	bx	lr

08001854 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b082      	sub	sp, #8
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800185e:	4b08      	ldr	r3, [pc, #32]	@ (8001880 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001860:	695a      	ldr	r2, [r3, #20]
 8001862:	88fb      	ldrh	r3, [r7, #6]
 8001864:	4013      	ands	r3, r2
 8001866:	2b00      	cmp	r3, #0
 8001868:	d006      	beq.n	8001878 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800186a:	4a05      	ldr	r2, [pc, #20]	@ (8001880 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800186c:	88fb      	ldrh	r3, [r7, #6]
 800186e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001870:	88fb      	ldrh	r3, [r7, #6]
 8001872:	4618      	mov	r0, r3
 8001874:	f000 f806 	bl	8001884 <HAL_GPIO_EXTI_Callback>
  }
}
 8001878:	bf00      	nop
 800187a:	3708      	adds	r7, #8
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40010400 	.word	0x40010400

08001884 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800188e:	bf00      	nop
 8001890:	370c      	adds	r7, #12
 8001892:	46bd      	mov	sp, r7
 8001894:	bc80      	pop	{r7}
 8001896:	4770      	bx	lr

08001898 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b086      	sub	sp, #24
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d101      	bne.n	80018aa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018a6:	2301      	movs	r3, #1
 80018a8:	e272      	b.n	8001d90 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f003 0301 	and.w	r3, r3, #1
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	f000 8087 	beq.w	80019c6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80018b8:	4b92      	ldr	r3, [pc, #584]	@ (8001b04 <HAL_RCC_OscConfig+0x26c>)
 80018ba:	685b      	ldr	r3, [r3, #4]
 80018bc:	f003 030c 	and.w	r3, r3, #12
 80018c0:	2b04      	cmp	r3, #4
 80018c2:	d00c      	beq.n	80018de <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80018c4:	4b8f      	ldr	r3, [pc, #572]	@ (8001b04 <HAL_RCC_OscConfig+0x26c>)
 80018c6:	685b      	ldr	r3, [r3, #4]
 80018c8:	f003 030c 	and.w	r3, r3, #12
 80018cc:	2b08      	cmp	r3, #8
 80018ce:	d112      	bne.n	80018f6 <HAL_RCC_OscConfig+0x5e>
 80018d0:	4b8c      	ldr	r3, [pc, #560]	@ (8001b04 <HAL_RCC_OscConfig+0x26c>)
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80018d8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018dc:	d10b      	bne.n	80018f6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018de:	4b89      	ldr	r3, [pc, #548]	@ (8001b04 <HAL_RCC_OscConfig+0x26c>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d06c      	beq.n	80019c4 <HAL_RCC_OscConfig+0x12c>
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	685b      	ldr	r3, [r3, #4]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d168      	bne.n	80019c4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e24c      	b.n	8001d90 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80018fe:	d106      	bne.n	800190e <HAL_RCC_OscConfig+0x76>
 8001900:	4b80      	ldr	r3, [pc, #512]	@ (8001b04 <HAL_RCC_OscConfig+0x26c>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a7f      	ldr	r2, [pc, #508]	@ (8001b04 <HAL_RCC_OscConfig+0x26c>)
 8001906:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800190a:	6013      	str	r3, [r2, #0]
 800190c:	e02e      	b.n	800196c <HAL_RCC_OscConfig+0xd4>
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d10c      	bne.n	8001930 <HAL_RCC_OscConfig+0x98>
 8001916:	4b7b      	ldr	r3, [pc, #492]	@ (8001b04 <HAL_RCC_OscConfig+0x26c>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	4a7a      	ldr	r2, [pc, #488]	@ (8001b04 <HAL_RCC_OscConfig+0x26c>)
 800191c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001920:	6013      	str	r3, [r2, #0]
 8001922:	4b78      	ldr	r3, [pc, #480]	@ (8001b04 <HAL_RCC_OscConfig+0x26c>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a77      	ldr	r2, [pc, #476]	@ (8001b04 <HAL_RCC_OscConfig+0x26c>)
 8001928:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800192c:	6013      	str	r3, [r2, #0]
 800192e:	e01d      	b.n	800196c <HAL_RCC_OscConfig+0xd4>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001938:	d10c      	bne.n	8001954 <HAL_RCC_OscConfig+0xbc>
 800193a:	4b72      	ldr	r3, [pc, #456]	@ (8001b04 <HAL_RCC_OscConfig+0x26c>)
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	4a71      	ldr	r2, [pc, #452]	@ (8001b04 <HAL_RCC_OscConfig+0x26c>)
 8001940:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001944:	6013      	str	r3, [r2, #0]
 8001946:	4b6f      	ldr	r3, [pc, #444]	@ (8001b04 <HAL_RCC_OscConfig+0x26c>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a6e      	ldr	r2, [pc, #440]	@ (8001b04 <HAL_RCC_OscConfig+0x26c>)
 800194c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001950:	6013      	str	r3, [r2, #0]
 8001952:	e00b      	b.n	800196c <HAL_RCC_OscConfig+0xd4>
 8001954:	4b6b      	ldr	r3, [pc, #428]	@ (8001b04 <HAL_RCC_OscConfig+0x26c>)
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a6a      	ldr	r2, [pc, #424]	@ (8001b04 <HAL_RCC_OscConfig+0x26c>)
 800195a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800195e:	6013      	str	r3, [r2, #0]
 8001960:	4b68      	ldr	r3, [pc, #416]	@ (8001b04 <HAL_RCC_OscConfig+0x26c>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a67      	ldr	r2, [pc, #412]	@ (8001b04 <HAL_RCC_OscConfig+0x26c>)
 8001966:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800196a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d013      	beq.n	800199c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001974:	f7ff fc96 	bl	80012a4 <HAL_GetTick>
 8001978:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800197a:	e008      	b.n	800198e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800197c:	f7ff fc92 	bl	80012a4 <HAL_GetTick>
 8001980:	4602      	mov	r2, r0
 8001982:	693b      	ldr	r3, [r7, #16]
 8001984:	1ad3      	subs	r3, r2, r3
 8001986:	2b64      	cmp	r3, #100	@ 0x64
 8001988:	d901      	bls.n	800198e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800198a:	2303      	movs	r3, #3
 800198c:	e200      	b.n	8001d90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800198e:	4b5d      	ldr	r3, [pc, #372]	@ (8001b04 <HAL_RCC_OscConfig+0x26c>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001996:	2b00      	cmp	r3, #0
 8001998:	d0f0      	beq.n	800197c <HAL_RCC_OscConfig+0xe4>
 800199a:	e014      	b.n	80019c6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800199c:	f7ff fc82 	bl	80012a4 <HAL_GetTick>
 80019a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019a2:	e008      	b.n	80019b6 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019a4:	f7ff fc7e 	bl	80012a4 <HAL_GetTick>
 80019a8:	4602      	mov	r2, r0
 80019aa:	693b      	ldr	r3, [r7, #16]
 80019ac:	1ad3      	subs	r3, r2, r3
 80019ae:	2b64      	cmp	r3, #100	@ 0x64
 80019b0:	d901      	bls.n	80019b6 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80019b2:	2303      	movs	r3, #3
 80019b4:	e1ec      	b.n	8001d90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019b6:	4b53      	ldr	r3, [pc, #332]	@ (8001b04 <HAL_RCC_OscConfig+0x26c>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d1f0      	bne.n	80019a4 <HAL_RCC_OscConfig+0x10c>
 80019c2:	e000      	b.n	80019c6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d063      	beq.n	8001a9a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80019d2:	4b4c      	ldr	r3, [pc, #304]	@ (8001b04 <HAL_RCC_OscConfig+0x26c>)
 80019d4:	685b      	ldr	r3, [r3, #4]
 80019d6:	f003 030c 	and.w	r3, r3, #12
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d00b      	beq.n	80019f6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80019de:	4b49      	ldr	r3, [pc, #292]	@ (8001b04 <HAL_RCC_OscConfig+0x26c>)
 80019e0:	685b      	ldr	r3, [r3, #4]
 80019e2:	f003 030c 	and.w	r3, r3, #12
 80019e6:	2b08      	cmp	r3, #8
 80019e8:	d11c      	bne.n	8001a24 <HAL_RCC_OscConfig+0x18c>
 80019ea:	4b46      	ldr	r3, [pc, #280]	@ (8001b04 <HAL_RCC_OscConfig+0x26c>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d116      	bne.n	8001a24 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019f6:	4b43      	ldr	r3, [pc, #268]	@ (8001b04 <HAL_RCC_OscConfig+0x26c>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 0302 	and.w	r3, r3, #2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d005      	beq.n	8001a0e <HAL_RCC_OscConfig+0x176>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	691b      	ldr	r3, [r3, #16]
 8001a06:	2b01      	cmp	r3, #1
 8001a08:	d001      	beq.n	8001a0e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001a0a:	2301      	movs	r3, #1
 8001a0c:	e1c0      	b.n	8001d90 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a0e:	4b3d      	ldr	r3, [pc, #244]	@ (8001b04 <HAL_RCC_OscConfig+0x26c>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	695b      	ldr	r3, [r3, #20]
 8001a1a:	00db      	lsls	r3, r3, #3
 8001a1c:	4939      	ldr	r1, [pc, #228]	@ (8001b04 <HAL_RCC_OscConfig+0x26c>)
 8001a1e:	4313      	orrs	r3, r2
 8001a20:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a22:	e03a      	b.n	8001a9a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	691b      	ldr	r3, [r3, #16]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d020      	beq.n	8001a6e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a2c:	4b36      	ldr	r3, [pc, #216]	@ (8001b08 <HAL_RCC_OscConfig+0x270>)
 8001a2e:	2201      	movs	r2, #1
 8001a30:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a32:	f7ff fc37 	bl	80012a4 <HAL_GetTick>
 8001a36:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a38:	e008      	b.n	8001a4c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a3a:	f7ff fc33 	bl	80012a4 <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d901      	bls.n	8001a4c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e1a1      	b.n	8001d90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a4c:	4b2d      	ldr	r3, [pc, #180]	@ (8001b04 <HAL_RCC_OscConfig+0x26c>)
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	f003 0302 	and.w	r3, r3, #2
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d0f0      	beq.n	8001a3a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a58:	4b2a      	ldr	r3, [pc, #168]	@ (8001b04 <HAL_RCC_OscConfig+0x26c>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	695b      	ldr	r3, [r3, #20]
 8001a64:	00db      	lsls	r3, r3, #3
 8001a66:	4927      	ldr	r1, [pc, #156]	@ (8001b04 <HAL_RCC_OscConfig+0x26c>)
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	600b      	str	r3, [r1, #0]
 8001a6c:	e015      	b.n	8001a9a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a6e:	4b26      	ldr	r3, [pc, #152]	@ (8001b08 <HAL_RCC_OscConfig+0x270>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a74:	f7ff fc16 	bl	80012a4 <HAL_GetTick>
 8001a78:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a7c:	f7ff fc12 	bl	80012a4 <HAL_GetTick>
 8001a80:	4602      	mov	r2, r0
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e180      	b.n	8001d90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a8e:	4b1d      	ldr	r3, [pc, #116]	@ (8001b04 <HAL_RCC_OscConfig+0x26c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f003 0302 	and.w	r3, r3, #2
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d1f0      	bne.n	8001a7c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	f003 0308 	and.w	r3, r3, #8
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d03a      	beq.n	8001b1c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	699b      	ldr	r3, [r3, #24]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d019      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001aae:	4b17      	ldr	r3, [pc, #92]	@ (8001b0c <HAL_RCC_OscConfig+0x274>)
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ab4:	f7ff fbf6 	bl	80012a4 <HAL_GetTick>
 8001ab8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001aba:	e008      	b.n	8001ace <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001abc:	f7ff fbf2 	bl	80012a4 <HAL_GetTick>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	693b      	ldr	r3, [r7, #16]
 8001ac4:	1ad3      	subs	r3, r2, r3
 8001ac6:	2b02      	cmp	r3, #2
 8001ac8:	d901      	bls.n	8001ace <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e160      	b.n	8001d90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ace:	4b0d      	ldr	r3, [pc, #52]	@ (8001b04 <HAL_RCC_OscConfig+0x26c>)
 8001ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ad2:	f003 0302 	and.w	r3, r3, #2
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d0f0      	beq.n	8001abc <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ada:	2001      	movs	r0, #1
 8001adc:	f000 face 	bl	800207c <RCC_Delay>
 8001ae0:	e01c      	b.n	8001b1c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ae2:	4b0a      	ldr	r3, [pc, #40]	@ (8001b0c <HAL_RCC_OscConfig+0x274>)
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ae8:	f7ff fbdc 	bl	80012a4 <HAL_GetTick>
 8001aec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001aee:	e00f      	b.n	8001b10 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001af0:	f7ff fbd8 	bl	80012a4 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d908      	bls.n	8001b10 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e146      	b.n	8001d90 <HAL_RCC_OscConfig+0x4f8>
 8001b02:	bf00      	nop
 8001b04:	40021000 	.word	0x40021000
 8001b08:	42420000 	.word	0x42420000
 8001b0c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b10:	4b92      	ldr	r3, [pc, #584]	@ (8001d5c <HAL_RCC_OscConfig+0x4c4>)
 8001b12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d1e9      	bne.n	8001af0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0304 	and.w	r3, r3, #4
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	f000 80a6 	beq.w	8001c76 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b2e:	4b8b      	ldr	r3, [pc, #556]	@ (8001d5c <HAL_RCC_OscConfig+0x4c4>)
 8001b30:	69db      	ldr	r3, [r3, #28]
 8001b32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d10d      	bne.n	8001b56 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b3a:	4b88      	ldr	r3, [pc, #544]	@ (8001d5c <HAL_RCC_OscConfig+0x4c4>)
 8001b3c:	69db      	ldr	r3, [r3, #28]
 8001b3e:	4a87      	ldr	r2, [pc, #540]	@ (8001d5c <HAL_RCC_OscConfig+0x4c4>)
 8001b40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b44:	61d3      	str	r3, [r2, #28]
 8001b46:	4b85      	ldr	r3, [pc, #532]	@ (8001d5c <HAL_RCC_OscConfig+0x4c4>)
 8001b48:	69db      	ldr	r3, [r3, #28]
 8001b4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b4e:	60bb      	str	r3, [r7, #8]
 8001b50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b52:	2301      	movs	r3, #1
 8001b54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b56:	4b82      	ldr	r3, [pc, #520]	@ (8001d60 <HAL_RCC_OscConfig+0x4c8>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d118      	bne.n	8001b94 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b62:	4b7f      	ldr	r3, [pc, #508]	@ (8001d60 <HAL_RCC_OscConfig+0x4c8>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4a7e      	ldr	r2, [pc, #504]	@ (8001d60 <HAL_RCC_OscConfig+0x4c8>)
 8001b68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b6e:	f7ff fb99 	bl	80012a4 <HAL_GetTick>
 8001b72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b74:	e008      	b.n	8001b88 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b76:	f7ff fb95 	bl	80012a4 <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	2b64      	cmp	r3, #100	@ 0x64
 8001b82:	d901      	bls.n	8001b88 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	e103      	b.n	8001d90 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b88:	4b75      	ldr	r3, [pc, #468]	@ (8001d60 <HAL_RCC_OscConfig+0x4c8>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d0f0      	beq.n	8001b76 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	68db      	ldr	r3, [r3, #12]
 8001b98:	2b01      	cmp	r3, #1
 8001b9a:	d106      	bne.n	8001baa <HAL_RCC_OscConfig+0x312>
 8001b9c:	4b6f      	ldr	r3, [pc, #444]	@ (8001d5c <HAL_RCC_OscConfig+0x4c4>)
 8001b9e:	6a1b      	ldr	r3, [r3, #32]
 8001ba0:	4a6e      	ldr	r2, [pc, #440]	@ (8001d5c <HAL_RCC_OscConfig+0x4c4>)
 8001ba2:	f043 0301 	orr.w	r3, r3, #1
 8001ba6:	6213      	str	r3, [r2, #32]
 8001ba8:	e02d      	b.n	8001c06 <HAL_RCC_OscConfig+0x36e>
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	68db      	ldr	r3, [r3, #12]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d10c      	bne.n	8001bcc <HAL_RCC_OscConfig+0x334>
 8001bb2:	4b6a      	ldr	r3, [pc, #424]	@ (8001d5c <HAL_RCC_OscConfig+0x4c4>)
 8001bb4:	6a1b      	ldr	r3, [r3, #32]
 8001bb6:	4a69      	ldr	r2, [pc, #420]	@ (8001d5c <HAL_RCC_OscConfig+0x4c4>)
 8001bb8:	f023 0301 	bic.w	r3, r3, #1
 8001bbc:	6213      	str	r3, [r2, #32]
 8001bbe:	4b67      	ldr	r3, [pc, #412]	@ (8001d5c <HAL_RCC_OscConfig+0x4c4>)
 8001bc0:	6a1b      	ldr	r3, [r3, #32]
 8001bc2:	4a66      	ldr	r2, [pc, #408]	@ (8001d5c <HAL_RCC_OscConfig+0x4c4>)
 8001bc4:	f023 0304 	bic.w	r3, r3, #4
 8001bc8:	6213      	str	r3, [r2, #32]
 8001bca:	e01c      	b.n	8001c06 <HAL_RCC_OscConfig+0x36e>
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	2b05      	cmp	r3, #5
 8001bd2:	d10c      	bne.n	8001bee <HAL_RCC_OscConfig+0x356>
 8001bd4:	4b61      	ldr	r3, [pc, #388]	@ (8001d5c <HAL_RCC_OscConfig+0x4c4>)
 8001bd6:	6a1b      	ldr	r3, [r3, #32]
 8001bd8:	4a60      	ldr	r2, [pc, #384]	@ (8001d5c <HAL_RCC_OscConfig+0x4c4>)
 8001bda:	f043 0304 	orr.w	r3, r3, #4
 8001bde:	6213      	str	r3, [r2, #32]
 8001be0:	4b5e      	ldr	r3, [pc, #376]	@ (8001d5c <HAL_RCC_OscConfig+0x4c4>)
 8001be2:	6a1b      	ldr	r3, [r3, #32]
 8001be4:	4a5d      	ldr	r2, [pc, #372]	@ (8001d5c <HAL_RCC_OscConfig+0x4c4>)
 8001be6:	f043 0301 	orr.w	r3, r3, #1
 8001bea:	6213      	str	r3, [r2, #32]
 8001bec:	e00b      	b.n	8001c06 <HAL_RCC_OscConfig+0x36e>
 8001bee:	4b5b      	ldr	r3, [pc, #364]	@ (8001d5c <HAL_RCC_OscConfig+0x4c4>)
 8001bf0:	6a1b      	ldr	r3, [r3, #32]
 8001bf2:	4a5a      	ldr	r2, [pc, #360]	@ (8001d5c <HAL_RCC_OscConfig+0x4c4>)
 8001bf4:	f023 0301 	bic.w	r3, r3, #1
 8001bf8:	6213      	str	r3, [r2, #32]
 8001bfa:	4b58      	ldr	r3, [pc, #352]	@ (8001d5c <HAL_RCC_OscConfig+0x4c4>)
 8001bfc:	6a1b      	ldr	r3, [r3, #32]
 8001bfe:	4a57      	ldr	r2, [pc, #348]	@ (8001d5c <HAL_RCC_OscConfig+0x4c4>)
 8001c00:	f023 0304 	bic.w	r3, r3, #4
 8001c04:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	68db      	ldr	r3, [r3, #12]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d015      	beq.n	8001c3a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c0e:	f7ff fb49 	bl	80012a4 <HAL_GetTick>
 8001c12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c14:	e00a      	b.n	8001c2c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c16:	f7ff fb45 	bl	80012a4 <HAL_GetTick>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	693b      	ldr	r3, [r7, #16]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c24:	4293      	cmp	r3, r2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e0b1      	b.n	8001d90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c2c:	4b4b      	ldr	r3, [pc, #300]	@ (8001d5c <HAL_RCC_OscConfig+0x4c4>)
 8001c2e:	6a1b      	ldr	r3, [r3, #32]
 8001c30:	f003 0302 	and.w	r3, r3, #2
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d0ee      	beq.n	8001c16 <HAL_RCC_OscConfig+0x37e>
 8001c38:	e014      	b.n	8001c64 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c3a:	f7ff fb33 	bl	80012a4 <HAL_GetTick>
 8001c3e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c40:	e00a      	b.n	8001c58 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c42:	f7ff fb2f 	bl	80012a4 <HAL_GetTick>
 8001c46:	4602      	mov	r2, r0
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	1ad3      	subs	r3, r2, r3
 8001c4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d901      	bls.n	8001c58 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001c54:	2303      	movs	r3, #3
 8001c56:	e09b      	b.n	8001d90 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c58:	4b40      	ldr	r3, [pc, #256]	@ (8001d5c <HAL_RCC_OscConfig+0x4c4>)
 8001c5a:	6a1b      	ldr	r3, [r3, #32]
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d1ee      	bne.n	8001c42 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001c64:	7dfb      	ldrb	r3, [r7, #23]
 8001c66:	2b01      	cmp	r3, #1
 8001c68:	d105      	bne.n	8001c76 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c6a:	4b3c      	ldr	r3, [pc, #240]	@ (8001d5c <HAL_RCC_OscConfig+0x4c4>)
 8001c6c:	69db      	ldr	r3, [r3, #28]
 8001c6e:	4a3b      	ldr	r2, [pc, #236]	@ (8001d5c <HAL_RCC_OscConfig+0x4c4>)
 8001c70:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c74:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	f000 8087 	beq.w	8001d8e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c80:	4b36      	ldr	r3, [pc, #216]	@ (8001d5c <HAL_RCC_OscConfig+0x4c4>)
 8001c82:	685b      	ldr	r3, [r3, #4]
 8001c84:	f003 030c 	and.w	r3, r3, #12
 8001c88:	2b08      	cmp	r3, #8
 8001c8a:	d061      	beq.n	8001d50 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	69db      	ldr	r3, [r3, #28]
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d146      	bne.n	8001d22 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c94:	4b33      	ldr	r3, [pc, #204]	@ (8001d64 <HAL_RCC_OscConfig+0x4cc>)
 8001c96:	2200      	movs	r2, #0
 8001c98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9a:	f7ff fb03 	bl	80012a4 <HAL_GetTick>
 8001c9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ca0:	e008      	b.n	8001cb4 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca2:	f7ff faff 	bl	80012a4 <HAL_GetTick>
 8001ca6:	4602      	mov	r2, r0
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	1ad3      	subs	r3, r2, r3
 8001cac:	2b02      	cmp	r3, #2
 8001cae:	d901      	bls.n	8001cb4 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001cb0:	2303      	movs	r3, #3
 8001cb2:	e06d      	b.n	8001d90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cb4:	4b29      	ldr	r3, [pc, #164]	@ (8001d5c <HAL_RCC_OscConfig+0x4c4>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d1f0      	bne.n	8001ca2 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a1b      	ldr	r3, [r3, #32]
 8001cc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001cc8:	d108      	bne.n	8001cdc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cca:	4b24      	ldr	r3, [pc, #144]	@ (8001d5c <HAL_RCC_OscConfig+0x4c4>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	4921      	ldr	r1, [pc, #132]	@ (8001d5c <HAL_RCC_OscConfig+0x4c4>)
 8001cd8:	4313      	orrs	r3, r2
 8001cda:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cdc:	4b1f      	ldr	r3, [pc, #124]	@ (8001d5c <HAL_RCC_OscConfig+0x4c4>)
 8001cde:	685b      	ldr	r3, [r3, #4]
 8001ce0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6a19      	ldr	r1, [r3, #32]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cec:	430b      	orrs	r3, r1
 8001cee:	491b      	ldr	r1, [pc, #108]	@ (8001d5c <HAL_RCC_OscConfig+0x4c4>)
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cf4:	4b1b      	ldr	r3, [pc, #108]	@ (8001d64 <HAL_RCC_OscConfig+0x4cc>)
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cfa:	f7ff fad3 	bl	80012a4 <HAL_GetTick>
 8001cfe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d00:	e008      	b.n	8001d14 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d02:	f7ff facf 	bl	80012a4 <HAL_GetTick>
 8001d06:	4602      	mov	r2, r0
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	1ad3      	subs	r3, r2, r3
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d901      	bls.n	8001d14 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001d10:	2303      	movs	r3, #3
 8001d12:	e03d      	b.n	8001d90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001d14:	4b11      	ldr	r3, [pc, #68]	@ (8001d5c <HAL_RCC_OscConfig+0x4c4>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d0f0      	beq.n	8001d02 <HAL_RCC_OscConfig+0x46a>
 8001d20:	e035      	b.n	8001d8e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d22:	4b10      	ldr	r3, [pc, #64]	@ (8001d64 <HAL_RCC_OscConfig+0x4cc>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d28:	f7ff fabc 	bl	80012a4 <HAL_GetTick>
 8001d2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d2e:	e008      	b.n	8001d42 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d30:	f7ff fab8 	bl	80012a4 <HAL_GetTick>
 8001d34:	4602      	mov	r2, r0
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	1ad3      	subs	r3, r2, r3
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d901      	bls.n	8001d42 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001d3e:	2303      	movs	r3, #3
 8001d40:	e026      	b.n	8001d90 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001d42:	4b06      	ldr	r3, [pc, #24]	@ (8001d5c <HAL_RCC_OscConfig+0x4c4>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d1f0      	bne.n	8001d30 <HAL_RCC_OscConfig+0x498>
 8001d4e:	e01e      	b.n	8001d8e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	69db      	ldr	r3, [r3, #28]
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d107      	bne.n	8001d68 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e019      	b.n	8001d90 <HAL_RCC_OscConfig+0x4f8>
 8001d5c:	40021000 	.word	0x40021000
 8001d60:	40007000 	.word	0x40007000
 8001d64:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d68:	4b0b      	ldr	r3, [pc, #44]	@ (8001d98 <HAL_RCC_OscConfig+0x500>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6a1b      	ldr	r3, [r3, #32]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d106      	bne.n	8001d8a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d86:	429a      	cmp	r2, r3
 8001d88:	d001      	beq.n	8001d8e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e000      	b.n	8001d90 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001d8e:	2300      	movs	r3, #0
}
 8001d90:	4618      	mov	r0, r3
 8001d92:	3718      	adds	r7, #24
 8001d94:	46bd      	mov	sp, r7
 8001d96:	bd80      	pop	{r7, pc}
 8001d98:	40021000 	.word	0x40021000

08001d9c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d101      	bne.n	8001db0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dac:	2301      	movs	r3, #1
 8001dae:	e0d0      	b.n	8001f52 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001db0:	4b6a      	ldr	r3, [pc, #424]	@ (8001f5c <HAL_RCC_ClockConfig+0x1c0>)
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0307 	and.w	r3, r3, #7
 8001db8:	683a      	ldr	r2, [r7, #0]
 8001dba:	429a      	cmp	r2, r3
 8001dbc:	d910      	bls.n	8001de0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dbe:	4b67      	ldr	r3, [pc, #412]	@ (8001f5c <HAL_RCC_ClockConfig+0x1c0>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f023 0207 	bic.w	r2, r3, #7
 8001dc6:	4965      	ldr	r1, [pc, #404]	@ (8001f5c <HAL_RCC_ClockConfig+0x1c0>)
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	4313      	orrs	r3, r2
 8001dcc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dce:	4b63      	ldr	r3, [pc, #396]	@ (8001f5c <HAL_RCC_ClockConfig+0x1c0>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	683a      	ldr	r2, [r7, #0]
 8001dd8:	429a      	cmp	r2, r3
 8001dda:	d001      	beq.n	8001de0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001ddc:	2301      	movs	r3, #1
 8001dde:	e0b8      	b.n	8001f52 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	f003 0302 	and.w	r3, r3, #2
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d020      	beq.n	8001e2e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f003 0304 	and.w	r3, r3, #4
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d005      	beq.n	8001e04 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001df8:	4b59      	ldr	r3, [pc, #356]	@ (8001f60 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfa:	685b      	ldr	r3, [r3, #4]
 8001dfc:	4a58      	ldr	r2, [pc, #352]	@ (8001f60 <HAL_RCC_ClockConfig+0x1c4>)
 8001dfe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001e02:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0308 	and.w	r3, r3, #8
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d005      	beq.n	8001e1c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e10:	4b53      	ldr	r3, [pc, #332]	@ (8001f60 <HAL_RCC_ClockConfig+0x1c4>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	4a52      	ldr	r2, [pc, #328]	@ (8001f60 <HAL_RCC_ClockConfig+0x1c4>)
 8001e16:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001e1a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e1c:	4b50      	ldr	r3, [pc, #320]	@ (8001f60 <HAL_RCC_ClockConfig+0x1c4>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	494d      	ldr	r1, [pc, #308]	@ (8001f60 <HAL_RCC_ClockConfig+0x1c4>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d040      	beq.n	8001ebc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	685b      	ldr	r3, [r3, #4]
 8001e3e:	2b01      	cmp	r3, #1
 8001e40:	d107      	bne.n	8001e52 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e42:	4b47      	ldr	r3, [pc, #284]	@ (8001f60 <HAL_RCC_ClockConfig+0x1c4>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d115      	bne.n	8001e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e07f      	b.n	8001f52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	2b02      	cmp	r3, #2
 8001e58:	d107      	bne.n	8001e6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e5a:	4b41      	ldr	r3, [pc, #260]	@ (8001f60 <HAL_RCC_ClockConfig+0x1c4>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d109      	bne.n	8001e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e66:	2301      	movs	r3, #1
 8001e68:	e073      	b.n	8001f52 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e6a:	4b3d      	ldr	r3, [pc, #244]	@ (8001f60 <HAL_RCC_ClockConfig+0x1c4>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f003 0302 	and.w	r3, r3, #2
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d101      	bne.n	8001e7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e76:	2301      	movs	r3, #1
 8001e78:	e06b      	b.n	8001f52 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e7a:	4b39      	ldr	r3, [pc, #228]	@ (8001f60 <HAL_RCC_ClockConfig+0x1c4>)
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	f023 0203 	bic.w	r2, r3, #3
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	4936      	ldr	r1, [pc, #216]	@ (8001f60 <HAL_RCC_ClockConfig+0x1c4>)
 8001e88:	4313      	orrs	r3, r2
 8001e8a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e8c:	f7ff fa0a 	bl	80012a4 <HAL_GetTick>
 8001e90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e92:	e00a      	b.n	8001eaa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e94:	f7ff fa06 	bl	80012a4 <HAL_GetTick>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	1ad3      	subs	r3, r2, r3
 8001e9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d901      	bls.n	8001eaa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ea6:	2303      	movs	r3, #3
 8001ea8:	e053      	b.n	8001f52 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eaa:	4b2d      	ldr	r3, [pc, #180]	@ (8001f60 <HAL_RCC_ClockConfig+0x1c4>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f003 020c 	and.w	r2, r3, #12
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	009b      	lsls	r3, r3, #2
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d1eb      	bne.n	8001e94 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ebc:	4b27      	ldr	r3, [pc, #156]	@ (8001f5c <HAL_RCC_ClockConfig+0x1c0>)
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f003 0307 	and.w	r3, r3, #7
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	d210      	bcs.n	8001eec <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eca:	4b24      	ldr	r3, [pc, #144]	@ (8001f5c <HAL_RCC_ClockConfig+0x1c0>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f023 0207 	bic.w	r2, r3, #7
 8001ed2:	4922      	ldr	r1, [pc, #136]	@ (8001f5c <HAL_RCC_ClockConfig+0x1c0>)
 8001ed4:	683b      	ldr	r3, [r7, #0]
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eda:	4b20      	ldr	r3, [pc, #128]	@ (8001f5c <HAL_RCC_ClockConfig+0x1c0>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0307 	and.w	r3, r3, #7
 8001ee2:	683a      	ldr	r2, [r7, #0]
 8001ee4:	429a      	cmp	r2, r3
 8001ee6:	d001      	beq.n	8001eec <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	e032      	b.n	8001f52 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	f003 0304 	and.w	r3, r3, #4
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d008      	beq.n	8001f0a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ef8:	4b19      	ldr	r3, [pc, #100]	@ (8001f60 <HAL_RCC_ClockConfig+0x1c4>)
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	4916      	ldr	r1, [pc, #88]	@ (8001f60 <HAL_RCC_ClockConfig+0x1c4>)
 8001f06:	4313      	orrs	r3, r2
 8001f08:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	f003 0308 	and.w	r3, r3, #8
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d009      	beq.n	8001f2a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001f16:	4b12      	ldr	r3, [pc, #72]	@ (8001f60 <HAL_RCC_ClockConfig+0x1c4>)
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	691b      	ldr	r3, [r3, #16]
 8001f22:	00db      	lsls	r3, r3, #3
 8001f24:	490e      	ldr	r1, [pc, #56]	@ (8001f60 <HAL_RCC_ClockConfig+0x1c4>)
 8001f26:	4313      	orrs	r3, r2
 8001f28:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f2a:	f000 f821 	bl	8001f70 <HAL_RCC_GetSysClockFreq>
 8001f2e:	4602      	mov	r2, r0
 8001f30:	4b0b      	ldr	r3, [pc, #44]	@ (8001f60 <HAL_RCC_ClockConfig+0x1c4>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	091b      	lsrs	r3, r3, #4
 8001f36:	f003 030f 	and.w	r3, r3, #15
 8001f3a:	490a      	ldr	r1, [pc, #40]	@ (8001f64 <HAL_RCC_ClockConfig+0x1c8>)
 8001f3c:	5ccb      	ldrb	r3, [r1, r3]
 8001f3e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f42:	4a09      	ldr	r2, [pc, #36]	@ (8001f68 <HAL_RCC_ClockConfig+0x1cc>)
 8001f44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001f46:	4b09      	ldr	r3, [pc, #36]	@ (8001f6c <HAL_RCC_ClockConfig+0x1d0>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7ff f968 	bl	8001220 <HAL_InitTick>

  return HAL_OK;
 8001f50:	2300      	movs	r3, #0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3710      	adds	r7, #16
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	40022000 	.word	0x40022000
 8001f60:	40021000 	.word	0x40021000
 8001f64:	08002e28 	.word	0x08002e28
 8001f68:	20000000 	.word	0x20000000
 8001f6c:	20000004 	.word	0x20000004

08001f70 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b087      	sub	sp, #28
 8001f74:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f76:	2300      	movs	r3, #0
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	60bb      	str	r3, [r7, #8]
 8001f7e:	2300      	movs	r3, #0
 8001f80:	617b      	str	r3, [r7, #20]
 8001f82:	2300      	movs	r3, #0
 8001f84:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001f86:	2300      	movs	r3, #0
 8001f88:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001f8a:	4b1e      	ldr	r3, [pc, #120]	@ (8002004 <HAL_RCC_GetSysClockFreq+0x94>)
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f003 030c 	and.w	r3, r3, #12
 8001f96:	2b04      	cmp	r3, #4
 8001f98:	d002      	beq.n	8001fa0 <HAL_RCC_GetSysClockFreq+0x30>
 8001f9a:	2b08      	cmp	r3, #8
 8001f9c:	d003      	beq.n	8001fa6 <HAL_RCC_GetSysClockFreq+0x36>
 8001f9e:	e027      	b.n	8001ff0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fa0:	4b19      	ldr	r3, [pc, #100]	@ (8002008 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fa2:	613b      	str	r3, [r7, #16]
      break;
 8001fa4:	e027      	b.n	8001ff6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	0c9b      	lsrs	r3, r3, #18
 8001faa:	f003 030f 	and.w	r3, r3, #15
 8001fae:	4a17      	ldr	r2, [pc, #92]	@ (800200c <HAL_RCC_GetSysClockFreq+0x9c>)
 8001fb0:	5cd3      	ldrb	r3, [r2, r3]
 8001fb2:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d010      	beq.n	8001fe0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001fbe:	4b11      	ldr	r3, [pc, #68]	@ (8002004 <HAL_RCC_GetSysClockFreq+0x94>)
 8001fc0:	685b      	ldr	r3, [r3, #4]
 8001fc2:	0c5b      	lsrs	r3, r3, #17
 8001fc4:	f003 0301 	and.w	r3, r3, #1
 8001fc8:	4a11      	ldr	r2, [pc, #68]	@ (8002010 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001fca:	5cd3      	ldrb	r3, [r2, r3]
 8001fcc:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	4a0d      	ldr	r2, [pc, #52]	@ (8002008 <HAL_RCC_GetSysClockFreq+0x98>)
 8001fd2:	fb03 f202 	mul.w	r2, r3, r2
 8001fd6:	68bb      	ldr	r3, [r7, #8]
 8001fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fdc:	617b      	str	r3, [r7, #20]
 8001fde:	e004      	b.n	8001fea <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	4a0c      	ldr	r2, [pc, #48]	@ (8002014 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001fe4:	fb02 f303 	mul.w	r3, r2, r3
 8001fe8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	613b      	str	r3, [r7, #16]
      break;
 8001fee:	e002      	b.n	8001ff6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001ff0:	4b05      	ldr	r3, [pc, #20]	@ (8002008 <HAL_RCC_GetSysClockFreq+0x98>)
 8001ff2:	613b      	str	r3, [r7, #16]
      break;
 8001ff4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001ff6:	693b      	ldr	r3, [r7, #16]
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	371c      	adds	r7, #28
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bc80      	pop	{r7}
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	40021000 	.word	0x40021000
 8002008:	007a1200 	.word	0x007a1200
 800200c:	08002e40 	.word	0x08002e40
 8002010:	08002e50 	.word	0x08002e50
 8002014:	003d0900 	.word	0x003d0900

08002018 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800201c:	4b02      	ldr	r3, [pc, #8]	@ (8002028 <HAL_RCC_GetHCLKFreq+0x10>)
 800201e:	681b      	ldr	r3, [r3, #0]
}
 8002020:	4618      	mov	r0, r3
 8002022:	46bd      	mov	sp, r7
 8002024:	bc80      	pop	{r7}
 8002026:	4770      	bx	lr
 8002028:	20000000 	.word	0x20000000

0800202c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002030:	f7ff fff2 	bl	8002018 <HAL_RCC_GetHCLKFreq>
 8002034:	4602      	mov	r2, r0
 8002036:	4b05      	ldr	r3, [pc, #20]	@ (800204c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	0a1b      	lsrs	r3, r3, #8
 800203c:	f003 0307 	and.w	r3, r3, #7
 8002040:	4903      	ldr	r1, [pc, #12]	@ (8002050 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002042:	5ccb      	ldrb	r3, [r1, r3]
 8002044:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002048:	4618      	mov	r0, r3
 800204a:	bd80      	pop	{r7, pc}
 800204c:	40021000 	.word	0x40021000
 8002050:	08002e38 	.word	0x08002e38

08002054 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002058:	f7ff ffde 	bl	8002018 <HAL_RCC_GetHCLKFreq>
 800205c:	4602      	mov	r2, r0
 800205e:	4b05      	ldr	r3, [pc, #20]	@ (8002074 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	0adb      	lsrs	r3, r3, #11
 8002064:	f003 0307 	and.w	r3, r3, #7
 8002068:	4903      	ldr	r1, [pc, #12]	@ (8002078 <HAL_RCC_GetPCLK2Freq+0x24>)
 800206a:	5ccb      	ldrb	r3, [r1, r3]
 800206c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002070:	4618      	mov	r0, r3
 8002072:	bd80      	pop	{r7, pc}
 8002074:	40021000 	.word	0x40021000
 8002078:	08002e38 	.word	0x08002e38

0800207c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800207c:	b480      	push	{r7}
 800207e:	b085      	sub	sp, #20
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002084:	4b0a      	ldr	r3, [pc, #40]	@ (80020b0 <RCC_Delay+0x34>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a0a      	ldr	r2, [pc, #40]	@ (80020b4 <RCC_Delay+0x38>)
 800208a:	fba2 2303 	umull	r2, r3, r2, r3
 800208e:	0a5b      	lsrs	r3, r3, #9
 8002090:	687a      	ldr	r2, [r7, #4]
 8002092:	fb02 f303 	mul.w	r3, r2, r3
 8002096:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002098:	bf00      	nop
  }
  while (Delay --);
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	1e5a      	subs	r2, r3, #1
 800209e:	60fa      	str	r2, [r7, #12]
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d1f9      	bne.n	8002098 <RCC_Delay+0x1c>
}
 80020a4:	bf00      	nop
 80020a6:	bf00      	nop
 80020a8:	3714      	adds	r7, #20
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bc80      	pop	{r7}
 80020ae:	4770      	bx	lr
 80020b0:	20000000 	.word	0x20000000
 80020b4:	10624dd3 	.word	0x10624dd3

080020b8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d101      	bne.n	80020ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80020c6:	2301      	movs	r3, #1
 80020c8:	e042      	b.n	8002150 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80020d0:	b2db      	uxtb	r3, r3
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d106      	bne.n	80020e4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2200      	movs	r2, #0
 80020da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80020de:	6878      	ldr	r0, [r7, #4]
 80020e0:	f7fe ffb4 	bl	800104c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2224      	movs	r2, #36	@ 0x24
 80020e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	68da      	ldr	r2, [r3, #12]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80020fa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f000 f82b 	bl	8002158 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	691a      	ldr	r2, [r3, #16]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002110:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	695a      	ldr	r2, [r3, #20]
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002120:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	68da      	ldr	r2, [r3, #12]
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002130:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2220      	movs	r2, #32
 800213c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	2220      	movs	r2, #32
 8002144:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800214e:	2300      	movs	r3, #0
}
 8002150:	4618      	mov	r0, r3
 8002152:	3708      	adds	r7, #8
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}

08002158 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	68da      	ldr	r2, [r3, #12]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	430a      	orrs	r2, r1
 8002174:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	689a      	ldr	r2, [r3, #8]
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	431a      	orrs	r2, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	695b      	ldr	r3, [r3, #20]
 8002184:	4313      	orrs	r3, r2
 8002186:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	68db      	ldr	r3, [r3, #12]
 800218e:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8002192:	f023 030c 	bic.w	r3, r3, #12
 8002196:	687a      	ldr	r2, [r7, #4]
 8002198:	6812      	ldr	r2, [r2, #0]
 800219a:	68b9      	ldr	r1, [r7, #8]
 800219c:	430b      	orrs	r3, r1
 800219e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	695b      	ldr	r3, [r3, #20]
 80021a6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	699a      	ldr	r2, [r3, #24]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	430a      	orrs	r2, r1
 80021b4:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a2c      	ldr	r2, [pc, #176]	@ (800226c <UART_SetConfig+0x114>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d103      	bne.n	80021c8 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80021c0:	f7ff ff48 	bl	8002054 <HAL_RCC_GetPCLK2Freq>
 80021c4:	60f8      	str	r0, [r7, #12]
 80021c6:	e002      	b.n	80021ce <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80021c8:	f7ff ff30 	bl	800202c <HAL_RCC_GetPCLK1Freq>
 80021cc:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	4613      	mov	r3, r2
 80021d2:	009b      	lsls	r3, r3, #2
 80021d4:	4413      	add	r3, r2
 80021d6:	009a      	lsls	r2, r3, #2
 80021d8:	441a      	add	r2, r3
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	685b      	ldr	r3, [r3, #4]
 80021de:	009b      	lsls	r3, r3, #2
 80021e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80021e4:	4a22      	ldr	r2, [pc, #136]	@ (8002270 <UART_SetConfig+0x118>)
 80021e6:	fba2 2303 	umull	r2, r3, r2, r3
 80021ea:	095b      	lsrs	r3, r3, #5
 80021ec:	0119      	lsls	r1, r3, #4
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	4613      	mov	r3, r2
 80021f2:	009b      	lsls	r3, r3, #2
 80021f4:	4413      	add	r3, r2
 80021f6:	009a      	lsls	r2, r3, #2
 80021f8:	441a      	add	r2, r3
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	fbb2 f2f3 	udiv	r2, r2, r3
 8002204:	4b1a      	ldr	r3, [pc, #104]	@ (8002270 <UART_SetConfig+0x118>)
 8002206:	fba3 0302 	umull	r0, r3, r3, r2
 800220a:	095b      	lsrs	r3, r3, #5
 800220c:	2064      	movs	r0, #100	@ 0x64
 800220e:	fb00 f303 	mul.w	r3, r0, r3
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	011b      	lsls	r3, r3, #4
 8002216:	3332      	adds	r3, #50	@ 0x32
 8002218:	4a15      	ldr	r2, [pc, #84]	@ (8002270 <UART_SetConfig+0x118>)
 800221a:	fba2 2303 	umull	r2, r3, r2, r3
 800221e:	095b      	lsrs	r3, r3, #5
 8002220:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002224:	4419      	add	r1, r3
 8002226:	68fa      	ldr	r2, [r7, #12]
 8002228:	4613      	mov	r3, r2
 800222a:	009b      	lsls	r3, r3, #2
 800222c:	4413      	add	r3, r2
 800222e:	009a      	lsls	r2, r3, #2
 8002230:	441a      	add	r2, r3
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	009b      	lsls	r3, r3, #2
 8002238:	fbb2 f2f3 	udiv	r2, r2, r3
 800223c:	4b0c      	ldr	r3, [pc, #48]	@ (8002270 <UART_SetConfig+0x118>)
 800223e:	fba3 0302 	umull	r0, r3, r3, r2
 8002242:	095b      	lsrs	r3, r3, #5
 8002244:	2064      	movs	r0, #100	@ 0x64
 8002246:	fb00 f303 	mul.w	r3, r0, r3
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	011b      	lsls	r3, r3, #4
 800224e:	3332      	adds	r3, #50	@ 0x32
 8002250:	4a07      	ldr	r2, [pc, #28]	@ (8002270 <UART_SetConfig+0x118>)
 8002252:	fba2 2303 	umull	r2, r3, r2, r3
 8002256:	095b      	lsrs	r3, r3, #5
 8002258:	f003 020f 	and.w	r2, r3, #15
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	440a      	add	r2, r1
 8002262:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8002264:	bf00      	nop
 8002266:	3710      	adds	r7, #16
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}
 800226c:	40013800 	.word	0x40013800
 8002270:	51eb851f 	.word	0x51eb851f

08002274 <siprintf>:
 8002274:	b40e      	push	{r1, r2, r3}
 8002276:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800227a:	b510      	push	{r4, lr}
 800227c:	2400      	movs	r4, #0
 800227e:	b09d      	sub	sp, #116	@ 0x74
 8002280:	ab1f      	add	r3, sp, #124	@ 0x7c
 8002282:	9002      	str	r0, [sp, #8]
 8002284:	9006      	str	r0, [sp, #24]
 8002286:	9107      	str	r1, [sp, #28]
 8002288:	9104      	str	r1, [sp, #16]
 800228a:	4809      	ldr	r0, [pc, #36]	@ (80022b0 <siprintf+0x3c>)
 800228c:	4909      	ldr	r1, [pc, #36]	@ (80022b4 <siprintf+0x40>)
 800228e:	f853 2b04 	ldr.w	r2, [r3], #4
 8002292:	9105      	str	r1, [sp, #20]
 8002294:	6800      	ldr	r0, [r0, #0]
 8002296:	a902      	add	r1, sp, #8
 8002298:	9301      	str	r3, [sp, #4]
 800229a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800229c:	f000 f992 	bl	80025c4 <_svfiprintf_r>
 80022a0:	9b02      	ldr	r3, [sp, #8]
 80022a2:	701c      	strb	r4, [r3, #0]
 80022a4:	b01d      	add	sp, #116	@ 0x74
 80022a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80022aa:	b003      	add	sp, #12
 80022ac:	4770      	bx	lr
 80022ae:	bf00      	nop
 80022b0:	2000000c 	.word	0x2000000c
 80022b4:	ffff0208 	.word	0xffff0208

080022b8 <memset>:
 80022b8:	4603      	mov	r3, r0
 80022ba:	4402      	add	r2, r0
 80022bc:	4293      	cmp	r3, r2
 80022be:	d100      	bne.n	80022c2 <memset+0xa>
 80022c0:	4770      	bx	lr
 80022c2:	f803 1b01 	strb.w	r1, [r3], #1
 80022c6:	e7f9      	b.n	80022bc <memset+0x4>

080022c8 <__errno>:
 80022c8:	4b01      	ldr	r3, [pc, #4]	@ (80022d0 <__errno+0x8>)
 80022ca:	6818      	ldr	r0, [r3, #0]
 80022cc:	4770      	bx	lr
 80022ce:	bf00      	nop
 80022d0:	2000000c 	.word	0x2000000c

080022d4 <__libc_init_array>:
 80022d4:	b570      	push	{r4, r5, r6, lr}
 80022d6:	2600      	movs	r6, #0
 80022d8:	4d0c      	ldr	r5, [pc, #48]	@ (800230c <__libc_init_array+0x38>)
 80022da:	4c0d      	ldr	r4, [pc, #52]	@ (8002310 <__libc_init_array+0x3c>)
 80022dc:	1b64      	subs	r4, r4, r5
 80022de:	10a4      	asrs	r4, r4, #2
 80022e0:	42a6      	cmp	r6, r4
 80022e2:	d109      	bne.n	80022f8 <__libc_init_array+0x24>
 80022e4:	f000 fc76 	bl	8002bd4 <_init>
 80022e8:	2600      	movs	r6, #0
 80022ea:	4d0a      	ldr	r5, [pc, #40]	@ (8002314 <__libc_init_array+0x40>)
 80022ec:	4c0a      	ldr	r4, [pc, #40]	@ (8002318 <__libc_init_array+0x44>)
 80022ee:	1b64      	subs	r4, r4, r5
 80022f0:	10a4      	asrs	r4, r4, #2
 80022f2:	42a6      	cmp	r6, r4
 80022f4:	d105      	bne.n	8002302 <__libc_init_array+0x2e>
 80022f6:	bd70      	pop	{r4, r5, r6, pc}
 80022f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80022fc:	4798      	blx	r3
 80022fe:	3601      	adds	r6, #1
 8002300:	e7ee      	b.n	80022e0 <__libc_init_array+0xc>
 8002302:	f855 3b04 	ldr.w	r3, [r5], #4
 8002306:	4798      	blx	r3
 8002308:	3601      	adds	r6, #1
 800230a:	e7f2      	b.n	80022f2 <__libc_init_array+0x1e>
 800230c:	08002e88 	.word	0x08002e88
 8002310:	08002e88 	.word	0x08002e88
 8002314:	08002e88 	.word	0x08002e88
 8002318:	08002e8c 	.word	0x08002e8c

0800231c <__retarget_lock_acquire_recursive>:
 800231c:	4770      	bx	lr

0800231e <__retarget_lock_release_recursive>:
 800231e:	4770      	bx	lr

08002320 <_free_r>:
 8002320:	b538      	push	{r3, r4, r5, lr}
 8002322:	4605      	mov	r5, r0
 8002324:	2900      	cmp	r1, #0
 8002326:	d040      	beq.n	80023aa <_free_r+0x8a>
 8002328:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800232c:	1f0c      	subs	r4, r1, #4
 800232e:	2b00      	cmp	r3, #0
 8002330:	bfb8      	it	lt
 8002332:	18e4      	addlt	r4, r4, r3
 8002334:	f000 f8de 	bl	80024f4 <__malloc_lock>
 8002338:	4a1c      	ldr	r2, [pc, #112]	@ (80023ac <_free_r+0x8c>)
 800233a:	6813      	ldr	r3, [r2, #0]
 800233c:	b933      	cbnz	r3, 800234c <_free_r+0x2c>
 800233e:	6063      	str	r3, [r4, #4]
 8002340:	6014      	str	r4, [r2, #0]
 8002342:	4628      	mov	r0, r5
 8002344:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002348:	f000 b8da 	b.w	8002500 <__malloc_unlock>
 800234c:	42a3      	cmp	r3, r4
 800234e:	d908      	bls.n	8002362 <_free_r+0x42>
 8002350:	6820      	ldr	r0, [r4, #0]
 8002352:	1821      	adds	r1, r4, r0
 8002354:	428b      	cmp	r3, r1
 8002356:	bf01      	itttt	eq
 8002358:	6819      	ldreq	r1, [r3, #0]
 800235a:	685b      	ldreq	r3, [r3, #4]
 800235c:	1809      	addeq	r1, r1, r0
 800235e:	6021      	streq	r1, [r4, #0]
 8002360:	e7ed      	b.n	800233e <_free_r+0x1e>
 8002362:	461a      	mov	r2, r3
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	b10b      	cbz	r3, 800236c <_free_r+0x4c>
 8002368:	42a3      	cmp	r3, r4
 800236a:	d9fa      	bls.n	8002362 <_free_r+0x42>
 800236c:	6811      	ldr	r1, [r2, #0]
 800236e:	1850      	adds	r0, r2, r1
 8002370:	42a0      	cmp	r0, r4
 8002372:	d10b      	bne.n	800238c <_free_r+0x6c>
 8002374:	6820      	ldr	r0, [r4, #0]
 8002376:	4401      	add	r1, r0
 8002378:	1850      	adds	r0, r2, r1
 800237a:	4283      	cmp	r3, r0
 800237c:	6011      	str	r1, [r2, #0]
 800237e:	d1e0      	bne.n	8002342 <_free_r+0x22>
 8002380:	6818      	ldr	r0, [r3, #0]
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	4408      	add	r0, r1
 8002386:	6010      	str	r0, [r2, #0]
 8002388:	6053      	str	r3, [r2, #4]
 800238a:	e7da      	b.n	8002342 <_free_r+0x22>
 800238c:	d902      	bls.n	8002394 <_free_r+0x74>
 800238e:	230c      	movs	r3, #12
 8002390:	602b      	str	r3, [r5, #0]
 8002392:	e7d6      	b.n	8002342 <_free_r+0x22>
 8002394:	6820      	ldr	r0, [r4, #0]
 8002396:	1821      	adds	r1, r4, r0
 8002398:	428b      	cmp	r3, r1
 800239a:	bf01      	itttt	eq
 800239c:	6819      	ldreq	r1, [r3, #0]
 800239e:	685b      	ldreq	r3, [r3, #4]
 80023a0:	1809      	addeq	r1, r1, r0
 80023a2:	6021      	streq	r1, [r4, #0]
 80023a4:	6063      	str	r3, [r4, #4]
 80023a6:	6054      	str	r4, [r2, #4]
 80023a8:	e7cb      	b.n	8002342 <_free_r+0x22>
 80023aa:	bd38      	pop	{r3, r4, r5, pc}
 80023ac:	2000020c 	.word	0x2000020c

080023b0 <sbrk_aligned>:
 80023b0:	b570      	push	{r4, r5, r6, lr}
 80023b2:	4e0f      	ldr	r6, [pc, #60]	@ (80023f0 <sbrk_aligned+0x40>)
 80023b4:	460c      	mov	r4, r1
 80023b6:	6831      	ldr	r1, [r6, #0]
 80023b8:	4605      	mov	r5, r0
 80023ba:	b911      	cbnz	r1, 80023c2 <sbrk_aligned+0x12>
 80023bc:	f000 fba8 	bl	8002b10 <_sbrk_r>
 80023c0:	6030      	str	r0, [r6, #0]
 80023c2:	4621      	mov	r1, r4
 80023c4:	4628      	mov	r0, r5
 80023c6:	f000 fba3 	bl	8002b10 <_sbrk_r>
 80023ca:	1c43      	adds	r3, r0, #1
 80023cc:	d103      	bne.n	80023d6 <sbrk_aligned+0x26>
 80023ce:	f04f 34ff 	mov.w	r4, #4294967295
 80023d2:	4620      	mov	r0, r4
 80023d4:	bd70      	pop	{r4, r5, r6, pc}
 80023d6:	1cc4      	adds	r4, r0, #3
 80023d8:	f024 0403 	bic.w	r4, r4, #3
 80023dc:	42a0      	cmp	r0, r4
 80023de:	d0f8      	beq.n	80023d2 <sbrk_aligned+0x22>
 80023e0:	1a21      	subs	r1, r4, r0
 80023e2:	4628      	mov	r0, r5
 80023e4:	f000 fb94 	bl	8002b10 <_sbrk_r>
 80023e8:	3001      	adds	r0, #1
 80023ea:	d1f2      	bne.n	80023d2 <sbrk_aligned+0x22>
 80023ec:	e7ef      	b.n	80023ce <sbrk_aligned+0x1e>
 80023ee:	bf00      	nop
 80023f0:	20000208 	.word	0x20000208

080023f4 <_malloc_r>:
 80023f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80023f8:	1ccd      	adds	r5, r1, #3
 80023fa:	f025 0503 	bic.w	r5, r5, #3
 80023fe:	3508      	adds	r5, #8
 8002400:	2d0c      	cmp	r5, #12
 8002402:	bf38      	it	cc
 8002404:	250c      	movcc	r5, #12
 8002406:	2d00      	cmp	r5, #0
 8002408:	4606      	mov	r6, r0
 800240a:	db01      	blt.n	8002410 <_malloc_r+0x1c>
 800240c:	42a9      	cmp	r1, r5
 800240e:	d904      	bls.n	800241a <_malloc_r+0x26>
 8002410:	230c      	movs	r3, #12
 8002412:	6033      	str	r3, [r6, #0]
 8002414:	2000      	movs	r0, #0
 8002416:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800241a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80024f0 <_malloc_r+0xfc>
 800241e:	f000 f869 	bl	80024f4 <__malloc_lock>
 8002422:	f8d8 3000 	ldr.w	r3, [r8]
 8002426:	461c      	mov	r4, r3
 8002428:	bb44      	cbnz	r4, 800247c <_malloc_r+0x88>
 800242a:	4629      	mov	r1, r5
 800242c:	4630      	mov	r0, r6
 800242e:	f7ff ffbf 	bl	80023b0 <sbrk_aligned>
 8002432:	1c43      	adds	r3, r0, #1
 8002434:	4604      	mov	r4, r0
 8002436:	d158      	bne.n	80024ea <_malloc_r+0xf6>
 8002438:	f8d8 4000 	ldr.w	r4, [r8]
 800243c:	4627      	mov	r7, r4
 800243e:	2f00      	cmp	r7, #0
 8002440:	d143      	bne.n	80024ca <_malloc_r+0xd6>
 8002442:	2c00      	cmp	r4, #0
 8002444:	d04b      	beq.n	80024de <_malloc_r+0xea>
 8002446:	6823      	ldr	r3, [r4, #0]
 8002448:	4639      	mov	r1, r7
 800244a:	4630      	mov	r0, r6
 800244c:	eb04 0903 	add.w	r9, r4, r3
 8002450:	f000 fb5e 	bl	8002b10 <_sbrk_r>
 8002454:	4581      	cmp	r9, r0
 8002456:	d142      	bne.n	80024de <_malloc_r+0xea>
 8002458:	6821      	ldr	r1, [r4, #0]
 800245a:	4630      	mov	r0, r6
 800245c:	1a6d      	subs	r5, r5, r1
 800245e:	4629      	mov	r1, r5
 8002460:	f7ff ffa6 	bl	80023b0 <sbrk_aligned>
 8002464:	3001      	adds	r0, #1
 8002466:	d03a      	beq.n	80024de <_malloc_r+0xea>
 8002468:	6823      	ldr	r3, [r4, #0]
 800246a:	442b      	add	r3, r5
 800246c:	6023      	str	r3, [r4, #0]
 800246e:	f8d8 3000 	ldr.w	r3, [r8]
 8002472:	685a      	ldr	r2, [r3, #4]
 8002474:	bb62      	cbnz	r2, 80024d0 <_malloc_r+0xdc>
 8002476:	f8c8 7000 	str.w	r7, [r8]
 800247a:	e00f      	b.n	800249c <_malloc_r+0xa8>
 800247c:	6822      	ldr	r2, [r4, #0]
 800247e:	1b52      	subs	r2, r2, r5
 8002480:	d420      	bmi.n	80024c4 <_malloc_r+0xd0>
 8002482:	2a0b      	cmp	r2, #11
 8002484:	d917      	bls.n	80024b6 <_malloc_r+0xc2>
 8002486:	1961      	adds	r1, r4, r5
 8002488:	42a3      	cmp	r3, r4
 800248a:	6025      	str	r5, [r4, #0]
 800248c:	bf18      	it	ne
 800248e:	6059      	strne	r1, [r3, #4]
 8002490:	6863      	ldr	r3, [r4, #4]
 8002492:	bf08      	it	eq
 8002494:	f8c8 1000 	streq.w	r1, [r8]
 8002498:	5162      	str	r2, [r4, r5]
 800249a:	604b      	str	r3, [r1, #4]
 800249c:	4630      	mov	r0, r6
 800249e:	f000 f82f 	bl	8002500 <__malloc_unlock>
 80024a2:	f104 000b 	add.w	r0, r4, #11
 80024a6:	1d23      	adds	r3, r4, #4
 80024a8:	f020 0007 	bic.w	r0, r0, #7
 80024ac:	1ac2      	subs	r2, r0, r3
 80024ae:	bf1c      	itt	ne
 80024b0:	1a1b      	subne	r3, r3, r0
 80024b2:	50a3      	strne	r3, [r4, r2]
 80024b4:	e7af      	b.n	8002416 <_malloc_r+0x22>
 80024b6:	6862      	ldr	r2, [r4, #4]
 80024b8:	42a3      	cmp	r3, r4
 80024ba:	bf0c      	ite	eq
 80024bc:	f8c8 2000 	streq.w	r2, [r8]
 80024c0:	605a      	strne	r2, [r3, #4]
 80024c2:	e7eb      	b.n	800249c <_malloc_r+0xa8>
 80024c4:	4623      	mov	r3, r4
 80024c6:	6864      	ldr	r4, [r4, #4]
 80024c8:	e7ae      	b.n	8002428 <_malloc_r+0x34>
 80024ca:	463c      	mov	r4, r7
 80024cc:	687f      	ldr	r7, [r7, #4]
 80024ce:	e7b6      	b.n	800243e <_malloc_r+0x4a>
 80024d0:	461a      	mov	r2, r3
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	42a3      	cmp	r3, r4
 80024d6:	d1fb      	bne.n	80024d0 <_malloc_r+0xdc>
 80024d8:	2300      	movs	r3, #0
 80024da:	6053      	str	r3, [r2, #4]
 80024dc:	e7de      	b.n	800249c <_malloc_r+0xa8>
 80024de:	230c      	movs	r3, #12
 80024e0:	4630      	mov	r0, r6
 80024e2:	6033      	str	r3, [r6, #0]
 80024e4:	f000 f80c 	bl	8002500 <__malloc_unlock>
 80024e8:	e794      	b.n	8002414 <_malloc_r+0x20>
 80024ea:	6005      	str	r5, [r0, #0]
 80024ec:	e7d6      	b.n	800249c <_malloc_r+0xa8>
 80024ee:	bf00      	nop
 80024f0:	2000020c 	.word	0x2000020c

080024f4 <__malloc_lock>:
 80024f4:	4801      	ldr	r0, [pc, #4]	@ (80024fc <__malloc_lock+0x8>)
 80024f6:	f7ff bf11 	b.w	800231c <__retarget_lock_acquire_recursive>
 80024fa:	bf00      	nop
 80024fc:	20000204 	.word	0x20000204

08002500 <__malloc_unlock>:
 8002500:	4801      	ldr	r0, [pc, #4]	@ (8002508 <__malloc_unlock+0x8>)
 8002502:	f7ff bf0c 	b.w	800231e <__retarget_lock_release_recursive>
 8002506:	bf00      	nop
 8002508:	20000204 	.word	0x20000204

0800250c <__ssputs_r>:
 800250c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002510:	461f      	mov	r7, r3
 8002512:	688e      	ldr	r6, [r1, #8]
 8002514:	4682      	mov	sl, r0
 8002516:	42be      	cmp	r6, r7
 8002518:	460c      	mov	r4, r1
 800251a:	4690      	mov	r8, r2
 800251c:	680b      	ldr	r3, [r1, #0]
 800251e:	d82d      	bhi.n	800257c <__ssputs_r+0x70>
 8002520:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002524:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8002528:	d026      	beq.n	8002578 <__ssputs_r+0x6c>
 800252a:	6965      	ldr	r5, [r4, #20]
 800252c:	6909      	ldr	r1, [r1, #16]
 800252e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8002532:	eba3 0901 	sub.w	r9, r3, r1
 8002536:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800253a:	1c7b      	adds	r3, r7, #1
 800253c:	444b      	add	r3, r9
 800253e:	106d      	asrs	r5, r5, #1
 8002540:	429d      	cmp	r5, r3
 8002542:	bf38      	it	cc
 8002544:	461d      	movcc	r5, r3
 8002546:	0553      	lsls	r3, r2, #21
 8002548:	d527      	bpl.n	800259a <__ssputs_r+0x8e>
 800254a:	4629      	mov	r1, r5
 800254c:	f7ff ff52 	bl	80023f4 <_malloc_r>
 8002550:	4606      	mov	r6, r0
 8002552:	b360      	cbz	r0, 80025ae <__ssputs_r+0xa2>
 8002554:	464a      	mov	r2, r9
 8002556:	6921      	ldr	r1, [r4, #16]
 8002558:	f000 faf8 	bl	8002b4c <memcpy>
 800255c:	89a3      	ldrh	r3, [r4, #12]
 800255e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8002562:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002566:	81a3      	strh	r3, [r4, #12]
 8002568:	6126      	str	r6, [r4, #16]
 800256a:	444e      	add	r6, r9
 800256c:	6026      	str	r6, [r4, #0]
 800256e:	463e      	mov	r6, r7
 8002570:	6165      	str	r5, [r4, #20]
 8002572:	eba5 0509 	sub.w	r5, r5, r9
 8002576:	60a5      	str	r5, [r4, #8]
 8002578:	42be      	cmp	r6, r7
 800257a:	d900      	bls.n	800257e <__ssputs_r+0x72>
 800257c:	463e      	mov	r6, r7
 800257e:	4632      	mov	r2, r6
 8002580:	4641      	mov	r1, r8
 8002582:	6820      	ldr	r0, [r4, #0]
 8002584:	f000 faaa 	bl	8002adc <memmove>
 8002588:	2000      	movs	r0, #0
 800258a:	68a3      	ldr	r3, [r4, #8]
 800258c:	1b9b      	subs	r3, r3, r6
 800258e:	60a3      	str	r3, [r4, #8]
 8002590:	6823      	ldr	r3, [r4, #0]
 8002592:	4433      	add	r3, r6
 8002594:	6023      	str	r3, [r4, #0]
 8002596:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800259a:	462a      	mov	r2, r5
 800259c:	f000 fae4 	bl	8002b68 <_realloc_r>
 80025a0:	4606      	mov	r6, r0
 80025a2:	2800      	cmp	r0, #0
 80025a4:	d1e0      	bne.n	8002568 <__ssputs_r+0x5c>
 80025a6:	4650      	mov	r0, sl
 80025a8:	6921      	ldr	r1, [r4, #16]
 80025aa:	f7ff feb9 	bl	8002320 <_free_r>
 80025ae:	230c      	movs	r3, #12
 80025b0:	f8ca 3000 	str.w	r3, [sl]
 80025b4:	89a3      	ldrh	r3, [r4, #12]
 80025b6:	f04f 30ff 	mov.w	r0, #4294967295
 80025ba:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80025be:	81a3      	strh	r3, [r4, #12]
 80025c0:	e7e9      	b.n	8002596 <__ssputs_r+0x8a>
	...

080025c4 <_svfiprintf_r>:
 80025c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80025c8:	4698      	mov	r8, r3
 80025ca:	898b      	ldrh	r3, [r1, #12]
 80025cc:	4607      	mov	r7, r0
 80025ce:	061b      	lsls	r3, r3, #24
 80025d0:	460d      	mov	r5, r1
 80025d2:	4614      	mov	r4, r2
 80025d4:	b09d      	sub	sp, #116	@ 0x74
 80025d6:	d510      	bpl.n	80025fa <_svfiprintf_r+0x36>
 80025d8:	690b      	ldr	r3, [r1, #16]
 80025da:	b973      	cbnz	r3, 80025fa <_svfiprintf_r+0x36>
 80025dc:	2140      	movs	r1, #64	@ 0x40
 80025de:	f7ff ff09 	bl	80023f4 <_malloc_r>
 80025e2:	6028      	str	r0, [r5, #0]
 80025e4:	6128      	str	r0, [r5, #16]
 80025e6:	b930      	cbnz	r0, 80025f6 <_svfiprintf_r+0x32>
 80025e8:	230c      	movs	r3, #12
 80025ea:	603b      	str	r3, [r7, #0]
 80025ec:	f04f 30ff 	mov.w	r0, #4294967295
 80025f0:	b01d      	add	sp, #116	@ 0x74
 80025f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80025f6:	2340      	movs	r3, #64	@ 0x40
 80025f8:	616b      	str	r3, [r5, #20]
 80025fa:	2300      	movs	r3, #0
 80025fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80025fe:	2320      	movs	r3, #32
 8002600:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8002604:	2330      	movs	r3, #48	@ 0x30
 8002606:	f04f 0901 	mov.w	r9, #1
 800260a:	f8cd 800c 	str.w	r8, [sp, #12]
 800260e:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 80027a8 <_svfiprintf_r+0x1e4>
 8002612:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8002616:	4623      	mov	r3, r4
 8002618:	469a      	mov	sl, r3
 800261a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800261e:	b10a      	cbz	r2, 8002624 <_svfiprintf_r+0x60>
 8002620:	2a25      	cmp	r2, #37	@ 0x25
 8002622:	d1f9      	bne.n	8002618 <_svfiprintf_r+0x54>
 8002624:	ebba 0b04 	subs.w	fp, sl, r4
 8002628:	d00b      	beq.n	8002642 <_svfiprintf_r+0x7e>
 800262a:	465b      	mov	r3, fp
 800262c:	4622      	mov	r2, r4
 800262e:	4629      	mov	r1, r5
 8002630:	4638      	mov	r0, r7
 8002632:	f7ff ff6b 	bl	800250c <__ssputs_r>
 8002636:	3001      	adds	r0, #1
 8002638:	f000 80a7 	beq.w	800278a <_svfiprintf_r+0x1c6>
 800263c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800263e:	445a      	add	r2, fp
 8002640:	9209      	str	r2, [sp, #36]	@ 0x24
 8002642:	f89a 3000 	ldrb.w	r3, [sl]
 8002646:	2b00      	cmp	r3, #0
 8002648:	f000 809f 	beq.w	800278a <_svfiprintf_r+0x1c6>
 800264c:	2300      	movs	r3, #0
 800264e:	f04f 32ff 	mov.w	r2, #4294967295
 8002652:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002656:	f10a 0a01 	add.w	sl, sl, #1
 800265a:	9304      	str	r3, [sp, #16]
 800265c:	9307      	str	r3, [sp, #28]
 800265e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8002662:	931a      	str	r3, [sp, #104]	@ 0x68
 8002664:	4654      	mov	r4, sl
 8002666:	2205      	movs	r2, #5
 8002668:	f814 1b01 	ldrb.w	r1, [r4], #1
 800266c:	484e      	ldr	r0, [pc, #312]	@ (80027a8 <_svfiprintf_r+0x1e4>)
 800266e:	f000 fa5f 	bl	8002b30 <memchr>
 8002672:	9a04      	ldr	r2, [sp, #16]
 8002674:	b9d8      	cbnz	r0, 80026ae <_svfiprintf_r+0xea>
 8002676:	06d0      	lsls	r0, r2, #27
 8002678:	bf44      	itt	mi
 800267a:	2320      	movmi	r3, #32
 800267c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8002680:	0711      	lsls	r1, r2, #28
 8002682:	bf44      	itt	mi
 8002684:	232b      	movmi	r3, #43	@ 0x2b
 8002686:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800268a:	f89a 3000 	ldrb.w	r3, [sl]
 800268e:	2b2a      	cmp	r3, #42	@ 0x2a
 8002690:	d015      	beq.n	80026be <_svfiprintf_r+0xfa>
 8002692:	4654      	mov	r4, sl
 8002694:	2000      	movs	r0, #0
 8002696:	f04f 0c0a 	mov.w	ip, #10
 800269a:	9a07      	ldr	r2, [sp, #28]
 800269c:	4621      	mov	r1, r4
 800269e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80026a2:	3b30      	subs	r3, #48	@ 0x30
 80026a4:	2b09      	cmp	r3, #9
 80026a6:	d94b      	bls.n	8002740 <_svfiprintf_r+0x17c>
 80026a8:	b1b0      	cbz	r0, 80026d8 <_svfiprintf_r+0x114>
 80026aa:	9207      	str	r2, [sp, #28]
 80026ac:	e014      	b.n	80026d8 <_svfiprintf_r+0x114>
 80026ae:	eba0 0308 	sub.w	r3, r0, r8
 80026b2:	fa09 f303 	lsl.w	r3, r9, r3
 80026b6:	4313      	orrs	r3, r2
 80026b8:	46a2      	mov	sl, r4
 80026ba:	9304      	str	r3, [sp, #16]
 80026bc:	e7d2      	b.n	8002664 <_svfiprintf_r+0xa0>
 80026be:	9b03      	ldr	r3, [sp, #12]
 80026c0:	1d19      	adds	r1, r3, #4
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	9103      	str	r1, [sp, #12]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	bfbb      	ittet	lt
 80026ca:	425b      	neglt	r3, r3
 80026cc:	f042 0202 	orrlt.w	r2, r2, #2
 80026d0:	9307      	strge	r3, [sp, #28]
 80026d2:	9307      	strlt	r3, [sp, #28]
 80026d4:	bfb8      	it	lt
 80026d6:	9204      	strlt	r2, [sp, #16]
 80026d8:	7823      	ldrb	r3, [r4, #0]
 80026da:	2b2e      	cmp	r3, #46	@ 0x2e
 80026dc:	d10a      	bne.n	80026f4 <_svfiprintf_r+0x130>
 80026de:	7863      	ldrb	r3, [r4, #1]
 80026e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80026e2:	d132      	bne.n	800274a <_svfiprintf_r+0x186>
 80026e4:	9b03      	ldr	r3, [sp, #12]
 80026e6:	3402      	adds	r4, #2
 80026e8:	1d1a      	adds	r2, r3, #4
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	9203      	str	r2, [sp, #12]
 80026ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80026f2:	9305      	str	r3, [sp, #20]
 80026f4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 80027ac <_svfiprintf_r+0x1e8>
 80026f8:	2203      	movs	r2, #3
 80026fa:	4650      	mov	r0, sl
 80026fc:	7821      	ldrb	r1, [r4, #0]
 80026fe:	f000 fa17 	bl	8002b30 <memchr>
 8002702:	b138      	cbz	r0, 8002714 <_svfiprintf_r+0x150>
 8002704:	2240      	movs	r2, #64	@ 0x40
 8002706:	9b04      	ldr	r3, [sp, #16]
 8002708:	eba0 000a 	sub.w	r0, r0, sl
 800270c:	4082      	lsls	r2, r0
 800270e:	4313      	orrs	r3, r2
 8002710:	3401      	adds	r4, #1
 8002712:	9304      	str	r3, [sp, #16]
 8002714:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002718:	2206      	movs	r2, #6
 800271a:	4825      	ldr	r0, [pc, #148]	@ (80027b0 <_svfiprintf_r+0x1ec>)
 800271c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8002720:	f000 fa06 	bl	8002b30 <memchr>
 8002724:	2800      	cmp	r0, #0
 8002726:	d036      	beq.n	8002796 <_svfiprintf_r+0x1d2>
 8002728:	4b22      	ldr	r3, [pc, #136]	@ (80027b4 <_svfiprintf_r+0x1f0>)
 800272a:	bb1b      	cbnz	r3, 8002774 <_svfiprintf_r+0x1b0>
 800272c:	9b03      	ldr	r3, [sp, #12]
 800272e:	3307      	adds	r3, #7
 8002730:	f023 0307 	bic.w	r3, r3, #7
 8002734:	3308      	adds	r3, #8
 8002736:	9303      	str	r3, [sp, #12]
 8002738:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800273a:	4433      	add	r3, r6
 800273c:	9309      	str	r3, [sp, #36]	@ 0x24
 800273e:	e76a      	b.n	8002616 <_svfiprintf_r+0x52>
 8002740:	460c      	mov	r4, r1
 8002742:	2001      	movs	r0, #1
 8002744:	fb0c 3202 	mla	r2, ip, r2, r3
 8002748:	e7a8      	b.n	800269c <_svfiprintf_r+0xd8>
 800274a:	2300      	movs	r3, #0
 800274c:	f04f 0c0a 	mov.w	ip, #10
 8002750:	4619      	mov	r1, r3
 8002752:	3401      	adds	r4, #1
 8002754:	9305      	str	r3, [sp, #20]
 8002756:	4620      	mov	r0, r4
 8002758:	f810 2b01 	ldrb.w	r2, [r0], #1
 800275c:	3a30      	subs	r2, #48	@ 0x30
 800275e:	2a09      	cmp	r2, #9
 8002760:	d903      	bls.n	800276a <_svfiprintf_r+0x1a6>
 8002762:	2b00      	cmp	r3, #0
 8002764:	d0c6      	beq.n	80026f4 <_svfiprintf_r+0x130>
 8002766:	9105      	str	r1, [sp, #20]
 8002768:	e7c4      	b.n	80026f4 <_svfiprintf_r+0x130>
 800276a:	4604      	mov	r4, r0
 800276c:	2301      	movs	r3, #1
 800276e:	fb0c 2101 	mla	r1, ip, r1, r2
 8002772:	e7f0      	b.n	8002756 <_svfiprintf_r+0x192>
 8002774:	ab03      	add	r3, sp, #12
 8002776:	9300      	str	r3, [sp, #0]
 8002778:	462a      	mov	r2, r5
 800277a:	4638      	mov	r0, r7
 800277c:	4b0e      	ldr	r3, [pc, #56]	@ (80027b8 <_svfiprintf_r+0x1f4>)
 800277e:	a904      	add	r1, sp, #16
 8002780:	f3af 8000 	nop.w
 8002784:	1c42      	adds	r2, r0, #1
 8002786:	4606      	mov	r6, r0
 8002788:	d1d6      	bne.n	8002738 <_svfiprintf_r+0x174>
 800278a:	89ab      	ldrh	r3, [r5, #12]
 800278c:	065b      	lsls	r3, r3, #25
 800278e:	f53f af2d 	bmi.w	80025ec <_svfiprintf_r+0x28>
 8002792:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8002794:	e72c      	b.n	80025f0 <_svfiprintf_r+0x2c>
 8002796:	ab03      	add	r3, sp, #12
 8002798:	9300      	str	r3, [sp, #0]
 800279a:	462a      	mov	r2, r5
 800279c:	4638      	mov	r0, r7
 800279e:	4b06      	ldr	r3, [pc, #24]	@ (80027b8 <_svfiprintf_r+0x1f4>)
 80027a0:	a904      	add	r1, sp, #16
 80027a2:	f000 f87d 	bl	80028a0 <_printf_i>
 80027a6:	e7ed      	b.n	8002784 <_svfiprintf_r+0x1c0>
 80027a8:	08002e52 	.word	0x08002e52
 80027ac:	08002e58 	.word	0x08002e58
 80027b0:	08002e5c 	.word	0x08002e5c
 80027b4:	00000000 	.word	0x00000000
 80027b8:	0800250d 	.word	0x0800250d

080027bc <_printf_common>:
 80027bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80027c0:	4616      	mov	r6, r2
 80027c2:	4698      	mov	r8, r3
 80027c4:	688a      	ldr	r2, [r1, #8]
 80027c6:	690b      	ldr	r3, [r1, #16]
 80027c8:	4607      	mov	r7, r0
 80027ca:	4293      	cmp	r3, r2
 80027cc:	bfb8      	it	lt
 80027ce:	4613      	movlt	r3, r2
 80027d0:	6033      	str	r3, [r6, #0]
 80027d2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80027d6:	460c      	mov	r4, r1
 80027d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80027dc:	b10a      	cbz	r2, 80027e2 <_printf_common+0x26>
 80027de:	3301      	adds	r3, #1
 80027e0:	6033      	str	r3, [r6, #0]
 80027e2:	6823      	ldr	r3, [r4, #0]
 80027e4:	0699      	lsls	r1, r3, #26
 80027e6:	bf42      	ittt	mi
 80027e8:	6833      	ldrmi	r3, [r6, #0]
 80027ea:	3302      	addmi	r3, #2
 80027ec:	6033      	strmi	r3, [r6, #0]
 80027ee:	6825      	ldr	r5, [r4, #0]
 80027f0:	f015 0506 	ands.w	r5, r5, #6
 80027f4:	d106      	bne.n	8002804 <_printf_common+0x48>
 80027f6:	f104 0a19 	add.w	sl, r4, #25
 80027fa:	68e3      	ldr	r3, [r4, #12]
 80027fc:	6832      	ldr	r2, [r6, #0]
 80027fe:	1a9b      	subs	r3, r3, r2
 8002800:	42ab      	cmp	r3, r5
 8002802:	dc2b      	bgt.n	800285c <_printf_common+0xa0>
 8002804:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8002808:	6822      	ldr	r2, [r4, #0]
 800280a:	3b00      	subs	r3, #0
 800280c:	bf18      	it	ne
 800280e:	2301      	movne	r3, #1
 8002810:	0692      	lsls	r2, r2, #26
 8002812:	d430      	bmi.n	8002876 <_printf_common+0xba>
 8002814:	4641      	mov	r1, r8
 8002816:	4638      	mov	r0, r7
 8002818:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800281c:	47c8      	blx	r9
 800281e:	3001      	adds	r0, #1
 8002820:	d023      	beq.n	800286a <_printf_common+0xae>
 8002822:	6823      	ldr	r3, [r4, #0]
 8002824:	6922      	ldr	r2, [r4, #16]
 8002826:	f003 0306 	and.w	r3, r3, #6
 800282a:	2b04      	cmp	r3, #4
 800282c:	bf14      	ite	ne
 800282e:	2500      	movne	r5, #0
 8002830:	6833      	ldreq	r3, [r6, #0]
 8002832:	f04f 0600 	mov.w	r6, #0
 8002836:	bf08      	it	eq
 8002838:	68e5      	ldreq	r5, [r4, #12]
 800283a:	f104 041a 	add.w	r4, r4, #26
 800283e:	bf08      	it	eq
 8002840:	1aed      	subeq	r5, r5, r3
 8002842:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8002846:	bf08      	it	eq
 8002848:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800284c:	4293      	cmp	r3, r2
 800284e:	bfc4      	itt	gt
 8002850:	1a9b      	subgt	r3, r3, r2
 8002852:	18ed      	addgt	r5, r5, r3
 8002854:	42b5      	cmp	r5, r6
 8002856:	d11a      	bne.n	800288e <_printf_common+0xd2>
 8002858:	2000      	movs	r0, #0
 800285a:	e008      	b.n	800286e <_printf_common+0xb2>
 800285c:	2301      	movs	r3, #1
 800285e:	4652      	mov	r2, sl
 8002860:	4641      	mov	r1, r8
 8002862:	4638      	mov	r0, r7
 8002864:	47c8      	blx	r9
 8002866:	3001      	adds	r0, #1
 8002868:	d103      	bne.n	8002872 <_printf_common+0xb6>
 800286a:	f04f 30ff 	mov.w	r0, #4294967295
 800286e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002872:	3501      	adds	r5, #1
 8002874:	e7c1      	b.n	80027fa <_printf_common+0x3e>
 8002876:	2030      	movs	r0, #48	@ 0x30
 8002878:	18e1      	adds	r1, r4, r3
 800287a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800287e:	1c5a      	adds	r2, r3, #1
 8002880:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8002884:	4422      	add	r2, r4
 8002886:	3302      	adds	r3, #2
 8002888:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800288c:	e7c2      	b.n	8002814 <_printf_common+0x58>
 800288e:	2301      	movs	r3, #1
 8002890:	4622      	mov	r2, r4
 8002892:	4641      	mov	r1, r8
 8002894:	4638      	mov	r0, r7
 8002896:	47c8      	blx	r9
 8002898:	3001      	adds	r0, #1
 800289a:	d0e6      	beq.n	800286a <_printf_common+0xae>
 800289c:	3601      	adds	r6, #1
 800289e:	e7d9      	b.n	8002854 <_printf_common+0x98>

080028a0 <_printf_i>:
 80028a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80028a4:	7e0f      	ldrb	r7, [r1, #24]
 80028a6:	4691      	mov	r9, r2
 80028a8:	2f78      	cmp	r7, #120	@ 0x78
 80028aa:	4680      	mov	r8, r0
 80028ac:	460c      	mov	r4, r1
 80028ae:	469a      	mov	sl, r3
 80028b0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80028b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80028b6:	d807      	bhi.n	80028c8 <_printf_i+0x28>
 80028b8:	2f62      	cmp	r7, #98	@ 0x62
 80028ba:	d80a      	bhi.n	80028d2 <_printf_i+0x32>
 80028bc:	2f00      	cmp	r7, #0
 80028be:	f000 80d1 	beq.w	8002a64 <_printf_i+0x1c4>
 80028c2:	2f58      	cmp	r7, #88	@ 0x58
 80028c4:	f000 80b8 	beq.w	8002a38 <_printf_i+0x198>
 80028c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80028cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80028d0:	e03a      	b.n	8002948 <_printf_i+0xa8>
 80028d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80028d6:	2b15      	cmp	r3, #21
 80028d8:	d8f6      	bhi.n	80028c8 <_printf_i+0x28>
 80028da:	a101      	add	r1, pc, #4	@ (adr r1, 80028e0 <_printf_i+0x40>)
 80028dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80028e0:	08002939 	.word	0x08002939
 80028e4:	0800294d 	.word	0x0800294d
 80028e8:	080028c9 	.word	0x080028c9
 80028ec:	080028c9 	.word	0x080028c9
 80028f0:	080028c9 	.word	0x080028c9
 80028f4:	080028c9 	.word	0x080028c9
 80028f8:	0800294d 	.word	0x0800294d
 80028fc:	080028c9 	.word	0x080028c9
 8002900:	080028c9 	.word	0x080028c9
 8002904:	080028c9 	.word	0x080028c9
 8002908:	080028c9 	.word	0x080028c9
 800290c:	08002a4b 	.word	0x08002a4b
 8002910:	08002977 	.word	0x08002977
 8002914:	08002a05 	.word	0x08002a05
 8002918:	080028c9 	.word	0x080028c9
 800291c:	080028c9 	.word	0x080028c9
 8002920:	08002a6d 	.word	0x08002a6d
 8002924:	080028c9 	.word	0x080028c9
 8002928:	08002977 	.word	0x08002977
 800292c:	080028c9 	.word	0x080028c9
 8002930:	080028c9 	.word	0x080028c9
 8002934:	08002a0d 	.word	0x08002a0d
 8002938:	6833      	ldr	r3, [r6, #0]
 800293a:	1d1a      	adds	r2, r3, #4
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	6032      	str	r2, [r6, #0]
 8002940:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8002944:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8002948:	2301      	movs	r3, #1
 800294a:	e09c      	b.n	8002a86 <_printf_i+0x1e6>
 800294c:	6833      	ldr	r3, [r6, #0]
 800294e:	6820      	ldr	r0, [r4, #0]
 8002950:	1d19      	adds	r1, r3, #4
 8002952:	6031      	str	r1, [r6, #0]
 8002954:	0606      	lsls	r6, r0, #24
 8002956:	d501      	bpl.n	800295c <_printf_i+0xbc>
 8002958:	681d      	ldr	r5, [r3, #0]
 800295a:	e003      	b.n	8002964 <_printf_i+0xc4>
 800295c:	0645      	lsls	r5, r0, #25
 800295e:	d5fb      	bpl.n	8002958 <_printf_i+0xb8>
 8002960:	f9b3 5000 	ldrsh.w	r5, [r3]
 8002964:	2d00      	cmp	r5, #0
 8002966:	da03      	bge.n	8002970 <_printf_i+0xd0>
 8002968:	232d      	movs	r3, #45	@ 0x2d
 800296a:	426d      	negs	r5, r5
 800296c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002970:	230a      	movs	r3, #10
 8002972:	4858      	ldr	r0, [pc, #352]	@ (8002ad4 <_printf_i+0x234>)
 8002974:	e011      	b.n	800299a <_printf_i+0xfa>
 8002976:	6821      	ldr	r1, [r4, #0]
 8002978:	6833      	ldr	r3, [r6, #0]
 800297a:	0608      	lsls	r0, r1, #24
 800297c:	f853 5b04 	ldr.w	r5, [r3], #4
 8002980:	d402      	bmi.n	8002988 <_printf_i+0xe8>
 8002982:	0649      	lsls	r1, r1, #25
 8002984:	bf48      	it	mi
 8002986:	b2ad      	uxthmi	r5, r5
 8002988:	2f6f      	cmp	r7, #111	@ 0x6f
 800298a:	6033      	str	r3, [r6, #0]
 800298c:	bf14      	ite	ne
 800298e:	230a      	movne	r3, #10
 8002990:	2308      	moveq	r3, #8
 8002992:	4850      	ldr	r0, [pc, #320]	@ (8002ad4 <_printf_i+0x234>)
 8002994:	2100      	movs	r1, #0
 8002996:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800299a:	6866      	ldr	r6, [r4, #4]
 800299c:	2e00      	cmp	r6, #0
 800299e:	60a6      	str	r6, [r4, #8]
 80029a0:	db05      	blt.n	80029ae <_printf_i+0x10e>
 80029a2:	6821      	ldr	r1, [r4, #0]
 80029a4:	432e      	orrs	r6, r5
 80029a6:	f021 0104 	bic.w	r1, r1, #4
 80029aa:	6021      	str	r1, [r4, #0]
 80029ac:	d04b      	beq.n	8002a46 <_printf_i+0x1a6>
 80029ae:	4616      	mov	r6, r2
 80029b0:	fbb5 f1f3 	udiv	r1, r5, r3
 80029b4:	fb03 5711 	mls	r7, r3, r1, r5
 80029b8:	5dc7      	ldrb	r7, [r0, r7]
 80029ba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80029be:	462f      	mov	r7, r5
 80029c0:	42bb      	cmp	r3, r7
 80029c2:	460d      	mov	r5, r1
 80029c4:	d9f4      	bls.n	80029b0 <_printf_i+0x110>
 80029c6:	2b08      	cmp	r3, #8
 80029c8:	d10b      	bne.n	80029e2 <_printf_i+0x142>
 80029ca:	6823      	ldr	r3, [r4, #0]
 80029cc:	07df      	lsls	r7, r3, #31
 80029ce:	d508      	bpl.n	80029e2 <_printf_i+0x142>
 80029d0:	6923      	ldr	r3, [r4, #16]
 80029d2:	6861      	ldr	r1, [r4, #4]
 80029d4:	4299      	cmp	r1, r3
 80029d6:	bfde      	ittt	le
 80029d8:	2330      	movle	r3, #48	@ 0x30
 80029da:	f806 3c01 	strble.w	r3, [r6, #-1]
 80029de:	f106 36ff 	addle.w	r6, r6, #4294967295
 80029e2:	1b92      	subs	r2, r2, r6
 80029e4:	6122      	str	r2, [r4, #16]
 80029e6:	464b      	mov	r3, r9
 80029e8:	4621      	mov	r1, r4
 80029ea:	4640      	mov	r0, r8
 80029ec:	f8cd a000 	str.w	sl, [sp]
 80029f0:	aa03      	add	r2, sp, #12
 80029f2:	f7ff fee3 	bl	80027bc <_printf_common>
 80029f6:	3001      	adds	r0, #1
 80029f8:	d14a      	bne.n	8002a90 <_printf_i+0x1f0>
 80029fa:	f04f 30ff 	mov.w	r0, #4294967295
 80029fe:	b004      	add	sp, #16
 8002a00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002a04:	6823      	ldr	r3, [r4, #0]
 8002a06:	f043 0320 	orr.w	r3, r3, #32
 8002a0a:	6023      	str	r3, [r4, #0]
 8002a0c:	2778      	movs	r7, #120	@ 0x78
 8002a0e:	4832      	ldr	r0, [pc, #200]	@ (8002ad8 <_printf_i+0x238>)
 8002a10:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8002a14:	6823      	ldr	r3, [r4, #0]
 8002a16:	6831      	ldr	r1, [r6, #0]
 8002a18:	061f      	lsls	r7, r3, #24
 8002a1a:	f851 5b04 	ldr.w	r5, [r1], #4
 8002a1e:	d402      	bmi.n	8002a26 <_printf_i+0x186>
 8002a20:	065f      	lsls	r7, r3, #25
 8002a22:	bf48      	it	mi
 8002a24:	b2ad      	uxthmi	r5, r5
 8002a26:	6031      	str	r1, [r6, #0]
 8002a28:	07d9      	lsls	r1, r3, #31
 8002a2a:	bf44      	itt	mi
 8002a2c:	f043 0320 	orrmi.w	r3, r3, #32
 8002a30:	6023      	strmi	r3, [r4, #0]
 8002a32:	b11d      	cbz	r5, 8002a3c <_printf_i+0x19c>
 8002a34:	2310      	movs	r3, #16
 8002a36:	e7ad      	b.n	8002994 <_printf_i+0xf4>
 8002a38:	4826      	ldr	r0, [pc, #152]	@ (8002ad4 <_printf_i+0x234>)
 8002a3a:	e7e9      	b.n	8002a10 <_printf_i+0x170>
 8002a3c:	6823      	ldr	r3, [r4, #0]
 8002a3e:	f023 0320 	bic.w	r3, r3, #32
 8002a42:	6023      	str	r3, [r4, #0]
 8002a44:	e7f6      	b.n	8002a34 <_printf_i+0x194>
 8002a46:	4616      	mov	r6, r2
 8002a48:	e7bd      	b.n	80029c6 <_printf_i+0x126>
 8002a4a:	6833      	ldr	r3, [r6, #0]
 8002a4c:	6825      	ldr	r5, [r4, #0]
 8002a4e:	1d18      	adds	r0, r3, #4
 8002a50:	6961      	ldr	r1, [r4, #20]
 8002a52:	6030      	str	r0, [r6, #0]
 8002a54:	062e      	lsls	r6, r5, #24
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	d501      	bpl.n	8002a5e <_printf_i+0x1be>
 8002a5a:	6019      	str	r1, [r3, #0]
 8002a5c:	e002      	b.n	8002a64 <_printf_i+0x1c4>
 8002a5e:	0668      	lsls	r0, r5, #25
 8002a60:	d5fb      	bpl.n	8002a5a <_printf_i+0x1ba>
 8002a62:	8019      	strh	r1, [r3, #0]
 8002a64:	2300      	movs	r3, #0
 8002a66:	4616      	mov	r6, r2
 8002a68:	6123      	str	r3, [r4, #16]
 8002a6a:	e7bc      	b.n	80029e6 <_printf_i+0x146>
 8002a6c:	6833      	ldr	r3, [r6, #0]
 8002a6e:	2100      	movs	r1, #0
 8002a70:	1d1a      	adds	r2, r3, #4
 8002a72:	6032      	str	r2, [r6, #0]
 8002a74:	681e      	ldr	r6, [r3, #0]
 8002a76:	6862      	ldr	r2, [r4, #4]
 8002a78:	4630      	mov	r0, r6
 8002a7a:	f000 f859 	bl	8002b30 <memchr>
 8002a7e:	b108      	cbz	r0, 8002a84 <_printf_i+0x1e4>
 8002a80:	1b80      	subs	r0, r0, r6
 8002a82:	6060      	str	r0, [r4, #4]
 8002a84:	6863      	ldr	r3, [r4, #4]
 8002a86:	6123      	str	r3, [r4, #16]
 8002a88:	2300      	movs	r3, #0
 8002a8a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8002a8e:	e7aa      	b.n	80029e6 <_printf_i+0x146>
 8002a90:	4632      	mov	r2, r6
 8002a92:	4649      	mov	r1, r9
 8002a94:	4640      	mov	r0, r8
 8002a96:	6923      	ldr	r3, [r4, #16]
 8002a98:	47d0      	blx	sl
 8002a9a:	3001      	adds	r0, #1
 8002a9c:	d0ad      	beq.n	80029fa <_printf_i+0x15a>
 8002a9e:	6823      	ldr	r3, [r4, #0]
 8002aa0:	079b      	lsls	r3, r3, #30
 8002aa2:	d413      	bmi.n	8002acc <_printf_i+0x22c>
 8002aa4:	68e0      	ldr	r0, [r4, #12]
 8002aa6:	9b03      	ldr	r3, [sp, #12]
 8002aa8:	4298      	cmp	r0, r3
 8002aaa:	bfb8      	it	lt
 8002aac:	4618      	movlt	r0, r3
 8002aae:	e7a6      	b.n	80029fe <_printf_i+0x15e>
 8002ab0:	2301      	movs	r3, #1
 8002ab2:	4632      	mov	r2, r6
 8002ab4:	4649      	mov	r1, r9
 8002ab6:	4640      	mov	r0, r8
 8002ab8:	47d0      	blx	sl
 8002aba:	3001      	adds	r0, #1
 8002abc:	d09d      	beq.n	80029fa <_printf_i+0x15a>
 8002abe:	3501      	adds	r5, #1
 8002ac0:	68e3      	ldr	r3, [r4, #12]
 8002ac2:	9903      	ldr	r1, [sp, #12]
 8002ac4:	1a5b      	subs	r3, r3, r1
 8002ac6:	42ab      	cmp	r3, r5
 8002ac8:	dcf2      	bgt.n	8002ab0 <_printf_i+0x210>
 8002aca:	e7eb      	b.n	8002aa4 <_printf_i+0x204>
 8002acc:	2500      	movs	r5, #0
 8002ace:	f104 0619 	add.w	r6, r4, #25
 8002ad2:	e7f5      	b.n	8002ac0 <_printf_i+0x220>
 8002ad4:	08002e63 	.word	0x08002e63
 8002ad8:	08002e74 	.word	0x08002e74

08002adc <memmove>:
 8002adc:	4288      	cmp	r0, r1
 8002ade:	b510      	push	{r4, lr}
 8002ae0:	eb01 0402 	add.w	r4, r1, r2
 8002ae4:	d902      	bls.n	8002aec <memmove+0x10>
 8002ae6:	4284      	cmp	r4, r0
 8002ae8:	4623      	mov	r3, r4
 8002aea:	d807      	bhi.n	8002afc <memmove+0x20>
 8002aec:	1e43      	subs	r3, r0, #1
 8002aee:	42a1      	cmp	r1, r4
 8002af0:	d008      	beq.n	8002b04 <memmove+0x28>
 8002af2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8002af6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8002afa:	e7f8      	b.n	8002aee <memmove+0x12>
 8002afc:	4601      	mov	r1, r0
 8002afe:	4402      	add	r2, r0
 8002b00:	428a      	cmp	r2, r1
 8002b02:	d100      	bne.n	8002b06 <memmove+0x2a>
 8002b04:	bd10      	pop	{r4, pc}
 8002b06:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002b0a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8002b0e:	e7f7      	b.n	8002b00 <memmove+0x24>

08002b10 <_sbrk_r>:
 8002b10:	b538      	push	{r3, r4, r5, lr}
 8002b12:	2300      	movs	r3, #0
 8002b14:	4d05      	ldr	r5, [pc, #20]	@ (8002b2c <_sbrk_r+0x1c>)
 8002b16:	4604      	mov	r4, r0
 8002b18:	4608      	mov	r0, r1
 8002b1a:	602b      	str	r3, [r5, #0]
 8002b1c:	f7fe fb08 	bl	8001130 <_sbrk>
 8002b20:	1c43      	adds	r3, r0, #1
 8002b22:	d102      	bne.n	8002b2a <_sbrk_r+0x1a>
 8002b24:	682b      	ldr	r3, [r5, #0]
 8002b26:	b103      	cbz	r3, 8002b2a <_sbrk_r+0x1a>
 8002b28:	6023      	str	r3, [r4, #0]
 8002b2a:	bd38      	pop	{r3, r4, r5, pc}
 8002b2c:	20000200 	.word	0x20000200

08002b30 <memchr>:
 8002b30:	4603      	mov	r3, r0
 8002b32:	b510      	push	{r4, lr}
 8002b34:	b2c9      	uxtb	r1, r1
 8002b36:	4402      	add	r2, r0
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	d101      	bne.n	8002b42 <memchr+0x12>
 8002b3e:	2000      	movs	r0, #0
 8002b40:	e003      	b.n	8002b4a <memchr+0x1a>
 8002b42:	7804      	ldrb	r4, [r0, #0]
 8002b44:	3301      	adds	r3, #1
 8002b46:	428c      	cmp	r4, r1
 8002b48:	d1f6      	bne.n	8002b38 <memchr+0x8>
 8002b4a:	bd10      	pop	{r4, pc}

08002b4c <memcpy>:
 8002b4c:	440a      	add	r2, r1
 8002b4e:	4291      	cmp	r1, r2
 8002b50:	f100 33ff 	add.w	r3, r0, #4294967295
 8002b54:	d100      	bne.n	8002b58 <memcpy+0xc>
 8002b56:	4770      	bx	lr
 8002b58:	b510      	push	{r4, lr}
 8002b5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002b5e:	4291      	cmp	r1, r2
 8002b60:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002b64:	d1f9      	bne.n	8002b5a <memcpy+0xe>
 8002b66:	bd10      	pop	{r4, pc}

08002b68 <_realloc_r>:
 8002b68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b6c:	4607      	mov	r7, r0
 8002b6e:	4614      	mov	r4, r2
 8002b70:	460d      	mov	r5, r1
 8002b72:	b921      	cbnz	r1, 8002b7e <_realloc_r+0x16>
 8002b74:	4611      	mov	r1, r2
 8002b76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002b7a:	f7ff bc3b 	b.w	80023f4 <_malloc_r>
 8002b7e:	b92a      	cbnz	r2, 8002b8c <_realloc_r+0x24>
 8002b80:	f7ff fbce 	bl	8002320 <_free_r>
 8002b84:	4625      	mov	r5, r4
 8002b86:	4628      	mov	r0, r5
 8002b88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b8c:	f000 f81a 	bl	8002bc4 <_malloc_usable_size_r>
 8002b90:	4284      	cmp	r4, r0
 8002b92:	4606      	mov	r6, r0
 8002b94:	d802      	bhi.n	8002b9c <_realloc_r+0x34>
 8002b96:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8002b9a:	d8f4      	bhi.n	8002b86 <_realloc_r+0x1e>
 8002b9c:	4621      	mov	r1, r4
 8002b9e:	4638      	mov	r0, r7
 8002ba0:	f7ff fc28 	bl	80023f4 <_malloc_r>
 8002ba4:	4680      	mov	r8, r0
 8002ba6:	b908      	cbnz	r0, 8002bac <_realloc_r+0x44>
 8002ba8:	4645      	mov	r5, r8
 8002baa:	e7ec      	b.n	8002b86 <_realloc_r+0x1e>
 8002bac:	42b4      	cmp	r4, r6
 8002bae:	4622      	mov	r2, r4
 8002bb0:	4629      	mov	r1, r5
 8002bb2:	bf28      	it	cs
 8002bb4:	4632      	movcs	r2, r6
 8002bb6:	f7ff ffc9 	bl	8002b4c <memcpy>
 8002bba:	4629      	mov	r1, r5
 8002bbc:	4638      	mov	r0, r7
 8002bbe:	f7ff fbaf 	bl	8002320 <_free_r>
 8002bc2:	e7f1      	b.n	8002ba8 <_realloc_r+0x40>

08002bc4 <_malloc_usable_size_r>:
 8002bc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002bc8:	1f18      	subs	r0, r3, #4
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	bfbc      	itt	lt
 8002bce:	580b      	ldrlt	r3, [r1, r0]
 8002bd0:	18c0      	addlt	r0, r0, r3
 8002bd2:	4770      	bx	lr

08002bd4 <_init>:
 8002bd4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bd6:	bf00      	nop
 8002bd8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bda:	bc08      	pop	{r3}
 8002bdc:	469e      	mov	lr, r3
 8002bde:	4770      	bx	lr

08002be0 <_fini>:
 8002be0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002be2:	bf00      	nop
 8002be4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002be6:	bc08      	pop	{r3}
 8002be8:	469e      	mov	lr, r3
 8002bea:	4770      	bx	lr
